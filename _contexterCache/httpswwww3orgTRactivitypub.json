{"initialLink":"https://www.w3.org/TR/activitypub/","sanitizedLink":"https://www.w3.org/TR/activitypub/","finalLink":"https://www.w3.org/TR/activitypub/","htmlEmbed":"<script>window.contexterSetup=window.contexterSetup||function(){window.contexterSetupComplete=!0;class ContexterLink extends HTMLAnchorElement{constructor(){super()}connectedCallback(){this.setAttribute(\"target\",\"_blank\")}}customElements.define(\"contexter-link\",ContexterLink,{extends:\"a\"}),customElements.define(\"contexter-inner\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"contexter-box__inner\"}}),customElements.define(\"contexter-thumbnail\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"contexter-box__thumbnail\"}}),customElements.define(\"contexter-byline\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"contexter-box__byline\"}}),customElements.define(\"contexter-keywordset\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"contexter-box__keywordset\"}}),customElements.define(\"contexter-linkset\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"contexter-box__linkset\"}}),customElements.define(\"contexter-meta\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"contexter-box__meta\"}}),customElements.define(\"contexter-summary\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"p-summary entry-summary\"}}),customElements.define(\"contexter-box-head\",class extends HTMLElement{constructor(){super()}connectedCallback(){this.className=\"contexter-box__head\"}}),customElements.define(\"contexter-box-inner\",class extends HTMLElement{constructor(){super()}connectedCallback(){}});class ContexterBox extends HTMLElement{constructor(){super(),this.first=!0,this.shadow=this.attachShadow({mode:\"open\"})}connectedCallback(){if(this.first){this.first=!1;var style=document.createElement(\"style\"),lightDomStyle=(style.innerHTML=`:host {--background: #f5f6f7;--border: darkblue;--blue: #0000ee;--font-color: black;--inner-border: black;font-family: Franklin,Arial,Helvetica,sans-serif;font-size: 14px;background: var(--background);width: 600px;color: var(--font-color);min-height: 90px;display: block;padding: 8px;border: 1px solid var(--border);cursor: pointer;box-sizing: border-box;margin: 6px;contain: content;margin: 6px auto;}// can only select top-level nodes with slotted::slotted(*) {max-width: 100%;display:block;}::slotted([slot=thumbnail]) {max-width: 100%;display:block;}::slotted([slot=header]) {width: 100%;font-size: 1.25rem;font-weight: bold;display:block;margin-bottom: 6px;}::slotted([slot=author]) {max-width: 50%;font-size: 12px;display:inline-block;float: left;}::slotted([slot=time]) {max-width: 50%;font-size: 12px;display:inline-block;float: right;}::slotted([slot=summary]) {width: 100%;margin-top: 6px;padding: 10px 2px;border-top: 1px solid var(--inner-border);font-size: 15px;display:inline-block;margin-bottom: 6px;}contexter-meta {height: auto;margin-bottom: 4px;width: 100%;display: grid;position: relative;min-height: 16px;grid-template-columns: repeat(2, 1fr);}::slotted([slot=keywords]) {width: 80%;padding: 2px 4px;border-top: 1px solid var(--inner-border);font-size: 11px;display: block;float: right;font-style: italic;text-align: right;grid-column: 2/2;grid-row: 1;align-self: end;justify-self: end;}::slotted([slot=keywords]):empty {border-top: 0px solid var(--inner-border);}::slotted([slot=archive-link]) {font-size: 1em;display: inline;}::slotted([slot=archive-link])::after {content: \"|\";display: inline;color: var(--font-color);text-decoration: none;margin: 0 .5em;}::slotted([slot=read-link]) {font-size: 1em;display: inline;}contexter-linkset {width: 80%;padding: 2px 4px;font-size: 13px;float: left;font-weight: bold;grid-row: 1;grid-column: 1/2;align-self: end;justify-self: start;}/* Extra small devices (phones, 600px and down) */@media only screen and (max-width: 600px) {:host {width: 310px;}}/* Small devices (portrait tablets and large phones, 600px and up) */@media only screen and (min-width: 600px) {...}/* Medium devices (landscape tablets, 768px and up) */@media only screen and (min-width: 768px) {...}/* Large devices (laptops/desktops, 992px and up) */@media only screen and (min-width: 992px) {...}/* Extra large devices (large laptops and desktops, 1200px and up) */@media only screen and (min-width: 1200px) {...}@media (prefers-color-scheme: dark){:host {--background: #354150;--border: #1f2b37;--blue: #55b0ff;--font-color: #ffffff;--inner-border: #787a7c;background: var(--background);border: 1px solid var(--border)}}`,document.createElement(\"style\"));lightDomStyle.innerHTML=`contexter-box {contain: content;}contexter-box .read-link {font-weight: bold;}contexter-box a {color: #0000ee;}contexter-box img {width: 100%;border: 0;padding: 0;margin: 0;}/* Extra small devices (phones, 600px and down) */@media only screen and (max-width: 600px) {...}/* Small devices (portrait tablets and large phones, 600px and up) */@media only screen and (min-width: 600px) {...}/* Medium devices (landscape tablets, 768px and up) */@media only screen and (min-width: 768px) {...}/* Large devices (laptops/desktops, 992px and up) */@media only screen and (min-width: 992px) {...}/* Extra large devices (large laptops and desktops, 1200px and up) */@media only screen and (min-width: 1200px) {...}@media (prefers-color-scheme: dark){contexter-box a {color: #55b0ff;}}`,this.appendChild(lightDomStyle),this.shadow.appendChild(style);const innerContainer=document.createElement(\"contexter-box-inner\"),innerSlotThumbnail=(this.shadow.appendChild(innerContainer),document.createElement(\"slot\")),innerSlotHeader=(innerSlotThumbnail.name=\"thumbnail\",innerContainer.appendChild(innerSlotThumbnail),document.createElement(\"slot\")),innerSlotAuthor=(innerSlotHeader.name=\"header\",innerContainer.appendChild(innerSlotHeader),document.createElement(\"slot\")),innerSlotTime=(innerSlotAuthor.name=\"author\",innerContainer.appendChild(innerSlotAuthor),document.createElement(\"slot\")),innerSlotSummary=(innerSlotTime.name=\"time\",innerContainer.appendChild(innerSlotTime),document.createElement(\"slot\")),metaContainer=(innerSlotSummary.name=\"summary\",innerContainer.appendChild(innerSlotSummary),document.createElement(\"contexter-meta\")),innerSlotInfo=(innerContainer.appendChild(metaContainer),document.createElement(\"slot\")),linkContainer=(innerSlotInfo.name=\"keywords\",metaContainer.appendChild(innerSlotInfo),document.createElement(\"contexter-linkset\")),innerSlotArchiveLink=(metaContainer.appendChild(linkContainer),document.createElement(\"slot\")),innerSlotReadLink=(innerSlotArchiveLink.name=\"archive-link\",linkContainer.appendChild(innerSlotArchiveLink),document.createElement(\"slot\"));innerSlotReadLink.name=\"read-link\",linkContainer.appendChild(innerSlotReadLink),this.className=\"contexter-box\",this.onclick=e=>{if(!e.target.className.includes(\"read-link\")&&!e.target.className.includes(\"title-link\")){const mainLinks=this.querySelectorAll(\"a.main-link\");mainLinks[0].click()}}}}}customElements.define(\"contexter-box\",ContexterBox)},window.contexterSetupComplete||window.contexterSetup();</script><contexter-box class=\"link-card h-entry hentry\" itemscope=\"\" itemtype=\"https://schema.org/CreativeWork\"><contexter-thumbnail class=\"thumbnail\" slot=\"thumbnail\"></contexter-thumbnail><contexter-box-head slot=\"header\" class=\"p-name entry-title\" itemprop=\"headline\"><contexter-box-head slot=\"header\" class=\"p-name entry-title\" itemprop=\"headline\"><a is=\"contexter-link\" href=\"https://www.w3.org/TR/activitypub/\" itemprop=\"url\">ActivityPub</a></contexter-box-head></contexter-box-head><time class=\"dt-published published\" slot=\"time\" itemprop=\"datePublished\" datetime=\"2022-11-07T04:53:24.952Z\">10/6/2022</time><contexter-summary class=\"p-summary entry-summary\" itemprop=\"abstract\" slot=\"summary\"><p>The ActivityPub protocol is a decentralized social networking protocolbased upon the [ActivityStreams] 2.0 data format.It provides a client to server API for creating, updating and deletingcontent, as well as a federated server to server API for deliveringnotifications and content.</p></contexter-summary><contexter-keywordset itemprop=\"keywords\" slot=\"keywords\"></contexter-keywordset><a is=\"contexter-link\" href=\"https://www.w3.org/TR/activitypub/\" class=\"read-link main-link\" itemprop=\"sameAs\" slot=\"read-link\">Read</a></contexter-box>","linkId":"95f89934eb9cd7277fc51e6960f922572a408913","data":{"originalLink":"https://www.w3.org/TR/activitypub/","sanitizedLink":"https://www.w3.org/TR/activitypub/","canonical":"https://www.w3.org/TR/activitypub/","htmlText":"<!DOCTYPE html><html dir=\"ltr\" lang=\"en\"><head><meta charset=\"utf-8\"><meta name=\"generator\" content=\"ReSpec 19.0.1\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"><style>/* --- EXAMPLES --- */\ndiv.example-title {\n    min-width: 7.5em;\n    color: #b9ab2d;\n}\ndiv.example-title span {\n    text-transform: uppercase;\n}\naside.example, div.example, div.illegal-example {\n    padding: 0.5em;\n    margin: 1em 0;\n    position: relative;\n    clear: both;\n}\ndiv.illegal-example { color: red }\ndiv.illegal-example p { color: black }\naside.example, div.example {\n    padding: .5em;\n    border-left-width: .5em;\n    border-left-style: solid;\n    border-color: #e0cb52;\n    background: #fcfaee;\n}\n\naside.example div.example {\n    border-left-width: .1em;\n    border-color: #999;\n    background: #fff;\n}\naside.example div.example div.example-title {\n    color: #999;\n}\n</style><style>/* --- ISSUES/NOTES --- */\ndiv.issue-title, div.note-title , div.ednote-title, div.warning-title {\n    padding-right:  1em;\n    min-width: 7.5em;\n    color: #b9ab2d;\n}\ndiv.issue-title { color: #e05252; }\ndiv.note-title, div.ednote-title { color: #2b2; }\ndiv.warning-title { color: #f22; }\ndiv.issue-title span, div.note-title span, div.ednote-title span, div.warning-title span {\n    text-transform: uppercase;\n}\ndiv.note, div.issue, div.ednote, div.warning {\n    margin-top: 1em;\n    margin-bottom: 1em;\n}\n.note > p:first-child, .ednote > p:first-child, .issue > p:first-child, .warning > p:first-child { margin-top: 0 }\n.issue, .note, .ednote, .warning {\n    padding: .5em;\n    border-left-width: .5em;\n    border-left-style: solid;\n}\ndiv.issue, div.note , div.ednote,  div.warning {\n    padding: 1em 1.2em 0.5em;\n    margin: 1em 0;\n    position: relative;\n    clear: both;\n}\nspan.note, span.ednote, span.issue, span.warning { padding: .1em .5em .15em; }\n\n.issue {\n    border-color: #e05252;\n    background: #fbe9e9;\n}\n.note, .ednote {\n    border-color: #52e052;\n    background: #e9fbe9;\n}\n\n.warning {\n    border-color: #f11;\n    border-width: .2em;\n    border-style: solid;\n    background: #fbe9e9;\n}\n\n.warning-title:before{\n    content: \"⚠\"; /*U+26A0 WARNING SIGN*/\n    font-size: 3em;\n    float: left;\n    height: 100%;\n    padding-right: .3em;\n    vertical-align: top;\n    margin-top: -0.5em;\n}\n\nli.task-list-item {\n    list-style: none;\n}\n\ninput.task-list-item-checkbox {\n    margin: 0 0.35em 0.25em -1.6em;\n    vertical-align: middle;\n}\n</style>\n    <title>ActivityPub</title>\n    \n    \n    \n    <style type=\"text/css\">\n      img {\n          max-width: 100%;\n      }\n    </style>\n  <style id=\"respec-mainstyle\">/*****************************************************************\n * ReSpec 3 CSS\n * Robin Berjon - http://berjon.com/\n *****************************************************************/\n\n/* Override code highlighter background */\n.hljs {\n  background: transparent !important;\n}\n\n/* --- INLINES --- */\nh1 abbr,\nh2 abbr,\nh3 abbr,\nh4 abbr,\nh5 abbr,\nh6 abbr,\na abbr {\n  border: none;\n}\n\ndfn {\n  font-weight: bold;\n}\n\na.internalDFN {\n  color: inherit;\n  border-bottom: 1px solid #99c;\n  text-decoration: none;\n}\n\na.externalDFN {\n  color: inherit;\n  border-bottom: 1px dotted #ccc;\n  text-decoration: none;\n}\n\na.bibref {\n  text-decoration: none;\n}\n\ncite .bibref {\n  font-style: normal;\n}\n\ncode {\n  color: #c83500;\n}\n\nth code {\n  color: inherit;\n}\n\n/* --- TOC --- */\n\n.toc a,\n.tof a {\n  text-decoration: none;\n}\n\na .secno,\na .figno {\n  color: #000;\n}\n\nul.tof,\nol.tof {\n  list-style: none outside none;\n}\n\n.caption {\n  margin-top: 0.5em;\n  font-style: italic;\n}\n\n/* --- TABLE --- */\n\ntable.simple {\n  border-spacing: 0;\n  border-collapse: collapse;\n  border-bottom: 3px solid #005a9c;\n}\n\n.simple th {\n  background: #005a9c;\n  color: #fff;\n  padding: 3px 5px;\n  text-align: left;\n}\n\n.simple th[scope=\"row\"] {\n  background: inherit;\n  color: inherit;\n  border-top: 1px solid #ddd;\n}\n\n.simple td {\n  padding: 3px 10px;\n  border-top: 1px solid #ddd;\n}\n\n.simple tr:nth-child(even) {\n  background: #f0f6ff;\n}\n\n/* --- DL --- */\n\n.section dd > p:first-child {\n  margin-top: 0;\n}\n\n.section dd > p:last-child {\n  margin-bottom: 0;\n}\n\n.section dd {\n  margin-bottom: 1em;\n}\n\n.section dl.attrs dd,\n.section dl.eldef dd {\n  margin-bottom: 0;\n}\n\n#issue-summary > ul,\n.respec-dfn-list {\n  column-count: 2;\n}\n\n#issue-summary li,\n.respec-dfn-list li {\n  list-style: none;\n}\n\ndetails.respec-tests-details {\n  margin-left: 1em;\n  display: inline-block;\n  vertical-align: top;\n}\n\ndetails.respec-tests-details > * {\n  padding-right: 2em;\n}\n\ndetails.respec-tests-details[open] {\n  z-index: 999999;\n  position: absolute;\n  border: thin solid #cad3e2;\n  border-radius: .3em;\n  background-color: white;\n  padding-bottom: .5em;\n}\n\ndetails.respec-tests-details[open] > summary {\n  border-bottom: thin solid #cad3e2;\n  padding-left: 1em;\n  margin-bottom: 1em;\n  line-height: 2em;\n}\n\ndetails.respec-tests-details > ul {\n  width: 100%;\n  margin-top: -0.3em;\n}\n\ndetails.respec-tests-details > li {\n  padding-left: 1em;\n}\n\n@media print {\n  .removeOnSave {\n    display: none;\n  }\n}\n</style><style>/*\n\ngithub.com style (c) Vasily Polovnyov <vast@whiteants.net>\n\n*/\n\n.hljs {\n  display: block;\n  overflow-x: auto;\n  padding: 0.5em;\n  color: #333;\n  background: #f8f8f8;\n}\n\n.hljs-comment,\n.hljs-quote {\n  color: #998;\n  font-style: italic;\n}\n\n.hljs-keyword,\n.hljs-selector-tag,\n.hljs-subst {\n  color: #333;\n  font-weight: bold;\n}\n\n.hljs-number,\n.hljs-literal,\n.hljs-variable,\n.hljs-template-variable,\n.hljs-tag .hljs-attr {\n  color: #008080;\n}\n\n.hljs-string,\n.hljs-doctag {\n  color: #d14;\n}\n\n.hljs-title,\n.hljs-section,\n.hljs-selector-id {\n  color: #900;\n  font-weight: bold;\n}\n\n.hljs-subst {\n  font-weight: normal;\n}\n\n.hljs-type,\n.hljs-class .hljs-title {\n  color: #458;\n  font-weight: bold;\n}\n\n.hljs-tag,\n.hljs-name,\n.hljs-attribute {\n  color: #000080;\n  font-weight: normal;\n}\n\n.hljs-regexp,\n.hljs-link {\n  color: #009926;\n}\n\n.hljs-symbol,\n.hljs-bullet {\n  color: #990073;\n}\n\n.hljs-built_in,\n.hljs-builtin-name {\n  color: #0086b3;\n}\n\n.hljs-meta {\n  color: #999;\n  font-weight: bold;\n}\n\n.hljs-deletion {\n  background: #fdd;\n}\n\n.hljs-addition {\n  background: #dfd;\n}\n\n.hljs-emphasis {\n  font-style: italic;\n}\n\n.hljs-strong {\n  font-weight: bold;\n}\n</style><link rel=\"stylesheet\" href=\"https://www.w3.org/StyleSheets/TR/2016/W3C-REC\"><link rel=\"canonical\" href=\"https://www.w3.org/TR/activitypub/\"><script id=\"initialUserConfig\" type=\"application/json\">{\n  \"specStatus\": \"REC\",\n  \"publishDate\": \"2018-01-23\",\n  \"previousPublishDate\": \"2017-12-05\",\n  \"previousMaturity\": \"PR\",\n  \"license\": \"w3c-software-doc\",\n  \"shortName\": \"activitypub\",\n  \"wg\": \"Social Web Working Group\",\n  \"wgURI\": \"https://www.w3.org/Social/WG\",\n  \"wgPublicList\": \"public-socialweb\",\n  \"wgPatentURI\": \"https://www.w3.org/2004/01/pp-impl/72531/status\",\n  \"edDraftURI\": \"https://w3c.github.io/activitypub/\",\n  \"testSuiteURI\": \"https://test.activitypub.rocks/\",\n  \"errata\": \"https://www.w3.org/wiki/ActivityPub_errata\",\n  \"implementationReportURI\": \"https://activitypub.rocks/implementation-report\",\n  \"otherLinks\": [\n    {\n      \"key\": \"Repository\",\n      \"data\": [\n        {\n          \"value\": \"Git repository\",\n          \"href\": \"https://github.com/w3c/activitypub\"\n        },\n        {\n          \"value\": \"Issues\",\n          \"href\": \"https://github.com/w3c/activitypub/issues\"\n        },\n        {\n          \"value\": \"Commits\",\n          \"href\": \"https://github.com/w3c/activitypub/commits/gh-pages\"\n        }\n      ]\n    }\n  ],\n  \"editors\": [\n    {\n      \"name\": \"Christine Lemmer-Webber\",\n      \"url\": \"https://dustycloud.org/\",\n      \"w3cid\": \"57007\"\n    },\n    {\n      \"name\": \"Jessica Tallon\",\n      \"url\": \"https://tsyesika.se\",\n      \"w3cid\": \"72695\"\n    }\n  ],\n  \"authors\": [\n    {\n      \"name\": \"Christine Lemmer-Webber\",\n      \"url\": \"https://dustycloud.org/\"\n    },\n    {\n      \"name\": \"Jessica Tallon\",\n      \"url\": \"https://tsyesika.se\"\n    },\n    {\n      \"name\": \"Erin Shepherd\",\n      \"url\": \"http://erinshepherd.net/\"\n    },\n    {\n      \"name\": \"Amy Guy\",\n      \"url\": \"https://rhiaro.co.uk/\"\n    },\n    {\n      \"name\": \"Evan Prodromou\",\n      \"url\": \"https://en.wikipedia.org/wiki/Evan_Prodromou\"\n    }\n  ],\n  \"localBiblio\": {\n    \"ActivityStreams\": {\n      \"title\": \"Activity Streams 2.0\",\n      \"href\": \"https://www.w3.org/TR/activitystreams-core/\",\n      \"authors\": [\n        \"J. Snell\"\n      ],\n      \"status\": \"Editors Draft\",\n      \"publisher\": \"ActivityStreams Working Group\"\n    },\n    \"Activity-Vocabulary\": {\n      \"title\": \"Activity Vocabulary\",\n      \"href\": \"https://www.w3.org/TR/activitystreams-vocabulary/\",\n      \"authors\": [\n        \"J. Snell\"\n      ],\n      \"status\": \"Editors Draft\",\n      \"publisher\": \"ActivityStreams Working Group\"\n    },\n    \"OAuth-Server-Metadata\": {\n      \"title\": \"OAuth 2.0 Authorization Server Metadata\",\n      \"href\": \"https://tools.ietf.org/html/draft-ietf-oauth-discovery-06\",\n      \"authors\": [\n        \"M. Jones\",\n        \"N. Sakimura\",\n        \"J. Bradley\"\n      ],\n      \"status\": \"Internet-Draft\",\n      \"publisher\": \"OAuth Working Group\"\n    }\n  },\n  \"publishISODate\": \"2018-01-23T00:00:00.000Z\",\n  \"generatedSubtitle\": \"Recommendation 23 January 2018\"\n}</script><meta name=\"description\" content=\"The ActivityPub protocol is a decentralized social networking protocol\n        based upon the [ActivityStreams] 2.0 data format.\n        It provides a client to server API for creating, updating and deleting\n        content, as well as a federated server to server API for delivering\n        notifications and content.\"></head>\n  <!-- STYLISTIC NOTE: This document wraps on column 79 and at the end of every\n       sentence. -->\n  <body aria-busy=\"false\" class=\"h-entry\"><div class=\"head\">\n    <p>\n      <a class=\"logo\" href=\"https://www.w3.org/\"><img src=\"https://www.w3.org/StyleSheets/TR/2016/logos/W3C\" alt=\"W3C\" width=\"72\" height=\"48\"></a>\n    </p>\n  <p><!--_hyper: 682859076;--></p>\n  <h1 class=\"title p-name\" id=\"title\">ActivityPub</h1>\n  <h2 id=\"w3c-recommendation-23-january-2018\"><abbr title=\"World Wide Web Consortium\">W3C</abbr> Recommendation <time class=\"dt-published\" datetime=\"2018-01-23\">23 January 2018</time></h2>\n  <dl>\n      <dt>This version:</dt>\n      <dd><a class=\"u-url\" href=\"https://www.w3.org/TR/2018/REC-activitypub-20180123/\">https://www.w3.org/TR/2018/REC-activitypub-20180123/</a></dd>\n      <dt>Latest published version:</dt>\n      <dd><a href=\"https://www.w3.org/TR/activitypub/\">https://www.w3.org/TR/activitypub/</a></dd>\n      <dt>Latest editor's draft:</dt>\n      <dd><a href=\"https://w3c.github.io/activitypub/\">https://w3c.github.io/activitypub/</a></dd>\n      <dt>Test suite:</dt>\n      <dd><a href=\"https://test.activitypub.rocks/\">https://test.activitypub.rocks/</a></dd>\n      <dt>Implementation report:</dt>\n      <dd><a href=\"https://activitypub.rocks/implementation-report\">https://activitypub.rocks/implementation-report</a></dd>\n      <dt>Previous version:</dt>\n      <dd><a href=\"https://www.w3.org/TR/2017/PR-activitypub-20171205/\">https://www.w3.org/TR/2017/PR-activitypub-20171205/</a></dd>\n    <dt>Editors:</dt>\n    <dd class=\"p-author h-card vcard\" data-editor-id=\"57007\"><a class=\"u-url url p-name fn\" href=\"https://dustycloud.org/\">Christine Lemmer-Webber</a></dd>\n<dd class=\"p-author h-card vcard\" data-editor-id=\"72695\"><a class=\"u-url url p-name fn\" href=\"https://tsyesika.se\">Jessica Tallon</a></dd>\n\n      <dt>Authors:</dt>\n      <dd class=\"p-author h-card vcard\"><a class=\"u-url url p-name fn\" href=\"https://dustycloud.org/\">Christine Lemmer-Webber</a></dd>\n<dd class=\"p-author h-card vcard\"><a class=\"u-url url p-name fn\" href=\"https://tsyesika.se\">Jessica Tallon</a></dd>\n<dd class=\"p-author h-card vcard\"><a class=\"u-url url p-name fn\" href=\"http://erinshepherd.net/\">Erin Shepherd</a></dd>\n<dd class=\"p-author h-card vcard\"><a class=\"u-url url p-name fn\" href=\"https://rhiaro.co.uk/\">Amy Guy</a></dd>\n<dd class=\"p-author h-card vcard\"><a class=\"u-url url p-name fn\" href=\"https://en.wikipedia.org/wiki/Evan_Prodromou\">Evan Prodromou</a></dd>\n\n          <dt>Repository:</dt>\n                  <dd>\n                    <a href=\"https://github.com/w3c/activitypub\">\n                      Git repository\n                    </a>\n                  </dd>\n                  <dd>\n                    <a href=\"https://github.com/w3c/activitypub/issues\">\n                      Issues\n                    </a>\n                  </dd>\n                  <dd>\n                    <a href=\"https://github.com/w3c/activitypub/commits/gh-pages\">\n                      Commits\n                    </a>\n                  </dd>\n  </dl>\n    <p>\n      Please check the <a href=\"https://www.w3.org/wiki/ActivityPub_errata\"><strong>errata</strong></a> for any errors or issues\n      reported since publication.\n    </p>\n    <p>\n      See also <a href=\"http://www.w3.org/2003/03/Translations/byTechnology?technology=activitypub\">\n      <strong>translations</strong></a>.\n    </p>\n      <p class=\"copyright\">\n        <a href=\"https://www.w3.org/Consortium/Legal/ipr-notice#Copyright\">Copyright</a> ©\n        2018\n        \n        <a href=\"https://www.w3.org/\"><abbr title=\"World Wide Web Consortium\">W3C</abbr></a><sup>®</sup>\n        (<a href=\"https://www.csail.mit.edu/\"><abbr title=\"Massachusetts Institute of Technology\">MIT</abbr></a>,\n        <a href=\"https://www.ercim.eu/\"><abbr title=\"European Research Consortium for Informatics and Mathematics\">ERCIM</abbr></a>,\n        <a href=\"https://www.keio.ac.jp/\">Keio</a>, <a href=\"http://ev.buaa.edu.cn/\">Beihang</a>).\n        <abbr title=\"World Wide Web Consortium\">W3C</abbr> <a href=\"https://www.w3.org/Consortium/Legal/ipr-notice#Legal_Disclaimer\">liability</a>,\n        <a href=\"https://www.w3.org/Consortium/Legal/ipr-notice#W3C_Trademarks\">trademark</a> and\n            <a rel=\"license\" href=\"https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\">permissive document license</a>\n        rules apply.\n      </p>\n  <hr title=\"Separator for header\">\n</div>\n    <section id=\"abstract\" class=\"introductory\"><h2 id=\"abstract-0\">Abstract</h2>\n      <p>\n        The ActivityPub protocol is a decentralized social networking protocol\n        based upon the [<cite><a class=\"bibref\" href=\"#bib-ActivityStreams\">ActivityStreams</a></cite>] 2.0 data format.\n        It provides a client to server API for creating, updating and deleting\n        content, as well as a federated server to server API for delivering\n        notifications and content.\n      </p>\n    </section>\n\n    <section id=\"sotd\" class=\"introductory\"><h2 id=\"status-of-this-document\">Status of This Document</h2>\n      <p>\n        <em>This section describes the status of this document at the time of its publication. Other documents may supersede this document. A list of current <abbr title=\"World Wide Web Consortium\">W3C</abbr> publications and the latest revision of this technical report can be found in the <a href=\"https://www.w3.org/TR/\"><abbr title=\"World Wide Web Consortium\">W3C</abbr> technical reports index</a> at https://www.w3.org/TR/.</em>\n      </p>\n        \n    \n        <p>\n          This document was published by the <a href=\"https://www.w3.org/Social/WG\">Social Web Working Group</a> as a Recommendation.\n        </p>\n        <p>\n          All interested parties are invited to provide implementation and bug\n          reports and other comments through the Working Group's\n          <a href=\"https://github.com/w3c/activitypub/issues\">Issue tracker</a>.\n          These will be discussed by the\n          <a href=\"http://www.w3.org/wiki/SocialCG\">Social Web Community Group</a>\n          and considered in any future versions of this specification.\n        </p>\n          <p>\n            Please see the Working Group's  <a href=\"https://activitypub.rocks/implementation-report\">implementation\n            report</a>.\n          </p>\n          <p>\n            This document has been reviewed by <abbr title=\"World Wide Web Consortium\">W3C</abbr> Members, by software developers, and by other <abbr title=\"World Wide Web Consortium\">W3C</abbr>\n            groups and interested parties, and is endorsed by the Director as a <abbr title=\"World Wide Web Consortium\">W3C</abbr> Recommendation.\n            It is a stable document and may be used as reference material or cited from another\n            document. <abbr title=\"World Wide Web Consortium\">W3C</abbr>'s role in making the Recommendation is to draw attention to the\n            specification and to promote its widespread deployment. This enhances the functionality\n            and interoperability of the Web.\n          </p>\n        <p>\n            This document was produced by\n            a group\n             operating under the\n            <a href=\"https://www.w3.org/Consortium/Patent-Policy/\"><abbr title=\"World Wide Web Consortium\">W3C</abbr> Patent Policy</a>.\n              <abbr title=\"World Wide Web Consortium\">W3C</abbr> maintains a <a href=\"https://www.w3.org/2004/01/pp-impl/72531/status\" rel=\"disclosure\">public list of any patent\n              disclosures</a>\n            made in connection with the deliverables of\n            the group; that page also includes\n            instructions for disclosing a patent. An individual who has actual knowledge of a patent\n            which the individual believes contains\n            <a href=\"https://www.w3.org/Consortium/Patent-Policy/#def-essential\">Essential\n            Claim(s)</a> must disclose the information in accordance with\n            <a href=\"https://www.w3.org/Consortium/Patent-Policy/#sec-Disclosure\">section\n            6 of the <abbr title=\"World Wide Web Consortium\">W3C</abbr> Patent Policy</a>.\n        </p>\n          <p>This document is governed by the <a id=\"w3c_process_revision\" href=\"https://www.w3.org/2017/Process-20170301/\">1 March 2017 <abbr title=\"World Wide Web Consortium\">W3C</abbr> Process Document</a>.\n          </p>\n        \n\n</section><nav id=\"toc\"><h2 class=\"introductory\" id=\"table-of-contents\">Table of Contents</h2><ol class=\"toc\"><li class=\"tocline\"><a href=\"#Overview\" class=\"tocxref\"><span class=\"secno\">1. </span>Overview</a><ol class=\"toc\"><li class=\"tocline\"><a href=\"#social-web-working-group\" class=\"tocxref\"><span class=\"secno\">1.1 </span>Social Web Working Group</a></li></ol></li><li class=\"tocline\"><a href=\"#conformance\" class=\"tocxref\"><span class=\"secno\">2. </span>Conformance</a><ol class=\"toc\"><li class=\"tocline\"><a href=\"#specification-profiles\" class=\"tocxref\"><span class=\"secno\">2.1 </span>Specification Profiles</a></li></ol></li><li class=\"tocline\"><a href=\"#obj\" class=\"tocxref\"><span class=\"secno\">3. </span>Objects</a><ol class=\"toc\"><li class=\"tocline\"><a href=\"#obj-id\" class=\"tocxref\"><span class=\"secno\">3.1 </span>Object Identifiers</a></li><li class=\"tocline\"><a href=\"#retrieving-objects\" class=\"tocxref\"><span class=\"secno\">3.2 </span>Retrieving objects</a></li><li class=\"tocline\"><a href=\"#source-property\" class=\"tocxref\"><span class=\"secno\">3.3 </span>The source property</a></li></ol></li><li class=\"tocline\"><a href=\"#actors\" class=\"tocxref\"><span class=\"secno\">4. </span>Actors</a><ol class=\"toc\"><li class=\"tocline\"><a href=\"#actor-objects\" class=\"tocxref\"><span class=\"secno\">4.1 </span><i>Actor</i> objects</a></li></ol></li><li class=\"tocline\"><a href=\"#collections\" class=\"tocxref\"><span class=\"secno\">5. </span>Collections</a><ol class=\"toc\"><li class=\"tocline\"><a href=\"#outbox\" class=\"tocxref\"><span class=\"secno\">5.1 </span>Outbox</a></li><li class=\"tocline\"><a href=\"#inbox\" class=\"tocxref\"><span class=\"secno\">5.2 </span>Inbox</a></li><li class=\"tocline\"><a href=\"#followers\" class=\"tocxref\"><span class=\"secno\">5.3 </span>Followers Collection</a></li><li class=\"tocline\"><a href=\"#following\" class=\"tocxref\"><span class=\"secno\">5.4 </span>Following Collection</a></li><li class=\"tocline\"><a href=\"#liked\" class=\"tocxref\"><span class=\"secno\">5.5 </span>Liked Collection</a></li><li class=\"tocline\"><a href=\"#public-addressing\" class=\"tocxref\"><span class=\"secno\">5.6 </span>Public Addressing</a></li><li class=\"tocline\"><a href=\"#likes\" class=\"tocxref\"><span class=\"secno\">5.7 </span>Likes Collection</a></li><li class=\"tocline\"><a href=\"#shares\" class=\"tocxref\"><span class=\"secno\">5.8 </span>Shares Collection</a></li></ol></li><li class=\"tocline\"><a href=\"#client-to-server-interactions\" class=\"tocxref\"><span class=\"secno\">6. </span>Client to Server Interactions</a><ol class=\"toc\"><li class=\"tocline\"><a href=\"#client-addressing\" class=\"tocxref\"><span class=\"secno\">6.1 </span>Client Addressing</a></li><li class=\"tocline\"><a href=\"#create-activity-outbox\" class=\"tocxref\"><span class=\"secno\">6.2 </span>Create Activity</a><ol class=\"toc\"><li class=\"tocline\"><a href=\"#object-without-create\" class=\"tocxref\"><span class=\"secno\">6.2.1 </span>Object creation without a Create Activity</a></li></ol></li><li class=\"tocline\"><a href=\"#update-activity-outbox\" class=\"tocxref\"><span class=\"secno\">6.3 </span>Update Activity</a><ol class=\"toc\"><li class=\"tocline\"><a href=\"#partial-updates\" class=\"tocxref\"><span class=\"secno\">6.3.1 </span>Partial Updates</a></li></ol></li><li class=\"tocline\"><a href=\"#delete-activity-outbox\" class=\"tocxref\"><span class=\"secno\">6.4 </span>Delete Activity</a></li><li class=\"tocline\"><a href=\"#follow-activity-outbox\" class=\"tocxref\"><span class=\"secno\">6.5 </span>Follow Activity</a></li><li class=\"tocline\"><a href=\"#add-activity-outbox\" class=\"tocxref\"><span class=\"secno\">6.6 </span>Add Activity</a></li><li class=\"tocline\"><a href=\"#remove-activity-outbox\" class=\"tocxref\"><span class=\"secno\">6.7 </span>Remove Activity</a></li><li class=\"tocline\"><a href=\"#like-activity-outbox\" class=\"tocxref\"><span class=\"secno\">6.8 </span>Like Activity</a></li><li class=\"tocline\"><a href=\"#block-activity-outbox\" class=\"tocxref\"><span class=\"secno\">6.9 </span>Block Activity</a></li><li class=\"tocline\"><a href=\"#undo-activity-outbox\" class=\"tocxref\"><span class=\"secno\">6.10 </span>Undo Activity</a></li><li class=\"tocline\"><a href=\"#client-to-server-outbox-delivery\" class=\"tocxref\"><span class=\"secno\">6.11 </span>Delivery</a></li><li class=\"tocline\"><a href=\"#uploading-media\" class=\"tocxref\"><span class=\"secno\">6.12 </span>Uploading Media</a></li></ol></li><li class=\"tocline\"><a href=\"#server-to-server-interactions\" class=\"tocxref\"><span class=\"secno\">7. </span>Server to Server Interactions</a><ol class=\"toc\"><li class=\"tocline\"><a href=\"#delivery\" class=\"tocxref\"><span class=\"secno\">7.1 </span>Delivery</a><ol class=\"toc\"><li class=\"tocline\"><a href=\"#outbox-delivery\" class=\"tocxref\"><span class=\"secno\">7.1.1 </span>Outbox Delivery Requirements for Server to Server</a></li><li class=\"tocline\"><a href=\"#inbox-forwarding\" class=\"tocxref\"><span class=\"secno\">7.1.2 </span>Forwarding from Inbox</a></li><li class=\"tocline\"><a href=\"#shared-inbox-delivery\" class=\"tocxref\"><span class=\"secno\">7.1.3 </span>Shared Inbox Delivery</a></li></ol></li><li class=\"tocline\"><a href=\"#create-activity-inbox\" class=\"tocxref\"><span class=\"secno\">7.2 </span>Create Activity</a></li><li class=\"tocline\"><a href=\"#update-activity-inbox\" class=\"tocxref\"><span class=\"secno\">7.3 </span>Update Activity</a></li><li class=\"tocline\"><a href=\"#delete-activity-inbox\" class=\"tocxref\"><span class=\"secno\">7.4 </span>Delete Activity</a></li><li class=\"tocline\"><a href=\"#follow-activity-inbox\" class=\"tocxref\"><span class=\"secno\">7.5 </span>Follow Activity</a></li><li class=\"tocline\"><a href=\"#accept-activity-inbox\" class=\"tocxref\"><span class=\"secno\">7.6 </span>Accept Activity</a></li><li class=\"tocline\"><a href=\"#reject-activity-inbox\" class=\"tocxref\"><span class=\"secno\">7.7 </span>Reject Activity</a></li><li class=\"tocline\"><a href=\"#add-activity-inbox\" class=\"tocxref\"><span class=\"secno\">7.8 </span>Add Activity</a></li><li class=\"tocline\"><a href=\"#remove-activity-inbox\" class=\"tocxref\"><span class=\"secno\">7.9 </span>Remove Activity</a></li><li class=\"tocline\"><a href=\"#like-activity-inbox\" class=\"tocxref\"><span class=\"secno\">7.10 </span>Like Activity</a></li><li class=\"tocline\"><a href=\"#announce-activity-inbox\" class=\"tocxref\"><span class=\"secno\">7.11 </span>Announce Activity (sharing)</a></li><li class=\"tocline\"><a href=\"#undo-activity-inbox\" class=\"tocxref\"><span class=\"secno\">7.12 </span>Undo Activity</a></li></ol></li><li class=\"tocline\"><a href=\"#i18n-concerns\" class=\"tocxref\"><span class=\"secno\">A. </span>Internationalization</a></li><li class=\"tocline\"><a href=\"#security-considerations\" class=\"tocxref\"><span class=\"secno\">B. </span>Security Considerations</a><ol class=\"toc\"><li class=\"tocline\"><a href=\"#authorization\" class=\"tocxref\"><span class=\"secno\">B.1 </span>Authentication and Authorization</a></li><li class=\"tocline\"><a href=\"#security-verification\" class=\"tocxref\"><span class=\"secno\">B.2 </span>Verification</a></li><li class=\"tocline\"><a href=\"#security-localhost\" class=\"tocxref\"><span class=\"secno\">B.3 </span>Accessing localhost URIs</a></li><li class=\"tocline\"><a href=\"#security-uri-schemes\" class=\"tocxref\"><span class=\"secno\">B.4 </span>URI Schemes</a></li><li class=\"tocline\"><a href=\"#security-recursive-objects\" class=\"tocxref\"><span class=\"secno\">B.5 </span>Recursive Objects</a></li><li class=\"tocline\"><a href=\"#security-spam\" class=\"tocxref\"><span class=\"secno\">B.6 </span>Spam</a></li><li class=\"tocline\"><a href=\"#security-federation-dos\" class=\"tocxref\"><span class=\"secno\">B.7 </span>Federation denial-of-service</a></li><li class=\"tocline\"><a href=\"#security-c2s-ratelimiting\" class=\"tocxref\"><span class=\"secno\">B.8 </span>Client-to-server ratelimiting</a></li><li class=\"tocline\"><a href=\"#security-c2s-response-dos\" class=\"tocxref\"><span class=\"secno\">B.9 </span>Client-to-server response denial-of-service</a></li><li class=\"tocline\"><a href=\"#security-sanitizing-content\" class=\"tocxref\"><span class=\"secno\">B.10 </span>Sanitizing Content</a></li><li class=\"tocline\"><a href=\"#security-not-displaying-bto-bcc\" class=\"tocxref\"><span class=\"secno\">B.11 </span>Not displaying bto and bcc properties</a></li></ol></li><li class=\"tocline\"><a href=\"#acknowledgements\" class=\"tocxref\"><span class=\"secno\">C. </span>Acknowledgements</a></li><li class=\"tocline\"><a href=\"#references\" class=\"tocxref\"><span class=\"secno\">D. </span>References</a><ol class=\"toc\"><li class=\"tocline\"><a href=\"#normative-references\" class=\"tocxref\"><span class=\"secno\">D.1 </span>Normative references</a></li><li class=\"tocline\"><a href=\"#informative-references\" class=\"tocxref\"><span class=\"secno\">D.2 </span>Informative references</a></li></ol></li></ol></nav>\n\n    <section id=\"Overview\">\n      <!--OddPage--><h2 id=\"x1-overview\"><span class=\"secno\">1. </span>Overview</h2>\n\n      <p>ActivityPub provides two layers:</p>\n\n      <ul>\n        <li>\n          <b>A server to server federation protocol</b>\n          (so decentralized websites can share information)\n        </li>\n        <li>\n          <b>A client to server protocol</b>\n          (so users, including real-world users, bots, and other automated processes,\n          can communicate with ActivityPub using their accounts on servers,\n          from a phone or desktop or web application or whatever)\n        </li>\n      </ul>\n\n      <p>\n        ActivityPub implementations can implement just one of these things or\n        both of them.\n        However, once you've implemented one, it isn't too many steps to\n        implement the other, and there are a lot of benefits to both (making\n        your website part of the decentralized social web, and being able to\n        use clients and client libraries that work across a wide variety of\n        social websites).\n      </p>\n\n      <p>\n        In ActivityPub, a user is represented by \"<a href=\"#actors\">actors</a>\"\n        via the user's accounts on servers.\n        User's accounts on different servers correspond to different actors.\n        Every Actor has:\n      </p>\n\n      <ul>\n        <li><b>An <code>inbox</code>:</b>  How they get messages from the world</li>\n        <li><b>An <code>outbox</code>:</b> How they send messages to others</li>\n      </ul>\n\n      <p>\n        <img src=\"illustration/tutorial-1.png\" alt=\"Actor with inbox and outbox\">\n      </p>\n\n      <p>\n        These are endpoints, or really, just URLs which are listed in the\n        ActivityPub actor's ActivityStreams description.\n        (More on ActivityStreams later).\n      </p>\n\n      <p>\n        Here's an example of the record of our friend Alyssa P. Hacker:\n      </p>\n\n      <div class=\"example\"><div class=\"example-title marker\"><span>Example 1</span></div><pre class=\"highlight json hljs\" aria-busy=\"false\" aria-live=\"polite\">{<span class=\"hljs-attr\">\"@context\"</span>: <span class=\"hljs-string\">\"https://www.w3.org/ns/activitystreams\"</span>,\n <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"Person\"</span>,\n <span class=\"hljs-attr\">\"id\"</span>: <span class=\"hljs-string\">\"https://social.example/alyssa/\"</span>,\n <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"Alyssa P. Hacker\"</span>,\n <span class=\"hljs-attr\">\"preferredUsername\"</span>: <span class=\"hljs-string\">\"alyssa\"</span>,\n <span class=\"hljs-attr\">\"summary\"</span>: <span class=\"hljs-string\">\"Lisp enthusiast hailing from MIT\"</span>,\n <span class=\"hljs-attr\">\"inbox\"</span>: <span class=\"hljs-string\">\"https://social.example/alyssa/inbox/\"</span>,\n <span class=\"hljs-attr\">\"outbox\"</span>: <span class=\"hljs-string\">\"https://social.example/alyssa/outbox/\"</span>,\n <span class=\"hljs-attr\">\"followers\"</span>: <span class=\"hljs-string\">\"https://social.example/alyssa/followers/\"</span>,\n <span class=\"hljs-attr\">\"following\"</span>: <span class=\"hljs-string\">\"https://social.example/alyssa/following/\"</span>,\n <span class=\"hljs-attr\">\"liked\"</span>: <span class=\"hljs-string\">\"https://social.example/alyssa/liked/\"</span>}</pre></div>\n\n      <p>\n        ActivityPub uses [<cite><a class=\"bibref\" href=\"#bib-ActivityStreams\">ActivityStreams</a></cite>] for its vocabulary.\n        This is pretty great because ActivityStreams includes all the common\n        terms you need to represent all the activities and content flowing\n        around a social network.\n        It's likely that ActivityStreams already includes all the vocabulary\n        you need, but even if it doesn't, ActivityStreams can be extended\n        via [<cite><a class=\"bibref\" href=\"#bib-JSON-LD\">JSON-LD</a></cite>].\n        If you know what JSON-LD is, you can take advantage of the cool linked\n        data approaches provided by JSON-LD.\n        If you don't, don't worry, JSON-LD documents and ActivityStreams can be\n        understood as plain old simple JSON.\n        (If you're going to add extensions, that's the point at which JSON-LD\n        really helps you out).\n      </p>\n\n      <p>\n        So, okay.\n        Alyssa wants to talk to her friends, and her friends want to talk to\n        her!\n        Luckily these \"inbox\" and \"outbox\" things can help us out.\n        They both behave differently for GET and POST.\n        Let's see how that works:\n      </p>\n\n      <p>\n        <img src=\"illustration/tutorial-2.png\" alt=\"Actor with messages flowing from rest of world to inbox and from outbox to rest of world\">\n      </p>\n\n      <p>\n        Hey nice, so just as a recap:\n      </p>\n\n      <ul>\n        <li>\n          You can POST to someone's inbox to send them a message\n          (server-to-server / federation only... this <em>is</em> federation!)\n        </li>\n        <li>\n          You can GET from your inbox to read your latest messages\n          (client-to-server; this is like reading your social\n          network stream)\n        </li>\n        <li>\n          You can POST to your outbox to send messages to the world\n          (client-to-server)\n        </li>\n        <li>\n          You can GET from someone's outbox to see what messages they've\n          posted (or at least the ones you're authorized to see).\n          (client-to-server and/or server-to-server)\n        </li>\n      </ul>\n \n      <p>\n        Of course, if that last one (GET'ing from someone's outbox) was the\n        only way to see what people have sent, this wouldn't be a very\n        efficient federation protocol!\n        Indeed, federation happens usually by servers posting messages sent by\n        actors to actors on other servers' inboxes.\n      </p>\n\n      <p>\n        Let's see an example!\n        Let's say Alyssa wants to catch up with her friend, Ben Bitdiddle.\n        She lent him a book recently and she wants to make sure he returns it\n        to her.\n        Here's the message she composes, as an ActivityStreams object:\n      </p>\n\n      <div class=\"example\"><div class=\"example-title marker\"><span>Example 2</span></div><pre class=\"highlight json hljs\" aria-busy=\"false\" aria-live=\"polite\">{<span class=\"hljs-attr\">\"@context\"</span>: <span class=\"hljs-string\">\"https://www.w3.org/ns/activitystreams\"</span>,\n <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"Note\"</span>,\n <span class=\"hljs-attr\">\"to\"</span>: [<span class=\"hljs-string\">\"https://chatty.example/ben/\"</span>],\n <span class=\"hljs-attr\">\"attributedTo\"</span>: <span class=\"hljs-string\">\"https://social.example/alyssa/\"</span>,\n <span class=\"hljs-attr\">\"content\"</span>: <span class=\"hljs-string\">\"Say, did you finish reading that book I lent you?\"</span>}</pre></div>\n\n      <p>\n        This is a note addressed to Ben.\n        She POSTs it to her outbox.\n      </p>\n\n      <p>\n        <img src=\"illustration/tutorial-3.png\" alt=\"Actor posting message to outbox\">\n      </p>\n\n      <p>\n        Since this is a non-activity object, the server recognizes that this is\n        an object being newly created, and does the courtesy of wrapping it in\n        a Create activity.\n        (Activities sent around in ActivityPub generally follow the pattern of\n        some activity by some actor being taken on some object.\n        In this case the activity is a Create of a Note object, posted by a\n        Person).\n      </p>\n\n\n      <div class=\"example\"><div class=\"example-title marker\"><span>Example 3</span></div><pre class=\"highlight json hljs\" aria-busy=\"false\" aria-live=\"polite\">{<span class=\"hljs-attr\">\"@context\"</span>: <span class=\"hljs-string\">\"https://www.w3.org/ns/activitystreams\"</span>,\n <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"Create\"</span>,\n <span class=\"hljs-attr\">\"id\"</span>: <span class=\"hljs-string\">\"https://social.example/alyssa/posts/a29a6843-9feb-4c74-a7f7-081b9c9201d3\"</span>,\n <span class=\"hljs-attr\">\"to\"</span>: [<span class=\"hljs-string\">\"https://chatty.example/ben/\"</span>],\n <span class=\"hljs-attr\">\"actor\"</span>: <span class=\"hljs-string\">\"https://social.example/alyssa/\"</span>,\n <span class=\"hljs-attr\">\"object\"</span>: {<span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"Note\"</span>,\n            <span class=\"hljs-attr\">\"id\"</span>: <span class=\"hljs-string\">\"https://social.example/alyssa/posts/49e2d03d-b53a-4c4c-a95c-94a6abf45a19\"</span>,\n            <span class=\"hljs-attr\">\"attributedTo\"</span>: <span class=\"hljs-string\">\"https://social.example/alyssa/\"</span>,\n            <span class=\"hljs-attr\">\"to\"</span>: [<span class=\"hljs-string\">\"https://chatty.example/ben/\"</span>],\n            <span class=\"hljs-attr\">\"content\"</span>: <span class=\"hljs-string\">\"Say, did you finish reading that book I lent you?\"</span>}}</pre></div>\n\n      <p>\n        Alyssa's server looks up Ben's ActivityStreams actor object, finds his\n        inbox endpoint, and POSTs her object to his inbox.\n      </p>\n\n      <p>\n        <img src=\"illustration/tutorial-4.png\" alt=\"Server posting to remote actor's inbox\">\n      </p>\n\n      <p>\n        Technically these are two separate steps... one is client to server\n        communication, and one is server to server communication (federation).\n        But, since we're using them both in this example, we can abstractly\n        think of this as being a streamlined submission from outbox to inbox:\n      </p>\n\n      <p>\n        <img src=\"illustration/tutorial-5.png\" alt=\"Note flowing from one actor's outbox to other actor's inbox\">\n      </p>\n\n      <p>\n        Cool!\n        A while later, Alyssa checks what new messages she's gotten.\n        Her phone polls her inbox via GET, and amongst a bunch of cat videos\n        posted by friends and photos of her nephew posted by her sister, she\n        sees the following:\n      </p>\n\n      <div class=\"example\"><div class=\"example-title marker\"><span>Example 4</span></div><pre class=\"highlight json hljs\" aria-busy=\"false\" aria-live=\"polite\">{\"@context\": \"https://www.w3.org/ns/activitystreams\",\n \"type\": \"Create\",\n \"id\": \"https://chatty.example/ben/p/51086\",\n \"to\": [\"https://social.example/alyssa/\"],\n \"actor\": \"https://chatty.example/ben/\",\n \"object\": {\"type\": \"Note\",\n            \"id\": \"https://chatty.example/ben/p/51085\",\n            \"attributedTo\": \"https://chatty.example/ben/\",\n            \"to\": [\"https://social.example/alyssa/\"],\n            \"inReplyTo\": \"https://social.example/alyssa/posts/49e2d03d-b53a-4c4c-a95c-94a6abf45a19\",\n            \"content\": \"&lt;p&gt;Argh, yeah, sorry, I'll get it back to you tomorrow.&lt;/p&gt;\n                        &lt;p&gt;I was reviewing the section on register machines,\n                           since it's been a while since I wrote one.&lt;/p&gt;\"}}</pre></div>\n\n      <p>Alyssa is relieved, and likes Ben's post:</p>\n\n      <div class=\"example\"><div class=\"example-title marker\"><span>Example 5</span></div><pre class=\"highlight json hljs\" aria-busy=\"false\" aria-live=\"polite\">{<span class=\"hljs-attr\">\"@context\"</span>: <span class=\"hljs-string\">\"https://www.w3.org/ns/activitystreams\"</span>,\n <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"Like\"</span>,\n <span class=\"hljs-attr\">\"id\"</span>: <span class=\"hljs-string\">\"https://social.example/alyssa/posts/5312e10e-5110-42e5-a09b-934882b3ecec\"</span>,\n <span class=\"hljs-attr\">\"to\"</span>: [<span class=\"hljs-string\">\"https://chatty.example/ben/\"</span>],\n <span class=\"hljs-attr\">\"actor\"</span>: <span class=\"hljs-string\">\"https://social.example/alyssa/\"</span>,\n <span class=\"hljs-attr\">\"object\"</span>: <span class=\"hljs-string\">\"https://chatty.example/ben/p/51086\"</span>}</pre></div>\n\n      <p>\n        She POSTs this message to her outbox.\n        (Since it's an activity, her server knows it doesn't need to wrap it in\n        a Create object).\n      </p>\n\n      <p>\n        Feeling happy about things, she decides to post a public message to her\n        followers.\n        Soon the following message is blasted to all the members of her\n        followers collection, and since it has the special Public group\n        addressed, is generally readable by anyone.\n      </p>\n\n      <div class=\"example\"><div class=\"example-title marker\"><span>Example 6</span></div><pre class=\"highlight json hljs\" aria-busy=\"false\" aria-live=\"polite\">{<span class=\"hljs-attr\">\"@context\"</span>: <span class=\"hljs-string\">\"https://www.w3.org/ns/activitystreams\"</span>,\n <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"Create\"</span>,\n <span class=\"hljs-attr\">\"id\"</span>: <span class=\"hljs-string\">\"https://social.example/alyssa/posts/9282e9cc-14d0-42b3-a758-d6aeca6c876b\"</span>,\n <span class=\"hljs-attr\">\"to\"</span>: [<span class=\"hljs-string\">\"https://social.example/alyssa/followers/\"</span>,\n        <span class=\"hljs-string\">\"https://www.w3.org/ns/activitystreams#Public\"</span>],\n <span class=\"hljs-attr\">\"actor\"</span>: <span class=\"hljs-string\">\"https://social.example/alyssa/\"</span>,\n <span class=\"hljs-attr\">\"object\"</span>: {<span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"Note\"</span>,\n            <span class=\"hljs-attr\">\"id\"</span>: <span class=\"hljs-string\">\"https://social.example/alyssa/posts/d18c55d4-8a63-4181-9745-4e6cf7938fa1\"</span>,\n            <span class=\"hljs-attr\">\"attributedTo\"</span>: <span class=\"hljs-string\">\"https://social.example/alyssa/\"</span>,\n            <span class=\"hljs-attr\">\"to\"</span>: [<span class=\"hljs-string\">\"https://social.example/alyssa/followers/\"</span>,\n                   <span class=\"hljs-string\">\"https://www.w3.org/ns/activitystreams#Public\"</span>],\n            <span class=\"hljs-attr\">\"content\"</span>: <span class=\"hljs-string\">\"Lending books to friends is nice.  Getting them back is even nicer! :)\"</span>}}</pre></div>\n\n      <section id=\"social-web-working-group\" inlist=\"\" rel=\"schema:hasPart\" resource=\"#social-web-working-group\">\n        <h3 property=\"schema:name\" id=\"x1-1-social-web-working-group\"><span class=\"secno\">1.1 </span>Social Web Working Group</h3>\n        <div datatype=\"rdf:HTML\" property=\"schema:description\">\n          <p>\n            <a href=\"#Overview\">ActivityPub</a> is one of several related\n            specifications being produced by the Social Web Working Group.\n            Implementers interested in alternative approaches and complementary\n            protocols should review [<cite><a class=\"bibref\" href=\"#bib-Micropub\">Micropub</a></cite>] and the overview document\n            [<cite><a class=\"bibref\" href=\"#bib-Social-Web-Protocols\">Social-Web-Protocols</a></cite>].\n          </p>\n        </div>\n      </section>\n    </section>\n\n    <section id=\"conformance\"><!--OddPage--><h2 id=\"x2-conformance\"><span class=\"secno\">2. </span>Conformance</h2>\n<p>\n  As well as sections marked as non-normative, all authoring guidelines, diagrams, examples,\n  and notes in this specification are non-normative. Everything else in this specification is\n  normative.\n</p>\n<p id=\"respecRFC2119\">The key words  <em class=\"rfc2119\">MAY</em>, <em class=\"rfc2119\">MUST</em>, <em class=\"rfc2119\">MUST NOT</em>, <em class=\"rfc2119\">SHOULD</em>, and <em class=\"rfc2119\">SHOULD NOT</em> are \n  to be interpreted as described in [<cite><a class=\"bibref\" href=\"#bib-RFC2119\">RFC2119</a></cite>].\n</p>\n\n      <section id=\"specification-profiles\">\n        <h3 id=\"x2-1-specification-profiles\"><span class=\"secno\">2.1 </span>Specification Profiles</h3>\n        <p>\n          This specification defines two closely related and interacting\n          protocols:\n        </p>\n        <dl>\n          <dt>A client to server protocol, or \"Social API\"</dt>\n          <dd>\n            This protocol permits a client to act <i>on behalf</i> of a user.\n            For example, this protocol is used by a mobile phone application to\n            interact with a social stream of the user's actor.\n          </dd>\n          <dt>A server to server protocol, or \"Federation Protocol\"</dt>\n          <dd>\n            This protocol is used to distribute activities between actors on\n            different servers, tying them into the same social graph.\n          </dd>\n        </dl>\n        <p>\n          The ActivityPub specification is designed so that once either of\n          these protocols are implemented, supporting the other is of very\n          little additional effort.\n          However, servers may still implement one without the other.\n          This gives three conformance classes:\n        </p>\n        <dl>\n          <dt>ActivityPub conformant Client</dt>\n          <dd>\n            This designation applies to any implementation of the entirety of the\n            client portion of the client to server protocol.\n          </dd>\n          <dt>ActivityPub conformant Server</dt>\n          <dd>\n            This designation applies to any implementation of the entirety of the\n            server portion of the client to server protocol.\n          </dd>\n          <dt>ActivityPub conformant Federated Server</dt>\n          <dd>\n            This designation applies to any implementation of the entirety of\n            the federation protocols.\n          </dd>\n        </dl>\n        <p>\n          It is called out whenever a portion of the specification only applies\n          to implementation of the federation protocol.\n          In addition, whenever requirements are specified, it is called out\n          whether they apply to the client or server (for the client-to-server\n          protocol) or whether referring to a sending or receiving server in\n          the server-to-server protocol.\n        </p>\n      </section>\n    </section>\n\n    <section id=\"obj\">\n      <!--OddPage--><h2 id=\"x3-objects\"><span class=\"secno\">3. </span>Objects</h2>\n      <p>\n        Objects are the core concept around which both [<cite><a class=\"bibref\" href=\"#bib-ActivityStreams\">ActivityStreams</a></cite>] and\n        ActivityPub are built.\n        Objects are often wrapped in Activities and are contained in streams of\n        Collections, which are themselves subclasses of Objects.\n        See the [<cite><a class=\"bibref\" href=\"#bib-Activity-Vocabulary\">Activity-Vocabulary</a></cite>] document, particularly the\n        <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#types\">Core Classes</a>;\n        ActivityPub follows the mapping of this vocabulary very closely.\n      </p>\n      <p>\n        ActivityPub defines some terms in addition to those provided by\n        ActivityStreams.\n        These terms are provided in the ActivityPub\n        <a href=\"http://www.w3.org/TR/json-ld/#the-context\">JSON-LD context</a>\n        at\n        <code>https://www.w3.org/ns/activitystreams</code>.\n        Implementers <em class=\"rfc2119\" title=\"SHOULD\">SHOULD</em> include the ActivityPub context in their\n        object definitions.\n        Implementers <em class=\"rfc2119\" title=\"MAY\">MAY</em> include additional context as appropriate.\n      </p>\n      <p>\n        ActivityPub shares the same\n        <a href=\"https://www.w3.org/TR/activitystreams-core/#urls\">\n          URI / IRI conventions as in ActivityStreams</a>.\n      </p>\n      <p>\n        Servers <em class=\"rfc2119\" title=\"SHOULD\">SHOULD</em> validate the content they receive to avoid content\n        spoofing attacks.\n        (A server should do something at least as robust as checking that\n        the object appears as received at its origin, but mechanisms\n        such as checking signatures would be better if available).\n        No particular mechanism for verification is authoritatively specified by\n        this document, but please see <a href=\"#security-considerations\">Security \n        Considerations</a> for some suggestions and good practices.\n      </p>\n      <div class=\"informative\">\n        As an example, if example.com receives the activity\n        <div class=\"example\"><div class=\"example-title marker\"><span>Example 7</span></div><pre class=\"hljs json\" aria-busy=\"false\" aria-live=\"polite\">{\n  <span class=\"hljs-attr\">\"@context\"</span>: <span class=\"hljs-string\">\"https://www.w3.org/ns/activitystreams\"</span>,\n  <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"Like\"</span>,\n  <span class=\"hljs-attr\">\"actor\"</span>: <span class=\"hljs-string\">\"https://example.net/~mallory\"</span>,\n  <span class=\"hljs-attr\">\"to\"</span>: [<span class=\"hljs-string\">\"https://hatchat.example/sarah/\"</span>,\n         <span class=\"hljs-string\">\"https://example.com/peeps/john/\"</span>],\n  <span class=\"hljs-attr\">\"object\"</span>: {\n    <span class=\"hljs-attr\">\"@context\"</span>: {<span class=\"hljs-attr\">\"@language\"</span>: <span class=\"hljs-string\">\"en\"</span>},\n    <span class=\"hljs-attr\">\"id\"</span>: <span class=\"hljs-string\">\"https://example.org/~alice/note/23\"</span>,\n    <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"Note\"</span>,\n    <span class=\"hljs-attr\">\"attributedTo\"</span>: <span class=\"hljs-string\">\"https://example.org/~alice\"</span>,\n    <span class=\"hljs-attr\">\"content\"</span>: <span class=\"hljs-string\">\"I'm a goat\"</span>\n  }\n}</pre></div>\n        it should dereference the <code>id</code> both to ensure that it exists\n        and is a valid object, and that it is not misrepresenting the object.\n        (In this example, Mallory could be spoofing an object allegedly posted\n        by Alice).\n      </div>\n      <section id=\"obj-id\">\n        <h3 id=\"x3-1-object-identifiers\"><span class=\"secno\">3.1 </span>Object Identifiers</h3>\n        <p>\n          All Objects in [<cite><a class=\"bibref\" href=\"#bib-ActivityStreams\">ActivityStreams</a></cite>] should have unique global\n          identifiers.\n          ActivityPub extends this requirement; all objects distributed by the\n          ActivityPub protocol <em class=\"rfc2119\" title=\"MUST\">MUST</em> have unique global identifiers, unless they\n          are intentionally transient (short lived activities that are not\n          intended to be able to be looked up, such as some kinds of chat\n          messages or game notifications).\n          These identifiers must fall into one of the following groups:\n        </p>\n        <ol>\n          <li>\n            Publicly dereferencable URIs, such as HTTPS URIs, with their\n            authority belonging to that of their originating server.\n            (Publicly facing content <em class=\"rfc2119\" title=\"SHOULD\">SHOULD</em> use HTTPS URIs).\n          </li>\n          <li>\n            An ID explicitly specified as the JSON <code>null</code> object,\n            which implies an anonymous object (a part of its parent context)\n          </li>\n        </ol>\n        <p>\n          Identifiers <em class=\"rfc2119\" title=\"MUST\">MUST</em> be provided for activities posted in server to\n          server communication, unless the activity is intentionally transient.\n          However, for client to server communication, a server receiving an\n          object posted to the outbox with no specified <code>id</code> <em class=\"rfc2119\" title=\"SHOULD\">SHOULD</em>\n          allocate an object ID in the actor's namespace and attach it to the\n          posted object.\n        </p>\n        <p>All objects have the following properties:</p>\n        <dl>\n          <dt>id</dt>\n          <dd>\n            The object's unique global identifier (unless the object is transient,\n            in which case the <code>id</code> <em class=\"rfc2119\" title=\"MAY\">MAY</em> be omitted).\n          </dd>\n          <dt>type</dt>\n          <dd>\n            The type of the object.\n          </dd>\n        </dl>\n      </section>\n\n      <section id=\"retrieving-objects\">\n        <h3 id=\"x3-2-retrieving-objects\"><span class=\"secno\">3.2 </span>Retrieving objects</h3>\n        <p>\n          The HTTP GET method may be dereferenced against an object's\n          <code>id</code> property to retrieve the activity.\n          Servers <em class=\"rfc2119\" title=\"MAY\">MAY</em> use HTTP content negotiation as defined in [<cite><a class=\"bibref\" href=\"#bib-RFC7231\">RFC7231</a></cite>] to\n          select the type of data to return in response to a request,\n          but <em class=\"rfc2119\" title=\"MUST\">MUST</em> present the ActivityStreams object representation\n          in response to\n          <code>application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\"</code>,\n          and <em class=\"rfc2119\" title=\"SHOULD\">SHOULD</em> also present the ActivityStreams representation in\n          response to <code>application/activity+json</code> as well.\n          The client <em class=\"rfc2119\" title=\"MUST\">MUST</em> specify an <code>Accept</code> header with the\n          <code>application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\"</code>\n          media type in order to retrieve the activity.\n        </p>\n        <p>\n          Servers <em class=\"rfc2119\" title=\"MAY\">MAY</em> implement other behavior for requests which do not comply\n          with the above requirement.\n          (For example, servers may implement additional legacy protocols, or\n          may use the same URI for both HTML and ActivityStreams\n          representations of a resource).\n        </p>\n        <p>\n          Servers <em class=\"rfc2119\" title=\"MAY\">MAY</em> require authorization as specified in\n          <a href=\"#authorization\" class=\"sec-ref\"><span class=\"secno\">B.1</span> <span class=\"sec-title\">Authentication and Authorization</span></a>, and may additionally implement their\n          own authorization rules.\n          Servers <em class=\"rfc2119\" title=\"SHOULD\">SHOULD</em> fail requests which do not pass their authorization\n          checks with the appropriate HTTP error code, or the 403 Forbidden\n          error code where the existence of the object is considered private.\n          An origin server which does not wish to disclose the existence of\n          a private target <em class=\"rfc2119\" title=\"MAY\">MAY</em> instead respond with a status code of\n          404 Not Found.\n        </p>\n      </section>\n\n      <section id=\"source-property\">\n        <h3 id=\"x3-3-the-source-property\"><span class=\"secno\">3.3 </span>The source property</h3>\n        <p>\n          In addition to all the properties defined by the\n\t  [<cite><a class=\"bibref\" href=\"#bib-Activity-Vocabulary\">Activity-Vocabulary</a></cite>], ActivityPub extends the <code>Object</code> by\n\t  supplying the <code>source</code> property.\n          The <code>source</code> property is intended to convey some\n          sort of source from which the <code>content</code> markup\n          was derived, as a form of provenance, or to support future\n          editing by clients.\n          In general, clients do the conversion from <code>source</code>\n          to <code>content</code>, not the other way around.\n        </p>\n        <p>\n          The value of <code>source</code> is itself an object\n          which uses its own <code>content</code> and <code>mediaType</code>\n          fields to supply source information.\n        </p>\n        <div class=\"example\"><div class=\"example-title marker\"><span>Example 8</span></div><pre class=\"hljs json\" aria-busy=\"false\" aria-live=\"polite\">{\n  <span class=\"hljs-attr\">\"@context\"</span>: [<span class=\"hljs-string\">\"https://www.w3.org/ns/activitystreams\"</span>,\n               {<span class=\"hljs-attr\">\"@language\"</span>: <span class=\"hljs-string\">\"en\"</span>}],\n  <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"Note\"</span>,\n  <span class=\"hljs-attr\">\"id\"</span>: <span class=\"hljs-string\">\"http://postparty.example/p/2415\"</span>,\n  <span class=\"hljs-attr\">\"content\"</span>: <span class=\"hljs-string\">\"&lt;p&gt;I &lt;em&gt;really&lt;/em&gt; like strawberries!&lt;/p&gt;\"</span>,\n  <span class=\"hljs-attr\">\"source\"</span>: {\n    <span class=\"hljs-attr\">\"content\"</span>: <span class=\"hljs-string\">\"I *really* like strawberries!\"</span>,\n    <span class=\"hljs-attr\">\"mediaType\"</span>: <span class=\"hljs-string\">\"text/markdown\"</span>}\n}</pre></div>\n        <div class=\"note\"><div role=\"heading\" class=\"note-title marker\" id=\"h-note\" aria-level=\"4\"><span>Note</span><span style=\"text-transform: none\">: What to do when clients can't meaningfully handle a mediaType?</span></div><div class=\"\">\n          <p>\n            In general, it's best to let a user edit their original post\n            in the same source format they originally composed it in.\n            But not all clients can reliably provide a nice interface for\n            all source types, and since clients are expected to do the\n            conversion from <code>source</code> to <code>content</code>,\n            some clients may work with a media type that another client\n            does not know how to work with.\n            While a client could feasibly provide the <code>content</code>\n            markup to be edited and ignore the source, this means that the\n            user will lose the more desirable form of the original\n            <code>source</code> in any future revisions.\n            A client doing so should thus provide a minimally obtrusive warning\n            cautioning that the original source format is not understood and is\n            thus being ignored.\n          </p>\n          <p>\n            For example, Alyssa P. Hacker likes to post to her ActivityPub\n            powered blog via an Emacs client she has written, leveraging\n            <a href=\"http://orgmode.org/\">Org mode</a>.\n            Later she switches to editing on her phone's client, which\n            has no idea what <code>text/x-org</code> is or how to render\n            it to HTML, so it provides a text box to edit the original\n            <code>content</code> instead.\n            A helpful warning displays above the edit area saying,\n            \"This was originally written in another markup language we don't\n            know how to handle.  If you edit, you'll lose your original\n            source!\"\n            Alyssa decides the small typo fix isn't worth losing her nice\n            org-mode markup and decides to make the update when she gets\n            home.\n          </p>\n        </div></div>\n      </section>\n    </section>\n\n    <section id=\"actors\">\n      <!--OddPage--><h2 id=\"x4-actors\"><span class=\"secno\">4. </span>Actors</h2>\n      <p>\n        ActivityPub actors are generally one of the\n        <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#actor-types\">\n          ActivityStreams Actor Types</a>,\n        but they don't have to be. For example, a \n        <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#dfn-profile\">\n          Profile</a> object\n        might be used as an actor, or a type from an ActivityStreams extension.\n        Actors are <a href=\"#retrieving-objects\">retrieved</a> like any other\n        Object in ActivityPub.\n        Like other ActivityStreams objects, actors have an <code>id</code>,\n        which is a URI.\n        When entered directly into a user interface (for example on a login\n        form), it is desirable to support simplified naming.\n        For this purpose, ID normalization <em class=\"rfc2119\" title=\"SHOULD\">SHOULD</em> be performed as follows:\n      </p>\n      <ol>\n        <li>\n          If the entered ID is a valid URI, then it is to be used directly.\n        </li>\n        <li>\n          If it appears that the user neglected to add a scheme for a URI that\n          would otherwise be considered valid, such as\n          <code>example.org/alice/</code>, clients <em class=\"rfc2119\" title=\"MAY\">MAY</em> attempt to provide\n          a default scheme, preferably <code>https</code>.\n        </li>\n        <li>\n          Otherwise, the entered value should be considered invalid.\n        </li>\n      </ol>\n\n      <p>\n        Once the actor's URI has been identified, it should be dereferenced.\n      </p>\n\n      <div class=\"note\"><div role=\"heading\" class=\"note-title marker\" id=\"h-note-0\" aria-level=\"3\"><span>Note</span></div><div class=\"\">\n        ActivityPub does not dictate a specific relationship between\n        \"users\" and Actors; many configurations are possible.\n        There may be multiple human users or organizations controlling an\n        Actor, or likewise one human or organization may control multiple\n        Actors. Similarly, an Actor may represent a piece of software,\n        like a bot, or an automated process.\n        More detailed \"user\" modelling, for example linking together of Actors which\n        are controlled by the same entity, or allowing one Actor to be presented\n        through multiple alternate profiles or aspects, are at the discretion\n        of the implementation.\n      </div></div>\n\n      <section id=\"actor-objects\">\n        <h3 id=\"x4-1-actor-objects\"><span class=\"secno\">4.1 </span><i>Actor</i> objects</h3>\n        <p>\n          Actor objects <em class=\"rfc2119\" title=\"MUST\">MUST</em> have, in addition to the properties mandated by\n          <a href=\"#obj-id\" class=\"sec-ref\"><span class=\"secno\">3.1</span> <span class=\"sec-title\">Object Identifiers</span></a>, the following properties:\n        </p>\n        <dl>\n          <dt id=\"inbox-property\">inbox</dt>\n          <dd>\n            A reference to an [<cite><a class=\"bibref\" href=\"#bib-ActivityStreams\">ActivityStreams</a></cite>]\n            <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#dfn-orderedcollection\">\n              <code>OrderedCollection</code></a>\n            comprised of all the messages received by the actor; see\n            <a href=\"#inbox\" class=\"sec-ref\"><span class=\"secno\">5.2</span> <span class=\"sec-title\">Inbox</span></a>.\n          </dd>\n          <dt id=\"outbox-property\">outbox</dt>\n          <dd>\n            An [<cite><a class=\"bibref\" href=\"#bib-ActivityStreams\">ActivityStreams</a></cite>]\n            <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#dfn-orderedcollection\">\n              <code>OrderedCollection</code></a>\n            comprised of all the messages produced by the actor; see\n            <a href=\"#outbox\" class=\"sec-ref\"><span class=\"secno\">5.1</span> <span class=\"sec-title\">Outbox</span></a>.\n          </dd>\n        </dl>\n        <p>\n          Implementations <em class=\"rfc2119\" title=\"SHOULD\">SHOULD</em>, in addition, provide the following\n          properties:\n        </p>\n        <dl>\n          <dt id=\"following-property\">following</dt>\n          <dd>\n            A link to an [<cite><a class=\"bibref\" href=\"#bib-ActivityStreams\">ActivityStreams</a></cite>] collection of the actors that\n            this actor is following; see <a href=\"#following\" class=\"sec-ref\"><span class=\"secno\">5.4</span> <span class=\"sec-title\">Following Collection</span></a>\n          </dd>\n          <dt id=\"followers-property\">followers</dt>\n          <dd>\n            A link to an [<cite><a class=\"bibref\" href=\"#bib-ActivityStreams\">ActivityStreams</a></cite>] collection of the actors that\n            follow this actor; see <a href=\"#followers\" class=\"sec-ref\"><span class=\"secno\">5.3</span> <span class=\"sec-title\">Followers Collection</span></a>.\n          </dd>\n        </dl>\n        <p>\n          Implementations <em class=\"rfc2119\" title=\"MAY\">MAY</em> provide the following properties:\n        </p>\n        <dl>\n          <dt id=\"liked-property\">liked</dt>\n          <dd>\n            A link to an [<cite><a class=\"bibref\" href=\"#bib-ActivityStreams\">ActivityStreams</a></cite>] collection of objects this\n            actor has liked; see <a href=\"#liked\" class=\"sec-ref\"><span class=\"secno\">5.5</span> <span class=\"sec-title\">Liked Collection</span></a>.\n          </dd>\n        </dl>\n        <div class=\"example\"><div class=\"example-title marker\"><span>Example 9</span></div><pre class=\"hljs json\" aria-busy=\"false\" aria-live=\"polite\">{\n  <span class=\"hljs-attr\">\"@context\"</span>: [<span class=\"hljs-string\">\"https://www.w3.org/ns/activitystreams\"</span>,\n               {<span class=\"hljs-attr\">\"@language\"</span>: <span class=\"hljs-string\">\"ja\"</span>}],\n  <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"Person\"</span>,\n  <span class=\"hljs-attr\">\"id\"</span>: <span class=\"hljs-string\">\"https://kenzoishii.example.com/\"</span>,\n  <span class=\"hljs-attr\">\"following\"</span>: <span class=\"hljs-string\">\"https://kenzoishii.example.com/following.json\"</span>,\n  <span class=\"hljs-attr\">\"followers\"</span>: <span class=\"hljs-string\">\"https://kenzoishii.example.com/followers.json\"</span>,\n  <span class=\"hljs-attr\">\"liked\"</span>: <span class=\"hljs-string\">\"https://kenzoishii.example.com/liked.json\"</span>,\n  <span class=\"hljs-attr\">\"inbox\"</span>: <span class=\"hljs-string\">\"https://kenzoishii.example.com/inbox.json\"</span>,\n  <span class=\"hljs-attr\">\"outbox\"</span>: <span class=\"hljs-string\">\"https://kenzoishii.example.com/feed.json\"</span>,\n  <span class=\"hljs-attr\">\"preferredUsername\"</span>: <span class=\"hljs-string\">\"kenzoishii\"</span>,\n  <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"石井健蔵\"</span>,\n  <span class=\"hljs-attr\">\"summary\"</span>: <span class=\"hljs-string\">\"この方はただの例です\"</span>,\n  <span class=\"hljs-attr\">\"icon\"</span>: [\n    <span class=\"hljs-string\">\"https://kenzoishii.example.com/image/165987aklre4\"</span>\n  ]\n}</pre></div>\n        <p>Implementations <em class=\"rfc2119\" title=\"MAY\">MAY</em>, in addition, provide the following properties:</p>\n        <dl>\n          <dt id=\"streams-property\">streams</dt>\n          <dd>\n            A list of supplementary Collections which may be of interest.\n          </dd>\n          <dt id=\"preferredUsername\">preferredUsername</dt>\n          <dd>\n            A short username which may be used to refer to the actor, with no\n            uniqueness guarantees.\n          </dd>\n          <dt id=\"endpoints\">endpoints</dt>\n          <dd>\n            A json object which maps additional (typically server/domain-wide)\n            endpoints which may be useful either for this actor or someone\n            referencing this actor.\n            This mapping may be nested inside the actor document as the value\n            or may be a link to a JSON-LD document with these properties.\n          </dd>\n        </dl>\n\n        <p>\n          The <code>endpoints</code> mapping <em class=\"rfc2119\" title=\"MAY\">MAY</em> include the following\n          properties:\n        </p>\n        <dl>\n          <dt id=\"proxyUrl\">proxyUrl</dt>\n          <dd>\n            Endpoint URI so this actor's clients may access remote\n            ActivityStreams objects which require authentication to access.\n            To use this endpoint, the client posts an\n            <code>x-www-form-urlencoded</code> <code>id</code> parameter\n            with the value being the <code>id</code> of the requested\n            ActivityStreams object.\n          </dd>\n          <dt id=\"oauthAuthorizationEndpoint\">oauthAuthorizationEndpoint</dt>\n          <dd>\n            If OAuth 2.0 bearer tokens [<cite><a class=\"bibref\" href=\"#bib-RFC6749\">RFC6749</a></cite>] [<cite><a class=\"bibref\" href=\"#bib-RFC6750\">RFC6750</a></cite>] are being used\n            for authenticating\n            <a href=\"#client-to-server-interactions\">client to server\n              interactions</a>,\n            this endpoint specifies a URI at which a browser-authenticated user\n            may obtain a new authorization grant.\n          </dd>\n          <dt id=\"oauthTokenEndpoint\">oauthTokenEndpoint</dt>\n          <dd>\n            If OAuth 2.0 bearer tokens [<cite><a class=\"bibref\" href=\"#bib-RFC6749\">RFC6749</a></cite>] [<cite><a class=\"bibref\" href=\"#bib-RFC6750\">RFC6750</a></cite>] are being used\n            for authenticating\n            <a href=\"#client-to-server-interactions\">client to server\n              interactions</a>,\n            this endpoint specifies a URI at which a client may acquire an\n\t    access token.\n          </dd>\n          <dt id=\"provideClientKey\">provideClientKey</dt>\n          <dd>\n            If Linked Data Signatures and HTTP Signatures are being used for\n            authentication and authorization, this endpoint specifies a URI at\n            which browser-authenticated users may authorize a client's public\n            key for\n            <a href=\"#client-to-server-interactions\">client to server\n              interactions</a>.\n          </dd>\n          <dt id=\"signClientKey\">signClientKey</dt>\n          <dd>\n            If Linked Data Signatures and HTTP Signatures are being used for\n            authentication and authorization, this endpoint specifies a URI at\n            which a client key may be signed by the actor's key for a time\n            window to act on behalf of the actor in interacting with foreign\n            servers.\n          </dd>\n          <dt id=\"sharedInbox\">sharedInbox</dt>\n          <dd>\n            An optional endpoint\n            <a href=\"#shared-inbox-delivery\">\n              used for wide delivery of publicly addressed activities\n              and activities sent to followers</a>.\n            <code>sharedInbox</code> endpoints <em class=\"rfc2119\" title=\"SHOULD\">SHOULD</em> also be publicly\n            readable <code>OrderedCollection</code> objects containing\n            objects addressed to the <a href=\"#public-addressing\">Public</a>\n            special collection.\n            Reading from the <code>sharedInbox</code> endpoint <em class=\"rfc2119\" title=\"MUST NOT\">MUST NOT</em> present\n            objects which are not addressed to the <code>Public</code>\n            endpoint.\n          </dd>\n        </dl>\n\n        <div class=\"note\"><div role=\"heading\" class=\"note-title marker\" id=\"h-note-1\" aria-level=\"4\"><span>Note</span></div><div class=\"\" id=\"as2-actor-properties\">\n          <p>\n            As the upstream vocabulary for ActivityPub, any applicable\n            [<cite><a class=\"bibref\" href=\"#bib-ActivityStreams\">ActivityStreams</a></cite>] property may be used on ActivityPub Actors.\n            Some ActivityStreams properties are particularly worth highlighting\n            to demonstrate how they are used in ActivityPub implementations.\n          </p>\n\n          <dl>\n            <dt id=\"url-property\">url</dt>\n            <dd>\n              A link to the actor's \"profile web page\", if not equal to the\n              value of <code>id</code>.\n            </dd>\n            <dt id=\"name-property\">name</dt>\n            <dd>\n              The preferred \"nickname\" or \"display name\" of the actor.\n            </dd>\n            <dt id=\"summary-property\">summary</dt>\n            <dd>A quick summary or bio by the user about themselves.</dd>\n            <dt id=\"icon-property\">icon</dt>\n            <dd>\n              A link to an image or an Image object which represents the user's\n              profile picture (this may be a thumbnail).\n            </dd>\n          </dl>\n        </div></div>\n        <div class=\"note\"><div role=\"heading\" class=\"note-title marker\" id=\"h-note-2\" aria-level=\"4\"><span>Note</span></div><p class=\"\" id=\"actor-text-direction\">\n          Properties containing natural language values,\n          such as <code>name</code>, <code>preferredUsername</code>, or\n          <code>summary</code>, make use of\n          <a href=\"https://www.w3.org/TR/activitystreams-core/#naturalLanguageValues\">\n            natural language support defined in ActivityStreams</a>.\n        </p></div>\n      </section>\n\n    </section>\n\n    <section id=\"collections\">\n      <!--OddPage--><h2 id=\"x5-collections\"><span class=\"secno\">5. </span>Collections</h2>\n      <p>\n        [<cite><a class=\"bibref\" href=\"#bib-ActivityStreams\">ActivityStreams</a></cite>] defines the collection concept; ActivityPub\n        defines several collections with special behavior.\n        Note that ActivityPub makes use of\n        <a href=\"https://www.w3.org/TR/activitystreams-core/#paging\">\n          ActivityStreams paging</a>\n        to traverse large sets of objects.\n      </p>\n\n      <p>\n        Note that some of these collections are specified to be of type\n        <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#dfn-orderedcollection\">\n          <code>OrderedCollection</code></a>\n        specifically, while others are permitted to be either a\n        <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#dfn-collection\">\n          <code>Collection</code></a>\n        or an\n        <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#dfn-orderedcollection\">\n          <code>OrderedCollection</code></a>.\n        An\n        <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#dfn-orderedcollection\">\n          <code>OrderedCollection</code></a>\n        <em class=\"rfc2119\" title=\"MUST\">MUST</em> be presented consistently in reverse chronological order.\n      </p>\n\n      <div class=\"note\"><div role=\"heading\" class=\"note-title marker\" id=\"h-note-3\" aria-level=\"3\"><span>Note</span></div><p class=\"\">\n        What property is used to determine the reverse chronological order\n        is intentionally left as an implementation detail.\n        For example, many SQL-style databases use an incrementing integer\n        as an identifier, which can be reasonably used for handling\n        insertion order in most cases.\n        In other databases, an insertion time timestamp may be preferred.\n        What is used isn't important, but the ordering of elements must\n        remain intact, with newer items first.\n        A property which changes regularly, such a \"last updated\" timestamp,\n        should not be used.\n      </p></div>\n\n      <section id=\"outbox\">\n        <h3 id=\"x5-1-outbox\"><span class=\"secno\">5.1 </span>Outbox</h3>\n        <p>\n          The outbox is discovered through the <code>outbox</code>\n          property of an <a href=\"#actors\">actor's</a> profile.\n          The <code>outbox</code> <em class=\"rfc2119\" title=\"MUST\">MUST</em> be an\n          <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#dfn-orderedcollection\">\n            <code>OrderedCollection</code></a>.\n        </p>\n        <p>\n          The outbox stream contains activities the user has\n          published, subject to the ability of the requestor to retrieve the\n          activity (that is, the contents of the outbox are filtered by the\n          permissions of the person reading it).\n          If a user submits a request without\n          <a href=\"#authorization\">Authorization</a> the server should\n          respond with all of the <a href=\"#public-addressing\">Public</a>\n          posts.\n          This could potentially be all relevant objects published by the\n          user, though the number of available items is left to the\n          discretion of those implementing and deploying the server.\n        </p>\n        <p>\n          The outbox accepts HTTP POST requests, with behaviour described in\n          <a href=\"#client-to-server-interactions\">Client to Server\n            Interactions</a>.\n        </p>\n      </section>\n\n      <section id=\"inbox\">\n        <h3 id=\"x5-2-inbox\"><span class=\"secno\">5.2 </span>Inbox</h3>\n\n        <p>\n          The inbox is discovered through the <code>inbox</code>\n          property of an <a href=\"#actors\">actor's</a> profile.\n          The <code>inbox</code> <em class=\"rfc2119\" title=\"MUST\">MUST</em> be an\n          <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#dfn-orderedcollection\">\n            <code>OrderedCollection</code></a>.\n        </p>\n\n        <p>\n          The inbox stream contains all activities received by the\n          actor.\n          The server <em class=\"rfc2119\" title=\"SHOULD\">SHOULD</em> filter content according to the requester's\n          permission.\n          In general, the owner of an inbox is likely to be able to access\n          all of their inbox contents. Depending on access control, some\n          other content may be public, whereas other content may require\n          authentication for non-owner users, if they can access the inbox\n          at all.\n        </p>\n\n        <p>\n          The server <em class=\"rfc2119\" title=\"MUST\">MUST</em> perform de-duplication of activities returned by\n          the inbox. Duplication can occur if an activity is addressed both\n          to an actor's followers, and a specific\n          actor who also follows the recipient actor, and the server has failed\n          to de-duplicate the recipients list.\n          Such deduplication <em class=\"rfc2119\" title=\"MUST\">MUST</em> be performed by comparing the\n          <code>id</code> of the activities and dropping any activities\n          already seen.\n        </p>\n\n        <p>\n          The inboxes of actors on federated servers accepts HTTP POST requests,\n          with behaviour described in <a href=\"#delivery\">Delivery</a>.\n          Non-federated servers <em class=\"rfc2119\" title=\"SHOULD\">SHOULD</em> return a 405 Method Not Allowed upon\n          receipt of a POST request.\n        </p>\n      </section>\n\n      <section id=\"followers\">\n        <h3 id=\"x5-3-followers-collection\"><span class=\"secno\">5.3 </span>Followers Collection</h3>\n        <p>\n          Every <a href=\"#actors\">actor</a> <em class=\"rfc2119\" title=\"SHOULD\">SHOULD</em> have a <code>followers</code>\n          collection.\n          This is a list of everyone who has sent a\n          <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#dfn-follow\">Follow</a>\n          activity for the actor, added as a\n          <a href=\"#follow-activity-outbox\">side effect</a>.\n          This is where one would find a list of all the actors that are\n          following the actor.\n          The <code>followers</code> collection <em class=\"rfc2119\" title=\"MUST\">MUST</em> be either an\n          <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#dfn-orderedcollection\">\n            <code>OrderedCollection</code></a>\n          or a\n          <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#dfn-collection\">\n            <code>Collection</code></a>\n          and <em class=\"rfc2119\" title=\"MAY\">MAY</em> be filtered on privileges of an authenticated user\n          or as appropriate when no authentication is given.\n        </p>\n\n        <div class=\"note\"><div role=\"heading\" class=\"note-title marker\" id=\"h-note-4\" aria-level=\"4\"><span>Note</span><span style=\"text-transform: none\">: Default for notification targeting</span></div><p class=\"\">\n          The follow activity generally is a request to see the objects an actor\n          creates. This makes the Followers collection an appropriate default\n          target for <a href=\"#delivery\">delivery</a> of notifications.\n        </p></div>\n      </section>\n\n      <section id=\"following\">\n        <h3 id=\"x5-4-following-collection\"><span class=\"secno\">5.4 </span>Following Collection</h3>\n        <p>\n          Every actor <em class=\"rfc2119\" title=\"SHOULD\">SHOULD</em> have a <code>following</code> collection.\n          This is a list of everybody that the actor has followed, added as a\n          <a href=\"#follow-activity-outbox\">side effect</a>.\n          The <code>following</code> collection <em class=\"rfc2119\" title=\"MUST\">MUST</em> be either an\n          <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#dfn-orderedcollection\">\n            <code>OrderedCollection</code></a>\n          or a\n          <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#dfn-collection\">\n            <code>Collection</code></a>\n          and <em class=\"rfc2119\" title=\"MAY\">MAY</em> be filtered on privileges of an authenticated user\n          or as appropriate when no authentication is given.\n        </p>\n      </section>\n\n      <section id=\"liked\">\n        <h3 id=\"x5-5-liked-collection\"><span class=\"secno\">5.5 </span>Liked Collection</h3>\n        <p>\n          Every actor <em class=\"rfc2119\" title=\"MAY\">MAY</em> have a <code>liked</code> collection.\n          This is a list of every object from all of the actor's <code>Like</code>\n          activities, added as a <a href=\"#like-activity-outbox\">side effect</a>.\n          The <code>liked</code> collection <em class=\"rfc2119\" title=\"MUST\">MUST</em> be either an\n          <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#dfn-orderedcollection\">\n            <code>OrderedCollection</code></a>\n          or a\n          <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#dfn-collection\">\n            <code>Collection</code></a>\n          and <em class=\"rfc2119\" title=\"MAY\">MAY</em> be filtered on privileges of an authenticated user\n          or as appropriate when no authentication is given.\n        </p>\n      </section>\n\n      <section id=\"public-addressing\">\n        <h3 id=\"x5-6-public-addressing\"><span class=\"secno\">5.6 </span>Public Addressing</h3>\n        <p>\n          In addition to [<cite><a class=\"bibref\" href=\"#bib-ActivityStreams\">ActivityStreams</a></cite>] collections and objects,\n          Activities may additionally be addressed to the special \"public\"\n          collection, with the identifier\n          <code>https://www.w3.org/ns/activitystreams#Public</code>.\n          For example:\n        </p>\n        <div class=\"example\"><div class=\"example-title marker\"><span>Example 10</span></div><pre class=\"hljs json\" aria-busy=\"false\" aria-live=\"polite\">{\n  <span class=\"hljs-attr\">\"@context\"</span>: <span class=\"hljs-string\">\"https://www.w3.org/ns/activitystreams\"</span>,\n  <span class=\"hljs-attr\">\"id\"</span>: <span class=\"hljs-string\">\"https://www.w3.org/ns/activitystreams#Public\"</span>,\n  <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"Collection\"</span>\n}</pre></div>\n        <p>\n          Activities addressed to this special URI shall be accessible to all\n          users, without authentication.\n          Implementations <em class=\"rfc2119\" title=\"MUST NOT\">MUST NOT</em> deliver to the \"public\" special collection;\n          it is not capable of receiving actual activities.\n          However, actors <em class=\"rfc2119\" title=\"MAY\">MAY</em> have a\n          <a href=\"#sharedInbox\"><code>sharedInbox</code></a>\n          endpoint which is available for efficient shared delivery of public\n          posts (as well as posts to followers-only); see\n          <a href=\"#shared-inbox-delivery\" class=\"sec-ref\"><span class=\"secno\">7.1.3</span> <span class=\"sec-title\">Shared Inbox Delivery</span></a>.\n        </p>\n        <div class=\"note\"><div role=\"heading\" class=\"note-title marker\" id=\"h-note-5\" aria-level=\"4\"><span>Note</span></div><div class=\"\">\n          <p>\n            Compacting an ActivityStreams object using the ActivityStreams\n            JSON-LD context might result in\n            <code>https://www.w3.org/ns/activitystreams#Public</code>\n            being represented as simply <code>Public</code> or <code>as:Public</code>\n            which are valid representations of the Public collection.\n            Implementations which treat ActivityStreams objects as simply\n            JSON rather than converting an incoming activity over to a\n            local context using JSON-LD tooling should be aware of this\n            and should be prepared to accept all three representations.\n          </p>\n        </div></div>\n      </section>\n\n      <section id=\"likes\">\n        <h3 id=\"x5-7-likes-collection\"><span class=\"secno\">5.7 </span>Likes Collection</h3>\n        <p>\n          Every object <em class=\"rfc2119\" title=\"MAY\">MAY</em> have a <code>likes</code> collection.\n          This is a list of all <code>Like</code> activities with this object\n          as the <code>object</code> property, added as a\n          <a href=\"#like-activity-inbox\">side effect</a>.\n          The <code>likes</code> collection <em class=\"rfc2119\" title=\"MUST\">MUST</em> be either an\n          <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#dfn-orderedcollection\">\n            <code>OrderedCollection</code></a>\n          or a\n          <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#dfn-collection\">\n            <code>Collection</code></a>\n          and <em class=\"rfc2119\" title=\"MAY\">MAY</em> be filtered on privileges of an authenticated user\n          or as appropriate when no authentication is given.\n        </p>\n\n        <div class=\"note\"><div role=\"heading\" class=\"note-title marker\" id=\"h-note-6\" aria-level=\"4\"><span>Note</span></div><div class=\"\">\n          <p>\n            Care should be taken to not confuse the the\n            <a href=\"#likes\"><code>likes</code></a>\n            collection with the similarly named but different\n            <a href=\"#liked\"><code>liked</code></a> collection.\n            In sum:\n          </p>\n\n          <ul>\n            <li>\n              <b>liked:</b>\n              Specifically a property of actors.\n              This is a collection of <code>Like</code> activities performed\n              <i>by the actor</i>,\n              added to the collection as a\n              <a href=\"#like-activity-outbox\">\n                side effect of delivery to the outbox</a>.\n            </li>\n\n            <li>\n              <b>likes:</b>\n              May be a property of any object.\n              This is a collection of <code>Like</code> activities referencing\n              this object,\n              added to the collection as a\n              <a href=\"#like-activity-inbox\">\n                side effect of delivery to the inbox</a>.\n            </li>\n          </ul>\n        </div></div>\n      </section>\n\n      <section id=\"shares\">\n        <h3 id=\"x5-8-shares-collection\"><span class=\"secno\">5.8 </span>Shares Collection</h3>\n        <p>\n          Every object <em class=\"rfc2119\" title=\"MAY\">MAY</em> have a <code>shares</code> collection.\n          This is a list of all <code>Announce</code> activities with this object\n          as the <code>object</code> property, added as a\n          <a href=\"#announce-activity-inbox\">side effect</a>.\n          The <code>shares</code> collection <em class=\"rfc2119\" title=\"MUST\">MUST</em> be either an\n          <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#dfn-orderedcollection\">\n            <code>OrderedCollection</code></a>\n          or a\n          <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#dfn-collection\">\n            <code>Collection</code></a>\n          and <em class=\"rfc2119\" title=\"MAY\">MAY</em> be filtered on privileges of an authenticated user\n          or as appropriate when no authentication is given.\n        </p>\n      </section>\n    </section>\n\n    <section id=\"client-to-server-interactions\">\n      <!--OddPage--><h2 id=\"x6-client-to-server-interactions\"><span class=\"secno\">6. </span>Client to Server Interactions</h2>\n      <p>\n        Activities as defined by [<cite><a class=\"bibref\" href=\"#bib-ActivityStreams\">ActivityStreams</a></cite>] are the core mechanism\n        for creating, modifying and sharing content within the social graph.\n      </p>\n\n      <p>\n        Client to server interaction takes place through clients posting\n        Activities to an actor's <a href=\"#outbox\">outbox</a>.\n        To do this, clients <em class=\"rfc2119\" title=\"MUST\">MUST</em> discover the URL of the actor's outbox from\n\ttheir <a href=\"#actor-objects\">profile</a> and then <em class=\"rfc2119\" title=\"MUST\">MUST</em> make an HTTP\n        <code>POST</code> request to this URL with the Content-Type of\n        <code>application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\"</code>.\n        Servers <em class=\"rfc2119\" title=\"MAY\">MAY</em> interpret a Content-Type or Accept header of\n        <code>application/activity+json</code> as equivalent\n        to <code>application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\"</code>\n        for client-to-server interactions.\n        The request <em class=\"rfc2119\" title=\"MUST\">MUST</em> be authenticated with the credentials of the user to\n        whom the outbox belongs.\n        The body of the <code>POST</code> request <em class=\"rfc2119\" title=\"MUST\">MUST</em> contain a single\n        Activity (which <em class=\"rfc2119\" title=\"MAY\">MAY</em> contain embedded objects), or a single non-Activity\n        object which\n        <a href=\"#object-without-create\">will be wrapped in a Create activity\n          by the server</a>.\n      </p>\n      <div class=\"example\"><div class=\"example-title marker\"><span>Example 11</span><span style=\"text-transform: none\">: Submitting an Activity to the Outbox</span></div><pre class=\"hljs http\" aria-busy=\"false\" aria-live=\"polite\"><span class=\"hljs-keyword\">POST</span> <span class=\"hljs-string\">/outbox/</span> HTTP/1.1\n<span class=\"hljs-attribute\">Host</span>: dustycloud.org\n<span class=\"hljs-attribute\">Authorization</span>: Bearer XXXXXXXXXXX\n<span class=\"hljs-attribute\">Content-Type</span>: application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\"\n\n<span class=\"json\">{\n  <span class=\"hljs-attr\">\"@context\"</span>: [<span class=\"hljs-string\">\"https://www.w3.org/ns/activitystreams\"</span>,\n               {<span class=\"hljs-attr\">\"@language\"</span>: <span class=\"hljs-string\">\"en\"</span>}],\n  <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"Like\"</span>,\n  <span class=\"hljs-attr\">\"actor\"</span>: <span class=\"hljs-string\">\"https://dustycloud.org/chris/\"</span>,\n  <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"Chris liked 'Minimal ActivityPub update client'\"</span>,\n  <span class=\"hljs-attr\">\"object\"</span>: <span class=\"hljs-string\">\"https://rhiaro.co.uk/2016/05/minimal-activitypub\"</span>,\n  <span class=\"hljs-attr\">\"to\"</span>: [<span class=\"hljs-string\">\"https://rhiaro.co.uk/#amy\"</span>,\n         <span class=\"hljs-string\">\"https://dustycloud.org/followers\"</span>,\n         <span class=\"hljs-string\">\"https://rhiaro.co.uk/followers/\"</span>],\n  <span class=\"hljs-attr\">\"cc\"</span>: <span class=\"hljs-string\">\"https://e14n.com/evan\"</span>\n}</span></pre></div>\n\n      <p>\n        If an Activity is submitted with a value in the <code>id</code>\n        property, servers <em class=\"rfc2119\" title=\"MUST\">MUST</em> ignore this and generate a new <code>id</code>\n        for the Activity.\n        Servers <em class=\"rfc2119\" title=\"MUST\">MUST</em> return a <code>201 Created</code> HTTP code, and unless\n        the activity is transient, <em class=\"rfc2119\" title=\"MUST\">MUST</em> include the new <code>id</code> in the\n        <code>Location</code> header.\n      </p>\n      <div class=\"example\"><div class=\"example-title marker\"><span>Example 12</span><span style=\"text-transform: none\">: Outbox response to submitted Activity</span></div><pre class=\"hljs http\" aria-busy=\"false\" aria-live=\"polite\">HTTP/1.1 <span class=\"hljs-number\">201</span> Created\n<span class=\"hljs-attribute\">Location</span>: https://dustycloud.org/likes/345</pre></div>\n\n      <p id=\"remove-bto-bcc-before-delivery\">\n        The server <em class=\"rfc2119\" title=\"MUST\">MUST</em> remove the <code>bto</code> and/or <code>bcc</code>\n        properties, if they exist, from the ActivityStreams object before\n        delivery, but <em class=\"rfc2119\" title=\"MUST\">MUST</em> utilize the addressing originally stored\n        on the <code>bto</code> / <code>bcc</code> properties for determining\n        recipients in <a href=\"#delivery\">delivery</a>.\n      </p>\n\n      <p>\n        The server <em class=\"rfc2119\" title=\"MUST\">MUST</em> then add this new Activity to the\n        <a href=\"#outbox\">outbox</a> collection.\n        Depending on the type of Activity, servers may then be required to\n        carry out further side effects.\n        (However, there is no guarantee that time the Activity may appear in\n        the outbox.\n        The Activity might appear after a delay or disappear at any period).\n        These are described per individual Activity below.\n      </p>\n\n      <p>\n        Attempts to submit objects to servers not implementing client to server\n        support <em class=\"rfc2119\" title=\"SHOULD\">SHOULD</em> result in a <code>405 Method Not Allowed</code> response.\n      </p>\n\n\n      <p>\n        HTTP caching mechanisms [<cite><a class=\"bibref\" href=\"#bib-RFC7234\">RFC7234</a></cite>] <em class=\"rfc2119\" title=\"SHOULD\">SHOULD</em> be respected when\n        appropriate, both in clients receiving responses from servers as well\n        as servers sending responses to clients.\n      </p>\n\n      <section id=\"client-addressing\">\n        <h3 id=\"x6-1-client-addressing\"><span class=\"secno\">6.1 </span>Client Addressing</h3>\n          <p>\n          <strong>Clients</strong> are responsible for addressing new Activities\n          appropriately.\n          To some extent, this is dependent upon the particular client\n          implementation, but clients must be aware that the server will only\n          forward new Activities to addressees in the <code>to</code>,\n          <code>bto</code>, <code>cc</code>, <code>bcc</code>, and\n          <code>audience</code> fields.\n        </p>\n        <p>\n          The <a href=\"#followers\">Followers Collection</a> and/or the\n          <a href=\"#public-addressing\">Public Collection</a> are good\n          choices for the default addressing of new Activities.\n        </p>\n        <p>\n          Clients <em class=\"rfc2119\" title=\"SHOULD\">SHOULD</em> look at any objects attached to the new Activity via the\n          <code>object</code>, <code>target</code>, <code>inReplyTo</code> and/or\n          <code>tag</code> fields, retrieve <em>their</em> <code>actor</code> or\n          <code>attributedTo</code> properties, and <em class=\"rfc2119\" title=\"MAY\">MAY</em> also retrieve their addressing\n          properties, and add these to the <code>to</code> or <code>cc</code>\n          fields of the new Activity being created.\n          Clients <em class=\"rfc2119\" title=\"MAY\">MAY</em> recurse through attached objects, but if doing so, <em class=\"rfc2119\" title=\"SHOULD\">SHOULD</em>\n          set a limit for this recursion.\n          (Note that this does not suggest that the client should \"unpack\"\n          collections of actors being addressed as individual recipients).\n        </p>\n        <p>\n          Clients <em class=\"rfc2119\" title=\"MAY\">MAY</em> give the user the chance to amend this addressing in the\n          UI.\n        </p>\n        <p>\n          For example, when Chris likes the following article by Amy:\n        </p>\n\n        <div class=\"example\"><div class=\"example-title marker\"><span>Example 13</span><span style=\"text-transform: none\">: An Article</span></div><pre class=\"hljs json\" aria-busy=\"false\" aria-live=\"polite\">{\n  <span class=\"hljs-attr\">\"@context\"</span>: [<span class=\"hljs-string\">\"https://www.w3.org/ns/activitystreams\"</span>,\n               {<span class=\"hljs-attr\">\"@language\"</span>: <span class=\"hljs-string\">\"en-GB\"</span>}],\n  <span class=\"hljs-attr\">\"id\"</span>: <span class=\"hljs-string\">\"https://rhiaro.co.uk/2016/05/minimal-activitypub\"</span>,\n  <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"Article\"</span>,\n  <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"Minimal ActivityPub update client\"</span>,\n  <span class=\"hljs-attr\">\"content\"</span>: <span class=\"hljs-string\">\"Today I finished morph, a client for posting ActivityStreams2...\"</span>,\n  <span class=\"hljs-attr\">\"attributedTo\"</span>: <span class=\"hljs-string\">\"https://rhiaro.co.uk/#amy\"</span>,\n  <span class=\"hljs-attr\">\"to\"</span>: <span class=\"hljs-string\">\"https://rhiaro.co.uk/followers/\"</span>,\n  <span class=\"hljs-attr\">\"cc\"</span>: <span class=\"hljs-string\">\"https://e14n.com/evan\"</span>\n}</pre></div>\n\n        <p>the like is generated by the client as:</p>\n\n        <div class=\"example\"><div class=\"example-title marker\"><span>Example 14</span><span style=\"text-transform: none\">: A Like of the Article</span></div><pre class=\"hljs json\" aria-busy=\"false\" aria-live=\"polite\">{\n  <span class=\"hljs-attr\">\"@context\"</span>: [<span class=\"hljs-string\">\"https://www.w3.org/ns/activitystreams\"</span>,\n               {<span class=\"hljs-attr\">\"@language\"</span>: <span class=\"hljs-string\">\"en\"</span>}],\n  <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"Like\"</span>,\n  <span class=\"hljs-attr\">\"actor\"</span>: <span class=\"hljs-string\">\"https://dustycloud.org/chris/\"</span>,\n  <span class=\"hljs-attr\">\"summary\"</span>: <span class=\"hljs-string\">\"Chris liked 'Minimal ActivityPub update client'\"</span>,\n  <span class=\"hljs-attr\">\"object\"</span>: <span class=\"hljs-string\">\"https://rhiaro.co.uk/2016/05/minimal-activitypub\"</span>,\n  <span class=\"hljs-attr\">\"to\"</span>: [<span class=\"hljs-string\">\"https://rhiaro.co.uk/#amy\"</span>,\n         <span class=\"hljs-string\">\"https://dustycloud.org/followers\"</span>,\n         <span class=\"hljs-string\">\"https://rhiaro.co.uk/followers/\"</span>],\n  <span class=\"hljs-attr\">\"cc\"</span>: <span class=\"hljs-string\">\"https://e14n.com/evan\"</span>\n}</pre></div>\n\n        <p>The receiving outbox can then perform <a href=\"#delivery\">delivery</a>\n        to not only the followers of Chris (the liker), but also to Amy, and Amy's\n        followers and Evan, both of whom received the original article.</p>\n\n        <p>\n          Clients submitting the following activities to an <code>outbox</code>\n          <em class=\"rfc2119\" title=\"MUST\">MUST</em> provide the <code>object</code> property in the activity:\n          <code>Create</code>, <code>Update</code>, <code>Delete</code>,\n          <code>Follow</code>, <code>Add</code>, <code>Remove</code>,\n          <code>Like</code>, <code>Block</code>, <code>Undo</code>.\n          Additionally, clients submitting the following activities to an outbox\n          <em class=\"rfc2119\" title=\"MUST\">MUST</em> also provide the <code>target</code> property:\n          <code>Add</code>, <code>Remove</code>.\n        </p>\n\n      </section>\n\n\n      <section id=\"create-activity-outbox\">\n        <h3 id=\"x6-2-create-activity\"><span class=\"secno\">6.2 </span>Create Activity</h3>\n        <p>\n          The <code>Create</code> activity is used when posting a new object.\n          This has the side effect that the object embedded within the Activity\n          (in the <code>object</code> property) is created.\n        </p>\n        <p>\n          When a <code>Create</code> activity is posted, the <code>actor</code>\n          of the activity <em class=\"rfc2119\" title=\"SHOULD\">SHOULD</em> be copied onto the <code>object</code>'s\n          <code>attributedTo</code> field.\n        </p>\n        <p>\n          A mismatch between addressing of the Create activity and its\n          <code>object</code> is likely to lead to confusion.\n          As such, a server <em class=\"rfc2119\" title=\"SHOULD\">SHOULD</em> copy any recipients of the Create activity\n          to its <code>object</code> upon initial distribution, and likewise\n          with copying recipients from the <code>object</code> to the wrapping\n          Create activity.\n          Note that it is acceptable for the <code>object</code>'s addressing\n          to be changed later without changing the <code>Create</code>'s\n          addressing (for example via an <code>Update</code> activity).\n        </p>\n\n        <section id=\"object-without-create\">\n        <h4 id=\"x6-2-1-object-creation-without-a-create-activity\"><span class=\"secno\">6.2.1 </span>Object creation without a Create Activity</h4>\n        <p>\n          For client to server posting, it is possible to submit an object for\n          creation without a surrounding activity.\n          The server <em class=\"rfc2119\" title=\"MUST\">MUST</em> accept a valid [<cite><a class=\"bibref\" href=\"#bib-ActivityStreams\">ActivityStreams</a></cite>] object that\n          isn't a subtype of <code>Activity</code> in the POST request to the\n          outbox.\n          The server then <em class=\"rfc2119\" title=\"MUST\">MUST</em> attach this object as the <code>object</code>\n          of a <a href=\"#create-activity-outbox\">Create Activity</a>.\n          For non-transient objects, the server <em class=\"rfc2119\" title=\"MUST\">MUST</em> attach an\n          <code>id</code> to both the wrapping <code>Create</code> and its\n          wrapped <code>Object</code>.\n        </p>\n\n        <div class=\"note\"><div role=\"heading\" class=\"note-title marker\" id=\"h-note-7\" aria-level=\"5\"><span>Note</span></div><p class=\"\">\n          The <code>Location</code> value returned by the server should be the URL of\n          the new Create activity (rather than the object).\n        </p></div>\n\n        <p>\n          Any <code>to</code>, <code>bto</code>, <code>cc</code>, <code>bcc</code>,\n          and <code>audience</code> properties specified on the object <em class=\"rfc2119\" title=\"MUST\">MUST</em> be\n          copied over to the new Create activity by the server.\n        </p>\n\n        <div class=\"example\"><div class=\"example-title marker\"><span>Example 15</span><span style=\"text-transform: none\">: Object with audience targeting</span></div><pre class=\"hljs json\" aria-busy=\"false\" aria-live=\"polite\">{\n  <span class=\"hljs-attr\">\"@context\"</span>: <span class=\"hljs-string\">\"https://www.w3.org/ns/activitystreams\"</span>,\n  <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"Note\"</span>,\n  <span class=\"hljs-attr\">\"content\"</span>: <span class=\"hljs-string\">\"This is a note\"</span>,\n  <span class=\"hljs-attr\">\"published\"</span>: <span class=\"hljs-string\">\"2015-02-10T15:04:55Z\"</span>,\n  <span class=\"hljs-attr\">\"to\"</span>: [<span class=\"hljs-string\">\"https://example.org/~john/\"</span>],\n  <span class=\"hljs-attr\">\"cc\"</span>: [<span class=\"hljs-string\">\"https://example.com/~erik/followers\"</span>,\n         <span class=\"hljs-string\">\"https://www.w3.org/ns/activitystreams#Public\"</span>]\n}</pre></div>\n\n        The above example could be converted to this:\n        <div class=\"example\"><div class=\"example-title marker\"><span>Example 16</span><span style=\"text-transform: none\">: Create Activity wrapper generated by the server</span></div><pre class=\"hljs json\" aria-busy=\"false\" aria-live=\"polite\">{\n  <span class=\"hljs-attr\">\"@context\"</span>: <span class=\"hljs-string\">\"https://www.w3.org/ns/activitystreams\"</span>,\n  <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"Create\"</span>,\n  <span class=\"hljs-attr\">\"id\"</span>: <span class=\"hljs-string\">\"https://example.net/~mallory/87374\"</span>,\n  <span class=\"hljs-attr\">\"actor\"</span>: <span class=\"hljs-string\">\"https://example.net/~mallory\"</span>,\n  <span class=\"hljs-attr\">\"object\"</span>: {\n    <span class=\"hljs-attr\">\"id\"</span>: <span class=\"hljs-string\">\"https://example.com/~mallory/note/72\"</span>,\n    <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"Note\"</span>,\n    <span class=\"hljs-attr\">\"attributedTo\"</span>: <span class=\"hljs-string\">\"https://example.net/~mallory\"</span>,\n    <span class=\"hljs-attr\">\"content\"</span>: <span class=\"hljs-string\">\"This is a note\"</span>,\n    <span class=\"hljs-attr\">\"published\"</span>: <span class=\"hljs-string\">\"2015-02-10T15:04:55Z\"</span>,\n    <span class=\"hljs-attr\">\"to\"</span>: [<span class=\"hljs-string\">\"https://example.org/~john/\"</span>],\n    <span class=\"hljs-attr\">\"cc\"</span>: [<span class=\"hljs-string\">\"https://example.com/~erik/followers\"</span>,\n           <span class=\"hljs-string\">\"https://www.w3.org/ns/activitystreams#Public\"</span>]\n  },\n  <span class=\"hljs-attr\">\"published\"</span>: <span class=\"hljs-string\">\"2015-02-10T15:04:55Z\"</span>,\n  <span class=\"hljs-attr\">\"to\"</span>: [<span class=\"hljs-string\">\"https://example.org/~john/\"</span>],\n  <span class=\"hljs-attr\">\"cc\"</span>: [<span class=\"hljs-string\">\"https://example.com/~erik/followers\"</span>,\n         <span class=\"hljs-string\">\"https://www.w3.org/ns/activitystreams#Public\"</span>]\n}</pre></div>\n        </section>\n      </section>\n      <section id=\"update-activity-outbox\">\n        <h3 id=\"x6-3-update-activity\"><span class=\"secno\">6.3 </span>Update Activity</h3>\n        <p>\n          The <code>Update</code> activity is used when updating an already\n          existing object.\n          The side effect of this is that the <code>object</code> <em class=\"rfc2119\" title=\"MUST\">MUST</em> be\n          modified to reflect the new structure as defined in the update\n          activity, assuming the actor has permission to update this\n          object.\n        </p>\n\n        <section id=\"partial-updates\">\n          <h4 id=\"x6-3-1-partial-updates\"><span class=\"secno\">6.3.1 </span>Partial Updates</h4>\n          <p>\n            For client to server interactions, updates are partial;\n            rather than updating the document all at once, any key value\n            pair supplied is used to replace the existing value with\n            the new value.\n            This only applies to the top-level fields of the updated\n            object.\n            A special exception is for when the value is the json\n            <code>null</code> type; this means that this field should be\n            removed from the server's representation of the object.\n          </p>\n          <p>\n            Note that this behavior is for client to server interaction where\n            the client is posting to the server only.\n            Server to server interaction and updates from the server to the client\n            should contain the entire new representation of the object, after\n            the partial update application has been applied.\n            See the description of the\n            <a href=\"#update-activity-inbox\">Update activity for server to server\n              interactions</a>\n            for more details.\n          </p>\n        </section>\n      </section>\n      <section id=\"delete-activity-outbox\">\n        <h3 id=\"x6-4-delete-activity\"><span class=\"secno\">6.4 </span>Delete Activity</h3>\n        <p>\n          The <code>Delete</code> activity is used to delete an already\n          existing object.\n          The side effect of this is that the server <em class=\"rfc2119\" title=\"MAY\">MAY</em> replace the\n          <code>object</code> with a <code>Tombstone</code> of the object\n          that will be displayed in activities which reference the deleted\n          object.\n          If the deleted object is requested the server <em class=\"rfc2119\" title=\"SHOULD\">SHOULD</em> respond with\n          either the HTTP 410 Gone status code if a <code>Tombstone</code>\n          object is presented as the response body, otherwise respond with a\n          HTTP 404 Not Found.\n        </p>\n\n        <p>A deleted object:</p>\n        <div class=\"example\"><div class=\"example-title marker\"><span>Example 17</span></div><pre class=\"hljs json\" aria-busy=\"false\" aria-live=\"polite\">{\n  <span class=\"hljs-attr\">\"@context\"</span>: <span class=\"hljs-string\">\"https://www.w3.org/ns/activitystreams\"</span>,\n  <span class=\"hljs-attr\">\"id\"</span>: <span class=\"hljs-string\">\"https://example.com/~alice/note/72\"</span>,\n  <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"Tombstone\"</span>,\n  <span class=\"hljs-attr\">\"published\"</span>: <span class=\"hljs-string\">\"2015-02-10T15:04:55Z\"</span>,\n  <span class=\"hljs-attr\">\"updated\"</span>: <span class=\"hljs-string\">\"2015-02-10T15:04:55Z\"</span>,\n  <span class=\"hljs-attr\">\"deleted\"</span>: <span class=\"hljs-string\">\"2015-02-10T15:04:55Z\"</span>\n}</pre></div>\n      </section>\n      <section id=\"follow-activity-outbox\">\n        <h3 id=\"x6-5-follow-activity\"><span class=\"secno\">6.5 </span>Follow Activity</h3>\n        <p>\n          The <code>Follow</code> activity is used to subscribe to the\n          activities of another actor.\n        </p>\n        <p>\n          The side effect of receiving this in an <strong>outbox</strong>\n          is that the server <em class=\"rfc2119\" title=\"SHOULD\">SHOULD</em> add the <code>object</code> to the\n          <code>actor</code>'s <a href=\"#following\"><code>following</code> Collection</a>\n          when and only if an <code>Accept</code> activity is subsequently\n          received with this <code>Follow</code> activity as its object.\n        </p>\n      </section>\n      <section id=\"add-activity-outbox\">\n        <h3 id=\"x6-6-add-activity\"><span class=\"secno\">6.6 </span>Add Activity</h3>\n        <p>\n          Upon receipt of an <code>Add</code> activity into the\n          <strong>outbox</strong>, the server <em class=\"rfc2119\" title=\"SHOULD\">SHOULD</em>\n          add the <code>object</code> to the collection specified in the\n          <code>target</code> property, unless:\n        </p>\n        <ul>\n          <li>\n            the <code>target</code> is not owned by the receiving\n            server, and thus they are not authorized to update it.\n          </li>\n          <li>\n            the <code>object</code> is not allowed to be added to the\n            <code>target</code> collection for some other reason, at the\n            receiving server's discretion.\n          </li>\n        </ul>\n      </section>\n      <section id=\"remove-activity-outbox\">\n        <h3 id=\"x6-7-remove-activity\"><span class=\"secno\">6.7 </span>Remove Activity</h3>\n        <p>\n          Upon receipt of a <code>Remove</code> activity into the\n          <strong>outbox</strong>, the server <em class=\"rfc2119\" title=\"SHOULD\">SHOULD</em>\n          remove the <code>object</code> from the collection specified in the\n          <code>target</code> property, unless:\n        </p><ul>\n          <li>\n            the <code>target</code> is not owned by the receiving server, and\n            thus they are not authorized to update it.\n          </li>\n          <li>\n            the <code>object</code> is not allowed to be removed from the\n            <code>target</code> collection for some other reason, at the\n            receiving server's discretion.\n          </li>\n        </ul>\n      </section>\n      <section id=\"like-activity-outbox\">\n        <h3 id=\"x6-8-like-activity\"><span class=\"secno\">6.8 </span>Like Activity</h3>\n        <p>\n          The <code>Like</code> activity indicates the <code>actor</code> likes\n          the <code>object</code>.\n        </p>\n        <p>\n          The side effect of receiving this in an <strong>outbox</strong>\n          is that the server <em class=\"rfc2119\" title=\"SHOULD\">SHOULD</em> add the <code>object</code> to the\n          <code>actor</code>'s <a href=\"#liked\"><code>liked</code> Collection</a>.\n        </p>\n      </section>\n      <section id=\"block-activity-outbox\">\n        <h3 id=\"x6-9-block-activity\"><span class=\"secno\">6.9 </span>Block Activity</h3>\n        <p>\n          The <code>Block</code> activity is used to indicate that the posting\n          actor does not want another actor (defined in the <code>object</code>\n          property) to be able to interact with objects posted by the actor\n          posting the <code>Block</code> activity.\n          The server <em class=\"rfc2119\" title=\"SHOULD\">SHOULD</em> prevent the blocked user from interacting with any object\n          posted by the actor.\n        </p>\n        <p>\n          Servers <em class=\"rfc2119\" title=\"SHOULD NOT\">SHOULD NOT</em> deliver Block Activities to their <code>object</code>.\n        </p>\n      </section>\n      <section id=\"undo-activity-outbox\">\n        <h3 id=\"x6-10-undo-activity\"><span class=\"secno\">6.10 </span>Undo Activity</h3>\n        <p>\n          The <code>Undo</code> activity is used to undo a previous activity.\n          See the Activity Vocabulary documentation on\n          <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#inverse\">\n            Inverse Activities and \"Undo\"</a>.\n          For example, <code>Undo</code> may be used to undo a previous\n          <code>Like</code>, <code>Follow</code>, or <code>Block</code>.\n          The undo activity and the activity being undone <em class=\"rfc2119\" title=\"MUST\">MUST</em> both have the\n          same actor.\n          Side effects should be undone, to the extent possible.\n          For example, if undoing a <code>Like</code>, any counter that had\n          been incremented previously should be decremented appropriately.\n        </p>\n\n        <p>\n          There are some exceptions where there is an existing and explicit\n          \"inverse activity\" which should be used instead.\n          <code>Create</code> based activities should instead use\n          <code>Delete</code>, and <code>Add</code> activities should use\n          <code>Remove</code>.\n        </p>\n      </section>\n\n      <section id=\"client-to-server-outbox-delivery\">\n        <h3 id=\"x6-11-delivery\"><span class=\"secno\">6.11 </span>Delivery</h3>\n        <p>\n          Federated servers <em class=\"rfc2119\" title=\"MUST\">MUST</em> perform delivery on all Activities posted to the\n          <strong>outbox</strong> according to <a href=\"#outbox-delivery\">\n          outbox delivery</a>.\n        </p>\n      </section>\n\n      <section id=\"uploading-media\" class=\"informative\">\n        <h3 id=\"x6-12-uploading-media\"><span class=\"secno\">6.12 </span>Uploading Media</h3><p><em>This section is non-normative.</em></p>\n        <p>\n          Servers <em class=\"rfc2119\" title=\"MAY\">MAY</em> support uploading document types to be referenced in\n          activites, such as images, video or other binary data, but the\n          precise mechanism is out of scope for this version of ActivityPub.\n          The Social Web Community Group is refining the protocol in the\n          <a href=\"https://www.w3.org/wiki/SocialCG/ActivityPub/MediaUpload\">ActivityPub Media Upload report</a>.\n        </p>\n      </section>\n\n\n    </section>\n\n    <section id=\"server-to-server-interactions\">\n      <!--OddPage--><h2 id=\"x7-server-to-server-interactions\"><span class=\"secno\">7. </span>Server to Server Interactions</h2>\n      <p>\n        Servers communicate with other servers and propagate information across\n        the social graph by posting activities to actors'\n        <a href=\"#inbox\">inbox</a> endpoints.\n        An Activity sent over the network <em class=\"rfc2119\" title=\"SHOULD\">SHOULD</em> have an <code>id</code>,\n        unless it is intended to be transient (in which case it <em class=\"rfc2119\" title=\"MAY\">MAY</em> omit the\n        <code>id</code>).\n      </p><p>\n        <code>POST</code> requests (eg. to the inbox) <em class=\"rfc2119\" title=\"MUST\">MUST</em> be made with a Content-Type of\n        <code>application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\"</code>\n        and <code>GET</code> requests (see also <a href=\"#retrieving-objects\" class=\"sec-ref\"><span class=\"secno\">3.2</span> <span class=\"sec-title\">Retrieving objects</span></a>) \n        with an Accept header of \n        <code>application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\"</code>.\n        Servers <em class=\"rfc2119\" title=\"SHOULD\">SHOULD</em> interpret a Content-Type or Accept\n        header of <code>application/activity+json</code> as equivalent\n        to <code>application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\"</code>\n        for server-to-server interactions.\n      </p>\n      <p>\n        In order to propagate updates throughout the social graph, Activities\n        are sent to the appropriate recipients.\n        First, these recipients are determined through following the\n        appropriate links between objects until you reach an actor, and then\n        the Activity is inserted into the actor's <em>inbox</em>\n        (<a href=\"#delivery\">delivery</a>).\n        This allows recipient servers to:\n      </p>\n      <ul>\n        <li>\n          conduct any side effects related to the Activity (for example,\n          notification that an actor has liked an object is used to update the\n          object's like count);\n        </li>\n        <li>\n          deliver the Activity to recipients of the original object, to ensure\n          updates are propagated to the whole social graph (see <a href=\"#inbox-forwarding\">\n          inbox delivery</a>).\n        </li>\n      </ul>\n      <p>Delivery is usually triggered by, for example:</p>\n      <ul>\n        <li>\n          an Activity being created in an actor's <a href=\"#outbox\">outbox</a>\n          with their <a href=\"#followers\">Followers Collection</a> as the\n          recipient.\n        </li>\n        <li>\n          an Activity being created in an actor's <a href=\"#outbox\">outbox</a>\n          with directly addressed recipients.\n        </li>\n        <li>\n          an Activity being created in an actors's <a href=\"#outbox\">outbox</a>\n          with user-curated collections as recipients.\n        </li>\n        <li>\n          an Activity being created in an actor's <a href=\"#outbox\">outbox</a> or\n          <a href=\"#inbox\">inbox</a> which references another object.\n        </li>\n      </ul>\n\n      <p>\n        Servers performing delivery to the <code>inbox</code> or\n        <code>sharedInbox</code> properties of actors on other servers <em class=\"rfc2119\" title=\"MUST\">MUST</em>\n        provide the <code>object</code> property in the activity:\n        <code>Create</code>, <code>Update</code>, <code>Delete</code>,\n        <code>Follow</code>, <code>Add</code>, <code>Remove</code>,\n        <code>Like</code>, <code>Block</code>, <code>Undo</code>.\n        Additionally, servers performing server to server delivery of the\n        following activities <em class=\"rfc2119\" title=\"MUST\">MUST</em> also provide the <code>target</code>\n        property: <code>Add</code>, <code>Remove</code>.\n      </p>\n\n      <p>\n        HTTP caching mechanisms [<cite><a class=\"bibref\" href=\"#bib-RFC7234\">RFC7234</a></cite>] <em class=\"rfc2119\" title=\"SHOULD\">SHOULD</em> be respected when\n        appropriate, both when receiving responses from other servers as well\n        as sending responses to other servers.\n      </p>\n\n      <section id=\"delivery\">\n        <h3 id=\"x7-1-delivery\"><span class=\"secno\">7.1 </span>Delivery</h3>\n\n        <p><i>\n          The following is required by federated servers communicating with\n          other federated servers only.\n        </i></p>\n\n        <p>\n          An activity is delivered to its targets (which are\n          <a href=\"#actors\">actors</a>) by first looking up the targets'\n          inboxes and then posting the activity to those inboxes.\n          Targets for delivery are determined by checking the\n          <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#audienceTargeting\">\n            ActivityStreams audience targeting</a>;\n          namely, the <code>to</code>, <code>bto</code>, <code>cc</code>,\n          <code>bcc</code>, and <code>audience</code> fields of the activity.\n        </p>\n\n        <p>\n          The <a href=\"#inbox\">inbox</a> is determined by first\n          <a href=\"#retrieving-objects\">\n            retrieving the target actor's JSON-LD representation</a>\n          and then looking up the <code>inbox</code> property.\n          If a recipient is a <code>Collection</code> or <code>OrderedCollection</code>,\n          then the server <em class=\"rfc2119\" title=\"MUST\">MUST</em> dereference the collection (with the user's\n          credentials) and discover inboxes for each item in the collection.\n          Servers <em class=\"rfc2119\" title=\"MUST\">MUST</em> limit the number of layers of indirections through\n          collections which will be performed, which <em class=\"rfc2119\" title=\"MAY\">MAY</em> be one.\n        </p>\n\n        <p>\n          Servers <em class=\"rfc2119\" title=\"MUST\">MUST</em> de-duplicate the final recipient list. Servers <em class=\"rfc2119\" title=\"MUST\">MUST</em> also\n          exclude actors from the list which are the same as the <code>actor</code>\n          of the Activity being notified about. That is, actors shouldn't have their\n          own activities delivered to themselves.\n        </p>\n\n        <div class=\"note\"><div role=\"heading\" class=\"note-title marker\" id=\"h-note-8\" aria-level=\"4\"><span>Note</span><span style=\"text-transform: none\">: Silent and private activities</span></div><p class=\"\">\n          What to do when there are no recipients specified is not defined,\n          however it's recommended that if no recipients are specified the\n          object remains completely private and access controls restrict the\n          access to object.\n          If the object is just sent to the \"public\" collection the object is\n          not delivered to any actors but is publicly viewable in the actor's\n          outbox.\n        </p></div>\n\n        <p>\n          An HTTP POST request (with authorization of the submitting user) is\n          then made to the <a href=\"#inbox\">inbox</a>, with the Activity as\n          the body of the request.\n          This Activity is added by the receiver as an <code>item</code> in the\n          <a href=\"#inbox\">inbox</a> OrderedCollection.\n          Attempts to deliver to an inbox on a non-federated server <em class=\"rfc2119\" title=\"SHOULD\">SHOULD</em>\n          result in a <code>405 Method Not Allowed</code> response.\n        </p>\n\n        <p>\n          For federated servers performing delivery to a third party server,\n          delivery <em class=\"rfc2119\" title=\"SHOULD\">SHOULD</em> be performed asynchronously, and <em class=\"rfc2119\" title=\"SHOULD\">SHOULD</em> additionally\n          retry delivery to recipients if it fails due to network error.\n        </p>\n\n        <p>\n          <strong>Note:</strong> Activities being distributed between actors on\n          the same origin may use any internal mechanism, and are not required\n          to use HTTP.\n        </p>\n\n        <div class=\"note\"><div role=\"heading\" class=\"note-title marker\" id=\"h-note-9\" aria-level=\"4\"><span>Note</span><span style=\"text-transform: none\">: Relationship to Linked Data Notifications</span></div><p class=\"\" id=\"ldn-relationship\">\n          While it is not required reading to understand this specification,\n          it is worth noting that ActivityPub's targeting and delivery\n          mechanism overlaps with the\n          <a href=\"https://www.w3.org/TR/ldn/\">Linked Data Notifications</a>\n          specification, and the two specifications may interoperably\n          combined.\n          In particular, the <code>inbox</code> property is the same between\n          ActivityPub and Linked Data Notifications, and the targeting\n          and delivery systems described in this document are supported\n          by Linked Data Notifications.\n          In addition to JSON-LD compacted ActivityStreams documents, Linked\n          Data Notifications also supports a number of RDF serializations\n          which are not required for ActivityPub implementations.\n          However, ActivityPub implementations which wish to be more broadly\n          compatible with Linked Data Notifications implementations may wish to\n          support other RDF representations.\n        </p></div>\n\n        <section id=\"outbox-delivery\">\n          <h4 id=\"x7-1-1-outbox-delivery-requirements-for-server-to-server\"><span class=\"secno\">7.1.1 </span>Outbox Delivery Requirements for Server to Server</h4>\n          <p>\n            When objects are received in the <a href=\"#outbox\">outbox</a>\n            (for servers which support both\n            <a href=\"#client-to-server-interactions\">Client to Server interactions</a>\n            and\n            <a href=\"#server-to-server-interactions\">Server to Server Interactions</a>),\n            the server <em class=\"rfc2119\" title=\"MUST\">MUST</em> target and deliver to:\n          </p>\n          <ul>\n            <li>\n              The <code>to</code>, <code>bto</code>, <code>cc</code>,\n              <code>bcc</code> or <code>audience</code> fields if their values\n              are individuals or Collections owned by the actor.\n            </li>\n          </ul>\n          <p>\n            These fields will have been <a href=\"#client-addressing\">\n            populated appropriately by the client</a> which posted the Activity\n            to the outbox.\n          </p>\n        </section>\n\n        <section id=\"inbox-forwarding\">\n          <h4 id=\"x7-1-2-forwarding-from-inbox\"><span class=\"secno\">7.1.2 </span>Forwarding from Inbox</h4>\n\n          <div class=\"note\"><div role=\"heading\" class=\"note-title marker\" id=\"h-note-10\" aria-level=\"5\"><span>Note</span><span style=\"text-transform: none\">: Forwarding to avoid the ghost replies problem</span></div><div class=\"\">\n            <p>\n              The following section is to mitigate the \"ghost replies\" problem\n              which occasionally causes problems on federated networks.\n              This problem is best demonstrated with an example.\n            </p>\n\n            <p>\n              Alyssa makes a post about her having successfully presented a\n              paper at a conference and sends it to her followers collection,\n              which includes her friend Ben.\n              Ben replies to Alyssa's message congratulating her and includes\n              her followers collection on the recipients.\n              However, Ben has no access to see the members of Alyssa's\n              followers collection, so his server does not forward his messages\n              to their inbox.\n              Without the following mechanism, if Alyssa were then to reply to\n              Ben, her followers would see Alyssa replying to Ben without having\n              ever seen Ben interacting.\n              This would be very confusing!\n            </p>\n          </div></div>\n\n          <p>\n            When Activities are received in the <a href=\"#inbox\">inbox</a>, the\n            server needs to forward these to recipients that the origin was unable\n            to deliver them to. To do this, the server <em class=\"rfc2119\" title=\"MUST\">MUST</em> target and\n            <a href=\"#delivery\">deliver</a>\n            to the values of <code>to</code>, <code>cc</code>, and/or <code>audience</code>\n            if and only if all of the following are true:\n          </p>\n          <ul>\n            <li>This is the first time the server has seen this Activity.</li>\n            <li>\n              The values of <code>to</code>, <code>cc</code>, and/or\n              <code>audience</code> contain a Collection owned by the server.\n            </li>\n            <li>\n              The values of <code>inReplyTo</code>, <code>object</code>,\n              <code>target</code> and/or <code>tag</code> are objects owned by\n              the server.\n              The server <em class=\"rfc2119\" title=\"SHOULD\">SHOULD</em> recurse through these values to look for linked objects\n              owned by the server, and <em class=\"rfc2119\" title=\"SHOULD\">SHOULD</em> set a maximum limit for recursion (ie. the\n              point at which the thread is so deep the recipients followers may not mind\n              if they are no longer getting updates that don't directly involve the\n              recipient).\n              The server <em class=\"rfc2119\" title=\"MUST\">MUST</em> only target the values of <code>to</code>,\n              <code>cc</code>, and/or <code>audience</code>\n              on the original object being forwarded, and not pick up any new\n              addressees whilst recursing through the linked objects\n              (in case these addressees were purposefully amended by or via the client).\n            </li>\n          </ul>\n          <p>\n            The server <em class=\"rfc2119\" title=\"MAY\">MAY</em> filter its delivery targets according to\n            implementation-specific rules (for example, spam filtering).\n          </p>\n        </section>\n\n        <section id=\"shared-inbox-delivery\">\n          <h4 id=\"x7-1-3-shared-inbox-delivery\"><span class=\"secno\">7.1.3 </span>Shared Inbox Delivery</h4>\n          <p>\n            For servers hosting many actors, delivery to all followers can\n            result in an overwhelming number of messages sent.\n            Some servers would also like to display a list of all messages\n            posted publicly to the \"known network\".\n            Thus ActivityPub provides an optional mechanism for serving these\n            two use cases.\n          </p>\n          <p>\n            When an object is being delivered to the originating actor's\n            followers, a server <em class=\"rfc2119\" title=\"MAY\">MAY</em> reduce the number of receiving actors\n            delivered to by identifying all followers which share the same\n            <a href=\"#sharedInbox\">sharedInbox</a>\n            who would otherwise be individual recipients and instead deliver\n            objects to said <code>sharedInbox</code>.\n            Thus in this scenario, the remote/receiving server participates\n            in determining targeting and performing delivery to specific\n            inboxes.\n          </p>\n          <p>\n            Additionally, if an object is addressed to the\n            <a href=\"#public-addressing\">Public</a> special collection, a\n            server <em class=\"rfc2119\" title=\"MAY\">MAY</em> deliver that object to all known\n            <code>sharedInbox</code> endpoints on the network.\n          </p>\n          <p>\n            Origin servers sending publicly addressed activities to\n            <code>sharedInbox</code> endpoints <em class=\"rfc2119\" title=\"MUST\">MUST</em> still deliver to actors\n            and collections otherwise addressed (through <code>to</code>,\n            <code>bto</code>, <code>cc</code>, <code>bcc</code>, and\n            <code>audience</code>) which do not have a <code>sharedInbox</code>\n            and would not otherwise receive the activity through the\n            <code>sharedInbox</code> mechanism.\n          </p>\n        </section>\n      </section>\n\n      <section id=\"create-activity-inbox\">\n        <h3 id=\"x7-2-create-activity\"><span class=\"secno\">7.2 </span>Create Activity</h3>\n        <p>\n          Receiving a <code>Create</code> activity in an <code>inbox</code> has\n          surprisingly few side effects; the activity should appear in the\n          actor's <code>inbox</code> and it is likely that the server will want\n          to locally store a representation of this activity and its accompanying\n          object.\n          However, this mostly happens in general with processing activities\n          delivered to an <code>inbox</code> anyway.\n        </p>\n      </section>\n\n      <section id=\"update-activity-inbox\">\n        <h3 id=\"x7-3-update-activity\"><span class=\"secno\">7.3 </span>Update Activity</h3>\n        <p>\n          For server to server interactions, an <code>Update</code> activity\n          means that the receiving server <em class=\"rfc2119\" title=\"SHOULD\">SHOULD</em> update its copy of the\n          <code>object</code> of the same <code>id</code> to the copy\n          supplied in the <code>Update</code> activity.\n          Unlike the\n          <a href=\"#update-activity-outbox\">\n            client to server handling of the Update activity</a>,\n          this is not a partial update but a complete replacement of the object.\n        </p>\n        <p>\n          The receiving server <em class=\"rfc2119\" title=\"MUST\">MUST</em> take care to be sure that the\n          <code>Update</code> is authorized to modify its <code>object</code>.\n          At minimum, this may be done by ensuring that the <code>Update</code>\n          and its <code>object</code> are of same origin.\n        </p>\n      </section>\n\n      <section id=\"delete-activity-inbox\">\n        <h3 id=\"x7-4-delete-activity\"><span class=\"secno\">7.4 </span>Delete Activity</h3>\n        <p>\n          The side effect of receiving this is that (assuming the\n          <code>object</code> is owned by the sending actor / server) the\n          server receiving the delete activity <em class=\"rfc2119\" title=\"SHOULD\">SHOULD</em> remove its representation\n          of the <code>object</code> with the same <code>id</code>, and <em class=\"rfc2119\" title=\"MAY\">MAY</em>\n          replace that representation with a <code>Tombstone</code> object.\n        </p>\n        <p>\n          (Note that after an activity has been transmitted from an origin\n          server to a remote server, there is nothing in the ActivityPub\n          protocol that can <em>enforce</em> remote deletion of an object's\n          representation).\n        </p>\n      </section>\n\n      <section id=\"follow-activity-inbox\">\n        <h3 id=\"x7-5-follow-activity\"><span class=\"secno\">7.5 </span>Follow Activity</h3>\n\n        <p>\n          The side effect of receiving this in an <strong>inbox</strong> is\n          that the server <em class=\"rfc2119\" title=\"SHOULD\">SHOULD</em> generate either an <code>Accept</code> or\n          <code>Reject</code> activity with the Follow as the\n          <code>object</code> and deliver it to the <code>actor</code> of the\n          Follow.\n          The <code>Accept</code> or <code>Reject</code> <em class=\"rfc2119\" title=\"MAY\">MAY</em> be generated\n          automatically, or <em class=\"rfc2119\" title=\"MAY\">MAY</em> be the result of user input (possibly after\n          some delay in which the user reviews).\n          Servers <em class=\"rfc2119\" title=\"MAY\">MAY</em> choose to not explicitly send a <code>Reject</code>\n          in response to a <code>Follow</code>, though implementors ought to\n          be aware that the server sending the request could be left in an\n          intermediate state.\n          For example, a server might not send a <code>Reject</code> to protect\n          a user's privacy.\n        </p>\n\n        <p>\n          In the case of receiving an <code>Accept</code> referencing this\n          <code>Follow</code> as the object, the server <em class=\"rfc2119\" title=\"SHOULD\">SHOULD</em> add the\n          <code>actor</code> to the object actor's\n          <a href=\"#followers\">Followers Collection</a>.\n          In the case of a <code>Reject</code>, the server <em class=\"rfc2119\" title=\"MUST NOT\">MUST NOT</em> add the\n          actor to the object actor's\n          <a href=\"#followers\">Followers Collection</a>.\n        </p>\n\n        <div class=\"note\"><div role=\"heading\" class=\"note-title marker\" id=\"h-note-11\" aria-level=\"4\"><span>Note</span></div><div class=\"\">\n          <p>\n            Sometimes a successful <code>Follow</code> subscription may\n            occur but at some future point delivery to the follower fails\n            for an extended period of time.\n            Implementations should be aware that there is no guarantee\n            that actors on the network will remain reachable and should\n            implement accordingly.\n            For instance, if attempting to deliver to an actor for perhaps\n            six months while the follower remains unreachable, it is\n            reasonable that the delivering server remove the subscriber\n            from the <code>followers</code> list.\n            Timeframes and behavior for dealing with unreachable actors are\n            left to the discretion of the delivering server.\n          </p>\n        </div></div>\n        \n      </section>\n\n      <section id=\"accept-activity-inbox\">\n        <h3 id=\"x7-6-accept-activity\"><span class=\"secno\">7.6 </span>Accept Activity</h3>\n        <p>\n          The side effect of receiving this in an <strong>inbox</strong> is\n          determined by the type of the <code>object</code> received,\n          and it is possible to accept types not described in this document\n          (for example, an <code>Offer</code>).\n        </p>\n\n        <p>\n          If the <code>object</code> of an <code>Accept</code> received to an\n          <strong>inbox</strong> is a <code>Follow</code> activity\n          previously sent by the receiver, the server <em class=\"rfc2119\" title=\"SHOULD\">SHOULD</em> add the\n          <code>actor</code> to the receiver's\n          <a href=\"#following\">Following Collection</a>.\n        </p>\n      </section>\n      \n      <section id=\"reject-activity-inbox\">\n        <h3 id=\"x7-7-reject-activity\"><span class=\"secno\">7.7 </span>Reject Activity</h3>\n        <p>\n          The side effect of receiving this in an <strong>inbox</strong> is\n          determined by the type of the <code>object</code> received,\n          and it is possible to reject types not described in this document\n          (for example, an <code>Offer</code>).\n        </p>\n\n        <p>\n          If the <code>object</code> of a <code>Reject</code> received to an\n          <strong>inbox</strong> is a <code>Follow</code> activity\n          previously sent by the receiver, this means the recipient did not\n          approve the <code>Follow</code> request. The server <em class=\"rfc2119\" title=\"MUST NOT\">MUST NOT</em> add the\n          <code>actor</code> to the receiver's\n          <a href=\"#following\">Following Collection</a>.\n        </p>\n      </section>\n\n      <section id=\"add-activity-inbox\">\n        <h3 id=\"x7-8-add-activity\"><span class=\"secno\">7.8 </span>Add Activity</h3>\n        <p>\n          Upon receipt of an <code>Add</code> activity into the\n          <strong>inbox</strong>, the server <em class=\"rfc2119\" title=\"SHOULD\">SHOULD</em>\n          add the <code>object</code> to the collection specified in the\n          <code>target</code> property, unless:\n        </p>\n        <ul>\n          <li>\n            the <code>target</code> is not owned by the receiving server, and\n            thus they can't update it.\n          </li>\n          <li>\n            the <code>object</code> is not allowed to be added to the\n            <code>target</code> collection for some other reason, at the\n            receiver's discretion.\n          </li>\n        </ul>\n      </section>\n      <section id=\"remove-activity-inbox\">\n        <h3 id=\"x7-9-remove-activity\"><span class=\"secno\">7.9 </span>Remove Activity</h3>\n        <p>\n          Upon receipt of a <code>Remove</code> activity into the\n          <strong>inbox</strong>, the server <em class=\"rfc2119\" title=\"SHOULD\">SHOULD</em>\n          remove the <code>object</code> from the collection specified in the\n          <code>target</code> property, unless:\n        </p><ul>\n          <li>\n            the <code>target</code> is not owned by the receiving server, and\n            thus they can't update it.\n          </li>\n          <li>\n            the <code>object</code> is not allowed to be removed to the\n            <code>target</code> collection for some other reason, at the\n            receiver's discretion.\n          </li>\n        </ul>\n      </section>\n      <section id=\"like-activity-inbox\">\n        <h3 id=\"x7-10-like-activity\"><span class=\"secno\">7.10 </span>Like Activity</h3>\n        <p>\n          The side effect of receiving this in an <strong>inbox</strong> is\n          that the server <em class=\"rfc2119\" title=\"SHOULD\">SHOULD</em> increment the object's count of likes by\n          adding the received activity to the\n          <a href=\"#likes\"><code>likes</code></a> collection\n          if this collection is present.\n        </p>\n      </section>\n      <section id=\"announce-activity-inbox\">\n        <h3 id=\"x7-11-announce-activity-sharing\"><span class=\"secno\">7.11 </span>Announce Activity (sharing)</h3>\n        <p>\n          Upon receipt of an <code>Announce</code> activity in an\n          <strong>inbox</strong>, a server <em class=\"rfc2119\" title=\"SHOULD\">SHOULD</em> increment the object's count\n          of shares by adding the received activity to the\n          <a href=\"#shares\"><code>shares</code></a> collection\n          if this collection is present.\n        </p>\n        <div class=\"note\"><div role=\"heading\" class=\"note-title marker\" id=\"h-note-12\" aria-level=\"4\"><span>Note</span></div><div class=\"\">\n          The <code>Announce</code> activity is effectively what is known as\n          \"sharing\", \"reposting\", or \"boosting\" in other social networks.\n        </div></div>\n      </section>\n      <section id=\"undo-activity-inbox\">\n        <h3 id=\"x7-12-undo-activity\"><span class=\"secno\">7.12 </span>Undo Activity</h3>\n        <p>\n          The <code>Undo</code> activity is used to undo the side effects\n          of previous activities.\n          See the ActivityStreams documentation on\n          <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#inverse\">\n            Inverse Activities and \"Undo\"</a>.\n          The scope and restrictions of the <code>Undo</code> activity\n          are the same as for\n          <a href=\"#undo-activity-outbox\">\n            the Undo activity in the context of client to server\n            interactions</a>,\n          but applied to a federated context.\n        </p>\n      </section>\n    </section>\n\n    <section id=\"i18n-concerns\" class=\"appendix informative\">\n      <!--OddPage--><h2 id=\"a-internationalization\"><span class=\"secno\">A. </span>Internationalization</h2><p><em>This section is non-normative.</em></p>\n      <p>\n        Building an international base of users is important in a federated\n        network.\n        <a href=\"https://www.w3.org/TR/activitystreams-core/#naturalLanguageValues\">\n          ActivityStreams provides tooling for internationalization of content</a>,\n        which should be used whenever possible.\n        However, it can be difficult for implementations to determine which\n        <a href=\"https://www.w3.org/TR/activitystreams-core/#defaultlangcontext\">\n          <code>@language</code> property</a>\n        to provide for user-submitted content.\n        The\n        <a href=\"https://www.w3.org/International/\"><abbr title=\"World Wide Web Consortium\">W3C</abbr> Internationalization group</a>\n        provides some\n        <a href=\"https://www.w3.org/International/wiki/LanguageDetection\">\n          guidance on language detection</a>.\n      </p>\n    </section>\n\n    <section id=\"security-considerations\" class=\"appendix informative\">\n      <!--OddPage--><h2 id=\"b-security-considerations\"><span class=\"secno\">B. </span>Security Considerations</h2><p><em>This section is non-normative.</em></p>\n      \n      <section id=\"authorization\">\n        <h3 id=\"b-1-authentication-and-authorization\"><span class=\"secno\">B.1 </span>Authentication and Authorization</h3>\n        <p>\n          ActivityPub uses authentication for two purposes; first, to\n          authenticate clients to servers, and secondly in federated\n          implementations to authenticate servers to each other.\n        </p>\n\n        <p>\n          Unfortunately at the time of standardization, there are no strongly\n          agreed upon mechanisms for authentication.\n          Some possible directions for authentication are laid out \n          <a href=\"https://www.w3.org/wiki/SocialCG/ActivityPub/Authentication_Authorization\">in \n          the Social Web Community Group Authentication and \n          Authorization best practices report</a>.\n        </p>\n\n      </section>\n\n      <section id=\"security-verification\">\n        <h3 id=\"b-2-verification\"><span class=\"secno\">B.2 </span>Verification</h3>\n        <p>\n          Servers should not trust client submitted content, and\n          federated servers also should not trust content received from a server\n          other than the content's origin without some form of verification.\n        </p>\n        <p>\n          Servers should be careful to verify that new content is really posted\n          by the actor that claims to be posting it, and that the actor has\n          permission to update the resources it claims to.\n          See also\n          <a href=\"#obj\" class=\"sec-ref\"><span class=\"secno\">3.</span> <span class=\"sec-title\">Objects</span></a> and <a href=\"#authorization\" class=\"sec-ref\"><span class=\"secno\">B.1</span> <span class=\"sec-title\">Authentication and Authorization</span></a>.\n        </p>\n      </section>\n\n      <section id=\"security-localhost\">\n        <h3 id=\"b-3-accessing-localhost-uris\"><span class=\"secno\">B.3 </span>Accessing localhost URIs</h3>\n        <p>\n          It is often convenient while developing to test against a process\n          running on localhost.\n          However, permitting requests to localhost in a production client or\n          server instance can be dangerous.\n          Making requests to URIs on localhost which do not require\n          authorization may unintentionally access or modify resources assumed\n          to be protected to be usable by localhost-only.\n        </p>\n        <p>\n          If your ActivityPub server or client does permit making requests to\n          localhost URIs for development purposes, consider making it a\n          configuration option which defaults to off.\n        </p>\n      </section>\n\n      <section id=\"security-uri-schemes\">\n        <h3 id=\"b-4-uri-schemes\"><span class=\"secno\">B.4 </span>URI Schemes</h3>\n        <p>\n          There are many types of URIs aside from just <code>http</code> and\n          <code>https</code>.\n          Some libraries which handle fetching requests at various URI schemes\n          may try to be smart and reference schemes which may be undesirable,\n          such as <code>file</code>.\n          Client and server authors should carefully check how their libraries\n          handle requests, and potentially whitelist only certain safe URI\n          types, such as <code>http</code> and <code>https</code>.\n        </p>\n      </section>\n\n      <section id=\"security-recursive-objects\">\n        <h3 id=\"b-5-recursive-objects\"><span class=\"secno\">B.5 </span>Recursive Objects</h3>\n        <p>\n          Servers should set a limit on how deep to recurse while resolving objects,\n          or otherwise specially handle ActivityStreams objects with recursive\n          references.\n\t  Failure to properly do so may result in denial-of-service security\n\t  vulnerabilities.\n        </p>\n      </section>\n\n      <section id=\"security-spam\">\n        <h3 id=\"b-6-spam\"><span class=\"secno\">B.6 </span>Spam</h3>\n        <p>\n          Spam is a problem in any network, perhaps especially so in federated\n          networks.\n          While no specific mechanism for combating spam is provided in\n          ActivityPub, it is recommended that servers filter incoming content\n          both by local untrusted users and any remote users through some\n          sort of spam filter.\n        </p>\n      </section>\n\n      <section id=\"security-federation-dos\">\n        <h3 id=\"b-7-federation-denial-of-service\"><span class=\"secno\">B.7 </span>Federation denial-of-service</h3>\n          <p>\n            Servers should implement protections against denial-of-service\n            attacks from other, federated servers.\n            This can be done using, for example, some kind of ratelimiting\n            mechanism.\n            Servers should be especially careful to implement this protection\n            around activities that involve side effects.\n            Servers <em class=\"rfc2119\" title=\"SHOULD\">SHOULD</em> also take care not to overload servers with\n            submissions, for example by using an exponential backoff strategy.\n          </p>\n      </section>\n\n      <section id=\"security-c2s-ratelimiting\">\n        <h3 id=\"b-8-client-to-server-ratelimiting\"><span class=\"secno\">B.8 </span>Client-to-server ratelimiting</h3>\n          <p>\n            Servers should ratelimit API client submissions.\n            This serves two purposes:\n            </p><ol>\n              <li>\n                It prevents malicious clients from conducting\n                denial-of-service attacks on the server.\n              </li>\n              <li>\n                It ensures that the server will not distribute so many\n                activities that it triggers another\n                server's <a href=\"#security-federation-dos\">denial-of-service\n                protections</a>.\n              </li>\n            </ol>\n          <p></p>\n      </section>\n\n      <section id=\"security-c2s-response-dos\">\n        <h3 id=\"b-9-client-to-server-response-denial-of-service\"><span class=\"secno\">B.9 </span>Client-to-server response denial-of-service</h3>\n        <p>\n          In order to prevent a client from being overloaded by oversized\n          Collections, servers should take care to limit the size of Collection \n          pages they return to clients.\n          Clients should still be prepared to limit the size of\n          responses they are willing to handle in case they connect to malicious or\n          compromised servers, for example by timing out and generating\n          an error.\n        </p>\n      </section>\n\n      <section id=\"security-sanitizing-content\">\n        <h3 id=\"b-10-sanitizing-content\"><span class=\"secno\">B.10 </span>Sanitizing Content</h3>\n        <p>\n          Any activity field being rendered for browsers (or other rich\n          text enabled applications) should take care to sanitize fields\n          containing markup to prevent cross site scripting attacks.\n        </p>\n      </section>\n\n      <section id=\"security-not-displaying-bto-bcc\">\n        <h3 id=\"b-11-not-displaying-bto-and-bcc-properties\"><span class=\"secno\">B.11 </span>Not displaying bto and bcc properties</h3>\n        <p>\n          <code>bto</code> and <code>bcc</code> already\n          <a href=\"#remove-bto-bcc-before-delivery\">must be removed for delivery</a>,\n          but servers are free to decide how to represent the object\n          in their own storage systems.\n          However, since <code>bto</code> and <code>bcc</code> are only intended\n          to be known/seen by the original author of the object/activity,\n          servers should omit these properties during display as well.\n        </p>\n      </section>\n    </section>\n\n    <section class=\"appendix informative\" id=\"acknowledgements\">\n      <!--OddPage--><h2 id=\"c-acknowledgements\"><span class=\"secno\">C. </span>Acknowledgements</h2><p><em>This section is non-normative.</em></p>\n      <p>\n        This specification comes from years of hard work and experience by a\n        number of communities exploring the space of federation on the web.\n        In particular, much of this specification is informed by\n        <a href=\"https://www.w3.org/community/ostatus/wiki/Main_Page\">OStatus</a>\n        and the\n        <a href=\"https://github.com/pump-io/pump.io/blob/master/API.md\">Pump API</a>,\n        as pioneered by StatusNet (now GNU Social) and Pump.io.\n        Both of those initiatives were the product of many developers' hard work,\n        but more than anyone, Evan Prodromou has been a constant leader in this\n        space, and it is unlikely that ActivityPub would exist in something\n        resembling its current state without his hard work.\n      </p>\n\n      <p>\n        Erin Shepherd built the initial version of this specification, borrowed\n        from the ideas in the\n        <a href=\"https://github.com/pump-io/pump.io/blob/master/API.md\">Pump API</a>\n        document, mostly as a complete rewrite of text, but sharing most of\n        the primary ideas while switching from ActivityStreams 1 to\n        ActivityStreams 2.\n      </p>\n\n      <p>\n        Jessica Tallon and Christine Lemmer-Webber took over as editors when\n        the standard moved to the <abbr title=\"World Wide Web Consortium\">W3C</abbr> Social Working Group and did the majority\n        of transition from Erin Shepherd's document to its current state as\n        ActivityPub.\n        Much of the document was rewritten and reorganized under the long feedback\n        process of the Social Working Group.\n      </p>\n\n      <p>\n        ActivityPub has been shaped by the careful input of many members in the\n        <abbr title=\"World Wide Web Consortium\">W3C</abbr> Social Working Group.\n        ActivityPub especially owes a great debt to Amy Guy, who has done more\n        than anyone to map the ideas across the different Social Working Group\n        documents through her work on [<cite><a class=\"bibref\" href=\"#bib-Social-Web-Protocols\">Social-Web-Protocols</a></cite>].\n        Amy also laid out the foundations for a significant refactoring of the\n        ActivityPub spec while sprinting for four days with Christopher Allan\n        Webber.\n        These revisions lead to cleaner separation between the client to server\n        and server components, along with clarity about ActivityPub's relationship\n        to [<cite><a class=\"bibref\" href=\"#bib-LDN\">LDN</a></cite>], among many other improvements.\n        Special thanks also goes to Benjamin Goering for putting together the\n        implementation report template.\n        We also thank mray for producing the spectacular tutorial illustrations\n        (which are licensed under the same license as the rest of this\n        document).\n      </p>\n\n      <p>\n        Many people also helped ActivityPub along through careful review.\n        In particular, thanks to:\n        Aaron Parecki,\n        AJ Jordan,\n        Benjamin Goering,\n        Caleb Langeslag,\n        Elsa Balderrama,\n        elf Pavlik,\n        Eugen Rochko,\n        Erik Wilde,\n        Jason Robinson,\n        Manu Sporny,\n        Michael Vogel,\n        Mike Macgirvin,\n        nightpool,\n        Puck Meerburg,\n        Sandro Hawke,\n        Sarven Capadisli,\n        Tantek Çelik, and\n        Yuri Volkov.\n      </p>\n\n      <p>\n        This document is dedicated to all citizens of planet Earth.\n        You deserve freedom of communication; we hope we have contributed in\n        some part, however small, towards that goal and right.\n      </p>\n    </section>\n  \n\n<section id=\"references\" class=\"appendix\"><!--OddPage--><h2 id=\"d-references\"><span class=\"secno\">D. </span>References</h2><section id=\"normative-references\"><h3 id=\"d-1-normative-references\"><span class=\"secno\">D.1 </span>Normative references</h3><dl class=\"bibliography\"><dt id=\"bib-Activity-Vocabulary\">[Activity-Vocabulary]</dt><dd><a href=\"https://www.w3.org/TR/activitystreams-vocabulary/\"><cite>Activity Vocabulary</cite></a>. J. Snell. ActivityStreams Working Group. Editors Draft. URL: <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/\">https://www.w3.org/TR/activitystreams-vocabulary/</a>\n</dd><dt id=\"bib-ActivityStreams\">[ActivityStreams]</dt><dd><a href=\"https://www.w3.org/TR/activitystreams-core/\"><cite>Activity Streams 2.0</cite></a>. J. Snell. ActivityStreams Working Group. Editors Draft. URL: <a href=\"https://www.w3.org/TR/activitystreams-core/\">https://www.w3.org/TR/activitystreams-core/</a>\n</dd><dt id=\"bib-JSON-LD\">[JSON-LD]</dt><dd><a href=\"https://www.w3.org/TR/json-ld/\"><cite>JSON-LD 1.0</cite></a>. Manu Sporny; Gregg Kellogg; Markus Lanthaler. W3C. 16 January 2014. W3C Recommendation. URL: <a href=\"https://www.w3.org/TR/json-ld/\">https://www.w3.org/TR/json-ld/</a>\n</dd><dt id=\"bib-LDN\">[LDN]</dt><dd><a href=\"https://www.w3.org/TR/ldn/\"><cite>Linked Data Notifications</cite></a>. Sarven Capadisli; Amy Guy. W3C. 2 May 2017. W3C Recommendation. URL: <a href=\"https://www.w3.org/TR/ldn/\">https://www.w3.org/TR/ldn/</a>\n</dd><dt id=\"bib-RFC2119\">[RFC2119]</dt><dd><a href=\"https://tools.ietf.org/html/rfc2119\"><cite>Key words for use in RFCs to Indicate Requirement Levels</cite></a>. S. Bradner. IETF. March 1997. Best Current Practice. URL: <a href=\"https://tools.ietf.org/html/rfc2119\">https://tools.ietf.org/html/rfc2119</a>\n</dd><dt id=\"bib-RFC7231\">[RFC7231]</dt><dd><a href=\"https://tools.ietf.org/html/rfc7231\"><cite>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</cite></a>. R. Fielding, Ed.; J. Reschke, Ed.. IETF. June 2014. Proposed Standard. URL: <a href=\"https://tools.ietf.org/html/rfc7231\">https://tools.ietf.org/html/rfc7231</a>\n</dd><dt id=\"bib-RFC7234\">[RFC7234]</dt><dd><a href=\"https://tools.ietf.org/html/rfc7234\"><cite>Hypertext Transfer Protocol (HTTP/1.1): Caching</cite></a>. R. Fielding, Ed.; M. Nottingham, Ed.; J. Reschke, Ed.. IETF. June 2014. Proposed Standard. URL: <a href=\"https://tools.ietf.org/html/rfc7234\">https://tools.ietf.org/html/rfc7234</a>\n</dd></dl></section><section id=\"informative-references\"><h3 id=\"d-2-informative-references\"><span class=\"secno\">D.2 </span>Informative references</h3><dl class=\"bibliography\"><dt id=\"bib-Micropub\">[Micropub]</dt><dd><a href=\"https://www.w3.org/TR/micropub/\"><cite>Micropub</cite></a>. Aaron Parecki. W3C. 23 May 2017. W3C Recommendation. URL: <a href=\"https://www.w3.org/TR/micropub/\">https://www.w3.org/TR/micropub/</a>\n</dd><dt id=\"bib-RFC6749\">[RFC6749]</dt><dd><a href=\"https://tools.ietf.org/html/rfc6749\"><cite>The OAuth 2.0 Authorization Framework</cite></a>. D. Hardt, Ed.. IETF. October 2012. Proposed Standard. URL: <a href=\"https://tools.ietf.org/html/rfc6749\">https://tools.ietf.org/html/rfc6749</a>\n</dd><dt id=\"bib-RFC6750\">[RFC6750]</dt><dd><a href=\"https://tools.ietf.org/html/rfc6750\"><cite>The OAuth 2.0 Authorization Framework: Bearer Token Usage</cite></a>. M. Jones; D. Hardt. IETF. October 2012. Proposed Standard. URL: <a href=\"https://tools.ietf.org/html/rfc6750\">https://tools.ietf.org/html/rfc6750</a>\n</dd><dt id=\"bib-Social-Web-Protocols\">[Social-Web-Protocols]</dt><dd><a href=\"https://www.w3.org/TR/social-web-protocols/\"><cite>Social Web Protocols</cite></a>. Amy Guy. W3C. 25 December 2017. W3C Note. URL: <a href=\"https://www.w3.org/TR/social-web-protocols/\">https://www.w3.org/TR/social-web-protocols/</a>\n</dd></dl></section></section><p role=\"navigation\" id=\"back-to-top\"><a href=\"#toc\"><abbr title=\"Back to Top\">↑</abbr></a></p><script src=\"https://www.w3.org/scripts/TR/2016/fixup.js\"></script></body></html>\n","oembed":false,"readabilityObject":{"title":"ActivityPub","content":"<div id=\"readability-page-1\" class=\"page\">\n    <section id=\"abstract\"><h2 id=\"abstract-0\">Abstract</h2>\n      <p>\n        The ActivityPub protocol is a decentralized social networking protocol\n        based upon the [<cite><a href=\"#bib-ActivityStreams\">ActivityStreams</a></cite>] 2.0 data format.\n        It provides a client to server API for creating, updating and deleting\n        content, as well as a federated server to server API for delivering\n        notifications and content.\n      </p>\n    </section>\n\n    <section id=\"sotd\"><h2 id=\"status-of-this-document\">Status of This Document</h2>\n      <p>\n        <em>This section describes the status of this document at the time of its publication. Other documents may supersede this document. A list of current <abbr title=\"World Wide Web Consortium\">W3C</abbr> publications and the latest revision of this technical report can be found in the <a href=\"https://www.w3.org/TR/\"><abbr title=\"World Wide Web Consortium\">W3C</abbr> technical reports index</a> at https://www.w3.org/TR/.</em>\n      </p>\n        \n    \n        <p>\n          This document was published by the <a href=\"https://www.w3.org/Social/WG\">Social Web Working Group</a> as a Recommendation.\n        </p>\n        <p>\n          All interested parties are invited to provide implementation and bug\n          reports and other comments through the Working Group's\n          <a href=\"https://github.com/w3c/activitypub/issues\">Issue tracker</a>.\n          These will be discussed by the\n          <a href=\"http://www.w3.org/wiki/SocialCG\">Social Web Community Group</a>\n          and considered in any future versions of this specification.\n        </p>\n          <p>\n            Please see the Working Group's  <a href=\"https://activitypub.rocks/implementation-report\">implementation\n            report</a>.\n          </p>\n          <p>\n            This document has been reviewed by <abbr title=\"World Wide Web Consortium\">W3C</abbr> Members, by software developers, and by other <abbr title=\"World Wide Web Consortium\">W3C</abbr>\n            groups and interested parties, and is endorsed by the Director as a <abbr title=\"World Wide Web Consortium\">W3C</abbr> Recommendation.\n            It is a stable document and may be used as reference material or cited from another\n            document. <abbr title=\"World Wide Web Consortium\">W3C</abbr>'s role in making the Recommendation is to draw attention to the\n            specification and to promote its widespread deployment. This enhances the functionality\n            and interoperability of the Web.\n          </p>\n        <p>\n            This document was produced by\n            a group\n             operating under the\n            <a href=\"https://www.w3.org/Consortium/Patent-Policy/\"><abbr title=\"World Wide Web Consortium\">W3C</abbr> Patent Policy</a>.\n              <abbr title=\"World Wide Web Consortium\">W3C</abbr> maintains a <a href=\"https://www.w3.org/2004/01/pp-impl/72531/status\" rel=\"disclosure\">public list of any patent\n              disclosures</a>\n            made in connection with the deliverables of\n            the group; that page also includes\n            instructions for disclosing a patent. An individual who has actual knowledge of a patent\n            which the individual believes contains\n            <a href=\"https://www.w3.org/Consortium/Patent-Policy/#def-essential\">Essential\n            Claim(s)</a> must disclose the information in accordance with\n            <a href=\"https://www.w3.org/Consortium/Patent-Policy/#sec-Disclosure\">section\n            6 of the <abbr title=\"World Wide Web Consortium\">W3C</abbr> Patent Policy</a>.\n        </p>\n          <p>This document is governed by the <a id=\"w3c_process_revision\" href=\"https://www.w3.org/2017/Process-20170301/\">1 March 2017 <abbr title=\"World Wide Web Consortium\">W3C</abbr> Process Document</a>.\n          </p>\n        \n\n</section><nav id=\"toc\"><h2 id=\"table-of-contents\">Table of Contents</h2><ol><li><a href=\"#Overview\"><span>1. </span>Overview</a><ol><li><a href=\"#social-web-working-group\"><span>1.1 </span>Social Web Working Group</a></li></ol></li><li><a href=\"#conformance\"><span>2. </span>Conformance</a><ol><li><a href=\"#specification-profiles\"><span>2.1 </span>Specification Profiles</a></li></ol></li><li><a href=\"#obj\"><span>3. </span>Objects</a><ol><li><a href=\"#obj-id\"><span>3.1 </span>Object Identifiers</a></li><li><a href=\"#retrieving-objects\"><span>3.2 </span>Retrieving objects</a></li><li><a href=\"#source-property\"><span>3.3 </span>The source property</a></li></ol></li><li><a href=\"#actors\"><span>4. </span>Actors</a><ol><li><a href=\"#actor-objects\"><span>4.1 </span><i>Actor</i> objects</a></li></ol></li><li><a href=\"#collections\"><span>5. </span>Collections</a><ol><li><a href=\"#outbox\"><span>5.1 </span>Outbox</a></li><li><a href=\"#inbox\"><span>5.2 </span>Inbox</a></li><li><a href=\"#followers\"><span>5.3 </span>Followers Collection</a></li><li><a href=\"#following\"><span>5.4 </span>Following Collection</a></li><li><a href=\"#liked\"><span>5.5 </span>Liked Collection</a></li><li><a href=\"#public-addressing\"><span>5.6 </span>Public Addressing</a></li><li><a href=\"#likes\"><span>5.7 </span>Likes Collection</a></li><li><a href=\"#shares\"><span>5.8 </span>Shares Collection</a></li></ol></li><li><a href=\"#client-to-server-interactions\"><span>6. </span>Client to Server Interactions</a><ol><li><a href=\"#client-addressing\"><span>6.1 </span>Client Addressing</a></li><li><a href=\"#create-activity-outbox\"><span>6.2 </span>Create Activity</a><ol><li><a href=\"#object-without-create\"><span>6.2.1 </span>Object creation without a Create Activity</a></li></ol></li><li><a href=\"#update-activity-outbox\"><span>6.3 </span>Update Activity</a><ol><li><a href=\"#partial-updates\"><span>6.3.1 </span>Partial Updates</a></li></ol></li><li><a href=\"#delete-activity-outbox\"><span>6.4 </span>Delete Activity</a></li><li><a href=\"#follow-activity-outbox\"><span>6.5 </span>Follow Activity</a></li><li><a href=\"#add-activity-outbox\"><span>6.6 </span>Add Activity</a></li><li><a href=\"#remove-activity-outbox\"><span>6.7 </span>Remove Activity</a></li><li><a href=\"#like-activity-outbox\"><span>6.8 </span>Like Activity</a></li><li><a href=\"#block-activity-outbox\"><span>6.9 </span>Block Activity</a></li><li><a href=\"#undo-activity-outbox\"><span>6.10 </span>Undo Activity</a></li><li><a href=\"#client-to-server-outbox-delivery\"><span>6.11 </span>Delivery</a></li><li><a href=\"#uploading-media\"><span>6.12 </span>Uploading Media</a></li></ol></li><li><a href=\"#server-to-server-interactions\"><span>7. </span>Server to Server Interactions</a><ol><li><a href=\"#delivery\"><span>7.1 </span>Delivery</a><ol><li><a href=\"#outbox-delivery\"><span>7.1.1 </span>Outbox Delivery Requirements for Server to Server</a></li><li><a href=\"#inbox-forwarding\"><span>7.1.2 </span>Forwarding from Inbox</a></li><li><a href=\"#shared-inbox-delivery\"><span>7.1.3 </span>Shared Inbox Delivery</a></li></ol></li><li><a href=\"#create-activity-inbox\"><span>7.2 </span>Create Activity</a></li><li><a href=\"#update-activity-inbox\"><span>7.3 </span>Update Activity</a></li><li><a href=\"#delete-activity-inbox\"><span>7.4 </span>Delete Activity</a></li><li><a href=\"#follow-activity-inbox\"><span>7.5 </span>Follow Activity</a></li><li><a href=\"#accept-activity-inbox\"><span>7.6 </span>Accept Activity</a></li><li><a href=\"#reject-activity-inbox\"><span>7.7 </span>Reject Activity</a></li><li><a href=\"#add-activity-inbox\"><span>7.8 </span>Add Activity</a></li><li><a href=\"#remove-activity-inbox\"><span>7.9 </span>Remove Activity</a></li><li><a href=\"#like-activity-inbox\"><span>7.10 </span>Like Activity</a></li><li><a href=\"#announce-activity-inbox\"><span>7.11 </span>Announce Activity (sharing)</a></li><li><a href=\"#undo-activity-inbox\"><span>7.12 </span>Undo Activity</a></li></ol></li><li><a href=\"#i18n-concerns\"><span>A. </span>Internationalization</a></li><li><a href=\"#security-considerations\"><span>B. </span>Security Considerations</a><ol><li><a href=\"#authorization\"><span>B.1 </span>Authentication and Authorization</a></li><li><a href=\"#security-verification\"><span>B.2 </span>Verification</a></li><li><a href=\"#security-localhost\"><span>B.3 </span>Accessing localhost URIs</a></li><li><a href=\"#security-uri-schemes\"><span>B.4 </span>URI Schemes</a></li><li><a href=\"#security-recursive-objects\"><span>B.5 </span>Recursive Objects</a></li><li><a href=\"#security-spam\"><span>B.6 </span>Spam</a></li><li><a href=\"#security-federation-dos\"><span>B.7 </span>Federation denial-of-service</a></li><li><a href=\"#security-c2s-ratelimiting\"><span>B.8 </span>Client-to-server ratelimiting</a></li><li><a href=\"#security-c2s-response-dos\"><span>B.9 </span>Client-to-server response denial-of-service</a></li><li><a href=\"#security-sanitizing-content\"><span>B.10 </span>Sanitizing Content</a></li><li><a href=\"#security-not-displaying-bto-bcc\"><span>B.11 </span>Not displaying bto and bcc properties</a></li></ol></li><li><a href=\"#acknowledgements\"><span>C. </span>Acknowledgements</a></li><li><a href=\"#references\"><span>D. </span>References</a><ol><li><a href=\"#normative-references\"><span>D.1 </span>Normative references</a></li><li><a href=\"#informative-references\"><span>D.2 </span>Informative references</a></li></ol></li></ol></nav>\n\n    <section id=\"Overview\">\n      <!--OddPage--><h2 id=\"x1-overview\"><span>1. </span>Overview</h2>\n\n      <p>ActivityPub provides two layers:</p>\n\n      <ul>\n        <li>\n          <b>A server to server federation protocol</b>\n          (so decentralized websites can share information)\n        </li>\n        <li>\n          <b>A client to server protocol</b>\n          (so users, including real-world users, bots, and other automated processes,\n          can communicate with ActivityPub using their accounts on servers,\n          from a phone or desktop or web application or whatever)\n        </li>\n      </ul>\n\n      <p>\n        ActivityPub implementations can implement just one of these things or\n        both of them.\n        However, once you've implemented one, it isn't too many steps to\n        implement the other, and there are a lot of benefits to both (making\n        your website part of the decentralized social web, and being able to\n        use clients and client libraries that work across a wide variety of\n        social websites).\n      </p>\n\n      <p>\n        In ActivityPub, a user is represented by \"<a href=\"#actors\">actors</a>\"\n        via the user's accounts on servers.\n        User's accounts on different servers correspond to different actors.\n        Every Actor has:\n      </p>\n\n      <ul>\n        <li><b>An <code>inbox</code>:</b>  How they get messages from the world</li>\n        <li><b>An <code>outbox</code>:</b> How they send messages to others</li>\n      </ul>\n\n      <p>\n        <img src=\"illustration/tutorial-1.png\" alt=\"Actor with inbox and outbox\">\n      </p>\n\n      <p>\n        These are endpoints, or really, just URLs which are listed in the\n        ActivityPub actor's ActivityStreams description.\n        (More on ActivityStreams later).\n      </p>\n\n      <p>\n        Here's an example of the record of our friend Alyssa P. Hacker:\n      </p>\n\n      <div><p><span>Example 1</span></p><pre aria-busy=\"false\" aria-live=\"polite\">{<span>\"@context\"</span>: <span>\"https://www.w3.org/ns/activitystreams\"</span>,\n <span>\"type\"</span>: <span>\"Person\"</span>,\n <span>\"id\"</span>: <span>\"https://social.example/alyssa/\"</span>,\n <span>\"name\"</span>: <span>\"Alyssa P. Hacker\"</span>,\n <span>\"preferredUsername\"</span>: <span>\"alyssa\"</span>,\n <span>\"summary\"</span>: <span>\"Lisp enthusiast hailing from MIT\"</span>,\n <span>\"inbox\"</span>: <span>\"https://social.example/alyssa/inbox/\"</span>,\n <span>\"outbox\"</span>: <span>\"https://social.example/alyssa/outbox/\"</span>,\n <span>\"followers\"</span>: <span>\"https://social.example/alyssa/followers/\"</span>,\n <span>\"following\"</span>: <span>\"https://social.example/alyssa/following/\"</span>,\n <span>\"liked\"</span>: <span>\"https://social.example/alyssa/liked/\"</span>}</pre></div>\n\n      <p>\n        ActivityPub uses [<cite><a href=\"#bib-ActivityStreams\">ActivityStreams</a></cite>] for its vocabulary.\n        This is pretty great because ActivityStreams includes all the common\n        terms you need to represent all the activities and content flowing\n        around a social network.\n        It's likely that ActivityStreams already includes all the vocabulary\n        you need, but even if it doesn't, ActivityStreams can be extended\n        via [<cite><a href=\"#bib-JSON-LD\">JSON-LD</a></cite>].\n        If you know what JSON-LD is, you can take advantage of the cool linked\n        data approaches provided by JSON-LD.\n        If you don't, don't worry, JSON-LD documents and ActivityStreams can be\n        understood as plain old simple JSON.\n        (If you're going to add extensions, that's the point at which JSON-LD\n        really helps you out).\n      </p>\n\n      <p>\n        So, okay.\n        Alyssa wants to talk to her friends, and her friends want to talk to\n        her!\n        Luckily these \"inbox\" and \"outbox\" things can help us out.\n        They both behave differently for GET and POST.\n        Let's see how that works:\n      </p>\n\n      <p>\n        <img src=\"illustration/tutorial-2.png\" alt=\"Actor with messages flowing from rest of world to inbox and from outbox to rest of world\">\n      </p>\n\n      <p>\n        Hey nice, so just as a recap:\n      </p>\n\n      <ul>\n        <li>\n          You can POST to someone's inbox to send them a message\n          (server-to-server / federation only... this <em>is</em> federation!)\n        </li>\n        <li>\n          You can GET from your inbox to read your latest messages\n          (client-to-server; this is like reading your social\n          network stream)\n        </li>\n        <li>\n          You can POST to your outbox to send messages to the world\n          (client-to-server)\n        </li>\n        <li>\n          You can GET from someone's outbox to see what messages they've\n          posted (or at least the ones you're authorized to see).\n          (client-to-server and/or server-to-server)\n        </li>\n      </ul>\n \n      <p>\n        Of course, if that last one (GET'ing from someone's outbox) was the\n        only way to see what people have sent, this wouldn't be a very\n        efficient federation protocol!\n        Indeed, federation happens usually by servers posting messages sent by\n        actors to actors on other servers' inboxes.\n      </p>\n\n      <p>\n        Let's see an example!\n        Let's say Alyssa wants to catch up with her friend, Ben Bitdiddle.\n        She lent him a book recently and she wants to make sure he returns it\n        to her.\n        Here's the message she composes, as an ActivityStreams object:\n      </p>\n\n      <div><p><span>Example 2</span></p><pre aria-busy=\"false\" aria-live=\"polite\">{<span>\"@context\"</span>: <span>\"https://www.w3.org/ns/activitystreams\"</span>,\n <span>\"type\"</span>: <span>\"Note\"</span>,\n <span>\"to\"</span>: [<span>\"https://chatty.example/ben/\"</span>],\n <span>\"attributedTo\"</span>: <span>\"https://social.example/alyssa/\"</span>,\n <span>\"content\"</span>: <span>\"Say, did you finish reading that book I lent you?\"</span>}</pre></div>\n\n      <p>\n        This is a note addressed to Ben.\n        She POSTs it to her outbox.\n      </p>\n\n      <p>\n        <img src=\"illustration/tutorial-3.png\" alt=\"Actor posting message to outbox\">\n      </p>\n\n      <p>\n        Since this is a non-activity object, the server recognizes that this is\n        an object being newly created, and does the courtesy of wrapping it in\n        a Create activity.\n        (Activities sent around in ActivityPub generally follow the pattern of\n        some activity by some actor being taken on some object.\n        In this case the activity is a Create of a Note object, posted by a\n        Person).\n      </p>\n\n\n      <div><p><span>Example 3</span></p><pre aria-busy=\"false\" aria-live=\"polite\">{<span>\"@context\"</span>: <span>\"https://www.w3.org/ns/activitystreams\"</span>,\n <span>\"type\"</span>: <span>\"Create\"</span>,\n <span>\"id\"</span>: <span>\"https://social.example/alyssa/posts/a29a6843-9feb-4c74-a7f7-081b9c9201d3\"</span>,\n <span>\"to\"</span>: [<span>\"https://chatty.example/ben/\"</span>],\n <span>\"actor\"</span>: <span>\"https://social.example/alyssa/\"</span>,\n <span>\"object\"</span>: {<span>\"type\"</span>: <span>\"Note\"</span>,\n            <span>\"id\"</span>: <span>\"https://social.example/alyssa/posts/49e2d03d-b53a-4c4c-a95c-94a6abf45a19\"</span>,\n            <span>\"attributedTo\"</span>: <span>\"https://social.example/alyssa/\"</span>,\n            <span>\"to\"</span>: [<span>\"https://chatty.example/ben/\"</span>],\n            <span>\"content\"</span>: <span>\"Say, did you finish reading that book I lent you?\"</span>}}</pre></div>\n\n      <p>\n        Alyssa's server looks up Ben's ActivityStreams actor object, finds his\n        inbox endpoint, and POSTs her object to his inbox.\n      </p>\n\n      <p>\n        <img src=\"illustration/tutorial-4.png\" alt=\"Server posting to remote actor's inbox\">\n      </p>\n\n      <p>\n        Technically these are two separate steps... one is client to server\n        communication, and one is server to server communication (federation).\n        But, since we're using them both in this example, we can abstractly\n        think of this as being a streamlined submission from outbox to inbox:\n      </p>\n\n      <p>\n        <img src=\"illustration/tutorial-5.png\" alt=\"Note flowing from one actor's outbox to other actor's inbox\">\n      </p>\n\n      <p>\n        Cool!\n        A while later, Alyssa checks what new messages she's gotten.\n        Her phone polls her inbox via GET, and amongst a bunch of cat videos\n        posted by friends and photos of her nephew posted by her sister, she\n        sees the following:\n      </p>\n\n      <div><p><span>Example 4</span></p><pre aria-busy=\"false\" aria-live=\"polite\">{\"@context\": \"https://www.w3.org/ns/activitystreams\",\n \"type\": \"Create\",\n \"id\": \"https://chatty.example/ben/p/51086\",\n \"to\": [\"https://social.example/alyssa/\"],\n \"actor\": \"https://chatty.example/ben/\",\n \"object\": {\"type\": \"Note\",\n            \"id\": \"https://chatty.example/ben/p/51085\",\n            \"attributedTo\": \"https://chatty.example/ben/\",\n            \"to\": [\"https://social.example/alyssa/\"],\n            \"inReplyTo\": \"https://social.example/alyssa/posts/49e2d03d-b53a-4c4c-a95c-94a6abf45a19\",\n            \"content\": \"&lt;p&gt;Argh, yeah, sorry, I'll get it back to you tomorrow.&lt;/p&gt;\n                        &lt;p&gt;I was reviewing the section on register machines,\n                           since it's been a while since I wrote one.&lt;/p&gt;\"}}</pre></div>\n\n      <p>Alyssa is relieved, and likes Ben's post:</p>\n\n      <div><p><span>Example 5</span></p><pre aria-busy=\"false\" aria-live=\"polite\">{<span>\"@context\"</span>: <span>\"https://www.w3.org/ns/activitystreams\"</span>,\n <span>\"type\"</span>: <span>\"Like\"</span>,\n <span>\"id\"</span>: <span>\"https://social.example/alyssa/posts/5312e10e-5110-42e5-a09b-934882b3ecec\"</span>,\n <span>\"to\"</span>: [<span>\"https://chatty.example/ben/\"</span>],\n <span>\"actor\"</span>: <span>\"https://social.example/alyssa/\"</span>,\n <span>\"object\"</span>: <span>\"https://chatty.example/ben/p/51086\"</span>}</pre></div>\n\n      <p>\n        She POSTs this message to her outbox.\n        (Since it's an activity, her server knows it doesn't need to wrap it in\n        a Create object).\n      </p>\n\n      <p>\n        Feeling happy about things, she decides to post a public message to her\n        followers.\n        Soon the following message is blasted to all the members of her\n        followers collection, and since it has the special Public group\n        addressed, is generally readable by anyone.\n      </p>\n\n      <div><p><span>Example 6</span></p><pre aria-busy=\"false\" aria-live=\"polite\">{<span>\"@context\"</span>: <span>\"https://www.w3.org/ns/activitystreams\"</span>,\n <span>\"type\"</span>: <span>\"Create\"</span>,\n <span>\"id\"</span>: <span>\"https://social.example/alyssa/posts/9282e9cc-14d0-42b3-a758-d6aeca6c876b\"</span>,\n <span>\"to\"</span>: [<span>\"https://social.example/alyssa/followers/\"</span>,\n        <span>\"https://www.w3.org/ns/activitystreams#Public\"</span>],\n <span>\"actor\"</span>: <span>\"https://social.example/alyssa/\"</span>,\n <span>\"object\"</span>: {<span>\"type\"</span>: <span>\"Note\"</span>,\n            <span>\"id\"</span>: <span>\"https://social.example/alyssa/posts/d18c55d4-8a63-4181-9745-4e6cf7938fa1\"</span>,\n            <span>\"attributedTo\"</span>: <span>\"https://social.example/alyssa/\"</span>,\n            <span>\"to\"</span>: [<span>\"https://social.example/alyssa/followers/\"</span>,\n                   <span>\"https://www.w3.org/ns/activitystreams#Public\"</span>],\n            <span>\"content\"</span>: <span>\"Lending books to friends is nice.  Getting them back is even nicer! :)\"</span>}}</pre></div>\n\n      \n    </section>\n\n    <section id=\"conformance\"><!--OddPage--><h2 id=\"x2-conformance\"><span>2. </span>Conformance</h2>\n<p>\n  As well as sections marked as non-normative, all authoring guidelines, diagrams, examples,\n  and notes in this specification are non-normative. Everything else in this specification is\n  normative.\n</p>\n<p id=\"respecRFC2119\">The key words  <em>MAY</em>, <em>MUST</em>, <em>MUST NOT</em>, <em>SHOULD</em>, and <em>SHOULD NOT</em> are \n  to be interpreted as described in [<cite><a href=\"#bib-RFC2119\">RFC2119</a></cite>].\n</p>\n\n      <section id=\"specification-profiles\">\n        <h3 id=\"x2-1-specification-profiles\"><span>2.1 </span>Specification Profiles</h3>\n        <p>\n          This specification defines two closely related and interacting\n          protocols:\n        </p>\n        <dl>\n          <dt>A client to server protocol, or \"Social API\"</dt>\n          <dd>\n            This protocol permits a client to act <i>on behalf</i> of a user.\n            For example, this protocol is used by a mobile phone application to\n            interact with a social stream of the user's actor.\n          </dd>\n          <dt>A server to server protocol, or \"Federation Protocol\"</dt>\n          <dd>\n            This protocol is used to distribute activities between actors on\n            different servers, tying them into the same social graph.\n          </dd>\n        </dl>\n        <p>\n          The ActivityPub specification is designed so that once either of\n          these protocols are implemented, supporting the other is of very\n          little additional effort.\n          However, servers may still implement one without the other.\n          This gives three conformance classes:\n        </p>\n        <dl>\n          <dt>ActivityPub conformant Client</dt>\n          <dd>\n            This designation applies to any implementation of the entirety of the\n            client portion of the client to server protocol.\n          </dd>\n          <dt>ActivityPub conformant Server</dt>\n          <dd>\n            This designation applies to any implementation of the entirety of the\n            server portion of the client to server protocol.\n          </dd>\n          <dt>ActivityPub conformant Federated Server</dt>\n          <dd>\n            This designation applies to any implementation of the entirety of\n            the federation protocols.\n          </dd>\n        </dl>\n        <p>\n          It is called out whenever a portion of the specification only applies\n          to implementation of the federation protocol.\n          In addition, whenever requirements are specified, it is called out\n          whether they apply to the client or server (for the client-to-server\n          protocol) or whether referring to a sending or receiving server in\n          the server-to-server protocol.\n        </p>\n      </section>\n    </section>\n\n    <section id=\"obj\">\n      <!--OddPage--><h2 id=\"x3-objects\"><span>3. </span>Objects</h2>\n      <p>\n        Objects are the core concept around which both [<cite><a href=\"#bib-ActivityStreams\">ActivityStreams</a></cite>] and\n        ActivityPub are built.\n        Objects are often wrapped in Activities and are contained in streams of\n        Collections, which are themselves subclasses of Objects.\n        See the [<cite><a href=\"#bib-Activity-Vocabulary\">Activity-Vocabulary</a></cite>] document, particularly the\n        <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#types\">Core Classes</a>;\n        ActivityPub follows the mapping of this vocabulary very closely.\n      </p>\n      <p>\n        ActivityPub defines some terms in addition to those provided by\n        ActivityStreams.\n        These terms are provided in the ActivityPub\n        <a href=\"http://www.w3.org/TR/json-ld/#the-context\">JSON-LD context</a>\n        at\n        <code>https://www.w3.org/ns/activitystreams</code>.\n        Implementers <em title=\"SHOULD\">SHOULD</em> include the ActivityPub context in their\n        object definitions.\n        Implementers <em title=\"MAY\">MAY</em> include additional context as appropriate.\n      </p>\n      <p>\n        ActivityPub shares the same\n        <a href=\"https://www.w3.org/TR/activitystreams-core/#urls\">\n          URI / IRI conventions as in ActivityStreams</a>.\n      </p>\n      <p>\n        Servers <em title=\"SHOULD\">SHOULD</em> validate the content they receive to avoid content\n        spoofing attacks.\n        (A server should do something at least as robust as checking that\n        the object appears as received at its origin, but mechanisms\n        such as checking signatures would be better if available).\n        No particular mechanism for verification is authoritatively specified by\n        this document, but please see <a href=\"#security-considerations\">Security \n        Considerations</a> for some suggestions and good practices.\n      </p>\n      <div><p>\n        As an example, if example.com receives the activity\n        </p><div><p><span>Example 7</span></p><pre aria-busy=\"false\" aria-live=\"polite\">{\n  <span>\"@context\"</span>: <span>\"https://www.w3.org/ns/activitystreams\"</span>,\n  <span>\"type\"</span>: <span>\"Like\"</span>,\n  <span>\"actor\"</span>: <span>\"https://example.net/~mallory\"</span>,\n  <span>\"to\"</span>: [<span>\"https://hatchat.example/sarah/\"</span>,\n         <span>\"https://example.com/peeps/john/\"</span>],\n  <span>\"object\"</span>: {\n    <span>\"@context\"</span>: {<span>\"@language\"</span>: <span>\"en\"</span>},\n    <span>\"id\"</span>: <span>\"https://example.org/~alice/note/23\"</span>,\n    <span>\"type\"</span>: <span>\"Note\"</span>,\n    <span>\"attributedTo\"</span>: <span>\"https://example.org/~alice\"</span>,\n    <span>\"content\"</span>: <span>\"I'm a goat\"</span>\n  }\n}</pre></div><p>\n        it should dereference the <code>id</code> both to ensure that it exists\n        and is a valid object, and that it is not misrepresenting the object.\n        (In this example, Mallory could be spoofing an object allegedly posted\n        by Alice).\n      </p></div>\n      <section id=\"obj-id\">\n        <h3 id=\"x3-1-object-identifiers\"><span>3.1 </span>Object Identifiers</h3>\n        <p>\n          All Objects in [<cite><a href=\"#bib-ActivityStreams\">ActivityStreams</a></cite>] should have unique global\n          identifiers.\n          ActivityPub extends this requirement; all objects distributed by the\n          ActivityPub protocol <em title=\"MUST\">MUST</em> have unique global identifiers, unless they\n          are intentionally transient (short lived activities that are not\n          intended to be able to be looked up, such as some kinds of chat\n          messages or game notifications).\n          These identifiers must fall into one of the following groups:\n        </p>\n        <ol>\n          <li>\n            Publicly dereferencable URIs, such as HTTPS URIs, with their\n            authority belonging to that of their originating server.\n            (Publicly facing content <em title=\"SHOULD\">SHOULD</em> use HTTPS URIs).\n          </li>\n          <li>\n            An ID explicitly specified as the JSON <code>null</code> object,\n            which implies an anonymous object (a part of its parent context)\n          </li>\n        </ol>\n        <p>\n          Identifiers <em title=\"MUST\">MUST</em> be provided for activities posted in server to\n          server communication, unless the activity is intentionally transient.\n          However, for client to server communication, a server receiving an\n          object posted to the outbox with no specified <code>id</code> <em title=\"SHOULD\">SHOULD</em>\n          allocate an object ID in the actor's namespace and attach it to the\n          posted object.\n        </p>\n        <p>All objects have the following properties:</p>\n        <dl>\n          <dt>id</dt>\n          <dd>\n            The object's unique global identifier (unless the object is transient,\n            in which case the <code>id</code> <em title=\"MAY\">MAY</em> be omitted).\n          </dd>\n          <dt>type</dt>\n          <dd>\n            The type of the object.\n          </dd>\n        </dl>\n      </section>\n\n      <section id=\"retrieving-objects\">\n        <h3 id=\"x3-2-retrieving-objects\"><span>3.2 </span>Retrieving objects</h3>\n        <p>\n          The HTTP GET method may be dereferenced against an object's\n          <code>id</code> property to retrieve the activity.\n          Servers <em title=\"MAY\">MAY</em> use HTTP content negotiation as defined in [<cite><a href=\"#bib-RFC7231\">RFC7231</a></cite>] to\n          select the type of data to return in response to a request,\n          but <em title=\"MUST\">MUST</em> present the ActivityStreams object representation\n          in response to\n          <code>application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\"</code>,\n          and <em title=\"SHOULD\">SHOULD</em> also present the ActivityStreams representation in\n          response to <code>application/activity+json</code> as well.\n          The client <em title=\"MUST\">MUST</em> specify an <code>Accept</code> header with the\n          <code>application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\"</code>\n          media type in order to retrieve the activity.\n        </p>\n        <p>\n          Servers <em title=\"MAY\">MAY</em> implement other behavior for requests which do not comply\n          with the above requirement.\n          (For example, servers may implement additional legacy protocols, or\n          may use the same URI for both HTML and ActivityStreams\n          representations of a resource).\n        </p>\n        <p>\n          Servers <em title=\"MAY\">MAY</em> require authorization as specified in\n          <a href=\"#authorization\"><span>B.1</span> <span>Authentication and Authorization</span></a>, and may additionally implement their\n          own authorization rules.\n          Servers <em title=\"SHOULD\">SHOULD</em> fail requests which do not pass their authorization\n          checks with the appropriate HTTP error code, or the 403 Forbidden\n          error code where the existence of the object is considered private.\n          An origin server which does not wish to disclose the existence of\n          a private target <em title=\"MAY\">MAY</em> instead respond with a status code of\n          404 Not Found.\n        </p>\n      </section>\n\n      <section id=\"source-property\">\n        <h3 id=\"x3-3-the-source-property\"><span>3.3 </span>The source property</h3>\n        <p>\n          In addition to all the properties defined by the\n\t  [<cite><a href=\"#bib-Activity-Vocabulary\">Activity-Vocabulary</a></cite>], ActivityPub extends the <code>Object</code> by\n\t  supplying the <code>source</code> property.\n          The <code>source</code> property is intended to convey some\n          sort of source from which the <code>content</code> markup\n          was derived, as a form of provenance, or to support future\n          editing by clients.\n          In general, clients do the conversion from <code>source</code>\n          to <code>content</code>, not the other way around.\n        </p>\n        <p>\n          The value of <code>source</code> is itself an object\n          which uses its own <code>content</code> and <code>mediaType</code>\n          fields to supply source information.\n        </p>\n        <div><p><span>Example 8</span></p><pre aria-busy=\"false\" aria-live=\"polite\">{\n  <span>\"@context\"</span>: [<span>\"https://www.w3.org/ns/activitystreams\"</span>,\n               {<span>\"@language\"</span>: <span>\"en\"</span>}],\n  <span>\"type\"</span>: <span>\"Note\"</span>,\n  <span>\"id\"</span>: <span>\"http://postparty.example/p/2415\"</span>,\n  <span>\"content\"</span>: <span>\"&lt;p&gt;I &lt;em&gt;really&lt;/em&gt; like strawberries!&lt;/p&gt;\"</span>,\n  <span>\"source\"</span>: {\n    <span>\"content\"</span>: <span>\"I *really* like strawberries!\"</span>,\n    <span>\"mediaType\"</span>: <span>\"text/markdown\"</span>}\n}</pre></div>\n        <div><p><span>Note</span><span>: What to do when clients can't meaningfully handle a mediaType?</span></p><div>\n          <p>\n            In general, it's best to let a user edit their original post\n            in the same source format they originally composed it in.\n            But not all clients can reliably provide a nice interface for\n            all source types, and since clients are expected to do the\n            conversion from <code>source</code> to <code>content</code>,\n            some clients may work with a media type that another client\n            does not know how to work with.\n            While a client could feasibly provide the <code>content</code>\n            markup to be edited and ignore the source, this means that the\n            user will lose the more desirable form of the original\n            <code>source</code> in any future revisions.\n            A client doing so should thus provide a minimally obtrusive warning\n            cautioning that the original source format is not understood and is\n            thus being ignored.\n          </p>\n          <p>\n            For example, Alyssa P. Hacker likes to post to her ActivityPub\n            powered blog via an Emacs client she has written, leveraging\n            <a href=\"http://orgmode.org/\">Org mode</a>.\n            Later she switches to editing on her phone's client, which\n            has no idea what <code>text/x-org</code> is or how to render\n            it to HTML, so it provides a text box to edit the original\n            <code>content</code> instead.\n            A helpful warning displays above the edit area saying,\n            \"This was originally written in another markup language we don't\n            know how to handle.  If you edit, you'll lose your original\n            source!\"\n            Alyssa decides the small typo fix isn't worth losing her nice\n            org-mode markup and decides to make the update when she gets\n            home.\n          </p>\n        </div></div>\n      </section>\n    </section>\n\n    <section id=\"actors\">\n      <!--OddPage--><h2 id=\"x4-actors\"><span>4. </span>Actors</h2>\n      <p>\n        ActivityPub actors are generally one of the\n        <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#actor-types\">\n          ActivityStreams Actor Types</a>,\n        but they don't have to be. For example, a \n        <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#dfn-profile\">\n          Profile</a> object\n        might be used as an actor, or a type from an ActivityStreams extension.\n        Actors are <a href=\"#retrieving-objects\">retrieved</a> like any other\n        Object in ActivityPub.\n        Like other ActivityStreams objects, actors have an <code>id</code>,\n        which is a URI.\n        When entered directly into a user interface (for example on a login\n        form), it is desirable to support simplified naming.\n        For this purpose, ID normalization <em title=\"SHOULD\">SHOULD</em> be performed as follows:\n      </p>\n      <ol>\n        <li>\n          If the entered ID is a valid URI, then it is to be used directly.\n        </li>\n        <li>\n          If it appears that the user neglected to add a scheme for a URI that\n          would otherwise be considered valid, such as\n          <code>example.org/alice/</code>, clients <em title=\"MAY\">MAY</em> attempt to provide\n          a default scheme, preferably <code>https</code>.\n        </li>\n        <li>\n          Otherwise, the entered value should be considered invalid.\n        </li>\n      </ol>\n\n      <p>\n        Once the actor's URI has been identified, it should be dereferenced.\n      </p>\n\n      <div><p><span>Note</span></p><p>\n        ActivityPub does not dictate a specific relationship between\n        \"users\" and Actors; many configurations are possible.\n        There may be multiple human users or organizations controlling an\n        Actor, or likewise one human or organization may control multiple\n        Actors. Similarly, an Actor may represent a piece of software,\n        like a bot, or an automated process.\n        More detailed \"user\" modelling, for example linking together of Actors which\n        are controlled by the same entity, or allowing one Actor to be presented\n        through multiple alternate profiles or aspects, are at the discretion\n        of the implementation.\n      </p></div>\n\n      <section id=\"actor-objects\">\n        <h3 id=\"x4-1-actor-objects\"><span>4.1 </span><i>Actor</i> objects</h3>\n        <p>\n          Actor objects <em title=\"MUST\">MUST</em> have, in addition to the properties mandated by\n          <a href=\"#obj-id\"><span>3.1</span> <span>Object Identifiers</span></a>, the following properties:\n        </p>\n        <dl>\n          <dt id=\"inbox-property\">inbox</dt>\n          <dd>\n            A reference to an [<cite><a href=\"#bib-ActivityStreams\">ActivityStreams</a></cite>]\n            <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#dfn-orderedcollection\">\n              <code>OrderedCollection</code></a>\n            comprised of all the messages received by the actor; see\n            <a href=\"#inbox\"><span>5.2</span> <span>Inbox</span></a>.\n          </dd>\n          <dt id=\"outbox-property\">outbox</dt>\n          <dd>\n            An [<cite><a href=\"#bib-ActivityStreams\">ActivityStreams</a></cite>]\n            <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#dfn-orderedcollection\">\n              <code>OrderedCollection</code></a>\n            comprised of all the messages produced by the actor; see\n            <a href=\"#outbox\"><span>5.1</span> <span>Outbox</span></a>.\n          </dd>\n        </dl>\n        <p>\n          Implementations <em title=\"SHOULD\">SHOULD</em>, in addition, provide the following\n          properties:\n        </p>\n        <dl>\n          <dt id=\"following-property\">following</dt>\n          <dd>\n            A link to an [<cite><a href=\"#bib-ActivityStreams\">ActivityStreams</a></cite>] collection of the actors that\n            this actor is following; see <a href=\"#following\"><span>5.4</span> <span>Following Collection</span></a>\n          </dd>\n          <dt id=\"followers-property\">followers</dt>\n          <dd>\n            A link to an [<cite><a href=\"#bib-ActivityStreams\">ActivityStreams</a></cite>] collection of the actors that\n            follow this actor; see <a href=\"#followers\"><span>5.3</span> <span>Followers Collection</span></a>.\n          </dd>\n        </dl>\n        <p>\n          Implementations <em title=\"MAY\">MAY</em> provide the following properties:\n        </p>\n        <dl>\n          <dt id=\"liked-property\">liked</dt>\n          <dd>\n            A link to an [<cite><a href=\"#bib-ActivityStreams\">ActivityStreams</a></cite>] collection of objects this\n            actor has liked; see <a href=\"#liked\"><span>5.5</span> <span>Liked Collection</span></a>.\n          </dd>\n        </dl>\n        <div><p><span>Example 9</span></p><pre aria-busy=\"false\" aria-live=\"polite\">{\n  <span>\"@context\"</span>: [<span>\"https://www.w3.org/ns/activitystreams\"</span>,\n               {<span>\"@language\"</span>: <span>\"ja\"</span>}],\n  <span>\"type\"</span>: <span>\"Person\"</span>,\n  <span>\"id\"</span>: <span>\"https://kenzoishii.example.com/\"</span>,\n  <span>\"following\"</span>: <span>\"https://kenzoishii.example.com/following.json\"</span>,\n  <span>\"followers\"</span>: <span>\"https://kenzoishii.example.com/followers.json\"</span>,\n  <span>\"liked\"</span>: <span>\"https://kenzoishii.example.com/liked.json\"</span>,\n  <span>\"inbox\"</span>: <span>\"https://kenzoishii.example.com/inbox.json\"</span>,\n  <span>\"outbox\"</span>: <span>\"https://kenzoishii.example.com/feed.json\"</span>,\n  <span>\"preferredUsername\"</span>: <span>\"kenzoishii\"</span>,\n  <span>\"name\"</span>: <span>\"石井健蔵\"</span>,\n  <span>\"summary\"</span>: <span>\"この方はただの例です\"</span>,\n  <span>\"icon\"</span>: [\n    <span>\"https://kenzoishii.example.com/image/165987aklre4\"</span>\n  ]\n}</pre></div>\n        <p>Implementations <em title=\"MAY\">MAY</em>, in addition, provide the following properties:</p>\n        <dl>\n          <dt id=\"streams-property\">streams</dt>\n          <dd>\n            A list of supplementary Collections which may be of interest.\n          </dd>\n          <dt id=\"preferredUsername\">preferredUsername</dt>\n          <dd>\n            A short username which may be used to refer to the actor, with no\n            uniqueness guarantees.\n          </dd>\n          <dt id=\"endpoints\">endpoints</dt>\n          <dd>\n            A json object which maps additional (typically server/domain-wide)\n            endpoints which may be useful either for this actor or someone\n            referencing this actor.\n            This mapping may be nested inside the actor document as the value\n            or may be a link to a JSON-LD document with these properties.\n          </dd>\n        </dl>\n\n        <p>\n          The <code>endpoints</code> mapping <em title=\"MAY\">MAY</em> include the following\n          properties:\n        </p>\n        <dl>\n          <dt id=\"proxyUrl\">proxyUrl</dt>\n          <dd>\n            Endpoint URI so this actor's clients may access remote\n            ActivityStreams objects which require authentication to access.\n            To use this endpoint, the client posts an\n            <code>x-www-form-urlencoded</code> <code>id</code> parameter\n            with the value being the <code>id</code> of the requested\n            ActivityStreams object.\n          </dd>\n          <dt id=\"oauthAuthorizationEndpoint\">oauthAuthorizationEndpoint</dt>\n          <dd>\n            If OAuth 2.0 bearer tokens [<cite><a href=\"#bib-RFC6749\">RFC6749</a></cite>] [<cite><a href=\"#bib-RFC6750\">RFC6750</a></cite>] are being used\n            for authenticating\n            <a href=\"#client-to-server-interactions\">client to server\n              interactions</a>,\n            this endpoint specifies a URI at which a browser-authenticated user\n            may obtain a new authorization grant.\n          </dd>\n          <dt id=\"oauthTokenEndpoint\">oauthTokenEndpoint</dt>\n          <dd>\n            If OAuth 2.0 bearer tokens [<cite><a href=\"#bib-RFC6749\">RFC6749</a></cite>] [<cite><a href=\"#bib-RFC6750\">RFC6750</a></cite>] are being used\n            for authenticating\n            <a href=\"#client-to-server-interactions\">client to server\n              interactions</a>,\n            this endpoint specifies a URI at which a client may acquire an\n\t    access token.\n          </dd>\n          <dt id=\"provideClientKey\">provideClientKey</dt>\n          <dd>\n            If Linked Data Signatures and HTTP Signatures are being used for\n            authentication and authorization, this endpoint specifies a URI at\n            which browser-authenticated users may authorize a client's public\n            key for\n            <a href=\"#client-to-server-interactions\">client to server\n              interactions</a>.\n          </dd>\n          <dt id=\"signClientKey\">signClientKey</dt>\n          <dd>\n            If Linked Data Signatures and HTTP Signatures are being used for\n            authentication and authorization, this endpoint specifies a URI at\n            which a client key may be signed by the actor's key for a time\n            window to act on behalf of the actor in interacting with foreign\n            servers.\n          </dd>\n          <dt id=\"sharedInbox\">sharedInbox</dt>\n          <dd>\n            An optional endpoint\n            <a href=\"#shared-inbox-delivery\">\n              used for wide delivery of publicly addressed activities\n              and activities sent to followers</a>.\n            <code>sharedInbox</code> endpoints <em title=\"SHOULD\">SHOULD</em> also be publicly\n            readable <code>OrderedCollection</code> objects containing\n            objects addressed to the <a href=\"#public-addressing\">Public</a>\n            special collection.\n            Reading from the <code>sharedInbox</code> endpoint <em title=\"MUST NOT\">MUST NOT</em> present\n            objects which are not addressed to the <code>Public</code>\n            endpoint.\n          </dd>\n        </dl>\n\n        <div><p><span>Note</span></p><div id=\"as2-actor-properties\">\n          <p>\n            As the upstream vocabulary for ActivityPub, any applicable\n            [<cite><a href=\"#bib-ActivityStreams\">ActivityStreams</a></cite>] property may be used on ActivityPub Actors.\n            Some ActivityStreams properties are particularly worth highlighting\n            to demonstrate how they are used in ActivityPub implementations.\n          </p>\n\n          <dl>\n            <dt id=\"url-property\">url</dt>\n            <dd>\n              A link to the actor's \"profile web page\", if not equal to the\n              value of <code>id</code>.\n            </dd>\n            <dt id=\"name-property\">name</dt>\n            <dd>\n              The preferred \"nickname\" or \"display name\" of the actor.\n            </dd>\n            <dt id=\"summary-property\">summary</dt>\n            <dd>A quick summary or bio by the user about themselves.</dd>\n            <dt id=\"icon-property\">icon</dt>\n            <dd>\n              A link to an image or an Image object which represents the user's\n              profile picture (this may be a thumbnail).\n            </dd>\n          </dl>\n        </div></div>\n        \n      </section>\n\n    </section>\n\n    <section id=\"collections\">\n      <!--OddPage--><h2 id=\"x5-collections\"><span>5. </span>Collections</h2>\n      <p>\n        [<cite><a href=\"#bib-ActivityStreams\">ActivityStreams</a></cite>] defines the collection concept; ActivityPub\n        defines several collections with special behavior.\n        Note that ActivityPub makes use of\n        <a href=\"https://www.w3.org/TR/activitystreams-core/#paging\">\n          ActivityStreams paging</a>\n        to traverse large sets of objects.\n      </p>\n\n      <p>\n        Note that some of these collections are specified to be of type\n        <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#dfn-orderedcollection\">\n          <code>OrderedCollection</code></a>\n        specifically, while others are permitted to be either a\n        <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#dfn-collection\">\n          <code>Collection</code></a>\n        or an\n        <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#dfn-orderedcollection\">\n          <code>OrderedCollection</code></a>.\n        An\n        <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#dfn-orderedcollection\">\n          <code>OrderedCollection</code></a>\n        <em title=\"MUST\">MUST</em> be presented consistently in reverse chronological order.\n      </p>\n\n      <div><p><span>Note</span></p><p>\n        What property is used to determine the reverse chronological order\n        is intentionally left as an implementation detail.\n        For example, many SQL-style databases use an incrementing integer\n        as an identifier, which can be reasonably used for handling\n        insertion order in most cases.\n        In other databases, an insertion time timestamp may be preferred.\n        What is used isn't important, but the ordering of elements must\n        remain intact, with newer items first.\n        A property which changes regularly, such a \"last updated\" timestamp,\n        should not be used.\n      </p></div>\n\n      <section id=\"outbox\">\n        <h3 id=\"x5-1-outbox\"><span>5.1 </span>Outbox</h3>\n        <p>\n          The outbox is discovered through the <code>outbox</code>\n          property of an <a href=\"#actors\">actor's</a> profile.\n          The <code>outbox</code> <em title=\"MUST\">MUST</em> be an\n          <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#dfn-orderedcollection\">\n            <code>OrderedCollection</code></a>.\n        </p>\n        <p>\n          The outbox stream contains activities the user has\n          published, subject to the ability of the requestor to retrieve the\n          activity (that is, the contents of the outbox are filtered by the\n          permissions of the person reading it).\n          If a user submits a request without\n          <a href=\"#authorization\">Authorization</a> the server should\n          respond with all of the <a href=\"#public-addressing\">Public</a>\n          posts.\n          This could potentially be all relevant objects published by the\n          user, though the number of available items is left to the\n          discretion of those implementing and deploying the server.\n        </p>\n        <p>\n          The outbox accepts HTTP POST requests, with behaviour described in\n          <a href=\"#client-to-server-interactions\">Client to Server\n            Interactions</a>.\n        </p>\n      </section>\n\n      <section id=\"inbox\">\n        <h3 id=\"x5-2-inbox\"><span>5.2 </span>Inbox</h3>\n\n        <p>\n          The inbox is discovered through the <code>inbox</code>\n          property of an <a href=\"#actors\">actor's</a> profile.\n          The <code>inbox</code> <em title=\"MUST\">MUST</em> be an\n          <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#dfn-orderedcollection\">\n            <code>OrderedCollection</code></a>.\n        </p>\n\n        <p>\n          The inbox stream contains all activities received by the\n          actor.\n          The server <em title=\"SHOULD\">SHOULD</em> filter content according to the requester's\n          permission.\n          In general, the owner of an inbox is likely to be able to access\n          all of their inbox contents. Depending on access control, some\n          other content may be public, whereas other content may require\n          authentication for non-owner users, if they can access the inbox\n          at all.\n        </p>\n\n        <p>\n          The server <em title=\"MUST\">MUST</em> perform de-duplication of activities returned by\n          the inbox. Duplication can occur if an activity is addressed both\n          to an actor's followers, and a specific\n          actor who also follows the recipient actor, and the server has failed\n          to de-duplicate the recipients list.\n          Such deduplication <em title=\"MUST\">MUST</em> be performed by comparing the\n          <code>id</code> of the activities and dropping any activities\n          already seen.\n        </p>\n\n        <p>\n          The inboxes of actors on federated servers accepts HTTP POST requests,\n          with behaviour described in <a href=\"#delivery\">Delivery</a>.\n          Non-federated servers <em title=\"SHOULD\">SHOULD</em> return a 405 Method Not Allowed upon\n          receipt of a POST request.\n        </p>\n      </section>\n\n      <section id=\"followers\">\n        <h3 id=\"x5-3-followers-collection\"><span>5.3 </span>Followers Collection</h3>\n        <p>\n          Every <a href=\"#actors\">actor</a> <em title=\"SHOULD\">SHOULD</em> have a <code>followers</code>\n          collection.\n          This is a list of everyone who has sent a\n          <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#dfn-follow\">Follow</a>\n          activity for the actor, added as a\n          <a href=\"#follow-activity-outbox\">side effect</a>.\n          This is where one would find a list of all the actors that are\n          following the actor.\n          The <code>followers</code> collection <em title=\"MUST\">MUST</em> be either an\n          <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#dfn-orderedcollection\">\n            <code>OrderedCollection</code></a>\n          or a\n          <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#dfn-collection\">\n            <code>Collection</code></a>\n          and <em title=\"MAY\">MAY</em> be filtered on privileges of an authenticated user\n          or as appropriate when no authentication is given.\n        </p>\n\n        <div><p><span>Note</span><span>: Default for notification targeting</span></p><p>\n          The follow activity generally is a request to see the objects an actor\n          creates. This makes the Followers collection an appropriate default\n          target for <a href=\"#delivery\">delivery</a> of notifications.\n        </p></div>\n      </section>\n\n      <section id=\"following\">\n        <h3 id=\"x5-4-following-collection\"><span>5.4 </span>Following Collection</h3>\n        <p>\n          Every actor <em title=\"SHOULD\">SHOULD</em> have a <code>following</code> collection.\n          This is a list of everybody that the actor has followed, added as a\n          <a href=\"#follow-activity-outbox\">side effect</a>.\n          The <code>following</code> collection <em title=\"MUST\">MUST</em> be either an\n          <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#dfn-orderedcollection\">\n            <code>OrderedCollection</code></a>\n          or a\n          <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#dfn-collection\">\n            <code>Collection</code></a>\n          and <em title=\"MAY\">MAY</em> be filtered on privileges of an authenticated user\n          or as appropriate when no authentication is given.\n        </p>\n      </section>\n\n      <section id=\"liked\">\n        <h3 id=\"x5-5-liked-collection\"><span>5.5 </span>Liked Collection</h3>\n        <p>\n          Every actor <em title=\"MAY\">MAY</em> have a <code>liked</code> collection.\n          This is a list of every object from all of the actor's <code>Like</code>\n          activities, added as a <a href=\"#like-activity-outbox\">side effect</a>.\n          The <code>liked</code> collection <em title=\"MUST\">MUST</em> be either an\n          <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#dfn-orderedcollection\">\n            <code>OrderedCollection</code></a>\n          or a\n          <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#dfn-collection\">\n            <code>Collection</code></a>\n          and <em title=\"MAY\">MAY</em> be filtered on privileges of an authenticated user\n          or as appropriate when no authentication is given.\n        </p>\n      </section>\n\n      <section id=\"public-addressing\">\n        <h3 id=\"x5-6-public-addressing\"><span>5.6 </span>Public Addressing</h3>\n        <p>\n          In addition to [<cite><a href=\"#bib-ActivityStreams\">ActivityStreams</a></cite>] collections and objects,\n          Activities may additionally be addressed to the special \"public\"\n          collection, with the identifier\n          <code>https://www.w3.org/ns/activitystreams#Public</code>.\n          For example:\n        </p>\n        <div><p><span>Example 10</span></p><pre aria-busy=\"false\" aria-live=\"polite\">{\n  <span>\"@context\"</span>: <span>\"https://www.w3.org/ns/activitystreams\"</span>,\n  <span>\"id\"</span>: <span>\"https://www.w3.org/ns/activitystreams#Public\"</span>,\n  <span>\"type\"</span>: <span>\"Collection\"</span>\n}</pre></div>\n        <p>\n          Activities addressed to this special URI shall be accessible to all\n          users, without authentication.\n          Implementations <em title=\"MUST NOT\">MUST NOT</em> deliver to the \"public\" special collection;\n          it is not capable of receiving actual activities.\n          However, actors <em title=\"MAY\">MAY</em> have a\n          <a href=\"#sharedInbox\"><code>sharedInbox</code></a>\n          endpoint which is available for efficient shared delivery of public\n          posts (as well as posts to followers-only); see\n          <a href=\"#shared-inbox-delivery\"><span>7.1.3</span> <span>Shared Inbox Delivery</span></a>.\n        </p>\n        <div><p><span>Note</span></p><p>\n            Compacting an ActivityStreams object using the ActivityStreams\n            JSON-LD context might result in\n            <code>https://www.w3.org/ns/activitystreams#Public</code>\n            being represented as simply <code>Public</code> or <code>as:Public</code>\n            which are valid representations of the Public collection.\n            Implementations which treat ActivityStreams objects as simply\n            JSON rather than converting an incoming activity over to a\n            local context using JSON-LD tooling should be aware of this\n            and should be prepared to accept all three representations.\n          </p></div>\n      </section>\n\n      <section id=\"likes\">\n        <h3 id=\"x5-7-likes-collection\"><span>5.7 </span>Likes Collection</h3>\n        <p>\n          Every object <em title=\"MAY\">MAY</em> have a <code>likes</code> collection.\n          This is a list of all <code>Like</code> activities with this object\n          as the <code>object</code> property, added as a\n          <a href=\"#like-activity-inbox\">side effect</a>.\n          The <code>likes</code> collection <em title=\"MUST\">MUST</em> be either an\n          <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#dfn-orderedcollection\">\n            <code>OrderedCollection</code></a>\n          or a\n          <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#dfn-collection\">\n            <code>Collection</code></a>\n          and <em title=\"MAY\">MAY</em> be filtered on privileges of an authenticated user\n          or as appropriate when no authentication is given.\n        </p>\n\n        <div><p><span>Note</span></p><div>\n          <p>\n            Care should be taken to not confuse the the\n            <a href=\"#likes\"><code>likes</code></a>\n            collection with the similarly named but different\n            <a href=\"#liked\"><code>liked</code></a> collection.\n            In sum:\n          </p>\n\n          <ul>\n            <li>\n              <b>liked:</b>\n              Specifically a property of actors.\n              This is a collection of <code>Like</code> activities performed\n              <i>by the actor</i>,\n              added to the collection as a\n              <a href=\"#like-activity-outbox\">\n                side effect of delivery to the outbox</a>.\n            </li>\n\n            <li>\n              <b>likes:</b>\n              May be a property of any object.\n              This is a collection of <code>Like</code> activities referencing\n              this object,\n              added to the collection as a\n              <a href=\"#like-activity-inbox\">\n                side effect of delivery to the inbox</a>.\n            </li>\n          </ul>\n        </div></div>\n      </section>\n\n      <section id=\"shares\">\n        <h3 id=\"x5-8-shares-collection\"><span>5.8 </span>Shares Collection</h3>\n        <p>\n          Every object <em title=\"MAY\">MAY</em> have a <code>shares</code> collection.\n          This is a list of all <code>Announce</code> activities with this object\n          as the <code>object</code> property, added as a\n          <a href=\"#announce-activity-inbox\">side effect</a>.\n          The <code>shares</code> collection <em title=\"MUST\">MUST</em> be either an\n          <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#dfn-orderedcollection\">\n            <code>OrderedCollection</code></a>\n          or a\n          <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#dfn-collection\">\n            <code>Collection</code></a>\n          and <em title=\"MAY\">MAY</em> be filtered on privileges of an authenticated user\n          or as appropriate when no authentication is given.\n        </p>\n      </section>\n    </section>\n\n    <section id=\"client-to-server-interactions\">\n      <!--OddPage--><h2 id=\"x6-client-to-server-interactions\"><span>6. </span>Client to Server Interactions</h2>\n      <p>\n        Activities as defined by [<cite><a href=\"#bib-ActivityStreams\">ActivityStreams</a></cite>] are the core mechanism\n        for creating, modifying and sharing content within the social graph.\n      </p>\n\n      <p>\n        Client to server interaction takes place through clients posting\n        Activities to an actor's <a href=\"#outbox\">outbox</a>.\n        To do this, clients <em title=\"MUST\">MUST</em> discover the URL of the actor's outbox from\n\ttheir <a href=\"#actor-objects\">profile</a> and then <em title=\"MUST\">MUST</em> make an HTTP\n        <code>POST</code> request to this URL with the Content-Type of\n        <code>application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\"</code>.\n        Servers <em title=\"MAY\">MAY</em> interpret a Content-Type or Accept header of\n        <code>application/activity+json</code> as equivalent\n        to <code>application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\"</code>\n        for client-to-server interactions.\n        The request <em title=\"MUST\">MUST</em> be authenticated with the credentials of the user to\n        whom the outbox belongs.\n        The body of the <code>POST</code> request <em title=\"MUST\">MUST</em> contain a single\n        Activity (which <em title=\"MAY\">MAY</em> contain embedded objects), or a single non-Activity\n        object which\n        <a href=\"#object-without-create\">will be wrapped in a Create activity\n          by the server</a>.\n      </p>\n      <div><p><span>Example 11</span><span>: Submitting an Activity to the Outbox</span></p><pre aria-busy=\"false\" aria-live=\"polite\"><span>POST</span> <span>/outbox/</span> HTTP/1.1\n<span>Host</span>: dustycloud.org\n<span>Authorization</span>: Bearer XXXXXXXXXXX\n<span>Content-Type</span>: application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\"\n\n<span>{\n  <span>\"@context\"</span>: [<span>\"https://www.w3.org/ns/activitystreams\"</span>,\n               {<span>\"@language\"</span>: <span>\"en\"</span>}],\n  <span>\"type\"</span>: <span>\"Like\"</span>,\n  <span>\"actor\"</span>: <span>\"https://dustycloud.org/chris/\"</span>,\n  <span>\"name\"</span>: <span>\"Chris liked 'Minimal ActivityPub update client'\"</span>,\n  <span>\"object\"</span>: <span>\"https://rhiaro.co.uk/2016/05/minimal-activitypub\"</span>,\n  <span>\"to\"</span>: [<span>\"https://rhiaro.co.uk/#amy\"</span>,\n         <span>\"https://dustycloud.org/followers\"</span>,\n         <span>\"https://rhiaro.co.uk/followers/\"</span>],\n  <span>\"cc\"</span>: <span>\"https://e14n.com/evan\"</span>\n}</span></pre></div>\n\n      <p>\n        If an Activity is submitted with a value in the <code>id</code>\n        property, servers <em title=\"MUST\">MUST</em> ignore this and generate a new <code>id</code>\n        for the Activity.\n        Servers <em title=\"MUST\">MUST</em> return a <code>201 Created</code> HTTP code, and unless\n        the activity is transient, <em title=\"MUST\">MUST</em> include the new <code>id</code> in the\n        <code>Location</code> header.\n      </p>\n      <div><p><span>Example 12</span><span>: Outbox response to submitted Activity</span></p><pre aria-busy=\"false\" aria-live=\"polite\">HTTP/1.1 <span>201</span> Created\n<span>Location</span>: https://dustycloud.org/likes/345</pre></div>\n\n      <p id=\"remove-bto-bcc-before-delivery\">\n        The server <em title=\"MUST\">MUST</em> remove the <code>bto</code> and/or <code>bcc</code>\n        properties, if they exist, from the ActivityStreams object before\n        delivery, but <em title=\"MUST\">MUST</em> utilize the addressing originally stored\n        on the <code>bto</code> / <code>bcc</code> properties for determining\n        recipients in <a href=\"#delivery\">delivery</a>.\n      </p>\n\n      <p>\n        The server <em title=\"MUST\">MUST</em> then add this new Activity to the\n        <a href=\"#outbox\">outbox</a> collection.\n        Depending on the type of Activity, servers may then be required to\n        carry out further side effects.\n        (However, there is no guarantee that time the Activity may appear in\n        the outbox.\n        The Activity might appear after a delay or disappear at any period).\n        These are described per individual Activity below.\n      </p>\n\n      <p>\n        Attempts to submit objects to servers not implementing client to server\n        support <em title=\"SHOULD\">SHOULD</em> result in a <code>405 Method Not Allowed</code> response.\n      </p>\n\n\n      <p>\n        HTTP caching mechanisms [<cite><a href=\"#bib-RFC7234\">RFC7234</a></cite>] <em title=\"SHOULD\">SHOULD</em> be respected when\n        appropriate, both in clients receiving responses from servers as well\n        as servers sending responses to clients.\n      </p>\n\n      <section id=\"client-addressing\">\n        <h3 id=\"x6-1-client-addressing\"><span>6.1 </span>Client Addressing</h3>\n          <p>\n          <strong>Clients</strong> are responsible for addressing new Activities\n          appropriately.\n          To some extent, this is dependent upon the particular client\n          implementation, but clients must be aware that the server will only\n          forward new Activities to addressees in the <code>to</code>,\n          <code>bto</code>, <code>cc</code>, <code>bcc</code>, and\n          <code>audience</code> fields.\n        </p>\n        <p>\n          The <a href=\"#followers\">Followers Collection</a> and/or the\n          <a href=\"#public-addressing\">Public Collection</a> are good\n          choices for the default addressing of new Activities.\n        </p>\n        <p>\n          Clients <em title=\"SHOULD\">SHOULD</em> look at any objects attached to the new Activity via the\n          <code>object</code>, <code>target</code>, <code>inReplyTo</code> and/or\n          <code>tag</code> fields, retrieve <em>their</em> <code>actor</code> or\n          <code>attributedTo</code> properties, and <em title=\"MAY\">MAY</em> also retrieve their addressing\n          properties, and add these to the <code>to</code> or <code>cc</code>\n          fields of the new Activity being created.\n          Clients <em title=\"MAY\">MAY</em> recurse through attached objects, but if doing so, <em title=\"SHOULD\">SHOULD</em>\n          set a limit for this recursion.\n          (Note that this does not suggest that the client should \"unpack\"\n          collections of actors being addressed as individual recipients).\n        </p>\n        <p>\n          Clients <em title=\"MAY\">MAY</em> give the user the chance to amend this addressing in the\n          UI.\n        </p>\n        <p>\n          For example, when Chris likes the following article by Amy:\n        </p>\n\n        <div><p><span>Example 13</span><span>: An Article</span></p><pre aria-busy=\"false\" aria-live=\"polite\">{\n  <span>\"@context\"</span>: [<span>\"https://www.w3.org/ns/activitystreams\"</span>,\n               {<span>\"@language\"</span>: <span>\"en-GB\"</span>}],\n  <span>\"id\"</span>: <span>\"https://rhiaro.co.uk/2016/05/minimal-activitypub\"</span>,\n  <span>\"type\"</span>: <span>\"Article\"</span>,\n  <span>\"name\"</span>: <span>\"Minimal ActivityPub update client\"</span>,\n  <span>\"content\"</span>: <span>\"Today I finished morph, a client for posting ActivityStreams2...\"</span>,\n  <span>\"attributedTo\"</span>: <span>\"https://rhiaro.co.uk/#amy\"</span>,\n  <span>\"to\"</span>: <span>\"https://rhiaro.co.uk/followers/\"</span>,\n  <span>\"cc\"</span>: <span>\"https://e14n.com/evan\"</span>\n}</pre></div>\n\n        <p>the like is generated by the client as:</p>\n\n        <div><p><span>Example 14</span><span>: A Like of the Article</span></p><pre aria-busy=\"false\" aria-live=\"polite\">{\n  <span>\"@context\"</span>: [<span>\"https://www.w3.org/ns/activitystreams\"</span>,\n               {<span>\"@language\"</span>: <span>\"en\"</span>}],\n  <span>\"type\"</span>: <span>\"Like\"</span>,\n  <span>\"actor\"</span>: <span>\"https://dustycloud.org/chris/\"</span>,\n  <span>\"summary\"</span>: <span>\"Chris liked 'Minimal ActivityPub update client'\"</span>,\n  <span>\"object\"</span>: <span>\"https://rhiaro.co.uk/2016/05/minimal-activitypub\"</span>,\n  <span>\"to\"</span>: [<span>\"https://rhiaro.co.uk/#amy\"</span>,\n         <span>\"https://dustycloud.org/followers\"</span>,\n         <span>\"https://rhiaro.co.uk/followers/\"</span>],\n  <span>\"cc\"</span>: <span>\"https://e14n.com/evan\"</span>\n}</pre></div>\n\n        <p>The receiving outbox can then perform <a href=\"#delivery\">delivery</a>\n        to not only the followers of Chris (the liker), but also to Amy, and Amy's\n        followers and Evan, both of whom received the original article.</p>\n\n        <p>\n          Clients submitting the following activities to an <code>outbox</code>\n          <em title=\"MUST\">MUST</em> provide the <code>object</code> property in the activity:\n          <code>Create</code>, <code>Update</code>, <code>Delete</code>,\n          <code>Follow</code>, <code>Add</code>, <code>Remove</code>,\n          <code>Like</code>, <code>Block</code>, <code>Undo</code>.\n          Additionally, clients submitting the following activities to an outbox\n          <em title=\"MUST\">MUST</em> also provide the <code>target</code> property:\n          <code>Add</code>, <code>Remove</code>.\n        </p>\n\n      </section>\n\n\n      <section id=\"create-activity-outbox\">\n        <h3 id=\"x6-2-create-activity\"><span>6.2 </span>Create Activity</h3>\n        <p>\n          The <code>Create</code> activity is used when posting a new object.\n          This has the side effect that the object embedded within the Activity\n          (in the <code>object</code> property) is created.\n        </p>\n        <p>\n          When a <code>Create</code> activity is posted, the <code>actor</code>\n          of the activity <em title=\"SHOULD\">SHOULD</em> be copied onto the <code>object</code>'s\n          <code>attributedTo</code> field.\n        </p>\n        <p>\n          A mismatch between addressing of the Create activity and its\n          <code>object</code> is likely to lead to confusion.\n          As such, a server <em title=\"SHOULD\">SHOULD</em> copy any recipients of the Create activity\n          to its <code>object</code> upon initial distribution, and likewise\n          with copying recipients from the <code>object</code> to the wrapping\n          Create activity.\n          Note that it is acceptable for the <code>object</code>'s addressing\n          to be changed later without changing the <code>Create</code>'s\n          addressing (for example via an <code>Update</code> activity).\n        </p>\n\n        <section id=\"object-without-create\">\n        <h4 id=\"x6-2-1-object-creation-without-a-create-activity\"><span>6.2.1 </span>Object creation without a Create Activity</h4>\n        <p>\n          For client to server posting, it is possible to submit an object for\n          creation without a surrounding activity.\n          The server <em title=\"MUST\">MUST</em> accept a valid [<cite><a href=\"#bib-ActivityStreams\">ActivityStreams</a></cite>] object that\n          isn't a subtype of <code>Activity</code> in the POST request to the\n          outbox.\n          The server then <em title=\"MUST\">MUST</em> attach this object as the <code>object</code>\n          of a <a href=\"#create-activity-outbox\">Create Activity</a>.\n          For non-transient objects, the server <em title=\"MUST\">MUST</em> attach an\n          <code>id</code> to both the wrapping <code>Create</code> and its\n          wrapped <code>Object</code>.\n        </p>\n\n        <div><p><span>Note</span></p><p>\n          The <code>Location</code> value returned by the server should be the URL of\n          the new Create activity (rather than the object).\n        </p></div>\n\n        <p>\n          Any <code>to</code>, <code>bto</code>, <code>cc</code>, <code>bcc</code>,\n          and <code>audience</code> properties specified on the object <em title=\"MUST\">MUST</em> be\n          copied over to the new Create activity by the server.\n        </p>\n\n        <div><p><span>Example 15</span><span>: Object with audience targeting</span></p><pre aria-busy=\"false\" aria-live=\"polite\">{\n  <span>\"@context\"</span>: <span>\"https://www.w3.org/ns/activitystreams\"</span>,\n  <span>\"type\"</span>: <span>\"Note\"</span>,\n  <span>\"content\"</span>: <span>\"This is a note\"</span>,\n  <span>\"published\"</span>: <span>\"2015-02-10T15:04:55Z\"</span>,\n  <span>\"to\"</span>: [<span>\"https://example.org/~john/\"</span>],\n  <span>\"cc\"</span>: [<span>\"https://example.com/~erik/followers\"</span>,\n         <span>\"https://www.w3.org/ns/activitystreams#Public\"</span>]\n}</pre></div>\n\n        The above example could be converted to this:\n        <div><p><span>Example 16</span><span>: Create Activity wrapper generated by the server</span></p><pre aria-busy=\"false\" aria-live=\"polite\">{\n  <span>\"@context\"</span>: <span>\"https://www.w3.org/ns/activitystreams\"</span>,\n  <span>\"type\"</span>: <span>\"Create\"</span>,\n  <span>\"id\"</span>: <span>\"https://example.net/~mallory/87374\"</span>,\n  <span>\"actor\"</span>: <span>\"https://example.net/~mallory\"</span>,\n  <span>\"object\"</span>: {\n    <span>\"id\"</span>: <span>\"https://example.com/~mallory/note/72\"</span>,\n    <span>\"type\"</span>: <span>\"Note\"</span>,\n    <span>\"attributedTo\"</span>: <span>\"https://example.net/~mallory\"</span>,\n    <span>\"content\"</span>: <span>\"This is a note\"</span>,\n    <span>\"published\"</span>: <span>\"2015-02-10T15:04:55Z\"</span>,\n    <span>\"to\"</span>: [<span>\"https://example.org/~john/\"</span>],\n    <span>\"cc\"</span>: [<span>\"https://example.com/~erik/followers\"</span>,\n           <span>\"https://www.w3.org/ns/activitystreams#Public\"</span>]\n  },\n  <span>\"published\"</span>: <span>\"2015-02-10T15:04:55Z\"</span>,\n  <span>\"to\"</span>: [<span>\"https://example.org/~john/\"</span>],\n  <span>\"cc\"</span>: [<span>\"https://example.com/~erik/followers\"</span>,\n         <span>\"https://www.w3.org/ns/activitystreams#Public\"</span>]\n}</pre></div>\n        </section>\n      </section>\n      <section id=\"update-activity-outbox\">\n        <h3 id=\"x6-3-update-activity\"><span>6.3 </span>Update Activity</h3>\n        <p>\n          The <code>Update</code> activity is used when updating an already\n          existing object.\n          The side effect of this is that the <code>object</code> <em title=\"MUST\">MUST</em> be\n          modified to reflect the new structure as defined in the update\n          activity, assuming the actor has permission to update this\n          object.\n        </p>\n\n        <section id=\"partial-updates\">\n          <h4 id=\"x6-3-1-partial-updates\"><span>6.3.1 </span>Partial Updates</h4>\n          <p>\n            For client to server interactions, updates are partial;\n            rather than updating the document all at once, any key value\n            pair supplied is used to replace the existing value with\n            the new value.\n            This only applies to the top-level fields of the updated\n            object.\n            A special exception is for when the value is the json\n            <code>null</code> type; this means that this field should be\n            removed from the server's representation of the object.\n          </p>\n          <p>\n            Note that this behavior is for client to server interaction where\n            the client is posting to the server only.\n            Server to server interaction and updates from the server to the client\n            should contain the entire new representation of the object, after\n            the partial update application has been applied.\n            See the description of the\n            <a href=\"#update-activity-inbox\">Update activity for server to server\n              interactions</a>\n            for more details.\n          </p>\n        </section>\n      </section>\n      <section id=\"delete-activity-outbox\">\n        <h3 id=\"x6-4-delete-activity\"><span>6.4 </span>Delete Activity</h3>\n        <p>\n          The <code>Delete</code> activity is used to delete an already\n          existing object.\n          The side effect of this is that the server <em title=\"MAY\">MAY</em> replace the\n          <code>object</code> with a <code>Tombstone</code> of the object\n          that will be displayed in activities which reference the deleted\n          object.\n          If the deleted object is requested the server <em title=\"SHOULD\">SHOULD</em> respond with\n          either the HTTP 410 Gone status code if a <code>Tombstone</code>\n          object is presented as the response body, otherwise respond with a\n          HTTP 404 Not Found.\n        </p>\n\n        <p>A deleted object:</p>\n        <div><p><span>Example 17</span></p><pre aria-busy=\"false\" aria-live=\"polite\">{\n  <span>\"@context\"</span>: <span>\"https://www.w3.org/ns/activitystreams\"</span>,\n  <span>\"id\"</span>: <span>\"https://example.com/~alice/note/72\"</span>,\n  <span>\"type\"</span>: <span>\"Tombstone\"</span>,\n  <span>\"published\"</span>: <span>\"2015-02-10T15:04:55Z\"</span>,\n  <span>\"updated\"</span>: <span>\"2015-02-10T15:04:55Z\"</span>,\n  <span>\"deleted\"</span>: <span>\"2015-02-10T15:04:55Z\"</span>\n}</pre></div>\n      </section>\n      <section id=\"follow-activity-outbox\">\n        <h3 id=\"x6-5-follow-activity\"><span>6.5 </span>Follow Activity</h3>\n        <p>\n          The <code>Follow</code> activity is used to subscribe to the\n          activities of another actor.\n        </p>\n        <p>\n          The side effect of receiving this in an <strong>outbox</strong>\n          is that the server <em title=\"SHOULD\">SHOULD</em> add the <code>object</code> to the\n          <code>actor</code>'s <a href=\"#following\"><code>following</code> Collection</a>\n          when and only if an <code>Accept</code> activity is subsequently\n          received with this <code>Follow</code> activity as its object.\n        </p>\n      </section>\n      <section id=\"add-activity-outbox\">\n        <h3 id=\"x6-6-add-activity\"><span>6.6 </span>Add Activity</h3>\n        <p>\n          Upon receipt of an <code>Add</code> activity into the\n          <strong>outbox</strong>, the server <em title=\"SHOULD\">SHOULD</em>\n          add the <code>object</code> to the collection specified in the\n          <code>target</code> property, unless:\n        </p>\n        <ul>\n          <li>\n            the <code>target</code> is not owned by the receiving\n            server, and thus they are not authorized to update it.\n          </li>\n          <li>\n            the <code>object</code> is not allowed to be added to the\n            <code>target</code> collection for some other reason, at the\n            receiving server's discretion.\n          </li>\n        </ul>\n      </section>\n      <section id=\"remove-activity-outbox\">\n        <h3 id=\"x6-7-remove-activity\"><span>6.7 </span>Remove Activity</h3>\n        <p>\n          Upon receipt of a <code>Remove</code> activity into the\n          <strong>outbox</strong>, the server <em title=\"SHOULD\">SHOULD</em>\n          remove the <code>object</code> from the collection specified in the\n          <code>target</code> property, unless:\n        </p><ul>\n          <li>\n            the <code>target</code> is not owned by the receiving server, and\n            thus they are not authorized to update it.\n          </li>\n          <li>\n            the <code>object</code> is not allowed to be removed from the\n            <code>target</code> collection for some other reason, at the\n            receiving server's discretion.\n          </li>\n        </ul>\n      </section>\n      <section id=\"like-activity-outbox\">\n        <h3 id=\"x6-8-like-activity\"><span>6.8 </span>Like Activity</h3>\n        <p>\n          The <code>Like</code> activity indicates the <code>actor</code> likes\n          the <code>object</code>.\n        </p>\n        <p>\n          The side effect of receiving this in an <strong>outbox</strong>\n          is that the server <em title=\"SHOULD\">SHOULD</em> add the <code>object</code> to the\n          <code>actor</code>'s <a href=\"#liked\"><code>liked</code> Collection</a>.\n        </p>\n      </section>\n      <section id=\"block-activity-outbox\">\n        <h3 id=\"x6-9-block-activity\"><span>6.9 </span>Block Activity</h3>\n        <p>\n          The <code>Block</code> activity is used to indicate that the posting\n          actor does not want another actor (defined in the <code>object</code>\n          property) to be able to interact with objects posted by the actor\n          posting the <code>Block</code> activity.\n          The server <em title=\"SHOULD\">SHOULD</em> prevent the blocked user from interacting with any object\n          posted by the actor.\n        </p>\n        <p>\n          Servers <em title=\"SHOULD NOT\">SHOULD NOT</em> deliver Block Activities to their <code>object</code>.\n        </p>\n      </section>\n      <section id=\"undo-activity-outbox\">\n        <h3 id=\"x6-10-undo-activity\"><span>6.10 </span>Undo Activity</h3>\n        <p>\n          The <code>Undo</code> activity is used to undo a previous activity.\n          See the Activity Vocabulary documentation on\n          <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#inverse\">\n            Inverse Activities and \"Undo\"</a>.\n          For example, <code>Undo</code> may be used to undo a previous\n          <code>Like</code>, <code>Follow</code>, or <code>Block</code>.\n          The undo activity and the activity being undone <em title=\"MUST\">MUST</em> both have the\n          same actor.\n          Side effects should be undone, to the extent possible.\n          For example, if undoing a <code>Like</code>, any counter that had\n          been incremented previously should be decremented appropriately.\n        </p>\n\n        <p>\n          There are some exceptions where there is an existing and explicit\n          \"inverse activity\" which should be used instead.\n          <code>Create</code> based activities should instead use\n          <code>Delete</code>, and <code>Add</code> activities should use\n          <code>Remove</code>.\n        </p>\n      </section>\n\n      <section id=\"client-to-server-outbox-delivery\">\n        <h3 id=\"x6-11-delivery\"><span>6.11 </span>Delivery</h3>\n        <p>\n          Federated servers <em title=\"MUST\">MUST</em> perform delivery on all Activities posted to the\n          <strong>outbox</strong> according to <a href=\"#outbox-delivery\">\n          outbox delivery</a>.\n        </p>\n      </section>\n\n      <section id=\"uploading-media\">\n        <h3 id=\"x6-12-uploading-media\"><span>6.12 </span>Uploading Media</h3><p><em>This section is non-normative.</em></p>\n        <p>\n          Servers <em title=\"MAY\">MAY</em> support uploading document types to be referenced in\n          activites, such as images, video or other binary data, but the\n          precise mechanism is out of scope for this version of ActivityPub.\n          The Social Web Community Group is refining the protocol in the\n          <a href=\"https://www.w3.org/wiki/SocialCG/ActivityPub/MediaUpload\">ActivityPub Media Upload report</a>.\n        </p>\n      </section>\n\n\n    </section>\n\n    <section id=\"server-to-server-interactions\">\n      <!--OddPage--><h2 id=\"x7-server-to-server-interactions\"><span>7. </span>Server to Server Interactions</h2>\n      <p>\n        Servers communicate with other servers and propagate information across\n        the social graph by posting activities to actors'\n        <a href=\"#inbox\">inbox</a> endpoints.\n        An Activity sent over the network <em title=\"SHOULD\">SHOULD</em> have an <code>id</code>,\n        unless it is intended to be transient (in which case it <em title=\"MAY\">MAY</em> omit the\n        <code>id</code>).\n      </p><p>\n        <code>POST</code> requests (eg. to the inbox) <em title=\"MUST\">MUST</em> be made with a Content-Type of\n        <code>application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\"</code>\n        and <code>GET</code> requests (see also <a href=\"#retrieving-objects\"><span>3.2</span> <span>Retrieving objects</span></a>) \n        with an Accept header of \n        <code>application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\"</code>.\n        Servers <em title=\"SHOULD\">SHOULD</em> interpret a Content-Type or Accept\n        header of <code>application/activity+json</code> as equivalent\n        to <code>application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\"</code>\n        for server-to-server interactions.\n      </p>\n      <p>\n        In order to propagate updates throughout the social graph, Activities\n        are sent to the appropriate recipients.\n        First, these recipients are determined through following the\n        appropriate links between objects until you reach an actor, and then\n        the Activity is inserted into the actor's <em>inbox</em>\n        (<a href=\"#delivery\">delivery</a>).\n        This allows recipient servers to:\n      </p>\n      <ul>\n        <li>\n          conduct any side effects related to the Activity (for example,\n          notification that an actor has liked an object is used to update the\n          object's like count);\n        </li>\n        <li>\n          deliver the Activity to recipients of the original object, to ensure\n          updates are propagated to the whole social graph (see <a href=\"#inbox-forwarding\">\n          inbox delivery</a>).\n        </li>\n      </ul>\n      <p>Delivery is usually triggered by, for example:</p>\n      <ul>\n        <li>\n          an Activity being created in an actor's <a href=\"#outbox\">outbox</a>\n          with their <a href=\"#followers\">Followers Collection</a> as the\n          recipient.\n        </li>\n        <li>\n          an Activity being created in an actor's <a href=\"#outbox\">outbox</a>\n          with directly addressed recipients.\n        </li>\n        <li>\n          an Activity being created in an actors's <a href=\"#outbox\">outbox</a>\n          with user-curated collections as recipients.\n        </li>\n        <li>\n          an Activity being created in an actor's <a href=\"#outbox\">outbox</a> or\n          <a href=\"#inbox\">inbox</a> which references another object.\n        </li>\n      </ul>\n\n      <p>\n        Servers performing delivery to the <code>inbox</code> or\n        <code>sharedInbox</code> properties of actors on other servers <em title=\"MUST\">MUST</em>\n        provide the <code>object</code> property in the activity:\n        <code>Create</code>, <code>Update</code>, <code>Delete</code>,\n        <code>Follow</code>, <code>Add</code>, <code>Remove</code>,\n        <code>Like</code>, <code>Block</code>, <code>Undo</code>.\n        Additionally, servers performing server to server delivery of the\n        following activities <em title=\"MUST\">MUST</em> also provide the <code>target</code>\n        property: <code>Add</code>, <code>Remove</code>.\n      </p>\n\n      <p>\n        HTTP caching mechanisms [<cite><a href=\"#bib-RFC7234\">RFC7234</a></cite>] <em title=\"SHOULD\">SHOULD</em> be respected when\n        appropriate, both when receiving responses from other servers as well\n        as sending responses to other servers.\n      </p>\n\n      <section id=\"delivery\">\n        <h3 id=\"x7-1-delivery\"><span>7.1 </span>Delivery</h3>\n\n        <p><i>\n          The following is required by federated servers communicating with\n          other federated servers only.\n        </i></p>\n\n        <p>\n          An activity is delivered to its targets (which are\n          <a href=\"#actors\">actors</a>) by first looking up the targets'\n          inboxes and then posting the activity to those inboxes.\n          Targets for delivery are determined by checking the\n          <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#audienceTargeting\">\n            ActivityStreams audience targeting</a>;\n          namely, the <code>to</code>, <code>bto</code>, <code>cc</code>,\n          <code>bcc</code>, and <code>audience</code> fields of the activity.\n        </p>\n\n        <p>\n          The <a href=\"#inbox\">inbox</a> is determined by first\n          <a href=\"#retrieving-objects\">\n            retrieving the target actor's JSON-LD representation</a>\n          and then looking up the <code>inbox</code> property.\n          If a recipient is a <code>Collection</code> or <code>OrderedCollection</code>,\n          then the server <em title=\"MUST\">MUST</em> dereference the collection (with the user's\n          credentials) and discover inboxes for each item in the collection.\n          Servers <em title=\"MUST\">MUST</em> limit the number of layers of indirections through\n          collections which will be performed, which <em title=\"MAY\">MAY</em> be one.\n        </p>\n\n        <p>\n          Servers <em title=\"MUST\">MUST</em> de-duplicate the final recipient list. Servers <em title=\"MUST\">MUST</em> also\n          exclude actors from the list which are the same as the <code>actor</code>\n          of the Activity being notified about. That is, actors shouldn't have their\n          own activities delivered to themselves.\n        </p>\n\n        <div><p><span>Note</span><span>: Silent and private activities</span></p><p>\n          What to do when there are no recipients specified is not defined,\n          however it's recommended that if no recipients are specified the\n          object remains completely private and access controls restrict the\n          access to object.\n          If the object is just sent to the \"public\" collection the object is\n          not delivered to any actors but is publicly viewable in the actor's\n          outbox.\n        </p></div>\n\n        <p>\n          An HTTP POST request (with authorization of the submitting user) is\n          then made to the <a href=\"#inbox\">inbox</a>, with the Activity as\n          the body of the request.\n          This Activity is added by the receiver as an <code>item</code> in the\n          <a href=\"#inbox\">inbox</a> OrderedCollection.\n          Attempts to deliver to an inbox on a non-federated server <em title=\"SHOULD\">SHOULD</em>\n          result in a <code>405 Method Not Allowed</code> response.\n        </p>\n\n        <p>\n          For federated servers performing delivery to a third party server,\n          delivery <em title=\"SHOULD\">SHOULD</em> be performed asynchronously, and <em title=\"SHOULD\">SHOULD</em> additionally\n          retry delivery to recipients if it fails due to network error.\n        </p>\n\n        <p>\n          <strong>Note:</strong> Activities being distributed between actors on\n          the same origin may use any internal mechanism, and are not required\n          to use HTTP.\n        </p>\n\n        <div><p><span>Note</span><span>: Relationship to Linked Data Notifications</span></p><p id=\"ldn-relationship\">\n          While it is not required reading to understand this specification,\n          it is worth noting that ActivityPub's targeting and delivery\n          mechanism overlaps with the\n          <a href=\"https://www.w3.org/TR/ldn/\">Linked Data Notifications</a>\n          specification, and the two specifications may interoperably\n          combined.\n          In particular, the <code>inbox</code> property is the same between\n          ActivityPub and Linked Data Notifications, and the targeting\n          and delivery systems described in this document are supported\n          by Linked Data Notifications.\n          In addition to JSON-LD compacted ActivityStreams documents, Linked\n          Data Notifications also supports a number of RDF serializations\n          which are not required for ActivityPub implementations.\n          However, ActivityPub implementations which wish to be more broadly\n          compatible with Linked Data Notifications implementations may wish to\n          support other RDF representations.\n        </p></div>\n\n        <section id=\"outbox-delivery\">\n          <h4 id=\"x7-1-1-outbox-delivery-requirements-for-server-to-server\"><span>7.1.1 </span>Outbox Delivery Requirements for Server to Server</h4>\n          <p>\n            When objects are received in the <a href=\"#outbox\">outbox</a>\n            (for servers which support both\n            <a href=\"#client-to-server-interactions\">Client to Server interactions</a>\n            and\n            <a href=\"#server-to-server-interactions\">Server to Server Interactions</a>),\n            the server <em title=\"MUST\">MUST</em> target and deliver to:\n          </p>\n          <ul>\n            <li>\n              The <code>to</code>, <code>bto</code>, <code>cc</code>,\n              <code>bcc</code> or <code>audience</code> fields if their values\n              are individuals or Collections owned by the actor.\n            </li>\n          </ul>\n          <p>\n            These fields will have been <a href=\"#client-addressing\">\n            populated appropriately by the client</a> which posted the Activity\n            to the outbox.\n          </p>\n        </section>\n\n        <section id=\"inbox-forwarding\">\n          <h4 id=\"x7-1-2-forwarding-from-inbox\"><span>7.1.2 </span>Forwarding from Inbox</h4>\n\n          <div><p><span>Note</span><span>: Forwarding to avoid the ghost replies problem</span></p><div>\n            <p>\n              The following section is to mitigate the \"ghost replies\" problem\n              which occasionally causes problems on federated networks.\n              This problem is best demonstrated with an example.\n            </p>\n\n            <p>\n              Alyssa makes a post about her having successfully presented a\n              paper at a conference and sends it to her followers collection,\n              which includes her friend Ben.\n              Ben replies to Alyssa's message congratulating her and includes\n              her followers collection on the recipients.\n              However, Ben has no access to see the members of Alyssa's\n              followers collection, so his server does not forward his messages\n              to their inbox.\n              Without the following mechanism, if Alyssa were then to reply to\n              Ben, her followers would see Alyssa replying to Ben without having\n              ever seen Ben interacting.\n              This would be very confusing!\n            </p>\n          </div></div>\n\n          <p>\n            When Activities are received in the <a href=\"#inbox\">inbox</a>, the\n            server needs to forward these to recipients that the origin was unable\n            to deliver them to. To do this, the server <em title=\"MUST\">MUST</em> target and\n            <a href=\"#delivery\">deliver</a>\n            to the values of <code>to</code>, <code>cc</code>, and/or <code>audience</code>\n            if and only if all of the following are true:\n          </p>\n          <ul>\n            <li>This is the first time the server has seen this Activity.</li>\n            <li>\n              The values of <code>to</code>, <code>cc</code>, and/or\n              <code>audience</code> contain a Collection owned by the server.\n            </li>\n            <li>\n              The values of <code>inReplyTo</code>, <code>object</code>,\n              <code>target</code> and/or <code>tag</code> are objects owned by\n              the server.\n              The server <em title=\"SHOULD\">SHOULD</em> recurse through these values to look for linked objects\n              owned by the server, and <em title=\"SHOULD\">SHOULD</em> set a maximum limit for recursion (ie. the\n              point at which the thread is so deep the recipients followers may not mind\n              if they are no longer getting updates that don't directly involve the\n              recipient).\n              The server <em title=\"MUST\">MUST</em> only target the values of <code>to</code>,\n              <code>cc</code>, and/or <code>audience</code>\n              on the original object being forwarded, and not pick up any new\n              addressees whilst recursing through the linked objects\n              (in case these addressees were purposefully amended by or via the client).\n            </li>\n          </ul>\n          <p>\n            The server <em title=\"MAY\">MAY</em> filter its delivery targets according to\n            implementation-specific rules (for example, spam filtering).\n          </p>\n        </section>\n\n        <section id=\"shared-inbox-delivery\">\n          <h4 id=\"x7-1-3-shared-inbox-delivery\"><span>7.1.3 </span>Shared Inbox Delivery</h4>\n          <p>\n            For servers hosting many actors, delivery to all followers can\n            result in an overwhelming number of messages sent.\n            Some servers would also like to display a list of all messages\n            posted publicly to the \"known network\".\n            Thus ActivityPub provides an optional mechanism for serving these\n            two use cases.\n          </p>\n          <p>\n            When an object is being delivered to the originating actor's\n            followers, a server <em title=\"MAY\">MAY</em> reduce the number of receiving actors\n            delivered to by identifying all followers which share the same\n            <a href=\"#sharedInbox\">sharedInbox</a>\n            who would otherwise be individual recipients and instead deliver\n            objects to said <code>sharedInbox</code>.\n            Thus in this scenario, the remote/receiving server participates\n            in determining targeting and performing delivery to specific\n            inboxes.\n          </p>\n          <p>\n            Additionally, if an object is addressed to the\n            <a href=\"#public-addressing\">Public</a> special collection, a\n            server <em title=\"MAY\">MAY</em> deliver that object to all known\n            <code>sharedInbox</code> endpoints on the network.\n          </p>\n          <p>\n            Origin servers sending publicly addressed activities to\n            <code>sharedInbox</code> endpoints <em title=\"MUST\">MUST</em> still deliver to actors\n            and collections otherwise addressed (through <code>to</code>,\n            <code>bto</code>, <code>cc</code>, <code>bcc</code>, and\n            <code>audience</code>) which do not have a <code>sharedInbox</code>\n            and would not otherwise receive the activity through the\n            <code>sharedInbox</code> mechanism.\n          </p>\n        </section>\n      </section>\n\n      <section id=\"create-activity-inbox\">\n        <h3 id=\"x7-2-create-activity\"><span>7.2 </span>Create Activity</h3>\n        <p>\n          Receiving a <code>Create</code> activity in an <code>inbox</code> has\n          surprisingly few side effects; the activity should appear in the\n          actor's <code>inbox</code> and it is likely that the server will want\n          to locally store a representation of this activity and its accompanying\n          object.\n          However, this mostly happens in general with processing activities\n          delivered to an <code>inbox</code> anyway.\n        </p>\n      </section>\n\n      <section id=\"update-activity-inbox\">\n        <h3 id=\"x7-3-update-activity\"><span>7.3 </span>Update Activity</h3>\n        <p>\n          For server to server interactions, an <code>Update</code> activity\n          means that the receiving server <em title=\"SHOULD\">SHOULD</em> update its copy of the\n          <code>object</code> of the same <code>id</code> to the copy\n          supplied in the <code>Update</code> activity.\n          Unlike the\n          <a href=\"#update-activity-outbox\">\n            client to server handling of the Update activity</a>,\n          this is not a partial update but a complete replacement of the object.\n        </p>\n        <p>\n          The receiving server <em title=\"MUST\">MUST</em> take care to be sure that the\n          <code>Update</code> is authorized to modify its <code>object</code>.\n          At minimum, this may be done by ensuring that the <code>Update</code>\n          and its <code>object</code> are of same origin.\n        </p>\n      </section>\n\n      <section id=\"delete-activity-inbox\">\n        <h3 id=\"x7-4-delete-activity\"><span>7.4 </span>Delete Activity</h3>\n        <p>\n          The side effect of receiving this is that (assuming the\n          <code>object</code> is owned by the sending actor / server) the\n          server receiving the delete activity <em title=\"SHOULD\">SHOULD</em> remove its representation\n          of the <code>object</code> with the same <code>id</code>, and <em title=\"MAY\">MAY</em>\n          replace that representation with a <code>Tombstone</code> object.\n        </p>\n        <p>\n          (Note that after an activity has been transmitted from an origin\n          server to a remote server, there is nothing in the ActivityPub\n          protocol that can <em>enforce</em> remote deletion of an object's\n          representation).\n        </p>\n      </section>\n\n      <section id=\"follow-activity-inbox\">\n        <h3 id=\"x7-5-follow-activity\"><span>7.5 </span>Follow Activity</h3>\n\n        <p>\n          The side effect of receiving this in an <strong>inbox</strong> is\n          that the server <em title=\"SHOULD\">SHOULD</em> generate either an <code>Accept</code> or\n          <code>Reject</code> activity with the Follow as the\n          <code>object</code> and deliver it to the <code>actor</code> of the\n          Follow.\n          The <code>Accept</code> or <code>Reject</code> <em title=\"MAY\">MAY</em> be generated\n          automatically, or <em title=\"MAY\">MAY</em> be the result of user input (possibly after\n          some delay in which the user reviews).\n          Servers <em title=\"MAY\">MAY</em> choose to not explicitly send a <code>Reject</code>\n          in response to a <code>Follow</code>, though implementors ought to\n          be aware that the server sending the request could be left in an\n          intermediate state.\n          For example, a server might not send a <code>Reject</code> to protect\n          a user's privacy.\n        </p>\n\n        <p>\n          In the case of receiving an <code>Accept</code> referencing this\n          <code>Follow</code> as the object, the server <em title=\"SHOULD\">SHOULD</em> add the\n          <code>actor</code> to the object actor's\n          <a href=\"#followers\">Followers Collection</a>.\n          In the case of a <code>Reject</code>, the server <em title=\"MUST NOT\">MUST NOT</em> add the\n          actor to the object actor's\n          <a href=\"#followers\">Followers Collection</a>.\n        </p>\n\n        <div><p><span>Note</span></p><p>\n            Sometimes a successful <code>Follow</code> subscription may\n            occur but at some future point delivery to the follower fails\n            for an extended period of time.\n            Implementations should be aware that there is no guarantee\n            that actors on the network will remain reachable and should\n            implement accordingly.\n            For instance, if attempting to deliver to an actor for perhaps\n            six months while the follower remains unreachable, it is\n            reasonable that the delivering server remove the subscriber\n            from the <code>followers</code> list.\n            Timeframes and behavior for dealing with unreachable actors are\n            left to the discretion of the delivering server.\n          </p></div>\n        \n      </section>\n\n      <section id=\"accept-activity-inbox\">\n        <h3 id=\"x7-6-accept-activity\"><span>7.6 </span>Accept Activity</h3>\n        <p>\n          The side effect of receiving this in an <strong>inbox</strong> is\n          determined by the type of the <code>object</code> received,\n          and it is possible to accept types not described in this document\n          (for example, an <code>Offer</code>).\n        </p>\n\n        <p>\n          If the <code>object</code> of an <code>Accept</code> received to an\n          <strong>inbox</strong> is a <code>Follow</code> activity\n          previously sent by the receiver, the server <em title=\"SHOULD\">SHOULD</em> add the\n          <code>actor</code> to the receiver's\n          <a href=\"#following\">Following Collection</a>.\n        </p>\n      </section>\n      \n      <section id=\"reject-activity-inbox\">\n        <h3 id=\"x7-7-reject-activity\"><span>7.7 </span>Reject Activity</h3>\n        <p>\n          The side effect of receiving this in an <strong>inbox</strong> is\n          determined by the type of the <code>object</code> received,\n          and it is possible to reject types not described in this document\n          (for example, an <code>Offer</code>).\n        </p>\n\n        <p>\n          If the <code>object</code> of a <code>Reject</code> received to an\n          <strong>inbox</strong> is a <code>Follow</code> activity\n          previously sent by the receiver, this means the recipient did not\n          approve the <code>Follow</code> request. The server <em title=\"MUST NOT\">MUST NOT</em> add the\n          <code>actor</code> to the receiver's\n          <a href=\"#following\">Following Collection</a>.\n        </p>\n      </section>\n\n      <section id=\"add-activity-inbox\">\n        <h3 id=\"x7-8-add-activity\"><span>7.8 </span>Add Activity</h3>\n        <p>\n          Upon receipt of an <code>Add</code> activity into the\n          <strong>inbox</strong>, the server <em title=\"SHOULD\">SHOULD</em>\n          add the <code>object</code> to the collection specified in the\n          <code>target</code> property, unless:\n        </p>\n        <ul>\n          <li>\n            the <code>target</code> is not owned by the receiving server, and\n            thus they can't update it.\n          </li>\n          <li>\n            the <code>object</code> is not allowed to be added to the\n            <code>target</code> collection for some other reason, at the\n            receiver's discretion.\n          </li>\n        </ul>\n      </section>\n      <section id=\"remove-activity-inbox\">\n        <h3 id=\"x7-9-remove-activity\"><span>7.9 </span>Remove Activity</h3>\n        <p>\n          Upon receipt of a <code>Remove</code> activity into the\n          <strong>inbox</strong>, the server <em title=\"SHOULD\">SHOULD</em>\n          remove the <code>object</code> from the collection specified in the\n          <code>target</code> property, unless:\n        </p><ul>\n          <li>\n            the <code>target</code> is not owned by the receiving server, and\n            thus they can't update it.\n          </li>\n          <li>\n            the <code>object</code> is not allowed to be removed to the\n            <code>target</code> collection for some other reason, at the\n            receiver's discretion.\n          </li>\n        </ul>\n      </section>\n      <section id=\"like-activity-inbox\">\n        <h3 id=\"x7-10-like-activity\"><span>7.10 </span>Like Activity</h3>\n        <p>\n          The side effect of receiving this in an <strong>inbox</strong> is\n          that the server <em title=\"SHOULD\">SHOULD</em> increment the object's count of likes by\n          adding the received activity to the\n          <a href=\"#likes\"><code>likes</code></a> collection\n          if this collection is present.\n        </p>\n      </section>\n      <section id=\"announce-activity-inbox\">\n        <h3 id=\"x7-11-announce-activity-sharing\"><span>7.11 </span>Announce Activity (sharing)</h3>\n        <p>\n          Upon receipt of an <code>Announce</code> activity in an\n          <strong>inbox</strong>, a server <em title=\"SHOULD\">SHOULD</em> increment the object's count\n          of shares by adding the received activity to the\n          <a href=\"#shares\"><code>shares</code></a> collection\n          if this collection is present.\n        </p>\n        <div><p><span>Note</span></p><p>\n          The <code>Announce</code> activity is effectively what is known as\n          \"sharing\", \"reposting\", or \"boosting\" in other social networks.\n        </p></div>\n      </section>\n      <section id=\"undo-activity-inbox\">\n        <h3 id=\"x7-12-undo-activity\"><span>7.12 </span>Undo Activity</h3>\n        <p>\n          The <code>Undo</code> activity is used to undo the side effects\n          of previous activities.\n          See the ActivityStreams documentation on\n          <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#inverse\">\n            Inverse Activities and \"Undo\"</a>.\n          The scope and restrictions of the <code>Undo</code> activity\n          are the same as for\n          <a href=\"#undo-activity-outbox\">\n            the Undo activity in the context of client to server\n            interactions</a>,\n          but applied to a federated context.\n        </p>\n      </section>\n    </section>\n\n    <section id=\"i18n-concerns\">\n      <!--OddPage--><h2 id=\"a-internationalization\"><span>A. </span>Internationalization</h2><p><em>This section is non-normative.</em></p>\n      <p>\n        Building an international base of users is important in a federated\n        network.\n        <a href=\"https://www.w3.org/TR/activitystreams-core/#naturalLanguageValues\">\n          ActivityStreams provides tooling for internationalization of content</a>,\n        which should be used whenever possible.\n        However, it can be difficult for implementations to determine which\n        <a href=\"https://www.w3.org/TR/activitystreams-core/#defaultlangcontext\">\n          <code>@language</code> property</a>\n        to provide for user-submitted content.\n        The\n        <a href=\"https://www.w3.org/International/\"><abbr title=\"World Wide Web Consortium\">W3C</abbr> Internationalization group</a>\n        provides some\n        <a href=\"https://www.w3.org/International/wiki/LanguageDetection\">\n          guidance on language detection</a>.\n      </p>\n    </section>\n\n    <section id=\"security-considerations\">\n      <!--OddPage--><h2 id=\"b-security-considerations\"><span>B. </span>Security Considerations</h2><p><em>This section is non-normative.</em></p>\n      \n      <section id=\"authorization\">\n        <h3 id=\"b-1-authentication-and-authorization\"><span>B.1 </span>Authentication and Authorization</h3>\n        <p>\n          ActivityPub uses authentication for two purposes; first, to\n          authenticate clients to servers, and secondly in federated\n          implementations to authenticate servers to each other.\n        </p>\n\n        <p>\n          Unfortunately at the time of standardization, there are no strongly\n          agreed upon mechanisms for authentication.\n          Some possible directions for authentication are laid out \n          <a href=\"https://www.w3.org/wiki/SocialCG/ActivityPub/Authentication_Authorization\">in \n          the Social Web Community Group Authentication and \n          Authorization best practices report</a>.\n        </p>\n\n      </section>\n\n      <section id=\"security-verification\">\n        <h3 id=\"b-2-verification\"><span>B.2 </span>Verification</h3>\n        <p>\n          Servers should not trust client submitted content, and\n          federated servers also should not trust content received from a server\n          other than the content's origin without some form of verification.\n        </p>\n        <p>\n          Servers should be careful to verify that new content is really posted\n          by the actor that claims to be posting it, and that the actor has\n          permission to update the resources it claims to.\n          See also\n          <a href=\"#obj\"><span>3.</span> <span>Objects</span></a> and <a href=\"#authorization\"><span>B.1</span> <span>Authentication and Authorization</span></a>.\n        </p>\n      </section>\n\n      <section id=\"security-localhost\">\n        <h3 id=\"b-3-accessing-localhost-uris\"><span>B.3 </span>Accessing localhost URIs</h3>\n        <p>\n          It is often convenient while developing to test against a process\n          running on localhost.\n          However, permitting requests to localhost in a production client or\n          server instance can be dangerous.\n          Making requests to URIs on localhost which do not require\n          authorization may unintentionally access or modify resources assumed\n          to be protected to be usable by localhost-only.\n        </p>\n        <p>\n          If your ActivityPub server or client does permit making requests to\n          localhost URIs for development purposes, consider making it a\n          configuration option which defaults to off.\n        </p>\n      </section>\n\n      <section id=\"security-uri-schemes\">\n        <h3 id=\"b-4-uri-schemes\"><span>B.4 </span>URI Schemes</h3>\n        <p>\n          There are many types of URIs aside from just <code>http</code> and\n          <code>https</code>.\n          Some libraries which handle fetching requests at various URI schemes\n          may try to be smart and reference schemes which may be undesirable,\n          such as <code>file</code>.\n          Client and server authors should carefully check how their libraries\n          handle requests, and potentially whitelist only certain safe URI\n          types, such as <code>http</code> and <code>https</code>.\n        </p>\n      </section>\n\n      <section id=\"security-recursive-objects\">\n        <h3 id=\"b-5-recursive-objects\"><span>B.5 </span>Recursive Objects</h3>\n        <p>\n          Servers should set a limit on how deep to recurse while resolving objects,\n          or otherwise specially handle ActivityStreams objects with recursive\n          references.\n\t  Failure to properly do so may result in denial-of-service security\n\t  vulnerabilities.\n        </p>\n      </section>\n\n      <section id=\"security-spam\">\n        <h3 id=\"b-6-spam\"><span>B.6 </span>Spam</h3>\n        <p>\n          Spam is a problem in any network, perhaps especially so in federated\n          networks.\n          While no specific mechanism for combating spam is provided in\n          ActivityPub, it is recommended that servers filter incoming content\n          both by local untrusted users and any remote users through some\n          sort of spam filter.\n        </p>\n      </section>\n\n      <section id=\"security-federation-dos\">\n        <h3 id=\"b-7-federation-denial-of-service\"><span>B.7 </span>Federation denial-of-service</h3>\n          <p>\n            Servers should implement protections against denial-of-service\n            attacks from other, federated servers.\n            This can be done using, for example, some kind of ratelimiting\n            mechanism.\n            Servers should be especially careful to implement this protection\n            around activities that involve side effects.\n            Servers <em title=\"SHOULD\">SHOULD</em> also take care not to overload servers with\n            submissions, for example by using an exponential backoff strategy.\n          </p>\n      </section>\n\n      <section id=\"security-c2s-ratelimiting\">\n        <h3 id=\"b-8-client-to-server-ratelimiting\"><span>B.8 </span>Client-to-server ratelimiting</h3>\n          <p>\n            Servers should ratelimit API client submissions.\n            This serves two purposes:\n            </p><ol>\n              <li>\n                It prevents malicious clients from conducting\n                denial-of-service attacks on the server.\n              </li>\n              <li>\n                It ensures that the server will not distribute so many\n                activities that it triggers another\n                server's <a href=\"#security-federation-dos\">denial-of-service\n                protections</a>.\n              </li>\n            </ol>\n          \n      </section>\n\n      <section id=\"security-c2s-response-dos\">\n        <h3 id=\"b-9-client-to-server-response-denial-of-service\"><span>B.9 </span>Client-to-server response denial-of-service</h3>\n        <p>\n          In order to prevent a client from being overloaded by oversized\n          Collections, servers should take care to limit the size of Collection \n          pages they return to clients.\n          Clients should still be prepared to limit the size of\n          responses they are willing to handle in case they connect to malicious or\n          compromised servers, for example by timing out and generating\n          an error.\n        </p>\n      </section>\n\n      <section id=\"security-sanitizing-content\">\n        <h3 id=\"b-10-sanitizing-content\"><span>B.10 </span>Sanitizing Content</h3>\n        <p>\n          Any activity field being rendered for browsers (or other rich\n          text enabled applications) should take care to sanitize fields\n          containing markup to prevent cross site scripting attacks.\n        </p>\n      </section>\n\n      <section id=\"security-not-displaying-bto-bcc\">\n        <h3 id=\"b-11-not-displaying-bto-and-bcc-properties\"><span>B.11 </span>Not displaying bto and bcc properties</h3>\n        <p>\n          <code>bto</code> and <code>bcc</code> already\n          <a href=\"#remove-bto-bcc-before-delivery\">must be removed for delivery</a>,\n          but servers are free to decide how to represent the object\n          in their own storage systems.\n          However, since <code>bto</code> and <code>bcc</code> are only intended\n          to be known/seen by the original author of the object/activity,\n          servers should omit these properties during display as well.\n        </p>\n      </section>\n    </section>\n\n    <section id=\"acknowledgements\">\n      <!--OddPage--><h2 id=\"c-acknowledgements\"><span>C. </span>Acknowledgements</h2><p><em>This section is non-normative.</em></p>\n      <p>\n        This specification comes from years of hard work and experience by a\n        number of communities exploring the space of federation on the web.\n        In particular, much of this specification is informed by\n        <a href=\"https://www.w3.org/community/ostatus/wiki/Main_Page\">OStatus</a>\n        and the\n        <a href=\"https://github.com/pump-io/pump.io/blob/master/API.md\">Pump API</a>,\n        as pioneered by StatusNet (now GNU Social) and Pump.io.\n        Both of those initiatives were the product of many developers' hard work,\n        but more than anyone, Evan Prodromou has been a constant leader in this\n        space, and it is unlikely that ActivityPub would exist in something\n        resembling its current state without his hard work.\n      </p>\n\n      <p>\n        Erin Shepherd built the initial version of this specification, borrowed\n        from the ideas in the\n        <a href=\"https://github.com/pump-io/pump.io/blob/master/API.md\">Pump API</a>\n        document, mostly as a complete rewrite of text, but sharing most of\n        the primary ideas while switching from ActivityStreams 1 to\n        ActivityStreams 2.\n      </p>\n\n      <p>\n        Jessica Tallon and Christine Lemmer-Webber took over as editors when\n        the standard moved to the <abbr title=\"World Wide Web Consortium\">W3C</abbr> Social Working Group and did the majority\n        of transition from Erin Shepherd's document to its current state as\n        ActivityPub.\n        Much of the document was rewritten and reorganized under the long feedback\n        process of the Social Working Group.\n      </p>\n\n      <p>\n        ActivityPub has been shaped by the careful input of many members in the\n        <abbr title=\"World Wide Web Consortium\">W3C</abbr> Social Working Group.\n        ActivityPub especially owes a great debt to Amy Guy, who has done more\n        than anyone to map the ideas across the different Social Working Group\n        documents through her work on [<cite><a href=\"#bib-Social-Web-Protocols\">Social-Web-Protocols</a></cite>].\n        Amy also laid out the foundations for a significant refactoring of the\n        ActivityPub spec while sprinting for four days with Christopher Allan\n        Webber.\n        These revisions lead to cleaner separation between the client to server\n        and server components, along with clarity about ActivityPub's relationship\n        to [<cite><a href=\"#bib-LDN\">LDN</a></cite>], among many other improvements.\n        Special thanks also goes to Benjamin Goering for putting together the\n        implementation report template.\n        We also thank mray for producing the spectacular tutorial illustrations\n        (which are licensed under the same license as the rest of this\n        document).\n      </p>\n\n      <p>\n        Many people also helped ActivityPub along through careful review.\n        In particular, thanks to:\n        Aaron Parecki,\n        AJ Jordan,\n        Benjamin Goering,\n        Caleb Langeslag,\n        Elsa Balderrama,\n        elf Pavlik,\n        Eugen Rochko,\n        Erik Wilde,\n        Jason Robinson,\n        Manu Sporny,\n        Michael Vogel,\n        Mike Macgirvin,\n        nightpool,\n        Puck Meerburg,\n        Sandro Hawke,\n        Sarven Capadisli,\n        Tantek Çelik, and\n        Yuri Volkov.\n      </p>\n\n      <p>\n        This document is dedicated to all citizens of planet Earth.\n        You deserve freedom of communication; we hope we have contributed in\n        some part, however small, towards that goal and right.\n      </p>\n    </section>\n  \n\n<section id=\"references\"><!--OddPage--><h2 id=\"d-references\"><span>D. </span>References</h2><section id=\"normative-references\"><h3 id=\"d-1-normative-references\"><span>D.1 </span>Normative references</h3><dl><dt id=\"bib-Activity-Vocabulary\">[Activity-Vocabulary]</dt><dd><a href=\"https://www.w3.org/TR/activitystreams-vocabulary/\"><cite>Activity Vocabulary</cite></a>. J. Snell. ActivityStreams Working Group. Editors Draft. URL: <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/\">https://www.w3.org/TR/activitystreams-vocabulary/</a>\n</dd><dt id=\"bib-ActivityStreams\">[ActivityStreams]</dt><dd><a href=\"https://www.w3.org/TR/activitystreams-core/\"><cite>Activity Streams 2.0</cite></a>. J. Snell. ActivityStreams Working Group. Editors Draft. URL: <a href=\"https://www.w3.org/TR/activitystreams-core/\">https://www.w3.org/TR/activitystreams-core/</a>\n</dd><dt id=\"bib-JSON-LD\">[JSON-LD]</dt><dd><a href=\"https://www.w3.org/TR/json-ld/\"><cite>JSON-LD 1.0</cite></a>. Manu Sporny; Gregg Kellogg; Markus Lanthaler. W3C. 16 January 2014. W3C Recommendation. URL: <a href=\"https://www.w3.org/TR/json-ld/\">https://www.w3.org/TR/json-ld/</a>\n</dd><dt id=\"bib-LDN\">[LDN]</dt><dd><a href=\"https://www.w3.org/TR/ldn/\"><cite>Linked Data Notifications</cite></a>. Sarven Capadisli; Amy Guy. W3C. 2 May 2017. W3C Recommendation. URL: <a href=\"https://www.w3.org/TR/ldn/\">https://www.w3.org/TR/ldn/</a>\n</dd><dt id=\"bib-RFC2119\">[RFC2119]</dt><dd><a href=\"https://tools.ietf.org/html/rfc2119\"><cite>Key words for use in RFCs to Indicate Requirement Levels</cite></a>. S. Bradner. IETF. March 1997. Best Current Practice. URL: <a href=\"https://tools.ietf.org/html/rfc2119\">https://tools.ietf.org/html/rfc2119</a>\n</dd><dt id=\"bib-RFC7231\">[RFC7231]</dt><dd><a href=\"https://tools.ietf.org/html/rfc7231\"><cite>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</cite></a>. R. Fielding, Ed.; J. Reschke, Ed.. IETF. June 2014. Proposed Standard. URL: <a href=\"https://tools.ietf.org/html/rfc7231\">https://tools.ietf.org/html/rfc7231</a>\n</dd><dt id=\"bib-RFC7234\">[RFC7234]</dt><dd><a href=\"https://tools.ietf.org/html/rfc7234\"><cite>Hypertext Transfer Protocol (HTTP/1.1): Caching</cite></a>. R. Fielding, Ed.; M. Nottingham, Ed.; J. Reschke, Ed.. IETF. June 2014. Proposed Standard. URL: <a href=\"https://tools.ietf.org/html/rfc7234\">https://tools.ietf.org/html/rfc7234</a>\n</dd></dl></section><section id=\"informative-references\"><h3 id=\"d-2-informative-references\"><span>D.2 </span>Informative references</h3><dl><dt id=\"bib-Micropub\">[Micropub]</dt><dd><a href=\"https://www.w3.org/TR/micropub/\"><cite>Micropub</cite></a>. Aaron Parecki. W3C. 23 May 2017. W3C Recommendation. URL: <a href=\"https://www.w3.org/TR/micropub/\">https://www.w3.org/TR/micropub/</a>\n</dd><dt id=\"bib-RFC6749\">[RFC6749]</dt><dd><a href=\"https://tools.ietf.org/html/rfc6749\"><cite>The OAuth 2.0 Authorization Framework</cite></a>. D. Hardt, Ed.. IETF. October 2012. Proposed Standard. URL: <a href=\"https://tools.ietf.org/html/rfc6749\">https://tools.ietf.org/html/rfc6749</a>\n</dd><dt id=\"bib-RFC6750\">[RFC6750]</dt><dd><a href=\"https://tools.ietf.org/html/rfc6750\"><cite>The OAuth 2.0 Authorization Framework: Bearer Token Usage</cite></a>. M. Jones; D. Hardt. IETF. October 2012. Proposed Standard. URL: <a href=\"https://tools.ietf.org/html/rfc6750\">https://tools.ietf.org/html/rfc6750</a>\n</dd><dd><a href=\"https://www.w3.org/TR/social-web-protocols/\"><cite>Social Web Protocols</cite></a>. Amy Guy. W3C. 25 December 2017. W3C Note. URL: <a href=\"https://www.w3.org/TR/social-web-protocols/\">https://www.w3.org/TR/social-web-protocols/</a>\n</dd></dl></section></section>\n</div>","textContent":"\n    Abstract\n      \n        The ActivityPub protocol is a decentralized social networking protocol\n        based upon the [ActivityStreams] 2.0 data format.\n        It provides a client to server API for creating, updating and deleting\n        content, as well as a federated server to server API for delivering\n        notifications and content.\n      \n    \n\n    Status of This Document\n      \n        This section describes the status of this document at the time of its publication. Other documents may supersede this document. A list of current W3C publications and the latest revision of this technical report can be found in the W3C technical reports index at https://www.w3.org/TR/.\n      \n        \n    \n        \n          This document was published by the Social Web Working Group as a Recommendation.\n        \n        \n          All interested parties are invited to provide implementation and bug\n          reports and other comments through the Working Group's\n          Issue tracker.\n          These will be discussed by the\n          Social Web Community Group\n          and considered in any future versions of this specification.\n        \n          \n            Please see the Working Group's  implementation\n            report.\n          \n          \n            This document has been reviewed by W3C Members, by software developers, and by other W3C\n            groups and interested parties, and is endorsed by the Director as a W3C Recommendation.\n            It is a stable document and may be used as reference material or cited from another\n            document. W3C's role in making the Recommendation is to draw attention to the\n            specification and to promote its widespread deployment. This enhances the functionality\n            and interoperability of the Web.\n          \n        \n            This document was produced by\n            a group\n             operating under the\n            W3C Patent Policy.\n              W3C maintains a public list of any patent\n              disclosures\n            made in connection with the deliverables of\n            the group; that page also includes\n            instructions for disclosing a patent. An individual who has actual knowledge of a patent\n            which the individual believes contains\n            Essential\n            Claim(s) must disclose the information in accordance with\n            section\n            6 of the W3C Patent Policy.\n        \n          This document is governed by the 1 March 2017 W3C Process Document.\n          \n        \n\nTable of Contents1. Overview1.1 Social Web Working Group2. Conformance2.1 Specification Profiles3. Objects3.1 Object Identifiers3.2 Retrieving objects3.3 The source property4. Actors4.1 Actor objects5. Collections5.1 Outbox5.2 Inbox5.3 Followers Collection5.4 Following Collection5.5 Liked Collection5.6 Public Addressing5.7 Likes Collection5.8 Shares Collection6. Client to Server Interactions6.1 Client Addressing6.2 Create Activity6.2.1 Object creation without a Create Activity6.3 Update Activity6.3.1 Partial Updates6.4 Delete Activity6.5 Follow Activity6.6 Add Activity6.7 Remove Activity6.8 Like Activity6.9 Block Activity6.10 Undo Activity6.11 Delivery6.12 Uploading Media7. Server to Server Interactions7.1 Delivery7.1.1 Outbox Delivery Requirements for Server to Server7.1.2 Forwarding from Inbox7.1.3 Shared Inbox Delivery7.2 Create Activity7.3 Update Activity7.4 Delete Activity7.5 Follow Activity7.6 Accept Activity7.7 Reject Activity7.8 Add Activity7.9 Remove Activity7.10 Like Activity7.11 Announce Activity (sharing)7.12 Undo ActivityA. InternationalizationB. Security ConsiderationsB.1 Authentication and AuthorizationB.2 VerificationB.3 Accessing localhost URIsB.4 URI SchemesB.5 Recursive ObjectsB.6 SpamB.7 Federation denial-of-serviceB.8 Client-to-server ratelimitingB.9 Client-to-server response denial-of-serviceB.10 Sanitizing ContentB.11 Not displaying bto and bcc propertiesC. AcknowledgementsD. ReferencesD.1 Normative referencesD.2 Informative references\n\n    \n      1. Overview\n\n      ActivityPub provides two layers:\n\n      \n        \n          A server to server federation protocol\n          (so decentralized websites can share information)\n        \n        \n          A client to server protocol\n          (so users, including real-world users, bots, and other automated processes,\n          can communicate with ActivityPub using their accounts on servers,\n          from a phone or desktop or web application or whatever)\n        \n      \n\n      \n        ActivityPub implementations can implement just one of these things or\n        both of them.\n        However, once you've implemented one, it isn't too many steps to\n        implement the other, and there are a lot of benefits to both (making\n        your website part of the decentralized social web, and being able to\n        use clients and client libraries that work across a wide variety of\n        social websites).\n      \n\n      \n        In ActivityPub, a user is represented by \"actors\"\n        via the user's accounts on servers.\n        User's accounts on different servers correspond to different actors.\n        Every Actor has:\n      \n\n      \n        An inbox:  How they get messages from the world\n        An outbox: How they send messages to others\n      \n\n      \n        \n      \n\n      \n        These are endpoints, or really, just URLs which are listed in the\n        ActivityPub actor's ActivityStreams description.\n        (More on ActivityStreams later).\n      \n\n      \n        Here's an example of the record of our friend Alyssa P. Hacker:\n      \n\n      Example 1{\"@context\": \"https://www.w3.org/ns/activitystreams\",\n \"type\": \"Person\",\n \"id\": \"https://social.example/alyssa/\",\n \"name\": \"Alyssa P. Hacker\",\n \"preferredUsername\": \"alyssa\",\n \"summary\": \"Lisp enthusiast hailing from MIT\",\n \"inbox\": \"https://social.example/alyssa/inbox/\",\n \"outbox\": \"https://social.example/alyssa/outbox/\",\n \"followers\": \"https://social.example/alyssa/followers/\",\n \"following\": \"https://social.example/alyssa/following/\",\n \"liked\": \"https://social.example/alyssa/liked/\"}\n\n      \n        ActivityPub uses [ActivityStreams] for its vocabulary.\n        This is pretty great because ActivityStreams includes all the common\n        terms you need to represent all the activities and content flowing\n        around a social network.\n        It's likely that ActivityStreams already includes all the vocabulary\n        you need, but even if it doesn't, ActivityStreams can be extended\n        via [JSON-LD].\n        If you know what JSON-LD is, you can take advantage of the cool linked\n        data approaches provided by JSON-LD.\n        If you don't, don't worry, JSON-LD documents and ActivityStreams can be\n        understood as plain old simple JSON.\n        (If you're going to add extensions, that's the point at which JSON-LD\n        really helps you out).\n      \n\n      \n        So, okay.\n        Alyssa wants to talk to her friends, and her friends want to talk to\n        her!\n        Luckily these \"inbox\" and \"outbox\" things can help us out.\n        They both behave differently for GET and POST.\n        Let's see how that works:\n      \n\n      \n        \n      \n\n      \n        Hey nice, so just as a recap:\n      \n\n      \n        \n          You can POST to someone's inbox to send them a message\n          (server-to-server / federation only... this is federation!)\n        \n        \n          You can GET from your inbox to read your latest messages\n          (client-to-server; this is like reading your social\n          network stream)\n        \n        \n          You can POST to your outbox to send messages to the world\n          (client-to-server)\n        \n        \n          You can GET from someone's outbox to see what messages they've\n          posted (or at least the ones you're authorized to see).\n          (client-to-server and/or server-to-server)\n        \n      \n \n      \n        Of course, if that last one (GET'ing from someone's outbox) was the\n        only way to see what people have sent, this wouldn't be a very\n        efficient federation protocol!\n        Indeed, federation happens usually by servers posting messages sent by\n        actors to actors on other servers' inboxes.\n      \n\n      \n        Let's see an example!\n        Let's say Alyssa wants to catch up with her friend, Ben Bitdiddle.\n        She lent him a book recently and she wants to make sure he returns it\n        to her.\n        Here's the message she composes, as an ActivityStreams object:\n      \n\n      Example 2{\"@context\": \"https://www.w3.org/ns/activitystreams\",\n \"type\": \"Note\",\n \"to\": [\"https://chatty.example/ben/\"],\n \"attributedTo\": \"https://social.example/alyssa/\",\n \"content\": \"Say, did you finish reading that book I lent you?\"}\n\n      \n        This is a note addressed to Ben.\n        She POSTs it to her outbox.\n      \n\n      \n        \n      \n\n      \n        Since this is a non-activity object, the server recognizes that this is\n        an object being newly created, and does the courtesy of wrapping it in\n        a Create activity.\n        (Activities sent around in ActivityPub generally follow the pattern of\n        some activity by some actor being taken on some object.\n        In this case the activity is a Create of a Note object, posted by a\n        Person).\n      \n\n\n      Example 3{\"@context\": \"https://www.w3.org/ns/activitystreams\",\n \"type\": \"Create\",\n \"id\": \"https://social.example/alyssa/posts/a29a6843-9feb-4c74-a7f7-081b9c9201d3\",\n \"to\": [\"https://chatty.example/ben/\"],\n \"actor\": \"https://social.example/alyssa/\",\n \"object\": {\"type\": \"Note\",\n            \"id\": \"https://social.example/alyssa/posts/49e2d03d-b53a-4c4c-a95c-94a6abf45a19\",\n            \"attributedTo\": \"https://social.example/alyssa/\",\n            \"to\": [\"https://chatty.example/ben/\"],\n            \"content\": \"Say, did you finish reading that book I lent you?\"}}\n\n      \n        Alyssa's server looks up Ben's ActivityStreams actor object, finds his\n        inbox endpoint, and POSTs her object to his inbox.\n      \n\n      \n        \n      \n\n      \n        Technically these are two separate steps... one is client to server\n        communication, and one is server to server communication (federation).\n        But, since we're using them both in this example, we can abstractly\n        think of this as being a streamlined submission from outbox to inbox:\n      \n\n      \n        \n      \n\n      \n        Cool!\n        A while later, Alyssa checks what new messages she's gotten.\n        Her phone polls her inbox via GET, and amongst a bunch of cat videos\n        posted by friends and photos of her nephew posted by her sister, she\n        sees the following:\n      \n\n      Example 4{\"@context\": \"https://www.w3.org/ns/activitystreams\",\n \"type\": \"Create\",\n \"id\": \"https://chatty.example/ben/p/51086\",\n \"to\": [\"https://social.example/alyssa/\"],\n \"actor\": \"https://chatty.example/ben/\",\n \"object\": {\"type\": \"Note\",\n            \"id\": \"https://chatty.example/ben/p/51085\",\n            \"attributedTo\": \"https://chatty.example/ben/\",\n            \"to\": [\"https://social.example/alyssa/\"],\n            \"inReplyTo\": \"https://social.example/alyssa/posts/49e2d03d-b53a-4c4c-a95c-94a6abf45a19\",\n            \"content\": \"<p>Argh, yeah, sorry, I'll get it back to you tomorrow.</p>\n                        <p>I was reviewing the section on register machines,\n                           since it's been a while since I wrote one.</p>\"}}\n\n      Alyssa is relieved, and likes Ben's post:\n\n      Example 5{\"@context\": \"https://www.w3.org/ns/activitystreams\",\n \"type\": \"Like\",\n \"id\": \"https://social.example/alyssa/posts/5312e10e-5110-42e5-a09b-934882b3ecec\",\n \"to\": [\"https://chatty.example/ben/\"],\n \"actor\": \"https://social.example/alyssa/\",\n \"object\": \"https://chatty.example/ben/p/51086\"}\n\n      \n        She POSTs this message to her outbox.\n        (Since it's an activity, her server knows it doesn't need to wrap it in\n        a Create object).\n      \n\n      \n        Feeling happy about things, she decides to post a public message to her\n        followers.\n        Soon the following message is blasted to all the members of her\n        followers collection, and since it has the special Public group\n        addressed, is generally readable by anyone.\n      \n\n      Example 6{\"@context\": \"https://www.w3.org/ns/activitystreams\",\n \"type\": \"Create\",\n \"id\": \"https://social.example/alyssa/posts/9282e9cc-14d0-42b3-a758-d6aeca6c876b\",\n \"to\": [\"https://social.example/alyssa/followers/\",\n        \"https://www.w3.org/ns/activitystreams#Public\"],\n \"actor\": \"https://social.example/alyssa/\",\n \"object\": {\"type\": \"Note\",\n            \"id\": \"https://social.example/alyssa/posts/d18c55d4-8a63-4181-9745-4e6cf7938fa1\",\n            \"attributedTo\": \"https://social.example/alyssa/\",\n            \"to\": [\"https://social.example/alyssa/followers/\",\n                   \"https://www.w3.org/ns/activitystreams#Public\"],\n            \"content\": \"Lending books to friends is nice.  Getting them back is even nicer! :)\"}}\n\n      \n    \n\n    2. Conformance\n\n  As well as sections marked as non-normative, all authoring guidelines, diagrams, examples,\n  and notes in this specification are non-normative. Everything else in this specification is\n  normative.\n\nThe key words  MAY, MUST, MUST NOT, SHOULD, and SHOULD NOT are \n  to be interpreted as described in [RFC2119].\n\n\n      \n        2.1 Specification Profiles\n        \n          This specification defines two closely related and interacting\n          protocols:\n        \n        \n          A client to server protocol, or \"Social API\"\n          \n            This protocol permits a client to act on behalf of a user.\n            For example, this protocol is used by a mobile phone application to\n            interact with a social stream of the user's actor.\n          \n          A server to server protocol, or \"Federation Protocol\"\n          \n            This protocol is used to distribute activities between actors on\n            different servers, tying them into the same social graph.\n          \n        \n        \n          The ActivityPub specification is designed so that once either of\n          these protocols are implemented, supporting the other is of very\n          little additional effort.\n          However, servers may still implement one without the other.\n          This gives three conformance classes:\n        \n        \n          ActivityPub conformant Client\n          \n            This designation applies to any implementation of the entirety of the\n            client portion of the client to server protocol.\n          \n          ActivityPub conformant Server\n          \n            This designation applies to any implementation of the entirety of the\n            server portion of the client to server protocol.\n          \n          ActivityPub conformant Federated Server\n          \n            This designation applies to any implementation of the entirety of\n            the federation protocols.\n          \n        \n        \n          It is called out whenever a portion of the specification only applies\n          to implementation of the federation protocol.\n          In addition, whenever requirements are specified, it is called out\n          whether they apply to the client or server (for the client-to-server\n          protocol) or whether referring to a sending or receiving server in\n          the server-to-server protocol.\n        \n      \n    \n\n    \n      3. Objects\n      \n        Objects are the core concept around which both [ActivityStreams] and\n        ActivityPub are built.\n        Objects are often wrapped in Activities and are contained in streams of\n        Collections, which are themselves subclasses of Objects.\n        See the [Activity-Vocabulary] document, particularly the\n        Core Classes;\n        ActivityPub follows the mapping of this vocabulary very closely.\n      \n      \n        ActivityPub defines some terms in addition to those provided by\n        ActivityStreams.\n        These terms are provided in the ActivityPub\n        JSON-LD context\n        at\n        https://www.w3.org/ns/activitystreams.\n        Implementers SHOULD include the ActivityPub context in their\n        object definitions.\n        Implementers MAY include additional context as appropriate.\n      \n      \n        ActivityPub shares the same\n        \n          URI / IRI conventions as in ActivityStreams.\n      \n      \n        Servers SHOULD validate the content they receive to avoid content\n        spoofing attacks.\n        (A server should do something at least as robust as checking that\n        the object appears as received at its origin, but mechanisms\n        such as checking signatures would be better if available).\n        No particular mechanism for verification is authoritatively specified by\n        this document, but please see Security \n        Considerations for some suggestions and good practices.\n      \n      \n        As an example, if example.com receives the activity\n        Example 7{\n  \"@context\": \"https://www.w3.org/ns/activitystreams\",\n  \"type\": \"Like\",\n  \"actor\": \"https://example.net/~mallory\",\n  \"to\": [\"https://hatchat.example/sarah/\",\n         \"https://example.com/peeps/john/\"],\n  \"object\": {\n    \"@context\": {\"@language\": \"en\"},\n    \"id\": \"https://example.org/~alice/note/23\",\n    \"type\": \"Note\",\n    \"attributedTo\": \"https://example.org/~alice\",\n    \"content\": \"I'm a goat\"\n  }\n}\n        it should dereference the id both to ensure that it exists\n        and is a valid object, and that it is not misrepresenting the object.\n        (In this example, Mallory could be spoofing an object allegedly posted\n        by Alice).\n      \n      \n        3.1 Object Identifiers\n        \n          All Objects in [ActivityStreams] should have unique global\n          identifiers.\n          ActivityPub extends this requirement; all objects distributed by the\n          ActivityPub protocol MUST have unique global identifiers, unless they\n          are intentionally transient (short lived activities that are not\n          intended to be able to be looked up, such as some kinds of chat\n          messages or game notifications).\n          These identifiers must fall into one of the following groups:\n        \n        \n          \n            Publicly dereferencable URIs, such as HTTPS URIs, with their\n            authority belonging to that of their originating server.\n            (Publicly facing content SHOULD use HTTPS URIs).\n          \n          \n            An ID explicitly specified as the JSON null object,\n            which implies an anonymous object (a part of its parent context)\n          \n        \n        \n          Identifiers MUST be provided for activities posted in server to\n          server communication, unless the activity is intentionally transient.\n          However, for client to server communication, a server receiving an\n          object posted to the outbox with no specified id SHOULD\n          allocate an object ID in the actor's namespace and attach it to the\n          posted object.\n        \n        All objects have the following properties:\n        \n          id\n          \n            The object's unique global identifier (unless the object is transient,\n            in which case the id MAY be omitted).\n          \n          type\n          \n            The type of the object.\n          \n        \n      \n\n      \n        3.2 Retrieving objects\n        \n          The HTTP GET method may be dereferenced against an object's\n          id property to retrieve the activity.\n          Servers MAY use HTTP content negotiation as defined in [RFC7231] to\n          select the type of data to return in response to a request,\n          but MUST present the ActivityStreams object representation\n          in response to\n          application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\",\n          and SHOULD also present the ActivityStreams representation in\n          response to application/activity+json as well.\n          The client MUST specify an Accept header with the\n          application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\"\n          media type in order to retrieve the activity.\n        \n        \n          Servers MAY implement other behavior for requests which do not comply\n          with the above requirement.\n          (For example, servers may implement additional legacy protocols, or\n          may use the same URI for both HTML and ActivityStreams\n          representations of a resource).\n        \n        \n          Servers MAY require authorization as specified in\n          B.1 Authentication and Authorization, and may additionally implement their\n          own authorization rules.\n          Servers SHOULD fail requests which do not pass their authorization\n          checks with the appropriate HTTP error code, or the 403 Forbidden\n          error code where the existence of the object is considered private.\n          An origin server which does not wish to disclose the existence of\n          a private target MAY instead respond with a status code of\n          404 Not Found.\n        \n      \n\n      \n        3.3 The source property\n        \n          In addition to all the properties defined by the\n\t  [Activity-Vocabulary], ActivityPub extends the Object by\n\t  supplying the source property.\n          The source property is intended to convey some\n          sort of source from which the content markup\n          was derived, as a form of provenance, or to support future\n          editing by clients.\n          In general, clients do the conversion from source\n          to content, not the other way around.\n        \n        \n          The value of source is itself an object\n          which uses its own content and mediaType\n          fields to supply source information.\n        \n        Example 8{\n  \"@context\": [\"https://www.w3.org/ns/activitystreams\",\n               {\"@language\": \"en\"}],\n  \"type\": \"Note\",\n  \"id\": \"http://postparty.example/p/2415\",\n  \"content\": \"<p>I <em>really</em> like strawberries!</p>\",\n  \"source\": {\n    \"content\": \"I *really* like strawberries!\",\n    \"mediaType\": \"text/markdown\"}\n}\n        Note: What to do when clients can't meaningfully handle a mediaType?\n          \n            In general, it's best to let a user edit their original post\n            in the same source format they originally composed it in.\n            But not all clients can reliably provide a nice interface for\n            all source types, and since clients are expected to do the\n            conversion from source to content,\n            some clients may work with a media type that another client\n            does not know how to work with.\n            While a client could feasibly provide the content\n            markup to be edited and ignore the source, this means that the\n            user will lose the more desirable form of the original\n            source in any future revisions.\n            A client doing so should thus provide a minimally obtrusive warning\n            cautioning that the original source format is not understood and is\n            thus being ignored.\n          \n          \n            For example, Alyssa P. Hacker likes to post to her ActivityPub\n            powered blog via an Emacs client she has written, leveraging\n            Org mode.\n            Later she switches to editing on her phone's client, which\n            has no idea what text/x-org is or how to render\n            it to HTML, so it provides a text box to edit the original\n            content instead.\n            A helpful warning displays above the edit area saying,\n            \"This was originally written in another markup language we don't\n            know how to handle.  If you edit, you'll lose your original\n            source!\"\n            Alyssa decides the small typo fix isn't worth losing her nice\n            org-mode markup and decides to make the update when she gets\n            home.\n          \n        \n      \n    \n\n    \n      4. Actors\n      \n        ActivityPub actors are generally one of the\n        \n          ActivityStreams Actor Types,\n        but they don't have to be. For example, a \n        \n          Profile object\n        might be used as an actor, or a type from an ActivityStreams extension.\n        Actors are retrieved like any other\n        Object in ActivityPub.\n        Like other ActivityStreams objects, actors have an id,\n        which is a URI.\n        When entered directly into a user interface (for example on a login\n        form), it is desirable to support simplified naming.\n        For this purpose, ID normalization SHOULD be performed as follows:\n      \n      \n        \n          If the entered ID is a valid URI, then it is to be used directly.\n        \n        \n          If it appears that the user neglected to add a scheme for a URI that\n          would otherwise be considered valid, such as\n          example.org/alice/, clients MAY attempt to provide\n          a default scheme, preferably https.\n        \n        \n          Otherwise, the entered value should be considered invalid.\n        \n      \n\n      \n        Once the actor's URI has been identified, it should be dereferenced.\n      \n\n      Note\n        ActivityPub does not dictate a specific relationship between\n        \"users\" and Actors; many configurations are possible.\n        There may be multiple human users or organizations controlling an\n        Actor, or likewise one human or organization may control multiple\n        Actors. Similarly, an Actor may represent a piece of software,\n        like a bot, or an automated process.\n        More detailed \"user\" modelling, for example linking together of Actors which\n        are controlled by the same entity, or allowing one Actor to be presented\n        through multiple alternate profiles or aspects, are at the discretion\n        of the implementation.\n      \n\n      \n        4.1 Actor objects\n        \n          Actor objects MUST have, in addition to the properties mandated by\n          3.1 Object Identifiers, the following properties:\n        \n        \n          inbox\n          \n            A reference to an [ActivityStreams]\n            \n              OrderedCollection\n            comprised of all the messages received by the actor; see\n            5.2 Inbox.\n          \n          outbox\n          \n            An [ActivityStreams]\n            \n              OrderedCollection\n            comprised of all the messages produced by the actor; see\n            5.1 Outbox.\n          \n        \n        \n          Implementations SHOULD, in addition, provide the following\n          properties:\n        \n        \n          following\n          \n            A link to an [ActivityStreams] collection of the actors that\n            this actor is following; see 5.4 Following Collection\n          \n          followers\n          \n            A link to an [ActivityStreams] collection of the actors that\n            follow this actor; see 5.3 Followers Collection.\n          \n        \n        \n          Implementations MAY provide the following properties:\n        \n        \n          liked\n          \n            A link to an [ActivityStreams] collection of objects this\n            actor has liked; see 5.5 Liked Collection.\n          \n        \n        Example 9{\n  \"@context\": [\"https://www.w3.org/ns/activitystreams\",\n               {\"@language\": \"ja\"}],\n  \"type\": \"Person\",\n  \"id\": \"https://kenzoishii.example.com/\",\n  \"following\": \"https://kenzoishii.example.com/following.json\",\n  \"followers\": \"https://kenzoishii.example.com/followers.json\",\n  \"liked\": \"https://kenzoishii.example.com/liked.json\",\n  \"inbox\": \"https://kenzoishii.example.com/inbox.json\",\n  \"outbox\": \"https://kenzoishii.example.com/feed.json\",\n  \"preferredUsername\": \"kenzoishii\",\n  \"name\": \"石井健蔵\",\n  \"summary\": \"この方はただの例です\",\n  \"icon\": [\n    \"https://kenzoishii.example.com/image/165987aklre4\"\n  ]\n}\n        Implementations MAY, in addition, provide the following properties:\n        \n          streams\n          \n            A list of supplementary Collections which may be of interest.\n          \n          preferredUsername\n          \n            A short username which may be used to refer to the actor, with no\n            uniqueness guarantees.\n          \n          endpoints\n          \n            A json object which maps additional (typically server/domain-wide)\n            endpoints which may be useful either for this actor or someone\n            referencing this actor.\n            This mapping may be nested inside the actor document as the value\n            or may be a link to a JSON-LD document with these properties.\n          \n        \n\n        \n          The endpoints mapping MAY include the following\n          properties:\n        \n        \n          proxyUrl\n          \n            Endpoint URI so this actor's clients may access remote\n            ActivityStreams objects which require authentication to access.\n            To use this endpoint, the client posts an\n            x-www-form-urlencoded id parameter\n            with the value being the id of the requested\n            ActivityStreams object.\n          \n          oauthAuthorizationEndpoint\n          \n            If OAuth 2.0 bearer tokens [RFC6749] [RFC6750] are being used\n            for authenticating\n            client to server\n              interactions,\n            this endpoint specifies a URI at which a browser-authenticated user\n            may obtain a new authorization grant.\n          \n          oauthTokenEndpoint\n          \n            If OAuth 2.0 bearer tokens [RFC6749] [RFC6750] are being used\n            for authenticating\n            client to server\n              interactions,\n            this endpoint specifies a URI at which a client may acquire an\n\t    access token.\n          \n          provideClientKey\n          \n            If Linked Data Signatures and HTTP Signatures are being used for\n            authentication and authorization, this endpoint specifies a URI at\n            which browser-authenticated users may authorize a client's public\n            key for\n            client to server\n              interactions.\n          \n          signClientKey\n          \n            If Linked Data Signatures and HTTP Signatures are being used for\n            authentication and authorization, this endpoint specifies a URI at\n            which a client key may be signed by the actor's key for a time\n            window to act on behalf of the actor in interacting with foreign\n            servers.\n          \n          sharedInbox\n          \n            An optional endpoint\n            \n              used for wide delivery of publicly addressed activities\n              and activities sent to followers.\n            sharedInbox endpoints SHOULD also be publicly\n            readable OrderedCollection objects containing\n            objects addressed to the Public\n            special collection.\n            Reading from the sharedInbox endpoint MUST NOT present\n            objects which are not addressed to the Public\n            endpoint.\n          \n        \n\n        Note\n          \n            As the upstream vocabulary for ActivityPub, any applicable\n            [ActivityStreams] property may be used on ActivityPub Actors.\n            Some ActivityStreams properties are particularly worth highlighting\n            to demonstrate how they are used in ActivityPub implementations.\n          \n\n          \n            url\n            \n              A link to the actor's \"profile web page\", if not equal to the\n              value of id.\n            \n            name\n            \n              The preferred \"nickname\" or \"display name\" of the actor.\n            \n            summary\n            A quick summary or bio by the user about themselves.\n            icon\n            \n              A link to an image or an Image object which represents the user's\n              profile picture (this may be a thumbnail).\n            \n          \n        \n        \n      \n\n    \n\n    \n      5. Collections\n      \n        [ActivityStreams] defines the collection concept; ActivityPub\n        defines several collections with special behavior.\n        Note that ActivityPub makes use of\n        \n          ActivityStreams paging\n        to traverse large sets of objects.\n      \n\n      \n        Note that some of these collections are specified to be of type\n        \n          OrderedCollection\n        specifically, while others are permitted to be either a\n        \n          Collection\n        or an\n        \n          OrderedCollection.\n        An\n        \n          OrderedCollection\n        MUST be presented consistently in reverse chronological order.\n      \n\n      Note\n        What property is used to determine the reverse chronological order\n        is intentionally left as an implementation detail.\n        For example, many SQL-style databases use an incrementing integer\n        as an identifier, which can be reasonably used for handling\n        insertion order in most cases.\n        In other databases, an insertion time timestamp may be preferred.\n        What is used isn't important, but the ordering of elements must\n        remain intact, with newer items first.\n        A property which changes regularly, such a \"last updated\" timestamp,\n        should not be used.\n      \n\n      \n        5.1 Outbox\n        \n          The outbox is discovered through the outbox\n          property of an actor's profile.\n          The outbox MUST be an\n          \n            OrderedCollection.\n        \n        \n          The outbox stream contains activities the user has\n          published, subject to the ability of the requestor to retrieve the\n          activity (that is, the contents of the outbox are filtered by the\n          permissions of the person reading it).\n          If a user submits a request without\n          Authorization the server should\n          respond with all of the Public\n          posts.\n          This could potentially be all relevant objects published by the\n          user, though the number of available items is left to the\n          discretion of those implementing and deploying the server.\n        \n        \n          The outbox accepts HTTP POST requests, with behaviour described in\n          Client to Server\n            Interactions.\n        \n      \n\n      \n        5.2 Inbox\n\n        \n          The inbox is discovered through the inbox\n          property of an actor's profile.\n          The inbox MUST be an\n          \n            OrderedCollection.\n        \n\n        \n          The inbox stream contains all activities received by the\n          actor.\n          The server SHOULD filter content according to the requester's\n          permission.\n          In general, the owner of an inbox is likely to be able to access\n          all of their inbox contents. Depending on access control, some\n          other content may be public, whereas other content may require\n          authentication for non-owner users, if they can access the inbox\n          at all.\n        \n\n        \n          The server MUST perform de-duplication of activities returned by\n          the inbox. Duplication can occur if an activity is addressed both\n          to an actor's followers, and a specific\n          actor who also follows the recipient actor, and the server has failed\n          to de-duplicate the recipients list.\n          Such deduplication MUST be performed by comparing the\n          id of the activities and dropping any activities\n          already seen.\n        \n\n        \n          The inboxes of actors on federated servers accepts HTTP POST requests,\n          with behaviour described in Delivery.\n          Non-federated servers SHOULD return a 405 Method Not Allowed upon\n          receipt of a POST request.\n        \n      \n\n      \n        5.3 Followers Collection\n        \n          Every actor SHOULD have a followers\n          collection.\n          This is a list of everyone who has sent a\n          Follow\n          activity for the actor, added as a\n          side effect.\n          This is where one would find a list of all the actors that are\n          following the actor.\n          The followers collection MUST be either an\n          \n            OrderedCollection\n          or a\n          \n            Collection\n          and MAY be filtered on privileges of an authenticated user\n          or as appropriate when no authentication is given.\n        \n\n        Note: Default for notification targeting\n          The follow activity generally is a request to see the objects an actor\n          creates. This makes the Followers collection an appropriate default\n          target for delivery of notifications.\n        \n      \n\n      \n        5.4 Following Collection\n        \n          Every actor SHOULD have a following collection.\n          This is a list of everybody that the actor has followed, added as a\n          side effect.\n          The following collection MUST be either an\n          \n            OrderedCollection\n          or a\n          \n            Collection\n          and MAY be filtered on privileges of an authenticated user\n          or as appropriate when no authentication is given.\n        \n      \n\n      \n        5.5 Liked Collection\n        \n          Every actor MAY have a liked collection.\n          This is a list of every object from all of the actor's Like\n          activities, added as a side effect.\n          The liked collection MUST be either an\n          \n            OrderedCollection\n          or a\n          \n            Collection\n          and MAY be filtered on privileges of an authenticated user\n          or as appropriate when no authentication is given.\n        \n      \n\n      \n        5.6 Public Addressing\n        \n          In addition to [ActivityStreams] collections and objects,\n          Activities may additionally be addressed to the special \"public\"\n          collection, with the identifier\n          https://www.w3.org/ns/activitystreams#Public.\n          For example:\n        \n        Example 10{\n  \"@context\": \"https://www.w3.org/ns/activitystreams\",\n  \"id\": \"https://www.w3.org/ns/activitystreams#Public\",\n  \"type\": \"Collection\"\n}\n        \n          Activities addressed to this special URI shall be accessible to all\n          users, without authentication.\n          Implementations MUST NOT deliver to the \"public\" special collection;\n          it is not capable of receiving actual activities.\n          However, actors MAY have a\n          sharedInbox\n          endpoint which is available for efficient shared delivery of public\n          posts (as well as posts to followers-only); see\n          7.1.3 Shared Inbox Delivery.\n        \n        Note\n            Compacting an ActivityStreams object using the ActivityStreams\n            JSON-LD context might result in\n            https://www.w3.org/ns/activitystreams#Public\n            being represented as simply Public or as:Public\n            which are valid representations of the Public collection.\n            Implementations which treat ActivityStreams objects as simply\n            JSON rather than converting an incoming activity over to a\n            local context using JSON-LD tooling should be aware of this\n            and should be prepared to accept all three representations.\n          \n      \n\n      \n        5.7 Likes Collection\n        \n          Every object MAY have a likes collection.\n          This is a list of all Like activities with this object\n          as the object property, added as a\n          side effect.\n          The likes collection MUST be either an\n          \n            OrderedCollection\n          or a\n          \n            Collection\n          and MAY be filtered on privileges of an authenticated user\n          or as appropriate when no authentication is given.\n        \n\n        Note\n          \n            Care should be taken to not confuse the the\n            likes\n            collection with the similarly named but different\n            liked collection.\n            In sum:\n          \n\n          \n            \n              liked:\n              Specifically a property of actors.\n              This is a collection of Like activities performed\n              by the actor,\n              added to the collection as a\n              \n                side effect of delivery to the outbox.\n            \n\n            \n              likes:\n              May be a property of any object.\n              This is a collection of Like activities referencing\n              this object,\n              added to the collection as a\n              \n                side effect of delivery to the inbox.\n            \n          \n        \n      \n\n      \n        5.8 Shares Collection\n        \n          Every object MAY have a shares collection.\n          This is a list of all Announce activities with this object\n          as the object property, added as a\n          side effect.\n          The shares collection MUST be either an\n          \n            OrderedCollection\n          or a\n          \n            Collection\n          and MAY be filtered on privileges of an authenticated user\n          or as appropriate when no authentication is given.\n        \n      \n    \n\n    \n      6. Client to Server Interactions\n      \n        Activities as defined by [ActivityStreams] are the core mechanism\n        for creating, modifying and sharing content within the social graph.\n      \n\n      \n        Client to server interaction takes place through clients posting\n        Activities to an actor's outbox.\n        To do this, clients MUST discover the URL of the actor's outbox from\n\ttheir profile and then MUST make an HTTP\n        POST request to this URL with the Content-Type of\n        application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\".\n        Servers MAY interpret a Content-Type or Accept header of\n        application/activity+json as equivalent\n        to application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\"\n        for client-to-server interactions.\n        The request MUST be authenticated with the credentials of the user to\n        whom the outbox belongs.\n        The body of the POST request MUST contain a single\n        Activity (which MAY contain embedded objects), or a single non-Activity\n        object which\n        will be wrapped in a Create activity\n          by the server.\n      \n      Example 11: Submitting an Activity to the OutboxPOST /outbox/ HTTP/1.1\nHost: dustycloud.org\nAuthorization: Bearer XXXXXXXXXXX\nContent-Type: application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\"\n\n{\n  \"@context\": [\"https://www.w3.org/ns/activitystreams\",\n               {\"@language\": \"en\"}],\n  \"type\": \"Like\",\n  \"actor\": \"https://dustycloud.org/chris/\",\n  \"name\": \"Chris liked 'Minimal ActivityPub update client'\",\n  \"object\": \"https://rhiaro.co.uk/2016/05/minimal-activitypub\",\n  \"to\": [\"https://rhiaro.co.uk/#amy\",\n         \"https://dustycloud.org/followers\",\n         \"https://rhiaro.co.uk/followers/\"],\n  \"cc\": \"https://e14n.com/evan\"\n}\n\n      \n        If an Activity is submitted with a value in the id\n        property, servers MUST ignore this and generate a new id\n        for the Activity.\n        Servers MUST return a 201 Created HTTP code, and unless\n        the activity is transient, MUST include the new id in the\n        Location header.\n      \n      Example 12: Outbox response to submitted ActivityHTTP/1.1 201 Created\nLocation: https://dustycloud.org/likes/345\n\n      \n        The server MUST remove the bto and/or bcc\n        properties, if they exist, from the ActivityStreams object before\n        delivery, but MUST utilize the addressing originally stored\n        on the bto / bcc properties for determining\n        recipients in delivery.\n      \n\n      \n        The server MUST then add this new Activity to the\n        outbox collection.\n        Depending on the type of Activity, servers may then be required to\n        carry out further side effects.\n        (However, there is no guarantee that time the Activity may appear in\n        the outbox.\n        The Activity might appear after a delay or disappear at any period).\n        These are described per individual Activity below.\n      \n\n      \n        Attempts to submit objects to servers not implementing client to server\n        support SHOULD result in a 405 Method Not Allowed response.\n      \n\n\n      \n        HTTP caching mechanisms [RFC7234] SHOULD be respected when\n        appropriate, both in clients receiving responses from servers as well\n        as servers sending responses to clients.\n      \n\n      \n        6.1 Client Addressing\n          \n          Clients are responsible for addressing new Activities\n          appropriately.\n          To some extent, this is dependent upon the particular client\n          implementation, but clients must be aware that the server will only\n          forward new Activities to addressees in the to,\n          bto, cc, bcc, and\n          audience fields.\n        \n        \n          The Followers Collection and/or the\n          Public Collection are good\n          choices for the default addressing of new Activities.\n        \n        \n          Clients SHOULD look at any objects attached to the new Activity via the\n          object, target, inReplyTo and/or\n          tag fields, retrieve their actor or\n          attributedTo properties, and MAY also retrieve their addressing\n          properties, and add these to the to or cc\n          fields of the new Activity being created.\n          Clients MAY recurse through attached objects, but if doing so, SHOULD\n          set a limit for this recursion.\n          (Note that this does not suggest that the client should \"unpack\"\n          collections of actors being addressed as individual recipients).\n        \n        \n          Clients MAY give the user the chance to amend this addressing in the\n          UI.\n        \n        \n          For example, when Chris likes the following article by Amy:\n        \n\n        Example 13: An Article{\n  \"@context\": [\"https://www.w3.org/ns/activitystreams\",\n               {\"@language\": \"en-GB\"}],\n  \"id\": \"https://rhiaro.co.uk/2016/05/minimal-activitypub\",\n  \"type\": \"Article\",\n  \"name\": \"Minimal ActivityPub update client\",\n  \"content\": \"Today I finished morph, a client for posting ActivityStreams2...\",\n  \"attributedTo\": \"https://rhiaro.co.uk/#amy\",\n  \"to\": \"https://rhiaro.co.uk/followers/\",\n  \"cc\": \"https://e14n.com/evan\"\n}\n\n        the like is generated by the client as:\n\n        Example 14: A Like of the Article{\n  \"@context\": [\"https://www.w3.org/ns/activitystreams\",\n               {\"@language\": \"en\"}],\n  \"type\": \"Like\",\n  \"actor\": \"https://dustycloud.org/chris/\",\n  \"summary\": \"Chris liked 'Minimal ActivityPub update client'\",\n  \"object\": \"https://rhiaro.co.uk/2016/05/minimal-activitypub\",\n  \"to\": [\"https://rhiaro.co.uk/#amy\",\n         \"https://dustycloud.org/followers\",\n         \"https://rhiaro.co.uk/followers/\"],\n  \"cc\": \"https://e14n.com/evan\"\n}\n\n        The receiving outbox can then perform delivery\n        to not only the followers of Chris (the liker), but also to Amy, and Amy's\n        followers and Evan, both of whom received the original article.\n\n        \n          Clients submitting the following activities to an outbox\n          MUST provide the object property in the activity:\n          Create, Update, Delete,\n          Follow, Add, Remove,\n          Like, Block, Undo.\n          Additionally, clients submitting the following activities to an outbox\n          MUST also provide the target property:\n          Add, Remove.\n        \n\n      \n\n\n      \n        6.2 Create Activity\n        \n          The Create activity is used when posting a new object.\n          This has the side effect that the object embedded within the Activity\n          (in the object property) is created.\n        \n        \n          When a Create activity is posted, the actor\n          of the activity SHOULD be copied onto the object's\n          attributedTo field.\n        \n        \n          A mismatch between addressing of the Create activity and its\n          object is likely to lead to confusion.\n          As such, a server SHOULD copy any recipients of the Create activity\n          to its object upon initial distribution, and likewise\n          with copying recipients from the object to the wrapping\n          Create activity.\n          Note that it is acceptable for the object's addressing\n          to be changed later without changing the Create's\n          addressing (for example via an Update activity).\n        \n\n        \n        6.2.1 Object creation without a Create Activity\n        \n          For client to server posting, it is possible to submit an object for\n          creation without a surrounding activity.\n          The server MUST accept a valid [ActivityStreams] object that\n          isn't a subtype of Activity in the POST request to the\n          outbox.\n          The server then MUST attach this object as the object\n          of a Create Activity.\n          For non-transient objects, the server MUST attach an\n          id to both the wrapping Create and its\n          wrapped Object.\n        \n\n        Note\n          The Location value returned by the server should be the URL of\n          the new Create activity (rather than the object).\n        \n\n        \n          Any to, bto, cc, bcc,\n          and audience properties specified on the object MUST be\n          copied over to the new Create activity by the server.\n        \n\n        Example 15: Object with audience targeting{\n  \"@context\": \"https://www.w3.org/ns/activitystreams\",\n  \"type\": \"Note\",\n  \"content\": \"This is a note\",\n  \"published\": \"2015-02-10T15:04:55Z\",\n  \"to\": [\"https://example.org/~john/\"],\n  \"cc\": [\"https://example.com/~erik/followers\",\n         \"https://www.w3.org/ns/activitystreams#Public\"]\n}\n\n        The above example could be converted to this:\n        Example 16: Create Activity wrapper generated by the server{\n  \"@context\": \"https://www.w3.org/ns/activitystreams\",\n  \"type\": \"Create\",\n  \"id\": \"https://example.net/~mallory/87374\",\n  \"actor\": \"https://example.net/~mallory\",\n  \"object\": {\n    \"id\": \"https://example.com/~mallory/note/72\",\n    \"type\": \"Note\",\n    \"attributedTo\": \"https://example.net/~mallory\",\n    \"content\": \"This is a note\",\n    \"published\": \"2015-02-10T15:04:55Z\",\n    \"to\": [\"https://example.org/~john/\"],\n    \"cc\": [\"https://example.com/~erik/followers\",\n           \"https://www.w3.org/ns/activitystreams#Public\"]\n  },\n  \"published\": \"2015-02-10T15:04:55Z\",\n  \"to\": [\"https://example.org/~john/\"],\n  \"cc\": [\"https://example.com/~erik/followers\",\n         \"https://www.w3.org/ns/activitystreams#Public\"]\n}\n        \n      \n      \n        6.3 Update Activity\n        \n          The Update activity is used when updating an already\n          existing object.\n          The side effect of this is that the object MUST be\n          modified to reflect the new structure as defined in the update\n          activity, assuming the actor has permission to update this\n          object.\n        \n\n        \n          6.3.1 Partial Updates\n          \n            For client to server interactions, updates are partial;\n            rather than updating the document all at once, any key value\n            pair supplied is used to replace the existing value with\n            the new value.\n            This only applies to the top-level fields of the updated\n            object.\n            A special exception is for when the value is the json\n            null type; this means that this field should be\n            removed from the server's representation of the object.\n          \n          \n            Note that this behavior is for client to server interaction where\n            the client is posting to the server only.\n            Server to server interaction and updates from the server to the client\n            should contain the entire new representation of the object, after\n            the partial update application has been applied.\n            See the description of the\n            Update activity for server to server\n              interactions\n            for more details.\n          \n        \n      \n      \n        6.4 Delete Activity\n        \n          The Delete activity is used to delete an already\n          existing object.\n          The side effect of this is that the server MAY replace the\n          object with a Tombstone of the object\n          that will be displayed in activities which reference the deleted\n          object.\n          If the deleted object is requested the server SHOULD respond with\n          either the HTTP 410 Gone status code if a Tombstone\n          object is presented as the response body, otherwise respond with a\n          HTTP 404 Not Found.\n        \n\n        A deleted object:\n        Example 17{\n  \"@context\": \"https://www.w3.org/ns/activitystreams\",\n  \"id\": \"https://example.com/~alice/note/72\",\n  \"type\": \"Tombstone\",\n  \"published\": \"2015-02-10T15:04:55Z\",\n  \"updated\": \"2015-02-10T15:04:55Z\",\n  \"deleted\": \"2015-02-10T15:04:55Z\"\n}\n      \n      \n        6.5 Follow Activity\n        \n          The Follow activity is used to subscribe to the\n          activities of another actor.\n        \n        \n          The side effect of receiving this in an outbox\n          is that the server SHOULD add the object to the\n          actor's following Collection\n          when and only if an Accept activity is subsequently\n          received with this Follow activity as its object.\n        \n      \n      \n        6.6 Add Activity\n        \n          Upon receipt of an Add activity into the\n          outbox, the server SHOULD\n          add the object to the collection specified in the\n          target property, unless:\n        \n        \n          \n            the target is not owned by the receiving\n            server, and thus they are not authorized to update it.\n          \n          \n            the object is not allowed to be added to the\n            target collection for some other reason, at the\n            receiving server's discretion.\n          \n        \n      \n      \n        6.7 Remove Activity\n        \n          Upon receipt of a Remove activity into the\n          outbox, the server SHOULD\n          remove the object from the collection specified in the\n          target property, unless:\n        \n          \n            the target is not owned by the receiving server, and\n            thus they are not authorized to update it.\n          \n          \n            the object is not allowed to be removed from the\n            target collection for some other reason, at the\n            receiving server's discretion.\n          \n        \n      \n      \n        6.8 Like Activity\n        \n          The Like activity indicates the actor likes\n          the object.\n        \n        \n          The side effect of receiving this in an outbox\n          is that the server SHOULD add the object to the\n          actor's liked Collection.\n        \n      \n      \n        6.9 Block Activity\n        \n          The Block activity is used to indicate that the posting\n          actor does not want another actor (defined in the object\n          property) to be able to interact with objects posted by the actor\n          posting the Block activity.\n          The server SHOULD prevent the blocked user from interacting with any object\n          posted by the actor.\n        \n        \n          Servers SHOULD NOT deliver Block Activities to their object.\n        \n      \n      \n        6.10 Undo Activity\n        \n          The Undo activity is used to undo a previous activity.\n          See the Activity Vocabulary documentation on\n          \n            Inverse Activities and \"Undo\".\n          For example, Undo may be used to undo a previous\n          Like, Follow, or Block.\n          The undo activity and the activity being undone MUST both have the\n          same actor.\n          Side effects should be undone, to the extent possible.\n          For example, if undoing a Like, any counter that had\n          been incremented previously should be decremented appropriately.\n        \n\n        \n          There are some exceptions where there is an existing and explicit\n          \"inverse activity\" which should be used instead.\n          Create based activities should instead use\n          Delete, and Add activities should use\n          Remove.\n        \n      \n\n      \n        6.11 Delivery\n        \n          Federated servers MUST perform delivery on all Activities posted to the\n          outbox according to \n          outbox delivery.\n        \n      \n\n      \n        6.12 Uploading MediaThis section is non-normative.\n        \n          Servers MAY support uploading document types to be referenced in\n          activites, such as images, video or other binary data, but the\n          precise mechanism is out of scope for this version of ActivityPub.\n          The Social Web Community Group is refining the protocol in the\n          ActivityPub Media Upload report.\n        \n      \n\n\n    \n\n    \n      7. Server to Server Interactions\n      \n        Servers communicate with other servers and propagate information across\n        the social graph by posting activities to actors'\n        inbox endpoints.\n        An Activity sent over the network SHOULD have an id,\n        unless it is intended to be transient (in which case it MAY omit the\n        id).\n      \n        POST requests (eg. to the inbox) MUST be made with a Content-Type of\n        application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\"\n        and GET requests (see also 3.2 Retrieving objects) \n        with an Accept header of \n        application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\".\n        Servers SHOULD interpret a Content-Type or Accept\n        header of application/activity+json as equivalent\n        to application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\"\n        for server-to-server interactions.\n      \n      \n        In order to propagate updates throughout the social graph, Activities\n        are sent to the appropriate recipients.\n        First, these recipients are determined through following the\n        appropriate links between objects until you reach an actor, and then\n        the Activity is inserted into the actor's inbox\n        (delivery).\n        This allows recipient servers to:\n      \n      \n        \n          conduct any side effects related to the Activity (for example,\n          notification that an actor has liked an object is used to update the\n          object's like count);\n        \n        \n          deliver the Activity to recipients of the original object, to ensure\n          updates are propagated to the whole social graph (see \n          inbox delivery).\n        \n      \n      Delivery is usually triggered by, for example:\n      \n        \n          an Activity being created in an actor's outbox\n          with their Followers Collection as the\n          recipient.\n        \n        \n          an Activity being created in an actor's outbox\n          with directly addressed recipients.\n        \n        \n          an Activity being created in an actors's outbox\n          with user-curated collections as recipients.\n        \n        \n          an Activity being created in an actor's outbox or\n          inbox which references another object.\n        \n      \n\n      \n        Servers performing delivery to the inbox or\n        sharedInbox properties of actors on other servers MUST\n        provide the object property in the activity:\n        Create, Update, Delete,\n        Follow, Add, Remove,\n        Like, Block, Undo.\n        Additionally, servers performing server to server delivery of the\n        following activities MUST also provide the target\n        property: Add, Remove.\n      \n\n      \n        HTTP caching mechanisms [RFC7234] SHOULD be respected when\n        appropriate, both when receiving responses from other servers as well\n        as sending responses to other servers.\n      \n\n      \n        7.1 Delivery\n\n        \n          The following is required by federated servers communicating with\n          other federated servers only.\n        \n\n        \n          An activity is delivered to its targets (which are\n          actors) by first looking up the targets'\n          inboxes and then posting the activity to those inboxes.\n          Targets for delivery are determined by checking the\n          \n            ActivityStreams audience targeting;\n          namely, the to, bto, cc,\n          bcc, and audience fields of the activity.\n        \n\n        \n          The inbox is determined by first\n          \n            retrieving the target actor's JSON-LD representation\n          and then looking up the inbox property.\n          If a recipient is a Collection or OrderedCollection,\n          then the server MUST dereference the collection (with the user's\n          credentials) and discover inboxes for each item in the collection.\n          Servers MUST limit the number of layers of indirections through\n          collections which will be performed, which MAY be one.\n        \n\n        \n          Servers MUST de-duplicate the final recipient list. Servers MUST also\n          exclude actors from the list which are the same as the actor\n          of the Activity being notified about. That is, actors shouldn't have their\n          own activities delivered to themselves.\n        \n\n        Note: Silent and private activities\n          What to do when there are no recipients specified is not defined,\n          however it's recommended that if no recipients are specified the\n          object remains completely private and access controls restrict the\n          access to object.\n          If the object is just sent to the \"public\" collection the object is\n          not delivered to any actors but is publicly viewable in the actor's\n          outbox.\n        \n\n        \n          An HTTP POST request (with authorization of the submitting user) is\n          then made to the inbox, with the Activity as\n          the body of the request.\n          This Activity is added by the receiver as an item in the\n          inbox OrderedCollection.\n          Attempts to deliver to an inbox on a non-federated server SHOULD\n          result in a 405 Method Not Allowed response.\n        \n\n        \n          For federated servers performing delivery to a third party server,\n          delivery SHOULD be performed asynchronously, and SHOULD additionally\n          retry delivery to recipients if it fails due to network error.\n        \n\n        \n          Note: Activities being distributed between actors on\n          the same origin may use any internal mechanism, and are not required\n          to use HTTP.\n        \n\n        Note: Relationship to Linked Data Notifications\n          While it is not required reading to understand this specification,\n          it is worth noting that ActivityPub's targeting and delivery\n          mechanism overlaps with the\n          Linked Data Notifications\n          specification, and the two specifications may interoperably\n          combined.\n          In particular, the inbox property is the same between\n          ActivityPub and Linked Data Notifications, and the targeting\n          and delivery systems described in this document are supported\n          by Linked Data Notifications.\n          In addition to JSON-LD compacted ActivityStreams documents, Linked\n          Data Notifications also supports a number of RDF serializations\n          which are not required for ActivityPub implementations.\n          However, ActivityPub implementations which wish to be more broadly\n          compatible with Linked Data Notifications implementations may wish to\n          support other RDF representations.\n        \n\n        \n          7.1.1 Outbox Delivery Requirements for Server to Server\n          \n            When objects are received in the outbox\n            (for servers which support both\n            Client to Server interactions\n            and\n            Server to Server Interactions),\n            the server MUST target and deliver to:\n          \n          \n            \n              The to, bto, cc,\n              bcc or audience fields if their values\n              are individuals or Collections owned by the actor.\n            \n          \n          \n            These fields will have been \n            populated appropriately by the client which posted the Activity\n            to the outbox.\n          \n        \n\n        \n          7.1.2 Forwarding from Inbox\n\n          Note: Forwarding to avoid the ghost replies problem\n            \n              The following section is to mitigate the \"ghost replies\" problem\n              which occasionally causes problems on federated networks.\n              This problem is best demonstrated with an example.\n            \n\n            \n              Alyssa makes a post about her having successfully presented a\n              paper at a conference and sends it to her followers collection,\n              which includes her friend Ben.\n              Ben replies to Alyssa's message congratulating her and includes\n              her followers collection on the recipients.\n              However, Ben has no access to see the members of Alyssa's\n              followers collection, so his server does not forward his messages\n              to their inbox.\n              Without the following mechanism, if Alyssa were then to reply to\n              Ben, her followers would see Alyssa replying to Ben without having\n              ever seen Ben interacting.\n              This would be very confusing!\n            \n          \n\n          \n            When Activities are received in the inbox, the\n            server needs to forward these to recipients that the origin was unable\n            to deliver them to. To do this, the server MUST target and\n            deliver\n            to the values of to, cc, and/or audience\n            if and only if all of the following are true:\n          \n          \n            This is the first time the server has seen this Activity.\n            \n              The values of to, cc, and/or\n              audience contain a Collection owned by the server.\n            \n            \n              The values of inReplyTo, object,\n              target and/or tag are objects owned by\n              the server.\n              The server SHOULD recurse through these values to look for linked objects\n              owned by the server, and SHOULD set a maximum limit for recursion (ie. the\n              point at which the thread is so deep the recipients followers may not mind\n              if they are no longer getting updates that don't directly involve the\n              recipient).\n              The server MUST only target the values of to,\n              cc, and/or audience\n              on the original object being forwarded, and not pick up any new\n              addressees whilst recursing through the linked objects\n              (in case these addressees were purposefully amended by or via the client).\n            \n          \n          \n            The server MAY filter its delivery targets according to\n            implementation-specific rules (for example, spam filtering).\n          \n        \n\n        \n          7.1.3 Shared Inbox Delivery\n          \n            For servers hosting many actors, delivery to all followers can\n            result in an overwhelming number of messages sent.\n            Some servers would also like to display a list of all messages\n            posted publicly to the \"known network\".\n            Thus ActivityPub provides an optional mechanism for serving these\n            two use cases.\n          \n          \n            When an object is being delivered to the originating actor's\n            followers, a server MAY reduce the number of receiving actors\n            delivered to by identifying all followers which share the same\n            sharedInbox\n            who would otherwise be individual recipients and instead deliver\n            objects to said sharedInbox.\n            Thus in this scenario, the remote/receiving server participates\n            in determining targeting and performing delivery to specific\n            inboxes.\n          \n          \n            Additionally, if an object is addressed to the\n            Public special collection, a\n            server MAY deliver that object to all known\n            sharedInbox endpoints on the network.\n          \n          \n            Origin servers sending publicly addressed activities to\n            sharedInbox endpoints MUST still deliver to actors\n            and collections otherwise addressed (through to,\n            bto, cc, bcc, and\n            audience) which do not have a sharedInbox\n            and would not otherwise receive the activity through the\n            sharedInbox mechanism.\n          \n        \n      \n\n      \n        7.2 Create Activity\n        \n          Receiving a Create activity in an inbox has\n          surprisingly few side effects; the activity should appear in the\n          actor's inbox and it is likely that the server will want\n          to locally store a representation of this activity and its accompanying\n          object.\n          However, this mostly happens in general with processing activities\n          delivered to an inbox anyway.\n        \n      \n\n      \n        7.3 Update Activity\n        \n          For server to server interactions, an Update activity\n          means that the receiving server SHOULD update its copy of the\n          object of the same id to the copy\n          supplied in the Update activity.\n          Unlike the\n          \n            client to server handling of the Update activity,\n          this is not a partial update but a complete replacement of the object.\n        \n        \n          The receiving server MUST take care to be sure that the\n          Update is authorized to modify its object.\n          At minimum, this may be done by ensuring that the Update\n          and its object are of same origin.\n        \n      \n\n      \n        7.4 Delete Activity\n        \n          The side effect of receiving this is that (assuming the\n          object is owned by the sending actor / server) the\n          server receiving the delete activity SHOULD remove its representation\n          of the object with the same id, and MAY\n          replace that representation with a Tombstone object.\n        \n        \n          (Note that after an activity has been transmitted from an origin\n          server to a remote server, there is nothing in the ActivityPub\n          protocol that can enforce remote deletion of an object's\n          representation).\n        \n      \n\n      \n        7.5 Follow Activity\n\n        \n          The side effect of receiving this in an inbox is\n          that the server SHOULD generate either an Accept or\n          Reject activity with the Follow as the\n          object and deliver it to the actor of the\n          Follow.\n          The Accept or Reject MAY be generated\n          automatically, or MAY be the result of user input (possibly after\n          some delay in which the user reviews).\n          Servers MAY choose to not explicitly send a Reject\n          in response to a Follow, though implementors ought to\n          be aware that the server sending the request could be left in an\n          intermediate state.\n          For example, a server might not send a Reject to protect\n          a user's privacy.\n        \n\n        \n          In the case of receiving an Accept referencing this\n          Follow as the object, the server SHOULD add the\n          actor to the object actor's\n          Followers Collection.\n          In the case of a Reject, the server MUST NOT add the\n          actor to the object actor's\n          Followers Collection.\n        \n\n        Note\n            Sometimes a successful Follow subscription may\n            occur but at some future point delivery to the follower fails\n            for an extended period of time.\n            Implementations should be aware that there is no guarantee\n            that actors on the network will remain reachable and should\n            implement accordingly.\n            For instance, if attempting to deliver to an actor for perhaps\n            six months while the follower remains unreachable, it is\n            reasonable that the delivering server remove the subscriber\n            from the followers list.\n            Timeframes and behavior for dealing with unreachable actors are\n            left to the discretion of the delivering server.\n          \n        \n      \n\n      \n        7.6 Accept Activity\n        \n          The side effect of receiving this in an inbox is\n          determined by the type of the object received,\n          and it is possible to accept types not described in this document\n          (for example, an Offer).\n        \n\n        \n          If the object of an Accept received to an\n          inbox is a Follow activity\n          previously sent by the receiver, the server SHOULD add the\n          actor to the receiver's\n          Following Collection.\n        \n      \n      \n      \n        7.7 Reject Activity\n        \n          The side effect of receiving this in an inbox is\n          determined by the type of the object received,\n          and it is possible to reject types not described in this document\n          (for example, an Offer).\n        \n\n        \n          If the object of a Reject received to an\n          inbox is a Follow activity\n          previously sent by the receiver, this means the recipient did not\n          approve the Follow request. The server MUST NOT add the\n          actor to the receiver's\n          Following Collection.\n        \n      \n\n      \n        7.8 Add Activity\n        \n          Upon receipt of an Add activity into the\n          inbox, the server SHOULD\n          add the object to the collection specified in the\n          target property, unless:\n        \n        \n          \n            the target is not owned by the receiving server, and\n            thus they can't update it.\n          \n          \n            the object is not allowed to be added to the\n            target collection for some other reason, at the\n            receiver's discretion.\n          \n        \n      \n      \n        7.9 Remove Activity\n        \n          Upon receipt of a Remove activity into the\n          inbox, the server SHOULD\n          remove the object from the collection specified in the\n          target property, unless:\n        \n          \n            the target is not owned by the receiving server, and\n            thus they can't update it.\n          \n          \n            the object is not allowed to be removed to the\n            target collection for some other reason, at the\n            receiver's discretion.\n          \n        \n      \n      \n        7.10 Like Activity\n        \n          The side effect of receiving this in an inbox is\n          that the server SHOULD increment the object's count of likes by\n          adding the received activity to the\n          likes collection\n          if this collection is present.\n        \n      \n      \n        7.11 Announce Activity (sharing)\n        \n          Upon receipt of an Announce activity in an\n          inbox, a server SHOULD increment the object's count\n          of shares by adding the received activity to the\n          shares collection\n          if this collection is present.\n        \n        Note\n          The Announce activity is effectively what is known as\n          \"sharing\", \"reposting\", or \"boosting\" in other social networks.\n        \n      \n      \n        7.12 Undo Activity\n        \n          The Undo activity is used to undo the side effects\n          of previous activities.\n          See the ActivityStreams documentation on\n          \n            Inverse Activities and \"Undo\".\n          The scope and restrictions of the Undo activity\n          are the same as for\n          \n            the Undo activity in the context of client to server\n            interactions,\n          but applied to a federated context.\n        \n      \n    \n\n    \n      A. InternationalizationThis section is non-normative.\n      \n        Building an international base of users is important in a federated\n        network.\n        \n          ActivityStreams provides tooling for internationalization of content,\n        which should be used whenever possible.\n        However, it can be difficult for implementations to determine which\n        \n          @language property\n        to provide for user-submitted content.\n        The\n        W3C Internationalization group\n        provides some\n        \n          guidance on language detection.\n      \n    \n\n    \n      B. Security ConsiderationsThis section is non-normative.\n      \n      \n        B.1 Authentication and Authorization\n        \n          ActivityPub uses authentication for two purposes; first, to\n          authenticate clients to servers, and secondly in federated\n          implementations to authenticate servers to each other.\n        \n\n        \n          Unfortunately at the time of standardization, there are no strongly\n          agreed upon mechanisms for authentication.\n          Some possible directions for authentication are laid out \n          in \n          the Social Web Community Group Authentication and \n          Authorization best practices report.\n        \n\n      \n\n      \n        B.2 Verification\n        \n          Servers should not trust client submitted content, and\n          federated servers also should not trust content received from a server\n          other than the content's origin without some form of verification.\n        \n        \n          Servers should be careful to verify that new content is really posted\n          by the actor that claims to be posting it, and that the actor has\n          permission to update the resources it claims to.\n          See also\n          3. Objects and B.1 Authentication and Authorization.\n        \n      \n\n      \n        B.3 Accessing localhost URIs\n        \n          It is often convenient while developing to test against a process\n          running on localhost.\n          However, permitting requests to localhost in a production client or\n          server instance can be dangerous.\n          Making requests to URIs on localhost which do not require\n          authorization may unintentionally access or modify resources assumed\n          to be protected to be usable by localhost-only.\n        \n        \n          If your ActivityPub server or client does permit making requests to\n          localhost URIs for development purposes, consider making it a\n          configuration option which defaults to off.\n        \n      \n\n      \n        B.4 URI Schemes\n        \n          There are many types of URIs aside from just http and\n          https.\n          Some libraries which handle fetching requests at various URI schemes\n          may try to be smart and reference schemes which may be undesirable,\n          such as file.\n          Client and server authors should carefully check how their libraries\n          handle requests, and potentially whitelist only certain safe URI\n          types, such as http and https.\n        \n      \n\n      \n        B.5 Recursive Objects\n        \n          Servers should set a limit on how deep to recurse while resolving objects,\n          or otherwise specially handle ActivityStreams objects with recursive\n          references.\n\t  Failure to properly do so may result in denial-of-service security\n\t  vulnerabilities.\n        \n      \n\n      \n        B.6 Spam\n        \n          Spam is a problem in any network, perhaps especially so in federated\n          networks.\n          While no specific mechanism for combating spam is provided in\n          ActivityPub, it is recommended that servers filter incoming content\n          both by local untrusted users and any remote users through some\n          sort of spam filter.\n        \n      \n\n      \n        B.7 Federation denial-of-service\n          \n            Servers should implement protections against denial-of-service\n            attacks from other, federated servers.\n            This can be done using, for example, some kind of ratelimiting\n            mechanism.\n            Servers should be especially careful to implement this protection\n            around activities that involve side effects.\n            Servers SHOULD also take care not to overload servers with\n            submissions, for example by using an exponential backoff strategy.\n          \n      \n\n      \n        B.8 Client-to-server ratelimiting\n          \n            Servers should ratelimit API client submissions.\n            This serves two purposes:\n            \n              \n                It prevents malicious clients from conducting\n                denial-of-service attacks on the server.\n              \n              \n                It ensures that the server will not distribute so many\n                activities that it triggers another\n                server's denial-of-service\n                protections.\n              \n            \n          \n      \n\n      \n        B.9 Client-to-server response denial-of-service\n        \n          In order to prevent a client from being overloaded by oversized\n          Collections, servers should take care to limit the size of Collection \n          pages they return to clients.\n          Clients should still be prepared to limit the size of\n          responses they are willing to handle in case they connect to malicious or\n          compromised servers, for example by timing out and generating\n          an error.\n        \n      \n\n      \n        B.10 Sanitizing Content\n        \n          Any activity field being rendered for browsers (or other rich\n          text enabled applications) should take care to sanitize fields\n          containing markup to prevent cross site scripting attacks.\n        \n      \n\n      \n        B.11 Not displaying bto and bcc properties\n        \n          bto and bcc already\n          must be removed for delivery,\n          but servers are free to decide how to represent the object\n          in their own storage systems.\n          However, since bto and bcc are only intended\n          to be known/seen by the original author of the object/activity,\n          servers should omit these properties during display as well.\n        \n      \n    \n\n    \n      C. AcknowledgementsThis section is non-normative.\n      \n        This specification comes from years of hard work and experience by a\n        number of communities exploring the space of federation on the web.\n        In particular, much of this specification is informed by\n        OStatus\n        and the\n        Pump API,\n        as pioneered by StatusNet (now GNU Social) and Pump.io.\n        Both of those initiatives were the product of many developers' hard work,\n        but more than anyone, Evan Prodromou has been a constant leader in this\n        space, and it is unlikely that ActivityPub would exist in something\n        resembling its current state without his hard work.\n      \n\n      \n        Erin Shepherd built the initial version of this specification, borrowed\n        from the ideas in the\n        Pump API\n        document, mostly as a complete rewrite of text, but sharing most of\n        the primary ideas while switching from ActivityStreams 1 to\n        ActivityStreams 2.\n      \n\n      \n        Jessica Tallon and Christine Lemmer-Webber took over as editors when\n        the standard moved to the W3C Social Working Group and did the majority\n        of transition from Erin Shepherd's document to its current state as\n        ActivityPub.\n        Much of the document was rewritten and reorganized under the long feedback\n        process of the Social Working Group.\n      \n\n      \n        ActivityPub has been shaped by the careful input of many members in the\n        W3C Social Working Group.\n        ActivityPub especially owes a great debt to Amy Guy, who has done more\n        than anyone to map the ideas across the different Social Working Group\n        documents through her work on [Social-Web-Protocols].\n        Amy also laid out the foundations for a significant refactoring of the\n        ActivityPub spec while sprinting for four days with Christopher Allan\n        Webber.\n        These revisions lead to cleaner separation between the client to server\n        and server components, along with clarity about ActivityPub's relationship\n        to [LDN], among many other improvements.\n        Special thanks also goes to Benjamin Goering for putting together the\n        implementation report template.\n        We also thank mray for producing the spectacular tutorial illustrations\n        (which are licensed under the same license as the rest of this\n        document).\n      \n\n      \n        Many people also helped ActivityPub along through careful review.\n        In particular, thanks to:\n        Aaron Parecki,\n        AJ Jordan,\n        Benjamin Goering,\n        Caleb Langeslag,\n        Elsa Balderrama,\n        elf Pavlik,\n        Eugen Rochko,\n        Erik Wilde,\n        Jason Robinson,\n        Manu Sporny,\n        Michael Vogel,\n        Mike Macgirvin,\n        nightpool,\n        Puck Meerburg,\n        Sandro Hawke,\n        Sarven Capadisli,\n        Tantek Çelik, and\n        Yuri Volkov.\n      \n\n      \n        This document is dedicated to all citizens of planet Earth.\n        You deserve freedom of communication; we hope we have contributed in\n        some part, however small, towards that goal and right.\n      \n    \n  \n\nD. ReferencesD.1 Normative references[Activity-Vocabulary]Activity Vocabulary. J. Snell. ActivityStreams Working Group. Editors Draft. URL: https://www.w3.org/TR/activitystreams-vocabulary/\n[ActivityStreams]Activity Streams 2.0. J. Snell. ActivityStreams Working Group. Editors Draft. URL: https://www.w3.org/TR/activitystreams-core/\n[JSON-LD]JSON-LD 1.0. Manu Sporny; Gregg Kellogg; Markus Lanthaler. W3C. 16 January 2014. W3C Recommendation. URL: https://www.w3.org/TR/json-ld/\n[LDN]Linked Data Notifications. Sarven Capadisli; Amy Guy. W3C. 2 May 2017. W3C Recommendation. URL: https://www.w3.org/TR/ldn/\n[RFC2119]Key words for use in RFCs to Indicate Requirement Levels. S. Bradner. IETF. March 1997. Best Current Practice. URL: https://tools.ietf.org/html/rfc2119\n[RFC7231]Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content. R. Fielding, Ed.; J. Reschke, Ed.. IETF. June 2014. Proposed Standard. URL: https://tools.ietf.org/html/rfc7231\n[RFC7234]Hypertext Transfer Protocol (HTTP/1.1): Caching. R. Fielding, Ed.; M. Nottingham, Ed.; J. Reschke, Ed.. IETF. June 2014. Proposed Standard. URL: https://tools.ietf.org/html/rfc7234\nD.2 Informative references[Micropub]Micropub. Aaron Parecki. W3C. 23 May 2017. W3C Recommendation. URL: https://www.w3.org/TR/micropub/\n[RFC6749]The OAuth 2.0 Authorization Framework. D. Hardt, Ed.. IETF. October 2012. Proposed Standard. URL: https://tools.ietf.org/html/rfc6749\n[RFC6750]The OAuth 2.0 Authorization Framework: Bearer Token Usage. M. Jones; D. Hardt. IETF. October 2012. Proposed Standard. URL: https://tools.ietf.org/html/rfc6750\nSocial Web Protocols. Amy Guy. W3C. 25 December 2017. W3C Note. URL: https://www.w3.org/TR/social-web-protocols/\n\n","length":87547,"excerpt":"The ActivityPub protocol is a decentralized social networking protocol\n        based upon the [ActivityStreams] 2.0 data format.\n        It provides a client to server API for creating, updating and deleting\n        content, as well as a federated server to server API for delivering\n        notifications and content.","byline":"Christine Lemmer-Webber","dir":"ltr","siteName":null,"lang":"en"},"finalizedMeta":{"title":"ActivityPub","description":"The ActivityPub protocol is a decentralized social networking protocol\n        based upon the [ActivityStreams] 2.0 data format.\n        It provides a client to server API for creating, updating and deleting\n        content, as well as a federated server to server API for delivering\n        notifications and content.","author":false,"creator":"","publisher":false,"date":"2022-11-07T04:53:24.952Z","topics":[]},"jsonLd":{"@type":false,"headline":false,"description":false,"image":[],"mainEntityOfPage":{"@type":false,"@id":false},"datePublished":false,"dateModified":false,"isAccessibleForFree":false,"isPartOf":{"@type":[],"name":false,"productID":false},"discussionUrl":false,"license":false,"author":{"@type":false,"name":false,"description":false,"sameAs":false,"image":{"@type":false,"url":false},"givenName":false,"familyName":false,"alternateName":false,"publishingPrinciples":false},"publisher":{"@type":false,"name":false,"description":false,"sameAs":false,"logo":{"@type":false,"url":false},"publishingPrinciples":false},"editor":{"@type":false,"name":false,"description":false,"sameAs":false,"image":{"@type":false,"url":false},"givenName":false,"familyName":false,"alternateName":false,"publishingPrinciples":false}},"twitterObj":false,"status":200,"metadata":{"author":false,"title":"ActivityPub","description":"The ActivityPub protocol is a decentralized social networking protocol\n        based upon the [ActivityStreams] 2.0 data format.\n        It provides a client to server API for creating, updating and deleting\n        content, as well as a federated server to server API for delivering\n        notifications and content.","canonical":"https://www.w3.org/TR/activitypub/","keywords":[],"image":"https://www.w3.org/StyleSheets/TR/2016/logos/W3C","firstParagraph":"\n      \n    "},"dublinCore":{},"opengraph":{"title":false,"description":false,"url":false,"site_name":false,"locale":false,"type":false,"typeObject":{"published_time":false,"modified_time":false,"author":false,"publisher":false,"section":false,"tag":[]},"image":false},"twitter":{"site":false,"description":false,"card":false,"creator":false,"title":false,"image":false},"archivedData":{"link":false,"wayback":false}}}