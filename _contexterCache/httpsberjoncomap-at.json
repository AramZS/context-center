{"initialLink":"https://berjon.com/ap-at/","sanitizedLink":"https://berjon.com/ap-at/","finalLink":"https://berjon.com/ap-at/","htmlEmbed":"<script>window.contexterSetup=window.contexterSetup||function(){window.contexterSetupComplete=!0;class ContexterLink extends HTMLAnchorElement{constructor(){super()}connectedCallback(){this.setAttribute(\"target\",\"_blank\")}}customElements.define(\"contexter-link\",ContexterLink,{extends:\"a\"}),customElements.define(\"contexter-inner\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"contexter-box__inner\"}}),customElements.define(\"contexter-thumbnail\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"contexter-box__thumbnail\"}}),customElements.define(\"contexter-byline\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"contexter-box__byline\"}}),customElements.define(\"contexter-keywordset\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"contexter-box__keywordset\"}}),customElements.define(\"contexter-linkset\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"contexter-box__linkset\"}}),customElements.define(\"contexter-meta\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"contexter-box__meta\"}}),customElements.define(\"contexter-summary\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"p-summary entry-summary\"}}),customElements.define(\"contexter-box-head\",class extends HTMLElement{constructor(){super()}connectedCallback(){this.className=\"contexter-box__head\"}}),customElements.define(\"contexter-box-inner\",class extends HTMLElement{constructor(){super()}connectedCallback(){}});class ContexterBox extends HTMLElement{constructor(){super(),this.first=!0,this.shadow=this.attachShadow({mode:\"open\"})}connectedCallback(){if(this.first){this.first=!1;var style=document.createElement(\"style\"),lightDomStyle=(style.innerHTML=`:host {--background: #f5f6f7;--border: darkblue;--blue: #0000ee;--font-color: black;--inner-border: black;font-family: Franklin,Arial,Helvetica,sans-serif;font-size: 14px;background: var(--background);width: 600px;color: var(--font-color);min-height: 90px;display: block;padding: 8px;border: 1px solid var(--border);cursor: pointer;box-sizing: border-box;margin: 6px;contain: content;margin: 6px auto;}// can only select top-level nodes with slotted::slotted(*) {max-width: 100%;display:block;}::slotted([slot=thumbnail]) {max-width: 100%;display:block;}::slotted([slot=header]) {width: 100%;font-size: 1.25rem;font-weight: bold;display:block;margin-bottom: 6px;}::slotted([slot=author]) {max-width: 50%;font-size: 12px;display:inline-block;float: left;}::slotted([slot=time]) {max-width: 50%;font-size: 12px;display:inline-block;float: right;}::slotted([slot=summary]) {width: 100%;margin-top: 6px;padding: 10px 2px;border-top: 1px solid var(--inner-border);font-size: 15px;display:inline-block;margin-bottom: 6px;}contexter-meta {height: auto;margin-bottom: 4px;width: 100%;display: grid;position: relative;min-height: 16px;grid-template-columns: repeat(2, 1fr);}::slotted([slot=keywords]) {width: 80%;padding: 2px 4px;border-top: 1px solid var(--inner-border);font-size: 11px;display: block;float: right;font-style: italic;text-align: right;grid-column: 2/2;grid-row: 1;align-self: end;justify-self: end;}::slotted([slot=keywords]):empty {border-top: 0px solid var(--inner-border);}::slotted([slot=archive-link]) {font-size: 1em;display: inline;}::slotted([slot=archive-link])::after {content: \"|\";display: inline;color: var(--font-color);text-decoration: none;margin: 0 .5em;}::slotted([slot=read-link]) {font-size: 1em;display: inline;}contexter-linkset {width: 80%;padding: 2px 4px;font-size: 13px;float: left;font-weight: bold;grid-row: 1;grid-column: 1/2;align-self: end;justify-self: start;}/* Extra small devices (phones, 600px and down) */@media only screen and (max-width: 600px) {:host {width: 310px;}}/* Small devices (portrait tablets and large phones, 600px and up) */@media only screen and (min-width: 600px) {...}/* Medium devices (landscape tablets, 768px and up) */@media only screen and (min-width: 768px) {...}/* Large devices (laptops/desktops, 992px and up) */@media only screen and (min-width: 992px) {...}/* Extra large devices (large laptops and desktops, 1200px and up) */@media only screen and (min-width: 1200px) {...}@media (prefers-color-scheme: dark){:host {--background: #354150;--border: #1f2b37;--blue: #55b0ff;--font-color: #ffffff;--inner-border: #787a7c;background: var(--background);border: 1px solid var(--border)}}`,document.createElement(\"style\"));lightDomStyle.innerHTML=`contexter-box {contain: content;}contexter-box .read-link {font-weight: bold;}contexter-box a {color: #0000ee;}contexter-box img {width: 100%;border: 0;padding: 0;margin: 0;}/* Extra small devices (phones, 600px and down) */@media only screen and (max-width: 600px) {...}/* Small devices (portrait tablets and large phones, 600px and up) */@media only screen and (min-width: 600px) {...}/* Medium devices (landscape tablets, 768px and up) */@media only screen and (min-width: 768px) {...}/* Large devices (laptops/desktops, 992px and up) */@media only screen and (min-width: 992px) {...}/* Extra large devices (large laptops and desktops, 1200px and up) */@media only screen and (min-width: 1200px) {...}@media (prefers-color-scheme: dark){contexter-box a {color: #55b0ff;}}`,this.appendChild(lightDomStyle),this.shadow.appendChild(style);const innerContainer=document.createElement(\"contexter-box-inner\"),innerSlotThumbnail=(this.shadow.appendChild(innerContainer),document.createElement(\"slot\")),innerSlotHeader=(innerSlotThumbnail.name=\"thumbnail\",innerContainer.appendChild(innerSlotThumbnail),document.createElement(\"slot\")),innerSlotAuthor=(innerSlotHeader.name=\"header\",innerContainer.appendChild(innerSlotHeader),document.createElement(\"slot\")),innerSlotTime=(innerSlotAuthor.name=\"author\",innerContainer.appendChild(innerSlotAuthor),document.createElement(\"slot\")),innerSlotSummary=(innerSlotTime.name=\"time\",innerContainer.appendChild(innerSlotTime),document.createElement(\"slot\")),metaContainer=(innerSlotSummary.name=\"summary\",innerContainer.appendChild(innerSlotSummary),document.createElement(\"contexter-meta\")),innerSlotInfo=(innerContainer.appendChild(metaContainer),document.createElement(\"slot\")),linkContainer=(innerSlotInfo.name=\"keywords\",metaContainer.appendChild(innerSlotInfo),document.createElement(\"contexter-linkset\")),innerSlotArchiveLink=(metaContainer.appendChild(linkContainer),document.createElement(\"slot\")),innerSlotReadLink=(innerSlotArchiveLink.name=\"archive-link\",linkContainer.appendChild(innerSlotArchiveLink),document.createElement(\"slot\"));innerSlotReadLink.name=\"read-link\",linkContainer.appendChild(innerSlotReadLink),this.className=\"contexter-box\",this.onclick=e=>{if(!e.target.className.includes(\"read-link\")&&!e.target.className.includes(\"title-link\")){const mainLinks=this.querySelectorAll(\"a.main-link\");mainLinks[0].click()}}}}}customElements.define(\"contexter-box\",ContexterBox)},window.contexterSetupComplete||window.contexterSetup();</script><contexter-box class=\"link-card h-entry hentry\" itemscope=\"\" itemtype=\"https://schema.org/CreativeWork\"><contexter-thumbnail class=\"thumbnail\" slot=\"thumbnail\"></contexter-thumbnail><contexter-box-head slot=\"header\" class=\"p-name entry-title\" itemprop=\"headline\"><contexter-box-head slot=\"header\" class=\"p-name entry-title\" itemprop=\"headline\"><a is=\"contexter-link\" href=\"https://berjon.com/ap-at/\" itemprop=\"url\">ActivityPub Over ATProto</a></contexter-box-head></contexter-box-head><contexter-byline class=\"p-author author\" slot=\"author\"><span class=\"p-name byline\" rel=\"author\" itemprop=\"author\">@robinberjon</span></contexter-byline><time class=\"dt-published published\" slot=\"time\" itemprop=\"datePublished\" datetime=\"2024-08-28T19:25:31.565Z\">8/28/2024</time><contexter-summary class=\"p-summary entry-summary\" itemprop=\"abstract\" slot=\"summary\"><p>Thought experiment: how hard would it be to implement ActivityPub over ATProto? The answer might surprise you!</p></contexter-summary><contexter-keywordset itemprop=\"keywords\" slot=\"keywords\"></contexter-keywordset><a href=\"https://web.archive.org/web/20240828192537/https://berjon.com/ap-at/\" is=\"contexter-link\" target=\"_blank\" rel=\"timemap\" class=\"read-link archive-link\" itemprop=\"archivedAt\" slot=\"archive-link\">Archived</a><a is=\"contexter-link\" href=\"https://berjon.com/ap-at/\" class=\"read-link main-link\" itemprop=\"sameAs\" slot=\"read-link\">Read</a></contexter-box>","linkId":"e9a13831c0e92f06ceba337db8fc66a7b2928aca","data":{"originalLink":"https://berjon.com/ap-at/","sanitizedLink":"https://berjon.com/ap-at/","canonical":"https://berjon.com/ap-at/","htmlText":"<!DOCTYPE html>\n    <html lang=en dir=\"ltr\">\n      <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width\">\n        <title>ActivityPub Over ATProto</title>\n        <link rel=\"icon\" href=\"/00239C.png\">\n        <link rel=\"stylesheet\" href=\"/berjon.min.css?cssh=32043f2caabe3c82998f3e0f310e8a2ad9f0842d7986a563f3dcc7fb3b5de692\">\n        \n        <link rel=\"stylesheet\" href=\"/prism-coy.min.css\">\n        <link rel=\"alternate\" type=\"application/atom+xml\" href=\"/feed.atom\" title=\"Robin Berjon â€” Feed\">\n        <meta name=\"monetization\" content=\"$ilp.uphold.com/jPPaqHeeaWxU\">\n        <meta name=\"twitter:card\" content=\"summary_large_image\">\n        <meta name=\"twitter:site\" content=\"@robinberjon\">\n        <meta name=\"twitter:creator\" content=\"@robinberjon\">\n        <meta name=\"twitter:title\" property=\"og:title\" content=\"ActivityPub Over ATProto\">\n        <meta name=\"twitter:description\" property=\"og:description\" content=\"Thought experiment: how hard would it be to implement ActivityPub over ATProto? The answer might surprise you!\">\n        <meta name=\"twitter:image\" property=\"og:image\" content=\"https://berjon.com/ap-at/chimera.jpg\">\n        <meta name=\"twitter:image:alt\" content=\"A Gustave DorÃ© chimeric creature, sort of dragon-like with a woman on its back, in green hues.\">\n        <meta name=\"twitter:url\" property=\"og:url\" content=\"https://berjon.com/ap-at/\">\n        <meta property=\"og:site_name\" content=\"Robin Berjon\">\n        <meta property=\"og:type\" content=\"blog\">\n        <meta property=\"og:locale\" content=\"en_UK\">\n        <meta name=\"theme-color\" content=\"#00239C\">\n        <style nonce=\"cUxlMEZLTXBn\">\n          body {\n            --primary-colour: #00239C;\n            --secondary-colour: #00239C;\n          }\n          \n        </style>\n      </head>\n      <body>\n        <header>\n          <p><a href=\"/\">Robin Berjon</a></p>\n        </header>\n        <main>\n          <article itemprop=\"blogPost\" itemscope itemtype=\"https://schema.org/BlogPosting\" itemid=https://berjon.com/ap-at/>\n      <header>\n        <p itemprop=\"alternativeHeadline\">Â¿Por quÃ© no los dos?</p>\n        <h1 itemprop=\"name\">ActivityPub Over ATProto</h1>\n        <div class=\"meta\">\n          <ul><li><span itemprop=\"author\" itemscope itemtype=\"https://schema.org/Person\" itemid=https://berjon.com/people/robin>\n    <a href=/people/robin><span itemprop=\"name\">Robin Berjon</span></a>\n  </span></li></ul>\n          <time datetime=\"2023-11-06\" itemprop=\"datePublished\">2023-11-06</time>\n        </div>\n      </header>\n      <img src=\"/ap-at/chimera.jpg\" width=\"880\" height=\"435\" alt=\"A Gustave DorÃ© chimeric creature, sort of dragon-like with a woman on its back, in green hues.\"  itemprop=\"image\">\n      <p>There's a joke in movement politics that if you have one Trotskyist (and you can replace \"Trotskyist\" with any number of other denominations), you have one Party; if you have two Trotskyists, you have two Factions; and if you have three Trotskyists, you have a party split.</p>\n<p>It feels like that's the vibe the open social media space is in nowadays. People feel that they need to pick a side and defend it, preferring to eat one another's face rather than make sure the leopards don't. I guess in a way that's very social media. It's also very stupid.</p>\n<p>I would like to relieve the tedium of this posturing by making a suggestion that everyone can hate together. Or, more seriously, I would like to go through a short exercise to demonstrate that it might not be the dumbest thing to pay a little bit more attention to interesting architectural details. This can set the stage for a broader discussion of social media on the Web.</p>\n<p>This is just a sketch and it has issues. I initially wanted to prototype this but the situation at work is such that I have precious little bandwidth for prototyping (so I'm mostly dumping my notes onto this blog). Think of it as a <a href=\"https://en.wikipedia.org/wiki/Speculative_design\">design provocation</a>, and the provocation is this:</p>\n<blockquote>\n<p>With relatively little work, we could run ActivityPub atop an AT Protocol PDS.</p>\n</blockquote>\n<p>I won't try to convince you that we <em>could</em> do that without making some modifications to the current state of either or both, but I would like to draw your attention to <em>why</em> this is something worth thinking about and, with any luck, convince you that we <em>should</em> be moving in that direction (even if not necessarily this exact combo). Note that I find it hard to believe that I would be the first person to think of this, but I failed to find anything. Maybe you think that I ought to be the only person to ever have this idea.</p>\n<p>The first thing to understand is that the <a href=\"https://atproto.com/\">AT Protocol</a> is not Bluesky. ATProto is intended to be a generic toolbox for building social media applications, and it arguably extends (or can readily be extended) beyond that into supporting general infrastructure for a Personal Data Server (PDS). In fact, the ATProto architecture is explicitly described in terms of a PDS and of that PDS being a <a href=\"https://berjon.com/user-agency/\">user agent</a>. While Bluesky have been clear that they intend to keep control over the <code>app.bsky</code> API routes that implement Bluesky atop ATProto, they have also been clear that the <code>com.atproto</code> routes are intended to be an open standard. (This has yet to get the governance to guarantee it, but I'm not in the business of asking for permission anyway.)</p>\n<p>The reason I draw your attention to this distinction is because ATProto has interesting properties, notably in how it supports pluggable identity that doesn't depend on the server you use as well as signed data repositories. This puts power in the hands of the users and not (as is the case with vanilla federation) in those of server admins. It means that you can always guarantee <a href=\"https://subconscious.substack.com/p/credible-exit\">credible exit</a>, you cannot get locked in. By default, email-style federation (which is the underlying model for AP) is subject to capture, and indeed email is captured (~85% Gmail and migration is at the domain level or by kindness of the admins who might accept forwarding).</p>\n<p>However, ATProto on its own doesn't do any social media. It's \"just\" a layer atop of which protocols can be implemented. This doesn't mean that it can be used to implement arbitrary protocols, but ActivityPub/Activity Streams has a very good indirection that makes that a lot easier: the <a href=\"https://www.w3.org/TR/activitystreams-core/#actors\"><code>Actor</code> document</a>. An actor is any entity that can have an activity, and can therefore be doing things on social. You can get an actor document from more or less anywhere, for instance you can <a href=\"https://mastodon.social/@robin.json\">look at mine by adding <code>.json</code> to the URL of my Mastodon identity</a>. You could obtain it by resolving a handle to a DID, and finding that info embedded in the DID document.</p>\n<p>The actor document has a neat feature: it gives you the URLs of the API endpoints for a variety of operations. That is to say, instead of expecting endpoints for the entire API to be at predetermined locations, it specifies arbitrary URLs for each one of them. After cutting some of the cruft from my Mastodon actor doc, we can see several of these listed there:</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"@context\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://www.w3.org/ns/activitystreams\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://mastodon.social/users/robin\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Person\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"following\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://mastodon.social/users/robin/following\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"followers\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://mastodon.social/users/robin/followers\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"inbox\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://mastodon.social/users/robin/inbox\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"outbox\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://mastodon.social/users/robin/outbox\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"preferredUsername\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"robin\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Robin Berjon\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>This means that we can use this as a level of indirection to point to one's own ATProto PDS with ActivityPub routes:</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"@context\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://www.w3.org/ns/activitystreams\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://mastodon.social/users/robin\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Person\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"following\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://pds.berjon.com/xrpc/org.w3.activitypub.following\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"followers\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://pds.berjon.com/xrpc/org.w3.activitypub.followers\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"inbox\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://pds.berjon.com/xrpc/org.w3.activitypub.inbox\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"outbox\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://pds.berjon.com/xrpc/org.w3.activitypub.outbox\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"preferredUsername\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"robin.berjon.com\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Robin Berjon\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Success? Not quite.</p>\n<a href=\"#we-hit-trouble\" class=\"self-link\" aria-label=\"Section: We Hit Trouble\"></a><h2 id=\"we-hit-trouble\">We Hit Trouble</h2>\n<p>I know you're sitting on the edge of your seat, biting your nails, for some of you clutching your pearls waiting to hear if we can just run ActivityPub over ATProto with just a bit of JSON tinkering and an ATProto app, without changing either spec. The answer is: not quite, but it's not so far as to be unbridgeable or even impractical.</p>\n<p>The first issue is that an XRPC nsid (e.g. <code>org.w3.activitypub.inbox</code>) can either be a query (GET) or a procedure (POST) but as far as I can tell, not both. But the ActivityPub <code>inbox</code> property has to support multiple methods. Setting aside perennial debates over REST versus RPC (<em>yaaaawn</em>), this is not a major problem to bridge. Either the actor document could be update with separate properties for different methods (that can point to the same URL for non-ATProto implementations), or XRPC Lexicons could be change to support overloaded methods. The only thing standing in the way of a bridge here is that people get religious about this decisions. In the practical world, it's a relatively easy fix.</p>\n<p>A second issue is that the identity and handle systems aren't fully aligned. I believe that nothing prevents <code>com.atproto.identity.resolveHandle</code> from resolving <code>@robin@mastodon.social</code> just as it resolves <code>@robin.berjon.com</code>, it might simply drop the leading <code>@</code> and replace the other by a <code>.</code>, then use DNS to resolve the DID. This is even compatible with an IndieWeb ActivityPub in which actors have their own domains (as is relatively common for ATProto users). It should be possible to have an actor document also point to the DID, and the DID document link back to it for good measure.</p>\n<p>(I'm not going to touch on the limitations of DIDs or specifically issues with <code>did:plc</code> here since they don't affect integration. I've been wondering if DSNP may offer the right foundation for a DID method, but that's a topic for another time.)</p>\n<p>Andâ€¦ that's it? My bet is that, since I haven't had the chance to actually implement this end to end, I'm probably missing some snags. But at first blush this is more feasible than you would think from the bitter online debates.</p>\n<a href=\"#why-do-this-man\" class=\"self-link\" aria-label=\"Section: Why Do This, Man\"></a><h2 id=\"why-do-this-man\">Why Do This, Man</h2>\n<p>Overwhelmingly, our experience of social media is in siloes. They are closed environments that are designed to keep you on the inside and that integrate very poorly with the rest of the world.</p>\n<p>Both the Activity* standards and ATProto break this siloing in different ways. Activity* are built around URLs and can sort of \"socialise\" more or less anything on the Web, which is great, but they don't touch the underlying substrate. The expectation tends to be that either you run your own server (which isn't for everyone) or you have to join a federated server, which tends to put you at the mercy of an admin (and, as some people are unfortunately finding out, not all admins are great). ATProto, on its side, provides a good initial foundation for an extensible PDS designed around <a href=\"https://berjon.com/user-agency/\">user agency</a> and <a href=\"https://subconscious.substack.com/p/credible-exit\">credible exit</a>. This means that your online presence can be custodially hosted (so you need not worry about running a server) but if you don't like your host, you can be guaranteed to be able to take your content elsewhere (verifiably) and nothing will change, you won't even need to update your handle or set up redirection.</p>\n<p>Which is to say: they solve different problems and the solutions are complementary. By taking the small steps to make these two worlds compatible, we get significantly more from both.</p>\n<p>Seems like it'd be worth a shot!</p>\n<hr>\n<p><em>This post is part of a series on reimagining parts of the Web. You can read the other entries in the series at:</em></p>\n<ol>\n<li><a href=\"https://berjon.com/next-web/\">Building the Next Web</a></li>\n<li><a href=\"https://berjon.com/user-agency/\">The Web Is For User Agency</a></li>\n<li><a href=\"https://berjon.com/bigger-browser/\">You're Gonna Need A Bigger Browser</a></li>\n<li><a href=\"https://berjon.com/web-tiles/\">Web Tiles</a></li>\n<li><a href=\"https://berjon.com/ap-at/\">ActivityPub Over ATProto</a></li>\n</ol>\n<a href=\"#acknowledgements\" class=\"self-link\" aria-label=\"Section: Acknowledgements\"></a><h2 id=\"acknowledgements\">Acknowledgements</h2>\n<p>Many thanks to the following excellent people (in alphabetical order) for their invaluable feedback:\nAmy Guy,\nBenjamin Goering,\nBen Harnett,\nBlaine Cook,\nBoris Mann,\nBrian Kardell,\nBrooklyn Zelenka,\nDave Justice,\nDietrich Ayala,\nDominique HazaÃ«l-Massieux,\nFabrice DesrÃ©,\nIan Preston,\nJuan Caballero,\nKjetil Kjernsmo,\nMarcin Rataj,\nMargaux Vitre,\nMaria Farrell, and\nTess O'Connor.\nNeedless to say, anything dumb and stupid in this article is entirely mine.</p>\n      <div class=\"feedback\">\n        I always welcome feedback:\n        <a href=\"https://bsky.app/profile/robin.berjon.com\">@robin.berjon.com</a>,\n        <a href=\"https://mastodon.social/@robin\">@robin@mastodon.social</a>,\n        <a href=\"https://twitter.com/robinberjon\">@robinberjon</a>, or\n        <a href=mailto:robin@berjon.com?subject=Concerning%20'ActivityPub%20Over%20ATProto'>robin@berjon.com</a>.\n      </div>\n    </article>\n        </main>\n        <footer>\n          <nav>\n            <ul>\n              <li><a href=\"/\">home</a></li\n              ><li><a href=\"/about/\">about</a></li>\n            </ul>\n            <ul>\n              <li><a href=\"/2009/\">2009</a></li\n              ><li><a href=\"/2010/\">2010</a></li\n              ><li><a href=\"/2011/\">2011</a></li\n              ><li><a href=\"/2012/\">2012</a></li\n              ><li><a href=\"/2013/\">2013</a></li\n              ><li><a href=\"/2014/\">2014</a></li\n              ><li><a href=\"/2015/\">2015</a></li\n              ><li><a href=\"/2016/\">2016</a></li\n              ><li><a href=\"/2018/\">2018</a></li\n              ><li><a href=\"/2021/\">2021</a></li\n              ><li><a href=\"/2022/\">2022</a></li\n              ><li><a href=\"/2023/\">2023</a></li\n              ><li><a href=\"/2024/\">2024</a></li>\n              </ul>\n          </nav>\n          <p class=\"disclaimer\">\n            The opinions published on this site are mine and mine alone. It is disingenuous to tie\n            them to my employer one way or another.\n          </p>\n          <a rel=\"me\" href=\"https://mastodon.social/@robin\">Mastodon</a>\n        </footer>\n      </body>\n    </html>\n  ","oembed":false,"readabilityObject":{"title":"ActivityPub Over ATProto","content":"<div id=\"readability-page-1\" class=\"page\"><div>\n          <article itemprop=\"blogPost\" itemscope=\"\" itemtype=\"https://schema.org/BlogPosting\" itemid=\"https://berjon.com/ap-at/\">\n      <header>\n        <p itemprop=\"alternativeHeadline\">Â¿Por quÃ© no los dos?</p>\n        \n        \n      </header>\n      <img src=\"/ap-at/chimera.jpg\" width=\"880\" height=\"435\" alt=\"A Gustave DorÃ© chimeric creature, sort of dragon-like with a woman on its back, in green hues.\" itemprop=\"image\">\n      <p>There's a joke in movement politics that if you have one Trotskyist (and you can replace \"Trotskyist\" with any number of other denominations), you have one Party; if you have two Trotskyists, you have two Factions; and if you have three Trotskyists, you have a party split.</p>\n<p>It feels like that's the vibe the open social media space is in nowadays. People feel that they need to pick a side and defend it, preferring to eat one another's face rather than make sure the leopards don't. I guess in a way that's very social media. It's also very stupid.</p>\n<p>I would like to relieve the tedium of this posturing by making a suggestion that everyone can hate together. Or, more seriously, I would like to go through a short exercise to demonstrate that it might not be the dumbest thing to pay a little bit more attention to interesting architectural details. This can set the stage for a broader discussion of social media on the Web.</p>\n<p>This is just a sketch and it has issues. I initially wanted to prototype this but the situation at work is such that I have precious little bandwidth for prototyping (so I'm mostly dumping my notes onto this blog). Think of it as a <a href=\"https://en.wikipedia.org/wiki/Speculative_design\">design provocation</a>, and the provocation is this:</p>\n<blockquote>\n<p>With relatively little work, we could run ActivityPub atop an AT Protocol PDS.</p>\n</blockquote>\n<p>I won't try to convince you that we <em>could</em> do that without making some modifications to the current state of either or both, but I would like to draw your attention to <em>why</em> this is something worth thinking about and, with any luck, convince you that we <em>should</em> be moving in that direction (even if not necessarily this exact combo). Note that I find it hard to believe that I would be the first person to think of this, but I failed to find anything. Maybe you think that I ought to be the only person to ever have this idea.</p>\n<p>The first thing to understand is that the <a href=\"https://atproto.com/\">AT Protocol</a> is not Bluesky. ATProto is intended to be a generic toolbox for building social media applications, and it arguably extends (or can readily be extended) beyond that into supporting general infrastructure for a Personal Data Server (PDS). In fact, the ATProto architecture is explicitly described in terms of a PDS and of that PDS being a <a href=\"https://berjon.com/user-agency/\">user agent</a>. While Bluesky have been clear that they intend to keep control over the <code>app.bsky</code> API routes that implement Bluesky atop ATProto, they have also been clear that the <code>com.atproto</code> routes are intended to be an open standard. (This has yet to get the governance to guarantee it, but I'm not in the business of asking for permission anyway.)</p>\n<p>The reason I draw your attention to this distinction is because ATProto has interesting properties, notably in how it supports pluggable identity that doesn't depend on the server you use as well as signed data repositories. This puts power in the hands of the users and not (as is the case with vanilla federation) in those of server admins. It means that you can always guarantee <a href=\"https://subconscious.substack.com/p/credible-exit\">credible exit</a>, you cannot get locked in. By default, email-style federation (which is the underlying model for AP) is subject to capture, and indeed email is captured (~85% Gmail and migration is at the domain level or by kindness of the admins who might accept forwarding).</p>\n<p>However, ATProto on its own doesn't do any social media. It's \"just\" a layer atop of which protocols can be implemented. This doesn't mean that it can be used to implement arbitrary protocols, but ActivityPub/Activity Streams has a very good indirection that makes that a lot easier: the <a href=\"https://www.w3.org/TR/activitystreams-core/#actors\"><code>Actor</code> document</a>. An actor is any entity that can have an activity, and can therefore be doing things on social. You can get an actor document from more or less anywhere, for instance you can <a href=\"https://mastodon.social/@robin.json\">look at mine by adding <code>.json</code> to the URL of my Mastodon identity</a>. You could obtain it by resolving a handle to a DID, and finding that info embedded in the DID document.</p>\n<p>The actor document has a neat feature: it gives you the URLs of the API endpoints for a variety of operations. That is to say, instead of expecting endpoints for the entire API to be at predetermined locations, it specifies arbitrary URLs for each one of them. After cutting some of the cruft from my Mastodon actor doc, we can see several of these listed there:</p>\n<pre><code><span>{</span>\n  <span>\"@context\"</span><span>:</span> <span>\"https://www.w3.org/ns/activitystreams\"</span><span>,</span>\n  <span>\"id\"</span><span>:</span> <span>\"https://mastodon.social/users/robin\"</span><span>,</span>\n  <span>\"type\"</span><span>:</span> <span>\"Person\"</span><span>,</span>\n  <span>\"following\"</span><span>:</span> <span>\"https://mastodon.social/users/robin/following\"</span><span>,</span>\n  <span>\"followers\"</span><span>:</span> <span>\"https://mastodon.social/users/robin/followers\"</span><span>,</span>\n  <span>\"inbox\"</span><span>:</span> <span>\"https://mastodon.social/users/robin/inbox\"</span><span>,</span>\n  <span>\"outbox\"</span><span>:</span> <span>\"https://mastodon.social/users/robin/outbox\"</span><span>,</span>\n  <span>\"preferredUsername\"</span><span>:</span> <span>\"robin\"</span><span>,</span>\n  <span>\"name\"</span><span>:</span> <span>\"Robin Berjon\"</span>\n<span>}</span>\n</code></pre>\n<p>This means that we can use this as a level of indirection to point to one's own ATProto PDS with ActivityPub routes:</p>\n<pre><code><span>{</span>\n  <span>\"@context\"</span><span>:</span> <span>\"https://www.w3.org/ns/activitystreams\"</span><span>,</span>\n  <span>\"id\"</span><span>:</span> <span>\"https://mastodon.social/users/robin\"</span><span>,</span>\n  <span>\"type\"</span><span>:</span> <span>\"Person\"</span><span>,</span>\n  <span>\"following\"</span><span>:</span> <span>\"https://pds.berjon.com/xrpc/org.w3.activitypub.following\"</span><span>,</span>\n  <span>\"followers\"</span><span>:</span> <span>\"https://pds.berjon.com/xrpc/org.w3.activitypub.followers\"</span><span>,</span>\n  <span>\"inbox\"</span><span>:</span> <span>\"https://pds.berjon.com/xrpc/org.w3.activitypub.inbox\"</span><span>,</span>\n  <span>\"outbox\"</span><span>:</span> <span>\"https://pds.berjon.com/xrpc/org.w3.activitypub.outbox\"</span><span>,</span>\n  <span>\"preferredUsername\"</span><span>:</span> <span>\"robin.berjon.com\"</span><span>,</span>\n  <span>\"name\"</span><span>:</span> <span>\"Robin Berjon\"</span>\n<span>}</span>\n</code></pre>\n<p>Success? Not quite.</p>\n<a href=\"#we-hit-trouble\" aria-label=\"Section: We Hit Trouble\"></a><h2 id=\"we-hit-trouble\">We Hit Trouble</h2>\n<p>I know you're sitting on the edge of your seat, biting your nails, for some of you clutching your pearls waiting to hear if we can just run ActivityPub over ATProto with just a bit of JSON tinkering and an ATProto app, without changing either spec. The answer is: not quite, but it's not so far as to be unbridgeable or even impractical.</p>\n<p>The first issue is that an XRPC nsid (e.g. <code>org.w3.activitypub.inbox</code>) can either be a query (GET) or a procedure (POST) but as far as I can tell, not both. But the ActivityPub <code>inbox</code> property has to support multiple methods. Setting aside perennial debates over REST versus RPC (<em>yaaaawn</em>), this is not a major problem to bridge. Either the actor document could be update with separate properties for different methods (that can point to the same URL for non-ATProto implementations), or XRPC Lexicons could be change to support overloaded methods. The only thing standing in the way of a bridge here is that people get religious about this decisions. In the practical world, it's a relatively easy fix.</p>\n<p>A second issue is that the identity and handle systems aren't fully aligned. I believe that nothing prevents <code>com.atproto.identity.resolveHandle</code> from resolving <code>@robin@mastodon.social</code> just as it resolves <code>@robin.berjon.com</code>, it might simply drop the leading <code>@</code> and replace the other by a <code>.</code>, then use DNS to resolve the DID. This is even compatible with an IndieWeb ActivityPub in which actors have their own domains (as is relatively common for ATProto users). It should be possible to have an actor document also point to the DID, and the DID document link back to it for good measure.</p>\n<p>(I'm not going to touch on the limitations of DIDs or specifically issues with <code>did:plc</code> here since they don't affect integration. I've been wondering if DSNP may offer the right foundation for a DID method, but that's a topic for another time.)</p>\n<p>Andâ€¦ that's it? My bet is that, since I haven't had the chance to actually implement this end to end, I'm probably missing some snags. But at first blush this is more feasible than you would think from the bitter online debates.</p>\n<a href=\"#why-do-this-man\" aria-label=\"Section: Why Do This, Man\"></a><h2 id=\"why-do-this-man\">Why Do This, Man</h2>\n<p>Overwhelmingly, our experience of social media is in siloes. They are closed environments that are designed to keep you on the inside and that integrate very poorly with the rest of the world.</p>\n<p>Both the Activity* standards and ATProto break this siloing in different ways. Activity* are built around URLs and can sort of \"socialise\" more or less anything on the Web, which is great, but they don't touch the underlying substrate. The expectation tends to be that either you run your own server (which isn't for everyone) or you have to join a federated server, which tends to put you at the mercy of an admin (and, as some people are unfortunately finding out, not all admins are great). ATProto, on its side, provides a good initial foundation for an extensible PDS designed around <a href=\"https://berjon.com/user-agency/\">user agency</a> and <a href=\"https://subconscious.substack.com/p/credible-exit\">credible exit</a>. This means that your online presence can be custodially hosted (so you need not worry about running a server) but if you don't like your host, you can be guaranteed to be able to take your content elsewhere (verifiably) and nothing will change, you won't even need to update your handle or set up redirection.</p>\n<p>Which is to say: they solve different problems and the solutions are complementary. By taking the small steps to make these two worlds compatible, we get significantly more from both.</p>\n<p>Seems like it'd be worth a shot!</p>\n<hr>\n<p><em>This post is part of a series on reimagining parts of the Web. You can read the other entries in the series at:</em></p>\n<ol>\n<li><a href=\"https://berjon.com/next-web/\">Building the Next Web</a></li>\n<li><a href=\"https://berjon.com/user-agency/\">The Web Is For User Agency</a></li>\n<li><a href=\"https://berjon.com/bigger-browser/\">You're Gonna Need A Bigger Browser</a></li>\n<li><a href=\"https://berjon.com/web-tiles/\">Web Tiles</a></li>\n<li><a href=\"https://berjon.com/ap-at/\">ActivityPub Over ATProto</a></li>\n</ol>\n<a href=\"#acknowledgements\" aria-label=\"Section: Acknowledgements\"></a><h2 id=\"acknowledgements\">Acknowledgements</h2>\n<p>Many thanks to the following excellent people (in alphabetical order) for their invaluable feedback:\nAmy Guy,\nBenjamin Goering,\nBen Harnett,\nBlaine Cook,\nBoris Mann,\nBrian Kardell,\nBrooklyn Zelenka,\nDave Justice,\nDietrich Ayala,\nDominique HazaÃ«l-Massieux,\nFabrice DesrÃ©,\nIan Preston,\nJuan Caballero,\nKjetil Kjernsmo,\nMarcin Rataj,\nMargaux Vitre,\nMaria Farrell, and\nTess O'Connor.\nNeedless to say, anything dumb and stupid in this article is entirely mine.</p>\n      \n    </article>\n        </div></div>","textContent":"\n          \n      \n        Â¿Por quÃ© no los dos?\n        \n        \n      \n      \n      There's a joke in movement politics that if you have one Trotskyist (and you can replace \"Trotskyist\" with any number of other denominations), you have one Party; if you have two Trotskyists, you have two Factions; and if you have three Trotskyists, you have a party split.\nIt feels like that's the vibe the open social media space is in nowadays. People feel that they need to pick a side and defend it, preferring to eat one another's face rather than make sure the leopards don't. I guess in a way that's very social media. It's also very stupid.\nI would like to relieve the tedium of this posturing by making a suggestion that everyone can hate together. Or, more seriously, I would like to go through a short exercise to demonstrate that it might not be the dumbest thing to pay a little bit more attention to interesting architectural details. This can set the stage for a broader discussion of social media on the Web.\nThis is just a sketch and it has issues. I initially wanted to prototype this but the situation at work is such that I have precious little bandwidth for prototyping (so I'm mostly dumping my notes onto this blog). Think of it as a design provocation, and the provocation is this:\n\nWith relatively little work, we could run ActivityPub atop an AT Protocol PDS.\n\nI won't try to convince you that we could do that without making some modifications to the current state of either or both, but I would like to draw your attention to why this is something worth thinking about and, with any luck, convince you that we should be moving in that direction (even if not necessarily this exact combo). Note that I find it hard to believe that I would be the first person to think of this, but I failed to find anything. Maybe you think that I ought to be the only person to ever have this idea.\nThe first thing to understand is that the AT Protocol is not Bluesky. ATProto is intended to be a generic toolbox for building social media applications, and it arguably extends (or can readily be extended) beyond that into supporting general infrastructure for a Personal Data Server (PDS). In fact, the ATProto architecture is explicitly described in terms of a PDS and of that PDS being a user agent. While Bluesky have been clear that they intend to keep control over the app.bsky API routes that implement Bluesky atop ATProto, they have also been clear that the com.atproto routes are intended to be an open standard. (This has yet to get the governance to guarantee it, but I'm not in the business of asking for permission anyway.)\nThe reason I draw your attention to this distinction is because ATProto has interesting properties, notably in how it supports pluggable identity that doesn't depend on the server you use as well as signed data repositories. This puts power in the hands of the users and not (as is the case with vanilla federation) in those of server admins. It means that you can always guarantee credible exit, you cannot get locked in. By default, email-style federation (which is the underlying model for AP) is subject to capture, and indeed email is captured (~85% Gmail and migration is at the domain level or by kindness of the admins who might accept forwarding).\nHowever, ATProto on its own doesn't do any social media. It's \"just\" a layer atop of which protocols can be implemented. This doesn't mean that it can be used to implement arbitrary protocols, but ActivityPub/Activity Streams has a very good indirection that makes that a lot easier: the Actor document. An actor is any entity that can have an activity, and can therefore be doing things on social. You can get an actor document from more or less anywhere, for instance you can look at mine by adding .json to the URL of my Mastodon identity. You could obtain it by resolving a handle to a DID, and finding that info embedded in the DID document.\nThe actor document has a neat feature: it gives you the URLs of the API endpoints for a variety of operations. That is to say, instead of expecting endpoints for the entire API to be at predetermined locations, it specifies arbitrary URLs for each one of them. After cutting some of the cruft from my Mastodon actor doc, we can see several of these listed there:\n{\n  \"@context\": \"https://www.w3.org/ns/activitystreams\",\n  \"id\": \"https://mastodon.social/users/robin\",\n  \"type\": \"Person\",\n  \"following\": \"https://mastodon.social/users/robin/following\",\n  \"followers\": \"https://mastodon.social/users/robin/followers\",\n  \"inbox\": \"https://mastodon.social/users/robin/inbox\",\n  \"outbox\": \"https://mastodon.social/users/robin/outbox\",\n  \"preferredUsername\": \"robin\",\n  \"name\": \"Robin Berjon\"\n}\n\nThis means that we can use this as a level of indirection to point to one's own ATProto PDS with ActivityPub routes:\n{\n  \"@context\": \"https://www.w3.org/ns/activitystreams\",\n  \"id\": \"https://mastodon.social/users/robin\",\n  \"type\": \"Person\",\n  \"following\": \"https://pds.berjon.com/xrpc/org.w3.activitypub.following\",\n  \"followers\": \"https://pds.berjon.com/xrpc/org.w3.activitypub.followers\",\n  \"inbox\": \"https://pds.berjon.com/xrpc/org.w3.activitypub.inbox\",\n  \"outbox\": \"https://pds.berjon.com/xrpc/org.w3.activitypub.outbox\",\n  \"preferredUsername\": \"robin.berjon.com\",\n  \"name\": \"Robin Berjon\"\n}\n\nSuccess? Not quite.\nWe Hit Trouble\nI know you're sitting on the edge of your seat, biting your nails, for some of you clutching your pearls waiting to hear if we can just run ActivityPub over ATProto with just a bit of JSON tinkering and an ATProto app, without changing either spec. The answer is: not quite, but it's not so far as to be unbridgeable or even impractical.\nThe first issue is that an XRPC nsid (e.g. org.w3.activitypub.inbox) can either be a query (GET) or a procedure (POST) but as far as I can tell, not both. But the ActivityPub inbox property has to support multiple methods. Setting aside perennial debates over REST versus RPC (yaaaawn), this is not a major problem to bridge. Either the actor document could be update with separate properties for different methods (that can point to the same URL for non-ATProto implementations), or XRPC Lexicons could be change to support overloaded methods. The only thing standing in the way of a bridge here is that people get religious about this decisions. In the practical world, it's a relatively easy fix.\nA second issue is that the identity and handle systems aren't fully aligned. I believe that nothing prevents com.atproto.identity.resolveHandle from resolving @robin@mastodon.social just as it resolves @robin.berjon.com, it might simply drop the leading @ and replace the other by a ., then use DNS to resolve the DID. This is even compatible with an IndieWeb ActivityPub in which actors have their own domains (as is relatively common for ATProto users). It should be possible to have an actor document also point to the DID, and the DID document link back to it for good measure.\n(I'm not going to touch on the limitations of DIDs or specifically issues with did:plc here since they don't affect integration. I've been wondering if DSNP may offer the right foundation for a DID method, but that's a topic for another time.)\nAndâ€¦ that's it? My bet is that, since I haven't had the chance to actually implement this end to end, I'm probably missing some snags. But at first blush this is more feasible than you would think from the bitter online debates.\nWhy Do This, Man\nOverwhelmingly, our experience of social media is in siloes. They are closed environments that are designed to keep you on the inside and that integrate very poorly with the rest of the world.\nBoth the Activity* standards and ATProto break this siloing in different ways. Activity* are built around URLs and can sort of \"socialise\" more or less anything on the Web, which is great, but they don't touch the underlying substrate. The expectation tends to be that either you run your own server (which isn't for everyone) or you have to join a federated server, which tends to put you at the mercy of an admin (and, as some people are unfortunately finding out, not all admins are great). ATProto, on its side, provides a good initial foundation for an extensible PDS designed around user agency and credible exit. This means that your online presence can be custodially hosted (so you need not worry about running a server) but if you don't like your host, you can be guaranteed to be able to take your content elsewhere (verifiably) and nothing will change, you won't even need to update your handle or set up redirection.\nWhich is to say: they solve different problems and the solutions are complementary. By taking the small steps to make these two worlds compatible, we get significantly more from both.\nSeems like it'd be worth a shot!\n\nThis post is part of a series on reimagining parts of the Web. You can read the other entries in the series at:\n\nBuilding the Next Web\nThe Web Is For User Agency\nYou're Gonna Need A Bigger Browser\nWeb Tiles\nActivityPub Over ATProto\n\nAcknowledgements\nMany thanks to the following excellent people (in alphabetical order) for their invaluable feedback:\nAmy Guy,\nBenjamin Goering,\nBen Harnett,\nBlaine Cook,\nBoris Mann,\nBrian Kardell,\nBrooklyn Zelenka,\nDave Justice,\nDietrich Ayala,\nDominique HazaÃ«l-Massieux,\nFabrice DesrÃ©,\nIan Preston,\nJuan Caballero,\nKjetil Kjernsmo,\nMarcin Rataj,\nMargaux Vitre,\nMaria Farrell, and\nTess O'Connor.\nNeedless to say, anything dumb and stupid in this article is entirely mine.\n      \n    \n        ","length":9539,"excerpt":"Thought experiment: how hard would it be to implement ActivityPub over ATProto? The answer might surprise you!","byline":"Robin Berjon","dir":"ltr","siteName":"Robin Berjon","lang":"en"},"finalizedMeta":{"title":"ActivityPub Over ATProto","description":"Thought experiment: how hard would it be to implement ActivityPub over ATProto? The answer might surprise you!","author":false,"creator":"@robinberjon","publisher":false,"date":"2024-08-28T19:25:31.565Z","topics":[]},"jsonLd":{"@type":false,"headline":false,"description":false,"image":[],"mainEntityOfPage":{"@type":false,"@id":false},"datePublished":false,"dateModified":false,"isAccessibleForFree":false,"isPartOf":{"@type":[],"name":false,"productID":false},"discussionUrl":false,"license":false,"author":{"@type":false,"name":false,"description":false,"sameAs":false,"image":{"@type":false,"url":false},"givenName":false,"familyName":false,"alternateName":false,"publishingPrinciples":false},"publisher":{"@type":false,"name":false,"description":false,"sameAs":false,"logo":{"@type":false,"url":false},"publishingPrinciples":false},"editor":{"@type":false,"name":false,"description":false,"sameAs":false,"image":{"@type":false,"url":false},"givenName":false,"familyName":false,"alternateName":false,"publishingPrinciples":false}},"twitterObj":false,"status":200,"metadata":{"author":false,"title":"ActivityPub Over ATProto","description":false,"canonical":"https://berjon.com/ap-at/","keywords":[],"image":"/ap-at/chimera.jpg","firstParagraph":"Robin Berjon"},"dublinCore":{},"opengraph":{"title":"ActivityPub Over ATProto","description":"Thought experiment: how hard would it be to implement ActivityPub over ATProto? The answer might surprise you!","url":"https://berjon.com/ap-at/","site_name":"Robin Berjon","locale":"en_UK","type":"blog","typeObject":{"published_time":false,"modified_time":false,"author":false,"publisher":false,"section":false,"tag":[]},"image":"https://berjon.com/ap-at/chimera.jpg"},"twitter":{"site":"@robinberjon","description":"Thought experiment: how hard would it be to implement ActivityPub over ATProto? The answer might surprise you!","card":"summary_large_image","creator":"@robinberjon","title":"ActivityPub Over ATProto","image":"https://berjon.com/ap-at/chimera.jpg","image:alt":"A Gustave DorÃ© chimeric creature, sort of dragon-like with a woman on its back, in green hues.","url":"https://berjon.com/ap-at/"},"archivedData":{"link":"https://web.archive.org/web/20240828192537/https://berjon.com/ap-at/","wayback":"https://web.archive.org/web/20240828192537/https://berjon.com/ap-at/"}}}