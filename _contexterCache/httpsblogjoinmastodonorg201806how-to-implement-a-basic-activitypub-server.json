{"initialLink":"https://blog.joinmastodon.org/2018/06/how-to-implement-a-basic-activitypub-server/","sanitizedLink":"https://blog.joinmastodon.org/2018/06/how-to-implement-a-basic-activitypub-server/","finalLink":"https://blog.joinmastodon.org/2018/06/how-to-implement-a-basic-activitypub-server/","htmlEmbed":"<script>window.contexterSetup=window.contexterSetup||function(){window.contexterSetupComplete=!0;class ContexterLink extends HTMLAnchorElement{constructor(){super()}connectedCallback(){this.setAttribute(\"target\",\"_blank\")}}customElements.define(\"contexter-link\",ContexterLink,{extends:\"a\"}),customElements.define(\"contexter-inner\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"contexter-box__inner\"}}),customElements.define(\"contexter-thumbnail\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"contexter-box__thumbnail\"}}),customElements.define(\"contexter-byline\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"contexter-box__byline\"}}),customElements.define(\"contexter-keywordset\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"contexter-box__keywordset\"}}),customElements.define(\"contexter-linkset\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"contexter-box__linkset\"}}),customElements.define(\"contexter-meta\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"contexter-box__meta\"}}),customElements.define(\"contexter-summary\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"p-summary entry-summary\"}}),customElements.define(\"contexter-box-head\",class extends HTMLElement{constructor(){super()}connectedCallback(){this.className=\"contexter-box__head\"}}),customElements.define(\"contexter-box-inner\",class extends HTMLElement{constructor(){super()}connectedCallback(){}});class ContexterBox extends HTMLElement{constructor(){super(),this.first=!0,this.shadow=this.attachShadow({mode:\"open\"})}connectedCallback(){if(this.first){this.first=!1;var style=document.createElement(\"style\"),lightDomStyle=(style.innerHTML=`:host {--background: #f5f6f7;--border: darkblue;--blue: #0000ee;--font-color: black;--inner-border: black;font-family: Franklin,Arial,Helvetica,sans-serif;font-size: 14px;background: var(--background);width: 600px;color: var(--font-color);min-height: 90px;display: block;padding: 8px;border: 1px solid var(--border);cursor: pointer;box-sizing: border-box;margin: 6px;contain: content;margin: 6px auto;}// can only select top-level nodes with slotted::slotted(*) {max-width: 100%;display:block;}::slotted([slot=thumbnail]) {max-width: 100%;display:block;}::slotted([slot=header]) {width: 100%;font-size: 1.25rem;font-weight: bold;display:block;margin-bottom: 6px;}::slotted([slot=author]) {max-width: 50%;font-size: 12px;display:inline-block;float: left;}::slotted([slot=time]) {max-width: 50%;font-size: 12px;display:inline-block;float: right;}::slotted([slot=summary]) {width: 100%;margin-top: 6px;padding: 10px 2px;border-top: 1px solid var(--inner-border);font-size: 15px;display:inline-block;margin-bottom: 6px;}contexter-meta {height: auto;margin-bottom: 4px;width: 100%;display: grid;position: relative;min-height: 16px;grid-template-columns: repeat(2, 1fr);}::slotted([slot=keywords]) {width: 80%;padding: 2px 4px;border-top: 1px solid var(--inner-border);font-size: 11px;display: block;float: right;font-style: italic;text-align: right;grid-column: 2/2;grid-row: 1;align-self: end;justify-self: end;}::slotted([slot=keywords]):empty {border-top: 0px solid var(--inner-border);}::slotted([slot=archive-link]) {font-size: 1em;display: inline;}::slotted([slot=archive-link])::after {content: \"|\";display: inline;color: var(--font-color);text-decoration: none;margin: 0 .5em;}::slotted([slot=read-link]) {font-size: 1em;display: inline;}contexter-linkset {width: 80%;padding: 2px 4px;font-size: 13px;float: left;font-weight: bold;grid-row: 1;grid-column: 1/2;align-self: end;justify-self: start;}/* Extra small devices (phones, 600px and down) */@media only screen and (max-width: 600px) {:host {width: 310px;}}/* Small devices (portrait tablets and large phones, 600px and up) */@media only screen and (min-width: 600px) {...}/* Medium devices (landscape tablets, 768px and up) */@media only screen and (min-width: 768px) {...}/* Large devices (laptops/desktops, 992px and up) */@media only screen and (min-width: 992px) {...}/* Extra large devices (large laptops and desktops, 1200px and up) */@media only screen and (min-width: 1200px) {...}@media (prefers-color-scheme: dark){:host {--background: #354150;--border: #1f2b37;--blue: #55b0ff;--font-color: #ffffff;--inner-border: #787a7c;background: var(--background);border: 1px solid var(--border)}}`,document.createElement(\"style\"));lightDomStyle.innerHTML=`contexter-box {contain: content;}contexter-box .read-link {font-weight: bold;}contexter-box a {color: #0000ee;}contexter-box img {width: 100%;border: 0;padding: 0;margin: 0;}/* Extra small devices (phones, 600px and down) */@media only screen and (max-width: 600px) {...}/* Small devices (portrait tablets and large phones, 600px and up) */@media only screen and (min-width: 600px) {...}/* Medium devices (landscape tablets, 768px and up) */@media only screen and (min-width: 768px) {...}/* Large devices (laptops/desktops, 992px and up) */@media only screen and (min-width: 992px) {...}/* Extra large devices (large laptops and desktops, 1200px and up) */@media only screen and (min-width: 1200px) {...}@media (prefers-color-scheme: dark){contexter-box a {color: #55b0ff;}}`,this.appendChild(lightDomStyle),this.shadow.appendChild(style);const innerContainer=document.createElement(\"contexter-box-inner\"),innerSlotThumbnail=(this.shadow.appendChild(innerContainer),document.createElement(\"slot\")),innerSlotHeader=(innerSlotThumbnail.name=\"thumbnail\",innerContainer.appendChild(innerSlotThumbnail),document.createElement(\"slot\")),innerSlotAuthor=(innerSlotHeader.name=\"header\",innerContainer.appendChild(innerSlotHeader),document.createElement(\"slot\")),innerSlotTime=(innerSlotAuthor.name=\"author\",innerContainer.appendChild(innerSlotAuthor),document.createElement(\"slot\")),innerSlotSummary=(innerSlotTime.name=\"time\",innerContainer.appendChild(innerSlotTime),document.createElement(\"slot\")),metaContainer=(innerSlotSummary.name=\"summary\",innerContainer.appendChild(innerSlotSummary),document.createElement(\"contexter-meta\")),innerSlotInfo=(innerContainer.appendChild(metaContainer),document.createElement(\"slot\")),linkContainer=(innerSlotInfo.name=\"keywords\",metaContainer.appendChild(innerSlotInfo),document.createElement(\"contexter-linkset\")),innerSlotArchiveLink=(metaContainer.appendChild(linkContainer),document.createElement(\"slot\")),innerSlotReadLink=(innerSlotArchiveLink.name=\"archive-link\",linkContainer.appendChild(innerSlotArchiveLink),document.createElement(\"slot\"));innerSlotReadLink.name=\"read-link\",linkContainer.appendChild(innerSlotReadLink),this.className=\"contexter-box\",this.onclick=e=>{if(!e.target.className.includes(\"read-link\")&&!e.target.className.includes(\"title-link\")){const mainLinks=this.querySelectorAll(\"a.main-link\");mainLinks[0].click()}}}}}customElements.define(\"contexter-box\",ContexterBox)},window.contexterSetupComplete||window.contexterSetup();</script><contexter-box class=\"link-card h-entry hentry\" itemscope=\"\" itemtype=\"https://schema.org/CreativeWork\"><contexter-thumbnail class=\"thumbnail\" slot=\"thumbnail\"></contexter-thumbnail><contexter-box-head slot=\"header\" class=\"p-name entry-title\" itemprop=\"headline\"><contexter-box-head slot=\"header\" class=\"p-name entry-title\" itemprop=\"headline\"><a is=\"contexter-link\" href=\"https://blog.joinmastodon.org/2018/06/how-to-implement-a-basic-activitypub-server/\" itemprop=\"url\">How to implement a basic ActivityPub server</a></contexter-box-head></contexter-box-head><time class=\"dt-published published\" slot=\"time\" itemprop=\"datePublished\" datetime=\"2022-11-07T05:26:39.009Z\">10/7/2022</time><contexter-summary class=\"p-summary entry-summary\" itemprop=\"abstract\" slot=\"summary\"><p>Today we’ll be looking at how to connect the protocols powering Mastodon in the simplest way possible to enter the federated network. We will use static files, standard command-line tools, and some simple Ruby scripting, although the functionality should be easily adaptable to other programming languages.First, what’s the end goal of this exercise? We want to send a Mastodon user a message from our own, non-Mastodon server.So what are the ingredients required?</p></contexter-summary><contexter-keywordset itemprop=\"keywords\" slot=\"keywords\"></contexter-keywordset><a href=\"https://web.archive.org/web/20221107052642/https://blog.joinmastodon.org/2018/06/how-to-implement-a-basic-activitypub-server/\" is=\"contexter-link\" target=\"_blank\" rel=\"timemap\" class=\"read-link archive-link\" itemprop=\"archivedAt\" slot=\"archive-link\">Archived</a><a is=\"contexter-link\" href=\"https://blog.joinmastodon.org/2018/06/how-to-implement-a-basic-activitypub-server/\" class=\"read-link main-link\" itemprop=\"sameAs\" slot=\"read-link\">Read</a></contexter-box>","linkId":"795d275846106791ab3831f8ec14d13f6b435b4e","data":{"originalLink":"https://blog.joinmastodon.org/2018/06/how-to-implement-a-basic-activitypub-server/","sanitizedLink":"https://blog.joinmastodon.org/2018/06/how-to-implement-a-basic-activitypub-server/","canonical":"https://blog.joinmastodon.org/2018/06/how-to-implement-a-basic-activitypub-server/","htmlText":"<!doctype html><html lang=en><head><meta charset=utf-8><meta name=viewport content=\"width=device-width,initial-scale=1\"><link rel=\"shortcut icon\" type=image/png href=/favicon.ico><link rel=stylesheet href=/style.css><link rel=stylesheet href=/fontawesome.css><link rel=amphtml type=text/html href=\"https://blog.joinmastodon.org/amp/2018/06/how-to-implement-a-basic-activitypub-server/\" title=\"Official Mastodon Blog\"><title>How to implement a basic ActivityPub server - Official Mastodon Blog</title><meta property=\"og:site_name\" content=\"Official Mastodon Blog\"><meta property=\"og:title\" content=\"How to implement a basic ActivityPub server\"><meta property=\"og:description\" content=\"Today we’ll be looking at how to connect the protocols powering Mastodon in the simplest way possible to enter the federated network. We will use static files, standard command-line tools, and some simple Ruby scripting, although the functionality should be easily adaptable to other programming languages.\nFirst, what’s the end goal of this exercise? We want to send a Mastodon user a message from our own, non-Mastodon server.\nSo what are the ingredients required?\"><meta property=\"og:type\" content=\"article\"><meta property=\"og:url\" content=\"http://blog.joinmastodon.org/2018/06/how-to-implement-a-basic-activitypub-server/\"><meta name=twitter:card content=\"summary_large_image\"><meta name=twitter:site content=\"@joinmastodon\"></head><body><header class=\"navbar container\"><ul class=left><li><a class=brand href=/><img class=link-logo src=/logo-symbol-wordmark.svg alt=Mastodon></a></li></ul><ul class=right><li><a href=/>All</a></li><li><a href=\"https://blog.joinmastodon.org/categories/guides/\">Guides</a></li><li><a href=\"https://blog.joinmastodon.org/categories/new-features/\">New Features</a></li><li><a href=\"https://blog.joinmastodon.org/categories/op-ed/\">Op-Ed</a></li></ul></header><div class=\"article h-entry\"><div class=container><header class=article-header><h1 class=p-name>How to implement a basic ActivityPub server</h1></header><main class=e-content><p>Today we’ll be looking at how to connect the protocols powering Mastodon in the simplest way possible to enter the federated network. We will use static files, standard command-line tools, and some simple Ruby scripting, although the functionality should be easily adaptable to other programming languages.</p><p>First, what’s the end goal of this exercise? We want to send a Mastodon user a message from our own, non-Mastodon server.</p><p>So what are the ingredients required? The message itself will be formatted with ActivityPub, and it must be attributed to an ActivityPub actor. The actor must be discoverable via Webfinger, and the delivery itself must be cryptographically signed by the actor.</p><h3 id=the-actor>The actor</h3><p>The actor is a publicly accessible JSON-LD document answering the question &ldquo;who&rdquo;. JSON-LD itself is a quite complicated beast, but luckily for our purposes we can treat it as simple JSON with a <code>@context</code> attribute. Here is what an actor document could look like:</p><div class=highlight><pre style=color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4><code class=language-json data-lang=json>{\n\t<span style=color:#ff79c6>&#34;@context&#34;</span>: [\n\t\t<span style=color:#f1fa8c>&#34;https://www.w3.org/ns/activitystreams&#34;</span>,\n\t\t<span style=color:#f1fa8c>&#34;https://w3id.org/security/v1&#34;</span>\n\t],\n\n\t<span style=color:#ff79c6>&#34;id&#34;</span>: <span style=color:#f1fa8c>&#34;https://my-example.com/actor&#34;</span>,\n\t<span style=color:#ff79c6>&#34;type&#34;</span>: <span style=color:#f1fa8c>&#34;Person&#34;</span>,\n\t<span style=color:#ff79c6>&#34;preferredUsername&#34;</span>: <span style=color:#f1fa8c>&#34;alice&#34;</span>,\n\t<span style=color:#ff79c6>&#34;inbox&#34;</span>: <span style=color:#f1fa8c>&#34;https://my-example.com/inbox&#34;</span>,\n\n\t<span style=color:#ff79c6>&#34;publicKey&#34;</span>: {\n\t\t<span style=color:#ff79c6>&#34;id&#34;</span>: <span style=color:#f1fa8c>&#34;https://my-example.com/actor#main-key&#34;</span>,\n\t\t<span style=color:#ff79c6>&#34;owner&#34;</span>: <span style=color:#f1fa8c>&#34;https://my-example.com/actor&#34;</span>,\n\t\t<span style=color:#ff79c6>&#34;publicKeyPem&#34;</span>: <span style=color:#f1fa8c>&#34;-----BEGIN PUBLIC KEY-----...-----END PUBLIC KEY-----&#34;</span>\n\t}\n}\n</code></pre></div><p>The <code>id</code> must be the URL of the document (it’s a self-reference), and all URLs should be using HTTPS. You need to include an <code>inbox</code> even if you don’t plan on receiving messages in response, because for legacy purposes Mastodon doesn’t acknowledge inbox-less actors as compatible.</p><p>The most complicated part of this document is the <code>publicKey</code> as it involves cryptography. The <code>id</code> will in this case refer to the actor itself, with a fragment (the part after <code>#</code>) to identify it&ndash;this is because we are not going to host the key in a separate document (although we could). The <code>owner</code> must be the actor’s <code>id</code>. Now to the hard part: You’ll need to generate an RSA keypair.</p><p>You can do this using OpenSSL:</p><pre><code>openssl genrsa -out private.pem 2048\nopenssl rsa -in private.pem -outform PEM -pubout -out public.pem\n</code></pre><p>The contents of the <code>public.pem</code> file is what you would put into the <code>publicKeyPem</code> property. However, JSON does not support verbatim line-breaks in strings, so you would first need to replace line-breaks with <code>\\n</code> instead.</p><h3 id=webfinger>Webfinger</h3><p>What is Webfinger? It is what allows us to ask a website, &ldquo;Do you have a user with this username?&rdquo; and receive resource links in response. Implementing this in our case is really simple, since we’re not messing with any databases and can hardcode what we want.</p><p>The Webfinger endpoint is always under <code>/.well-known/webfinger</code>, and it receives queries such as <code>/.well-known/webfinger?resource=acct:bob@my-example.com</code>. Well, in our case we can cheat, and just make it a static file:</p><div class=highlight><pre style=color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4><code class=language-json data-lang=json>{\n\t<span style=color:#ff79c6>&#34;subject&#34;</span>: <span style=color:#f1fa8c>&#34;acct:alice@my-example.com&#34;</span>,\n\n\t<span style=color:#ff79c6>&#34;links&#34;</span>: [\n\t\t{\n\t\t\t<span style=color:#ff79c6>&#34;rel&#34;</span>: <span style=color:#f1fa8c>&#34;self&#34;</span>,\n\t\t\t<span style=color:#ff79c6>&#34;type&#34;</span>: <span style=color:#f1fa8c>&#34;application/activity+json&#34;</span>,\n\t\t\t<span style=color:#ff79c6>&#34;href&#34;</span>: <span style=color:#f1fa8c>&#34;https://my-example.com/actor&#34;</span>\n\t\t}\n\t]\n}\n</code></pre></div><p>The <code>subject</code> property here consists of the username (same as <code>preferredUsername</code> earlier) and the domain you’re hosting on. This is how your actor will be stored on other Mastodon servers and how people will be able to mention it in toots. Only one link is required in the Webfinger response, and it’s the link to the actor document.</p><p>After this is uploaded to your webhost and available under your domain with a valid SSL certificate, you could already look up your actor from another Mastodon by entering <code>alice@my-example.com</code> into the search bar. Although it’ll look quite barren.</p><h3 id=the-message>The message</h3><p>ActivityPub messages practically consist of two parts, the message itself (the object) and a wrapper that communicates what’s happening with the message (the activity). In our case, it’s going to be a <code>Create</code> activity. Let’s say &ldquo;Hello world&rdquo; in response to my toot about writing this blog post:</p><iframe src=https://mastodon.social/@Gargron/100254678717223630/embed class=mastodon-embed style=max-width:100%;border:0 width=400></iframe>\n<script src=https://mastodon.social/embed.js async></script><p>Here is how the document could look:</p><div class=highlight><pre style=color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4><code class=language-json data-lang=json>{\n\t<span style=color:#ff79c6>&#34;@context&#34;</span>: <span style=color:#f1fa8c>&#34;https://www.w3.org/ns/activitystreams&#34;</span>,\n\n\t<span style=color:#ff79c6>&#34;id&#34;</span>: <span style=color:#f1fa8c>&#34;https://my-example.com/create-hello-world&#34;</span>,\n\t<span style=color:#ff79c6>&#34;type&#34;</span>: <span style=color:#f1fa8c>&#34;Create&#34;</span>,\n\t<span style=color:#ff79c6>&#34;actor&#34;</span>: <span style=color:#f1fa8c>&#34;https://my-example.com/actor&#34;</span>,\n\n\t<span style=color:#ff79c6>&#34;object&#34;</span>: {\n\t\t<span style=color:#ff79c6>&#34;id&#34;</span>: <span style=color:#f1fa8c>&#34;https://my-example.com/hello-world&#34;</span>,\n\t\t<span style=color:#ff79c6>&#34;type&#34;</span>: <span style=color:#f1fa8c>&#34;Note&#34;</span>,\n\t\t<span style=color:#ff79c6>&#34;published&#34;</span>: <span style=color:#f1fa8c>&#34;2018-06-23T17:17:11Z&#34;</span>,\n\t\t<span style=color:#ff79c6>&#34;attributedTo&#34;</span>: <span style=color:#f1fa8c>&#34;https://my-example.com/actor&#34;</span>,\n\t\t<span style=color:#ff79c6>&#34;inReplyTo&#34;</span>: <span style=color:#f1fa8c>&#34;https://mastodon.social/@Gargron/100254678717223630&#34;</span>,\n\t\t<span style=color:#ff79c6>&#34;content&#34;</span>: <span style=color:#f1fa8c>&#34;&lt;p&gt;Hello world&lt;/p&gt;&#34;</span>,\n\t\t<span style=color:#ff79c6>&#34;to&#34;</span>: <span style=color:#f1fa8c>&#34;https://www.w3.org/ns/activitystreams#Public&#34;</span>\n\t}\n}\n</code></pre></div><p>With the <code>inReplyTo</code> property we’re chaining our message to a parent. The <code>content</code> property may contain HTML, although of course it will be sanitized by the receiving servers according to their needs — different implementations may find use for a different set of markup. Mastodon will only keep <code>p</code>, <code>br</code>, <code>a</code> and <code>span</code> tags. With the <code>to</code> property we are defining who should be able to view our message, in this case it’s a special value to mean &ldquo;everyone&rdquo;.</p><p>For our purposes, we don’t actually need to host this document publicly, although ideally both the activity and the object would be separately available under their respective <code>id</code>. Let’s just save it under <code>create-hello-world.json</code> because we’ll need it later.</p><p>So the next question is, how do we send this document over, where do we send it, and how will Mastodon be able to trust it?</p><h3 id=http-signatures>HTTP signatures</h3><p>To deliver our message, we will use POST it to the inbox of the person we are replying to (in this case, me). That inbox is <code>https://mastodon.social/inbox</code>. But a simple POST will not do, for how would anyone know it comes from the real @alice@my-example.com and not literally anyone else? For that purpose, we need a HTTP signature. It’s a HTTP header signed by the RSA keypair that we generated earlier, and that’s associated with our actor.</p><p>HTTP signatures is one of those things that are much easier to do with actual code instead of manually. The signature looks like this:</p><pre><code>Signature: keyId=&quot;https://my-example.com/actor#main-key&quot;,headers=&quot;(request-target) host date&quot;,signature=&quot;...&quot;\n</code></pre><p>The <code>keyId</code> refers to public key of our actor, the <code>header</code> lists the headers that are used for building the signature, and then finally, the <code>signature</code> string itself. The order of the headers must be the same in plain-text and within the to-be-signed string, and header names are always lowercase. The <code>(request-target)</code> is a special, fake header that pins down the HTTP method and the path of the destination.</p><p>The to-be-signed string would look something like this:</p><pre><code>(request-target): post /inbox\nhost: mastodon.social\ndate: Sun, 06 Nov 1994 08:49:37 GMT\n</code></pre><p>Mind that there is only a ±30 seconds time window when that signature would be considered valid, which is a big reason why it’s quite difficult to do manually. Anyway, assuming we’ve got the valid date in there, we now need to build a signed string out of it. Let’s put it all together:</p><div class=highlight><pre style=color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4><code class=language-ruby data-lang=ruby><span style=color:#8be9fd;font-style:italic>require</span> <span style=color:#f1fa8c>&#39;http&#39;</span>\n<span style=color:#8be9fd;font-style:italic>require</span> <span style=color:#f1fa8c>&#39;openssl&#39;</span>\n\ndocument      <span style=color:#ff79c6>=</span> File<span style=color:#ff79c6>.</span>read(<span style=color:#f1fa8c>&#39;create-hello-world.json&#39;</span>)\ndate          <span style=color:#ff79c6>=</span> Time<span style=color:#ff79c6>.</span>now<span style=color:#ff79c6>.</span>utc<span style=color:#ff79c6>.</span>httpdate\nkeypair       <span style=color:#ff79c6>=</span> OpenSSL<span style=color:#ff79c6>::</span>PKey<span style=color:#ff79c6>::</span>RSA<span style=color:#ff79c6>.</span>new(File<span style=color:#ff79c6>.</span>read(<span style=color:#f1fa8c>&#39;private.pem&#39;</span>))\nsigned_string <span style=color:#ff79c6>=</span> <span style=color:#f1fa8c>&#34;(request-target): post /inbox</span><span style=color:#f1fa8c>\\n</span><span style=color:#f1fa8c>host: mastodon.social</span><span style=color:#f1fa8c>\\n</span><span style=color:#f1fa8c>date: </span><span style=color:#f1fa8c>#{</span>date<span style=color:#f1fa8c>}</span><span style=color:#f1fa8c>&#34;</span>\nsignature     <span style=color:#ff79c6>=</span> Base64<span style=color:#ff79c6>.</span>strict_encode64(keypair<span style=color:#ff79c6>.</span>sign(OpenSSL<span style=color:#ff79c6>::</span>Digest<span style=color:#ff79c6>::</span>SHA256<span style=color:#ff79c6>.</span>new, signed_string))\nheader        <span style=color:#ff79c6>=</span> <span style=color:#f1fa8c>&#39;keyId=&#34;https://my-example.com/actor&#34;,headers=&#34;(request-target) host date&#34;,signature=&#34;&#39;</span> <span style=color:#ff79c6>+</span> signature <span style=color:#ff79c6>+</span> <span style=color:#f1fa8c>&#39;&#34;&#39;</span>\n\nHTTP<span style=color:#ff79c6>.</span>headers({ <span style=color:#f1fa8c>&#39;Host&#39;</span>: <span style=color:#f1fa8c>&#39;mastodon.social&#39;</span>, <span style=color:#f1fa8c>&#39;Date&#39;</span>: date, <span style=color:#f1fa8c>&#39;Signature&#39;</span>: header })\n    <span style=color:#ff79c6>.</span>post(<span style=color:#f1fa8c>&#39;https://mastodon.social/inbox&#39;</span>, <span style=color:#f1fa8c>body</span>: document)\n</code></pre></div><p>Let’s save it as <code>deliver.rb</code>. I am using the HTTP.rb gem here, so you’ll need to have that installed (<code>gem install http</code>). Finally, run the file with <code>ruby deliver.rb</code>, and your message should appear as a reply on my toot!</p><h3 id=conclusion>Conclusion</h3><p>We have covered how to create a discoverable ActivityPub actor and how to send replies to other people. But there is a lot we haven’t covered: How to follow and be followed (it requires a working inbox), how to have a prettier profile, how to support document forwarding with LD-Signatures, and more. If there is demand, I will write more in-depth tutorials!</p><p>Read more on:</p><ul><li><a href=https://www.w3.org/TR/activitypub/>ActivityPub</a></li><li><a href=https://tools.ietf.org/html/rfc7033>Webfinger</a></li><li><a href=https://tools.ietf.org/html/draft-cavage-http-signatures-10>HTTP Signatures</a></li></ul><p style=color:#687590>—<span class=\"p-author h-card\">\nEugen Rochko\n</span>,\n<time class=dt-published datetime=2018-06-23T00:00:00Z>Jun 23, 2018</time></p></main><footer class=article-footer><nav class=entry-nav><div class=\"prev-entry sep-before\"><a href=/2018/06/if-you-could-edit-tweets/><strong><i class=\"fas fa-chevron-left\"></i>&nbsp;Previous</strong>\nIf you could edit tweets</a></div><div class=\"next-entry sep-before\"><a href=/2018/06/how-to-become-a-successful-artist-on-mastodon/><strong>Next&nbsp;<i class=\"fas fa-chevron-right\"></i></strong>\nHow to become a successful artist on Mastodon</a></div></nav></footer></div></div><div class=container><div class=cta-banner><h4>Join the social media revolution</h4><p>Mastodon is a free, decentralized platform with over a million people</p><a href=https://joinmastodon.org/communities>Join Mastodon now!</a></div></div><div class=\"related-articles container\"><ul class=thumbnail-grid><li><a class=\"cover u-url\" href=/2017/09/mastodon-and-the-w3c/ rel=bookmark><div class=overlay><h2 class=p-name>Mastodon and the W3C</h2></div></a><div class=article-information><div class=\"author p-author h-card\"><strong>Eugen Rochko\n<span>&nbsp;</span>\n<a href=https://mastodon.social/@Gargron><i class=\"fab fa-mastodon\"></i></a></strong></div><time class=dt-published datetime=2017-09-10T00:00:00Z>Sep 10, 2017</time><div class=\"summary p-summary\">Mastodon is a free, open-source federated social network spanning over 800,000 users spread across more than 2,000 servers.\nMastodon v1.6 is here, and it is the first Mastodon release which fully implements the ActivityPub protocol. ActivityPub is a new federated messaging protocol developed by the World Wide Web Consortium (W3C) which aims to fix the shortcomings of past standards like OStatus.\nMastodon is one of the first platforms, and certainly the first major platform to implement this new standard and prove it in the wild.</div></div></li><li><a class=\"cover u-url\" href=/2018/06/if-you-could-edit-tweets/ rel=bookmark><div class=overlay><h2 class=p-name>If you could edit tweets</h2></div></a><div class=article-information><div class=\"author p-author h-card\"><strong>Eugen Rochko\n<span>&nbsp;</span>\n<a href=https://mastodon.social/@Gargron><i class=\"fab fa-mastodon\"></i></a></strong></div><time class=dt-published datetime=2018-06-19T00:00:00Z>Jun 19, 2018</time><div class=\"summary p-summary\">A fresh new release of the federated social network software is here, and while the primary focus of it has been on fixing bugs and improving performance, it brings a couple of notable new features to the board.\nDelete & Redraft There are legitimate reasons why social media platforms rarely, if ever, have an editing function. In an environment where content spreads like wildfire in a matter of minutes, you could easily conceive of nefarious misuses such as creating a post about something agreeable and positive, and, once it reaches critical mass, changing the content to something malicious.</div></div></li></ul></div><footer class=\"footer container\"><div style=display:flex;justify-content:space-between><p class=legal style=\"flex:0 0 auto\"><a href=https://github.com/mastodon/blog/blob/master/content/posts/2018-06-23_How-to-implement-a-basic-activitypub-server.md>View source</a> · <a href=https://creativecommons.org/licenses/by-sa/4.0/>CC BY-SA 4.0</a> · <a href=https://joinmastodon.org/imprint>Imprint</a></p><p class=legal style=\"flex:0 0 auto;text-align:right\"><a href=https://joinmastodon.org>Join Mastodon</a> · <a href=https://mastodon.social/@Mastodon target=_blank><i class=\"fab fa-mastodon\"></i></a>· <a href=/index.xml target=_blank><i class=\"fa fa-rss\"></i></a>· <a href=https://twitter.com/joinmastodon rel=nofollow target=_blank><i class=\"fab fa-twitter\"></i></a></p></div></footer></body></html>","oembed":false,"readabilityObject":{"title":"How to implement a basic ActivityPub server","content":"<div id=\"readability-page-1\" class=\"page\"><div><p>Today we’ll be looking at how to connect the protocols powering Mastodon in the simplest way possible to enter the federated network. We will use static files, standard command-line tools, and some simple Ruby scripting, although the functionality should be easily adaptable to other programming languages.</p><p>First, what’s the end goal of this exercise? We want to send a Mastodon user a message from our own, non-Mastodon server.</p><p>So what are the ingredients required? The message itself will be formatted with ActivityPub, and it must be attributed to an ActivityPub actor. The actor must be discoverable via Webfinger, and the delivery itself must be cryptographically signed by the actor.</p><h3 id=\"the-actor\">The actor</h3><p>The actor is a publicly accessible JSON-LD document answering the question “who”. JSON-LD itself is a quite complicated beast, but luckily for our purposes we can treat it as simple JSON with a <code>@context</code> attribute. Here is what an actor document could look like:</p><div><pre><code data-lang=\"json\">{\n\t<span>\"@context\"</span>: [\n\t\t<span>\"https://www.w3.org/ns/activitystreams\"</span>,\n\t\t<span>\"https://w3id.org/security/v1\"</span>\n\t],\n\n\t<span>\"id\"</span>: <span>\"https://my-example.com/actor\"</span>,\n\t<span>\"type\"</span>: <span>\"Person\"</span>,\n\t<span>\"preferredUsername\"</span>: <span>\"alice\"</span>,\n\t<span>\"inbox\"</span>: <span>\"https://my-example.com/inbox\"</span>,\n\n\t<span>\"publicKey\"</span>: {\n\t\t<span>\"id\"</span>: <span>\"https://my-example.com/actor#main-key\"</span>,\n\t\t<span>\"owner\"</span>: <span>\"https://my-example.com/actor\"</span>,\n\t\t<span>\"publicKeyPem\"</span>: <span>\"-----BEGIN PUBLIC KEY-----...-----END PUBLIC KEY-----\"</span>\n\t}\n}\n</code></pre></div><p>The <code>id</code> must be the URL of the document (it’s a self-reference), and all URLs should be using HTTPS. You need to include an <code>inbox</code> even if you don’t plan on receiving messages in response, because for legacy purposes Mastodon doesn’t acknowledge inbox-less actors as compatible.</p><p>The most complicated part of this document is the <code>publicKey</code> as it involves cryptography. The <code>id</code> will in this case refer to the actor itself, with a fragment (the part after <code>#</code>) to identify it–this is because we are not going to host the key in a separate document (although we could). The <code>owner</code> must be the actor’s <code>id</code>. Now to the hard part: You’ll need to generate an RSA keypair.</p><p>You can do this using OpenSSL:</p><pre><code>openssl genrsa -out private.pem 2048\nopenssl rsa -in private.pem -outform PEM -pubout -out public.pem\n</code></pre><p>The contents of the <code>public.pem</code> file is what you would put into the <code>publicKeyPem</code> property. However, JSON does not support verbatim line-breaks in strings, so you would first need to replace line-breaks with <code>\\n</code> instead.</p><h3 id=\"webfinger\">Webfinger</h3><p>What is Webfinger? It is what allows us to ask a website, “Do you have a user with this username?” and receive resource links in response. Implementing this in our case is really simple, since we’re not messing with any databases and can hardcode what we want.</p><p>The Webfinger endpoint is always under <code>/.well-known/webfinger</code>, and it receives queries such as <code>/.well-known/webfinger?resource=acct:bob@my-example.com</code>. Well, in our case we can cheat, and just make it a static file:</p><div><pre><code data-lang=\"json\">{\n\t<span>\"subject\"</span>: <span>\"acct:alice@my-example.com\"</span>,\n\n\t<span>\"links\"</span>: [\n\t\t{\n\t\t\t<span>\"rel\"</span>: <span>\"self\"</span>,\n\t\t\t<span>\"type\"</span>: <span>\"application/activity+json\"</span>,\n\t\t\t<span>\"href\"</span>: <span>\"https://my-example.com/actor\"</span>\n\t\t}\n\t]\n}\n</code></pre></div><p>The <code>subject</code> property here consists of the username (same as <code>preferredUsername</code> earlier) and the domain you’re hosting on. This is how your actor will be stored on other Mastodon servers and how people will be able to mention it in toots. Only one link is required in the Webfinger response, and it’s the link to the actor document.</p><p>After this is uploaded to your webhost and available under your domain with a valid SSL certificate, you could already look up your actor from another Mastodon by entering <code>alice@my-example.com</code> into the search bar. Although it’ll look quite barren.</p><h3 id=\"the-message\">The message</h3><p>ActivityPub messages practically consist of two parts, the message itself (the object) and a wrapper that communicates what’s happening with the message (the activity). In our case, it’s going to be a <code>Create</code> activity. Let’s say “Hello world” in response to my toot about writing this blog post:</p>\n<p>Here is how the document could look:</p><div><pre><code data-lang=\"json\">{\n\t<span>\"@context\"</span>: <span>\"https://www.w3.org/ns/activitystreams\"</span>,\n\n\t<span>\"id\"</span>: <span>\"https://my-example.com/create-hello-world\"</span>,\n\t<span>\"type\"</span>: <span>\"Create\"</span>,\n\t<span>\"actor\"</span>: <span>\"https://my-example.com/actor\"</span>,\n\n\t<span>\"object\"</span>: {\n\t\t<span>\"id\"</span>: <span>\"https://my-example.com/hello-world\"</span>,\n\t\t<span>\"type\"</span>: <span>\"Note\"</span>,\n\t\t<span>\"published\"</span>: <span>\"2018-06-23T17:17:11Z\"</span>,\n\t\t<span>\"attributedTo\"</span>: <span>\"https://my-example.com/actor\"</span>,\n\t\t<span>\"inReplyTo\"</span>: <span>\"https://mastodon.social/@Gargron/100254678717223630\"</span>,\n\t\t<span>\"content\"</span>: <span>\"&lt;p&gt;Hello world&lt;/p&gt;\"</span>,\n\t\t<span>\"to\"</span>: <span>\"https://www.w3.org/ns/activitystreams#Public\"</span>\n\t}\n}\n</code></pre></div><p>With the <code>inReplyTo</code> property we’re chaining our message to a parent. The <code>content</code> property may contain HTML, although of course it will be sanitized by the receiving servers according to their needs — different implementations may find use for a different set of markup. Mastodon will only keep <code>p</code>, <code>br</code>, <code>a</code> and <code>span</code> tags. With the <code>to</code> property we are defining who should be able to view our message, in this case it’s a special value to mean “everyone”.</p><p>For our purposes, we don’t actually need to host this document publicly, although ideally both the activity and the object would be separately available under their respective <code>id</code>. Let’s just save it under <code>create-hello-world.json</code> because we’ll need it later.</p><p>So the next question is, how do we send this document over, where do we send it, and how will Mastodon be able to trust it?</p><h3 id=\"http-signatures\">HTTP signatures</h3><p>To deliver our message, we will use POST it to the inbox of the person we are replying to (in this case, me). That inbox is <code>https://mastodon.social/inbox</code>. But a simple POST will not do, for how would anyone know it comes from the real @alice@my-example.com and not literally anyone else? For that purpose, we need a HTTP signature. It’s a HTTP header signed by the RSA keypair that we generated earlier, and that’s associated with our actor.</p><p>HTTP signatures is one of those things that are much easier to do with actual code instead of manually. The signature looks like this:</p><pre><code>Signature: keyId=\"https://my-example.com/actor#main-key\",headers=\"(request-target) host date\",signature=\"...\"\n</code></pre><p>The <code>keyId</code> refers to public key of our actor, the <code>header</code> lists the headers that are used for building the signature, and then finally, the <code>signature</code> string itself. The order of the headers must be the same in plain-text and within the to-be-signed string, and header names are always lowercase. The <code>(request-target)</code> is a special, fake header that pins down the HTTP method and the path of the destination.</p><p>The to-be-signed string would look something like this:</p><pre><code>(request-target): post /inbox\nhost: mastodon.social\ndate: Sun, 06 Nov 1994 08:49:37 GMT\n</code></pre><p>Mind that there is only a ±30 seconds time window when that signature would be considered valid, which is a big reason why it’s quite difficult to do manually. Anyway, assuming we’ve got the valid date in there, we now need to build a signed string out of it. Let’s put it all together:</p><div><pre><code data-lang=\"ruby\"><span>require</span> <span>'http'</span>\n<span>require</span> <span>'openssl'</span>\n\ndocument      <span>=</span> File<span>.</span>read(<span>'create-hello-world.json'</span>)\ndate          <span>=</span> Time<span>.</span>now<span>.</span>utc<span>.</span>httpdate\nkeypair       <span>=</span> OpenSSL<span>::</span>PKey<span>::</span>RSA<span>.</span>new(File<span>.</span>read(<span>'private.pem'</span>))\nsigned_string <span>=</span> <span>\"(request-target): post /inbox</span><span>\\n</span><span>host: mastodon.social</span><span>\\n</span><span>date: </span><span>#{</span>date<span>}</span><span>\"</span>\nsignature     <span>=</span> Base64<span>.</span>strict_encode64(keypair<span>.</span>sign(OpenSSL<span>::</span>Digest<span>::</span>SHA256<span>.</span>new, signed_string))\nheader        <span>=</span> <span>'keyId=\"https://my-example.com/actor\",headers=\"(request-target) host date\",signature=\"'</span> <span>+</span> signature <span>+</span> <span>'\"'</span>\n\nHTTP<span>.</span>headers({ <span>'Host'</span>: <span>'mastodon.social'</span>, <span>'Date'</span>: date, <span>'Signature'</span>: header })\n    <span>.</span>post(<span>'https://mastodon.social/inbox'</span>, <span>body</span>: document)\n</code></pre></div><p>Let’s save it as <code>deliver.rb</code>. I am using the HTTP.rb gem here, so you’ll need to have that installed (<code>gem install http</code>). Finally, run the file with <code>ruby deliver.rb</code>, and your message should appear as a reply on my toot!</p><h3 id=\"conclusion\">Conclusion</h3><p>We have covered how to create a discoverable ActivityPub actor and how to send replies to other people. But there is a lot we haven’t covered: How to follow and be followed (it requires a working inbox), how to have a prettier profile, how to support document forwarding with LD-Signatures, and more. If there is demand, I will write more in-depth tutorials!</p><p>Read more on:</p><ul><li><a href=\"https://www.w3.org/TR/activitypub/\">ActivityPub</a></li><li><a href=\"https://tools.ietf.org/html/rfc7033\">Webfinger</a></li><li><a href=\"https://tools.ietf.org/html/draft-cavage-http-signatures-10\">HTTP Signatures</a></li></ul><p>—,\n<time datetime=\"2018-06-23T00:00:00Z\">Jun 23, 2018</time></p></div></div>","textContent":"Today we’ll be looking at how to connect the protocols powering Mastodon in the simplest way possible to enter the federated network. We will use static files, standard command-line tools, and some simple Ruby scripting, although the functionality should be easily adaptable to other programming languages.First, what’s the end goal of this exercise? We want to send a Mastodon user a message from our own, non-Mastodon server.So what are the ingredients required? The message itself will be formatted with ActivityPub, and it must be attributed to an ActivityPub actor. The actor must be discoverable via Webfinger, and the delivery itself must be cryptographically signed by the actor.The actorThe actor is a publicly accessible JSON-LD document answering the question “who”. JSON-LD itself is a quite complicated beast, but luckily for our purposes we can treat it as simple JSON with a @context attribute. Here is what an actor document could look like:{\n\t\"@context\": [\n\t\t\"https://www.w3.org/ns/activitystreams\",\n\t\t\"https://w3id.org/security/v1\"\n\t],\n\n\t\"id\": \"https://my-example.com/actor\",\n\t\"type\": \"Person\",\n\t\"preferredUsername\": \"alice\",\n\t\"inbox\": \"https://my-example.com/inbox\",\n\n\t\"publicKey\": {\n\t\t\"id\": \"https://my-example.com/actor#main-key\",\n\t\t\"owner\": \"https://my-example.com/actor\",\n\t\t\"publicKeyPem\": \"-----BEGIN PUBLIC KEY-----...-----END PUBLIC KEY-----\"\n\t}\n}\nThe id must be the URL of the document (it’s a self-reference), and all URLs should be using HTTPS. You need to include an inbox even if you don’t plan on receiving messages in response, because for legacy purposes Mastodon doesn’t acknowledge inbox-less actors as compatible.The most complicated part of this document is the publicKey as it involves cryptography. The id will in this case refer to the actor itself, with a fragment (the part after #) to identify it–this is because we are not going to host the key in a separate document (although we could). The owner must be the actor’s id. Now to the hard part: You’ll need to generate an RSA keypair.You can do this using OpenSSL:openssl genrsa -out private.pem 2048\nopenssl rsa -in private.pem -outform PEM -pubout -out public.pem\nThe contents of the public.pem file is what you would put into the publicKeyPem property. However, JSON does not support verbatim line-breaks in strings, so you would first need to replace line-breaks with \\n instead.WebfingerWhat is Webfinger? It is what allows us to ask a website, “Do you have a user with this username?” and receive resource links in response. Implementing this in our case is really simple, since we’re not messing with any databases and can hardcode what we want.The Webfinger endpoint is always under /.well-known/webfinger, and it receives queries such as /.well-known/webfinger?resource=acct:bob@my-example.com. Well, in our case we can cheat, and just make it a static file:{\n\t\"subject\": \"acct:alice@my-example.com\",\n\n\t\"links\": [\n\t\t{\n\t\t\t\"rel\": \"self\",\n\t\t\t\"type\": \"application/activity+json\",\n\t\t\t\"href\": \"https://my-example.com/actor\"\n\t\t}\n\t]\n}\nThe subject property here consists of the username (same as preferredUsername earlier) and the domain you’re hosting on. This is how your actor will be stored on other Mastodon servers and how people will be able to mention it in toots. Only one link is required in the Webfinger response, and it’s the link to the actor document.After this is uploaded to your webhost and available under your domain with a valid SSL certificate, you could already look up your actor from another Mastodon by entering alice@my-example.com into the search bar. Although it’ll look quite barren.The messageActivityPub messages practically consist of two parts, the message itself (the object) and a wrapper that communicates what’s happening with the message (the activity). In our case, it’s going to be a Create activity. Let’s say “Hello world” in response to my toot about writing this blog post:\nHere is how the document could look:{\n\t\"@context\": \"https://www.w3.org/ns/activitystreams\",\n\n\t\"id\": \"https://my-example.com/create-hello-world\",\n\t\"type\": \"Create\",\n\t\"actor\": \"https://my-example.com/actor\",\n\n\t\"object\": {\n\t\t\"id\": \"https://my-example.com/hello-world\",\n\t\t\"type\": \"Note\",\n\t\t\"published\": \"2018-06-23T17:17:11Z\",\n\t\t\"attributedTo\": \"https://my-example.com/actor\",\n\t\t\"inReplyTo\": \"https://mastodon.social/@Gargron/100254678717223630\",\n\t\t\"content\": \"<p>Hello world</p>\",\n\t\t\"to\": \"https://www.w3.org/ns/activitystreams#Public\"\n\t}\n}\nWith the inReplyTo property we’re chaining our message to a parent. The content property may contain HTML, although of course it will be sanitized by the receiving servers according to their needs — different implementations may find use for a different set of markup. Mastodon will only keep p, br, a and span tags. With the to property we are defining who should be able to view our message, in this case it’s a special value to mean “everyone”.For our purposes, we don’t actually need to host this document publicly, although ideally both the activity and the object would be separately available under their respective id. Let’s just save it under create-hello-world.json because we’ll need it later.So the next question is, how do we send this document over, where do we send it, and how will Mastodon be able to trust it?HTTP signaturesTo deliver our message, we will use POST it to the inbox of the person we are replying to (in this case, me). That inbox is https://mastodon.social/inbox. But a simple POST will not do, for how would anyone know it comes from the real @alice@my-example.com and not literally anyone else? For that purpose, we need a HTTP signature. It’s a HTTP header signed by the RSA keypair that we generated earlier, and that’s associated with our actor.HTTP signatures is one of those things that are much easier to do with actual code instead of manually. The signature looks like this:Signature: keyId=\"https://my-example.com/actor#main-key\",headers=\"(request-target) host date\",signature=\"...\"\nThe keyId refers to public key of our actor, the header lists the headers that are used for building the signature, and then finally, the signature string itself. The order of the headers must be the same in plain-text and within the to-be-signed string, and header names are always lowercase. The (request-target) is a special, fake header that pins down the HTTP method and the path of the destination.The to-be-signed string would look something like this:(request-target): post /inbox\nhost: mastodon.social\ndate: Sun, 06 Nov 1994 08:49:37 GMT\nMind that there is only a ±30 seconds time window when that signature would be considered valid, which is a big reason why it’s quite difficult to do manually. Anyway, assuming we’ve got the valid date in there, we now need to build a signed string out of it. Let’s put it all together:require 'http'\nrequire 'openssl'\n\ndocument      = File.read('create-hello-world.json')\ndate          = Time.now.utc.httpdate\nkeypair       = OpenSSL::PKey::RSA.new(File.read('private.pem'))\nsigned_string = \"(request-target): post /inbox\\nhost: mastodon.social\\ndate: #{date}\"\nsignature     = Base64.strict_encode64(keypair.sign(OpenSSL::Digest::SHA256.new, signed_string))\nheader        = 'keyId=\"https://my-example.com/actor\",headers=\"(request-target) host date\",signature=\"' + signature + '\"'\n\nHTTP.headers({ 'Host': 'mastodon.social', 'Date': date, 'Signature': header })\n    .post('https://mastodon.social/inbox', body: document)\nLet’s save it as deliver.rb. I am using the HTTP.rb gem here, so you’ll need to have that installed (gem install http). Finally, run the file with ruby deliver.rb, and your message should appear as a reply on my toot!ConclusionWe have covered how to create a discoverable ActivityPub actor and how to send replies to other people. But there is a lot we haven’t covered: How to follow and be followed (it requires a working inbox), how to have a prettier profile, how to support document forwarding with LD-Signatures, and more. If there is demand, I will write more in-depth tutorials!Read more on:ActivityPubWebfingerHTTP Signatures—,\nJun 23, 2018","length":8094,"excerpt":"Today we’ll be looking at how to connect the protocols powering Mastodon in the simplest way possible to enter the federated network. We will use static files, standard command-line tools, and some simple Ruby scripting, although the functionality should be easily adaptable to other programming languages.\nFirst, what’s the end goal of this exercise? We want to send a Mastodon user a message from our own, non-Mastodon server.\nSo what are the ingredients required?","byline":"Eugen Rochko","dir":null,"siteName":"Official Mastodon Blog","lang":"en"},"finalizedMeta":{"title":"How to implement a basic ActivityPub server","description":"Today we’ll be looking at how to connect the protocols powering Mastodon in the simplest way possible to enter the federated network. We will use static files, standard command-line tools, and some simple Ruby scripting, although the functionality should be easily adaptable to other programming languages.\nFirst, what’s the end goal of this exercise? We want to send a Mastodon user a message from our own, non-Mastodon server.\nSo what are the ingredients required?","author":false,"creator":"","publisher":false,"date":"2022-11-07T05:26:39.009Z","topics":[]},"jsonLd":{"@type":false,"headline":false,"description":false,"image":[],"mainEntityOfPage":{"@type":false,"@id":false},"datePublished":false,"dateModified":false,"isAccessibleForFree":false,"isPartOf":{"@type":[],"name":false,"productID":false},"discussionUrl":false,"license":false,"author":{"@type":false,"name":false,"description":false,"sameAs":false,"image":{"@type":false,"url":false},"givenName":false,"familyName":false,"alternateName":false,"publishingPrinciples":false},"publisher":{"@type":false,"name":false,"description":false,"sameAs":false,"logo":{"@type":false,"url":false},"publishingPrinciples":false},"editor":{"@type":false,"name":false,"description":false,"sameAs":false,"image":{"@type":false,"url":false},"givenName":false,"familyName":false,"alternateName":false,"publishingPrinciples":false}},"twitterObj":false,"status":200,"metadata":{"author":false,"title":"How to implement a basic ActivityPub server - Official Mastodon Blog","description":false,"canonical":"https://blog.joinmastodon.org/2018/06/how-to-implement-a-basic-activitypub-server/","keywords":[],"image":"/logo-symbol-wordmark.svg","firstParagraph":"Today we’ll be looking at how to connect the protocols powering Mastodon in the simplest way possible to enter the federated network. We will use static files, standard command-line tools, and some simple Ruby scripting, although the functionality should be easily adaptable to other programming languages."},"dublinCore":{},"opengraph":{"title":"How to implement a basic ActivityPub server","description":"Today we’ll be looking at how to connect the protocols powering Mastodon in the simplest way possible to enter the federated network. We will use static files, standard command-line tools, and some simple Ruby scripting, although the functionality should be easily adaptable to other programming languages.\nFirst, what’s the end goal of this exercise? We want to send a Mastodon user a message from our own, non-Mastodon server.\nSo what are the ingredients required?","url":"http://blog.joinmastodon.org/2018/06/how-to-implement-a-basic-activitypub-server/","site_name":"Official Mastodon Blog","locale":false,"type":"article","typeObject":{"published_time":false,"modified_time":false,"author":false,"publisher":false,"section":false,"tag":[]},"image":false},"twitter":{"site":"@joinmastodon","description":false,"card":"summary_large_image","creator":false,"title":false,"image":false},"archivedData":{"link":"https://web.archive.org/web/20221107052642/https://blog.joinmastodon.org/2018/06/how-to-implement-a-basic-activitypub-server/","wayback":"https://web.archive.org/web/20221107052642/https://blog.joinmastodon.org/2018/06/how-to-implement-a-basic-activitypub-server/"}}}