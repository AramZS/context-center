{
	"initialLink": "https://fightwithtools.dev/posts/projects/context-pages/day-2/",
	"sanitizedLink": "https://fightwithtools.dev/posts/projects/context-pages/day-2/",
	"finalLink": "https://fightwithtools.dev/posts/projects/context-pages/day-2/",
	"htmlEmbed": "<script>window.contexterSetup=window.contexterSetup||function(){window.contexterSetupComplete=!0;class ContexterLink extends HTMLAnchorElement{constructor(){super()}connectedCallback(){this.setAttribute(\"target\",\"_blank\")}}customElements.define(\"contexter-link\",ContexterLink,{extends:\"a\"}),customElements.define(\"contexter-inner\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"contexter-box__inner\"}}),customElements.define(\"contexter-thumbnail\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"contexter-box__thumbnail\"}}),customElements.define(\"contexter-byline\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"contexter-box__byline\"}}),customElements.define(\"contexter-keywordset\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"contexter-box__keywordset\"}}),customElements.define(\"contexter-linkset\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"contexter-box__linkset\"}}),customElements.define(\"contexter-meta\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"contexter-box__meta\"}}),customElements.define(\"contexter-summary\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"p-summary entry-summary\"}}),customElements.define(\"contexter-box-head\",class extends HTMLElement{constructor(){super()}connectedCallback(){this.className=\"contexter-box__head\"}}),customElements.define(\"contexter-box-inner\",class extends HTMLElement{constructor(){super()}connectedCallback(){}});class ContexterBox extends HTMLElement{constructor(){super(),this.first=!0,this.shadow=this.attachShadow({mode:\"open\"})}connectedCallback(){if(this.first){this.first=!1;var style=document.createElement(\"style\"),lightDomStyle=(style.innerHTML=`:host {--background: #f5f6f7;--border: darkblue;--blue: #0000ee;--font-color: black;--inner-border: black;font-family: Franklin,Arial,Helvetica,sans-serif;font-size: 14px;background: var(--background);width: 600px;color: var(--font-color);min-height: 90px;display: block;padding: 8px;border: 1px solid var(--border);cursor: pointer;box-sizing: border-box;margin: 6px;contain: content;margin: 6px auto;}// can only select top-level nodes with slotted::slotted(*) {max-width: 100%;display:block;}::slotted([slot=thumbnail]) {max-width: 100%;display:block;}::slotted([slot=header]) {width: 100%;font-size: 1.25rem;font-weight: bold;display:block;margin-bottom: 6px;}::slotted([slot=author]) {max-width: 50%;font-size: 12px;display:inline-block;float: left;}::slotted([slot=time]) {max-width: 50%;font-size: 12px;display:inline-block;float: right;}::slotted([slot=summary]) {width: 100%;margin-top: 6px;padding: 10px 2px;border-top: 1px solid var(--inner-border);font-size: 15px;display:inline-block;margin-bottom: 6px;}contexter-meta {height: auto;margin-bottom: 4px;width: 100%;display: grid;position: relative;min-height: 16px;grid-template-columns: repeat(2, 1fr);}::slotted([slot=keywords]) {width: 80%;padding: 2px 4px;border-top: 1px solid var(--inner-border);font-size: 11px;display: block;float: right;font-style: italic;text-align: right;grid-column: 2/2;grid-row: 1;align-self: end;justify-self: end;}::slotted([slot=keywords]):empty {border-top: 0px solid var(--inner-border);}::slotted([slot=archive-link]) {font-size: 1em;display: inline;}::slotted([slot=archive-link])::after {content: \"|\";display: inline;color: var(--font-color);text-decoration: none;margin: 0 .5em;}::slotted([slot=read-link]) {font-size: 1em;display: inline;}contexter-linkset {width: 80%;padding: 2px 4px;font-size: 13px;float: left;font-weight: bold;grid-row: 1;grid-column: 1/2;align-self: end;justify-self: start;}/* Extra small devices (phones, 600px and down) */@media only screen and (max-width: 600px) {:host {width: 310px;}}/* Small devices (portrait tablets and large phones, 600px and up) */@media only screen and (min-width: 600px) {...}/* Medium devices (landscape tablets, 768px and up) */@media only screen and (min-width: 768px) {...}/* Large devices (laptops/desktops, 992px and up) */@media only screen and (min-width: 992px) {...}/* Extra large devices (large laptops and desktops, 1200px and up) */@media only screen and (min-width: 1200px) {...}@media (prefers-color-scheme: dark){:host {--background: #354150;--border: #1f2b37;--blue: #55b0ff;--font-color: #ffffff;--inner-border: #787a7c;background: var(--background);border: 1px solid var(--border)}}`,document.createElement(\"style\"));lightDomStyle.innerHTML=`contexter-box {contain: content;}contexter-box .read-link {font-weight: bold;}contexter-box a {color: #0000ee;}contexter-box img {width: 100%;border: 0;padding: 0;margin: 0;}/* Extra small devices (phones, 600px and down) */@media only screen and (max-width: 600px) {...}/* Small devices (portrait tablets and large phones, 600px and up) */@media only screen and (min-width: 600px) {...}/* Medium devices (landscape tablets, 768px and up) */@media only screen and (min-width: 768px) {...}/* Large devices (laptops/desktops, 992px and up) */@media only screen and (min-width: 992px) {...}/* Extra large devices (large laptops and desktops, 1200px and up) */@media only screen and (min-width: 1200px) {...}@media (prefers-color-scheme: dark){contexter-box a {color: #55b0ff;}}`,this.appendChild(lightDomStyle),this.shadow.appendChild(style);const innerContainer=document.createElement(\"contexter-box-inner\"),innerSlotThumbnail=(this.shadow.appendChild(innerContainer),document.createElement(\"slot\")),innerSlotHeader=(innerSlotThumbnail.name=\"thumbnail\",innerContainer.appendChild(innerSlotThumbnail),document.createElement(\"slot\")),innerSlotAuthor=(innerSlotHeader.name=\"header\",innerContainer.appendChild(innerSlotHeader),document.createElement(\"slot\")),innerSlotTime=(innerSlotAuthor.name=\"author\",innerContainer.appendChild(innerSlotAuthor),document.createElement(\"slot\")),innerSlotSummary=(innerSlotTime.name=\"time\",innerContainer.appendChild(innerSlotTime),document.createElement(\"slot\")),metaContainer=(innerSlotSummary.name=\"summary\",innerContainer.appendChild(innerSlotSummary),document.createElement(\"contexter-meta\")),innerSlotInfo=(innerContainer.appendChild(metaContainer),document.createElement(\"slot\")),linkContainer=(innerSlotInfo.name=\"keywords\",metaContainer.appendChild(innerSlotInfo),document.createElement(\"contexter-linkset\")),innerSlotArchiveLink=(metaContainer.appendChild(linkContainer),document.createElement(\"slot\")),innerSlotReadLink=(innerSlotArchiveLink.name=\"archive-link\",linkContainer.appendChild(innerSlotArchiveLink),document.createElement(\"slot\"));innerSlotReadLink.name=\"read-link\",linkContainer.appendChild(innerSlotReadLink),this.className=\"contexter-box\",this.onclick=e=>{if(!e.target.className.includes(\"read-link\")&&!e.target.className.includes(\"title-link\")){const mainLinks=this.querySelectorAll(\"a.main-link\");mainLinks[0].click()}}}}}customElements.define(\"contexter-box\",ContexterBox)},window.contexterSetupComplete||window.contexterSetup();</script><contexter-box class=\"link-card h-entry hentry\" itemscope=\"\" itemtype=\"https://schema.org/CreativeWork\"><contexter-thumbnail class=\"thumbnail\" slot=\"thumbnail\"><img src=\"https://fightwithtools.dev/img/close-up-keys.jpg\" alt=\"\" itemprop=\"image\" /></contexter-thumbnail><contexter-box-head slot=\"header\" class=\"p-name entry-title\" itemprop=\"headline\"><contexter-box-head slot=\"header\" class=\"p-name entry-title\" itemprop=\"headline\"><a is=\"contexter-link\" href=\"https://fightwithtools.dev/posts/projects/context-pages/day-2/\" itemprop=\"url\">Day 2: Building a tool to generate context pages</a></contexter-box-head></contexter-box-head><contexter-byline class=\"p-author author\" slot=\"author\"><span class=\"p-name byline\" rel=\"author\" itemprop=\"author\">Aram Zucker-Scharff</span></contexter-byline><time class=\"dt-published published\" slot=\"time\" itemprop=\"datePublished\" datetime=\"2022-01-09T02:59:43.000Z\">0/8/2022</time><contexter-summary class=\"p-summary entry-summary\" itemprop=\"abstract\" slot=\"summary\"><p>I want to share lists of links, but make them readable and archived</p></contexter-summary><contexter-keywordset itemprop=\"keywords\" slot=\"keywords\"><span rel=\"category tag\" class=\"p-category\" itemprop=\"keywords\">posts</span>, <span rel=\"category tag\" class=\"p-category\" itemprop=\"keywords\">projects</span>, <span rel=\"category tag\" class=\"p-category\" itemprop=\"keywords\">11ty</span>, <span rel=\"category tag\" class=\"p-category\" itemprop=\"keywords\">Node</span>, <span rel=\"category tag\" class=\"p-category\" itemprop=\"keywords\">WiP</span>, <span rel=\"category tag\" class=\"p-category\" itemprop=\"keywords\">fetch</span>, <span rel=\"category tag\" class=\"p-category\" itemprop=\"keywords\">Context Pages</span></contexter-keywordset><a href=\"https://web.archive.org/web/20221110012608/https://fightwithtools.dev/posts/projects/context-pages/day-2/\" is=\"contexter-link\" target=\"_blank\" rel=\"timemap\" class=\"read-link archive-link\" itemprop=\"archivedAt\" slot=\"archive-link\">Archived</a><a is=\"contexter-link\" href=\"https://fightwithtools.dev/posts/projects/context-pages/day-2/\" class=\"read-link main-link\" itemprop=\"sameAs\" slot=\"read-link\">Read</a></contexter-box>",
	"linkId": "c8d898a67b6c839468a457fc63bef3ce1133c933",
	"data": {
		"originalLink": "https://fightwithtools.dev/posts/projects/context-pages/day-2/",
		"sanitizedLink": "https://fightwithtools.dev/posts/projects/context-pages/day-2/",
		"canonical": "https://fightwithtools.dev/posts/projects/context-pages/day-2/",
		"htmlText": "<!doctype html>\n    <html lang=\"en-US\" id=\"template-post\" class=\"base\">\n        <head>\n        \n        <script defer data-domain=\"fightwithtools.dev\" src=\"https://plausible.io/js/plausible.js\"></script>\n        <link rel=\"alternate\" type=\"application/rss+xml\" title=\"Fight With Tools: A Dev Blog RSS\" href=\"https://fightwithtools.dev/rss/\" />\n    \t<link rel=\"alternate\" type=\"application/atom+xml\" title=\"Fight With Tools: A Dev Blog Feed\" href=\"https://fightwithtools.dev/feed/\" />\n        <meta charset=\"utf-8\" />\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n        <title>Day 2: Building a tool to generate context pages</title>\n        \n            <!-- Sub Template: post -->\n        \n        \n            <link rel=\"preload\" as=\"font\">\n            <link href=\"https://fightwithtools.dev/assets/prism-okaidia.css\" rel=\"preload\" as=\"style\" />\n            <link href=\"https://fightwithtools.dev/assets/prism-okaidia.css\" rel=\"stylesheet\" />\n            <!-- <link rel=\"stylesheet\" href=\"https://fightwithtools.dev/assets/css/style.css?v=3406338425\" /> -->\n            <link rel=\"stylesheet\" href=\"https://fightwithtools.dev/assets/css/style.css?v=3406338425\" id=\"\"></link>\n\n            \n                <!-- <link rel=\"stylesheet\" href=\"https://fightwithtools.dev/assets/css/template-post.css?v=3406338425\" /> -->\n                <link rel=\"stylesheet\" href=\"https://fightwithtools.dev/assets/css/template-post.css?v=3406338425\" id=\"\"></link>\n\n            \n            <!-- Build Revision: 3406338425 & Sha: f99260cfeb0fbf1b8b597ae00e2fe16d104a73b0 -->\n            <script src=\"https://fightwithtools.dev/assets/js/scale.fix.js\" async></script>\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, user-scalable=no\" />\n            <!--[if lt IE 9]>\n                <script src=\"//html5shiv.googlecode.com/svn/trunk/html5.js\"></script>\n            <![endif]-->\n        \n        \n            <!-- The Author meta propagates the byline in a number of social networks -->\n<meta name=\"author\" content=\"Aram Zucker-Scharff\" />\n\n<meta property=\"og:title\"\n    content=\"Day 2: Building a tool to generate context pages\">\n\n<meta property=\"og:description\"\n    content=\"I want to share lists of links, but make them readable and archived\">\n\n\n<meta property=\"og:url\"\n    content=\"https://fightwithtools.dev/posts/projects/context-pages/day-2/\" />\n\n<meta property=\"og:site_name\" content=\"Fight With Tools: A Dev Blog\" />\n\n<meta property=\"og:locale\" content=\"en_US\" />\n\n<meta name=\"twitter:site\" content=\"@chronotope\" />\n\n<meta name=\"twitter:description\" content=\"I want to share lists of links, but make them readable and archived\" />\n\n<meta name=\"description\" content=\"I want to share lists of links, but make them readable and archived\">\n\n<!-- I prefer the summary_large_image Twitter card for posts. -->\n<meta name=\"twitter:card\" content=\"summary_large_image\" />\n<!-- You, you're the creator. -->\n<meta name=\"twitter:creator\" content=\"@chronotope\" />\n<!-- This property is for the article title, not site title. -->\n<meta name=\"twitter:title\" content=\"Day 2: Building a tool to generate context pages\" />\n\n\n\n<meta property=\"og:image\" content=\"https://fightwithtools.dev/img/close-up-keys.jpg\" />\n<meta name=\"twitter:image\" content=\"https://fightwithtools.dev/img/close-up-keys.jpg\" />\n\n\n\n\n    <!-- Article specific OG data -->\n    <!-- The OG:Type dictates a number of other tags on posts. -->\n    <meta property=\"og:type\" content=\"article\" />\n    <meta property=\"article:published_time\" content=\"Sun, 09 Jan 2022 02:59:43 GMT\" />\n\n    <!-- page.modified isn't a natural Jekyll property, but it can be added. -->\n    \n\n    <!-- Here my author and publisher tags are the same (yay self-publishing) -->\n    <meta property=\"article:author\" content=\"http://facebook.com/aramzs\" />\n    <!-- But if your site has its own page, this is where to put it. -->\n    <meta property=\"article:publisher\" content=\"https://www.facebook.com/aramzs\" />\n\n    \n    <!-- Article section isn't a required property, but it can be good to have -->\n    <meta property=\"article:section\" content=\"Context Pages\" />\n    \n\n    \n        <!-- I use the page.categories property for OG tags. -->\n        \n        <meta property=\"article:tag\" content=\"posts\" />\n        \n        <meta property=\"article:tag\" content=\"projects\" />\n        \n        <meta property=\"article:tag\" content=\"11ty\" />\n        \n        <meta property=\"article:tag\" content=\"Node\" />\n        \n        <meta property=\"article:tag\" content=\"WiP\" />\n        \n        <meta property=\"article:tag\" content=\"fetch\" />\n        \n        <meta name=\"keywords\" content=\"posts, projects, 11ty, Node, WiP, fetch\">\n    \n\n\n\n            <script type=\"application/ld+json\">\n    {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"Blog\",\n        \"url\": \"https://fightwithtools.dev/posts/projects/context-pages/day-2/\",\n        \"headline\": \"Day 2: Building a tool to generate context pages\",\n        \"about\": \"I want to share lists of links, but make them readable and archived\",\n        \"image\": [\n            \"https://fightwithtools.dev/img/close-up-keys.jpg\"\n        ],\n        \"isAccessibleForFree\": \"True\",\n        \"isPartOf\": {\n            \"@type\": [\"CreativeWork\", \"Product\"],\n            \"name\": \"Fight With Tools\",\n            \"productID\": \"fightwithtools.dev\"\n        },\n        \"discussionUrl\": \"https://twitter.com/search?q=to%3AChronotope%20%23dev&src=typed_query&f=top\",\n        \"author\": {\n    \"@type\": \"Person\",\n    \"name\": {\n        \"@type\": \"PronounceableText\",\n        \"inLanguage\": \"en-US\",\n        \"textValue\": \"Aram Zucker-Scharff\",\n        \"speechToTextMarkup\": \"IPA\",\n        \"phoneticText\": \"/ˌæ.ɹəm ˈt͡sʊ.kɚ 'ʃɑɹf/\"\n    },\n    \"description\": \"Aram Zucker-Scharff is Lead Privacy Engineer at The Washington Post, lead dev for PressForward and a consultant. Tech solutions for journo problems.\",\n    \"disambiguatingDescription\": \"A media-focused developer and strategist.\",\n    \"sameAs\": \"http://aramzs.github.io/aramzs/\",\n    \"image\": {\n        \"@type\": \"ImageObject\",\n        \"url\": \"https://raw.githubusercontent.com/AramZS/aramzs.github.io/master/_includes/Aram-Zucker-Scharff-square.jpg\"\n    },\n    \"givenName\": \"Aram\",\n    \"familyName\": \"Zucker-Scharff\",\n    \"alternateName\": \"AramZS\",\n    \"publishingPrinciples\": \"http://aramzs.github.io/about/\"\n}, \n        \"editor\": {\n    \"@type\": \"Person\",\n    \"name\": {\n        \"@type\": \"PronounceableText\",\n        \"inLanguage\": \"en-US\",\n        \"textValue\": \"Aram Zucker-Scharff\",\n        \"speechToTextMarkup\": \"IPA\",\n        \"phoneticText\": \"/ˌæ.ɹəm ˈt͡sʊ.kɚ 'ʃɑɹf/\"\n    },\n    \"description\": \"Aram Zucker-Scharff is Lead Privacy Engineer at The Washington Post, lead dev for PressForward and a consultant. Tech solutions for journo problems.\",\n    \"disambiguatingDescription\": \"A media-focused developer and strategist.\",\n    \"sameAs\": \"http://aramzs.github.io/aramzs/\",\n    \"image\": {\n        \"@type\": \"ImageObject\",\n        \"url\": \"https://raw.githubusercontent.com/AramZS/aramzs.github.io/master/_includes/Aram-Zucker-Scharff-square.jpg\"\n    },\n    \"givenName\": \"Aram\",\n    \"familyName\": \"Zucker-Scharff\",\n    \"alternateName\": \"AramZS\",\n    \"publishingPrinciples\": \"http://aramzs.github.io/about/\"\n},\n        \"inLanguage\": \"en-US\",\n        \"license\": \"http://creativecommons.org/licenses/by-sa/4.0/\",\n        \"additionalType\": \"CreativeWork\",\n        \"alternateName\": \"Fight With Tools Dev\",\n        \"publisher\": {\n            \"@type\": \"Organization\",\n            \"name\": \"Fight With Tools\",\n            \"description\": \"A site discussing how to imagine, build, analyze and use cool code and web tools. Better websites, better stories, better developers. Technology won't save the world, but you can.\",\n            \"sameAs\": \"https://fightwithtools.dev/\",\n            \"logo\": {\n                \"@type\": \"ImageObject\",\n                \"url\": \"https://fightwithtools.dev/img/close-up-keys.jpg\"\n            },\n            \"publishingPrinciples\": \"http://aramzs.github.io/about/\"\n        }\n    }\n</script>\n\n        \n        \n        \n<link rel=\"canonical\" href=\"https://fightwithtools.dev/posts/projects/context-pages/day-2/\" />\n\n        </head>\n        <body itemscope itemtype=\"https://schema.org/Blog\">\n            <div class=\"wrapper\">\n                <header>\n                    \n                        \n                            <div id=\"site-name-subhead\">\n                                <a href=\"https://fightwithtools.dev\">Fight With Tools: A Dev Blog</a>\n                                \n                                    > <a id=\"project-link\" href=\"https://fightwithtools.dev/projects/context-pages\">Context Pages</a>\n                                \n                            </div>\n                        \n                        \n                            <!-- post mode -->\n                            <time>Sun Jan 09 2022</time>\n                            <!-- front matter dates made in format at https://yaml.org/type/timestamp.html -->\n                        \n                        \n                            <!-- projects mode -->\n                        \n                        <h1 class=\"header\">\n                            Day 2: Building a tool to generate context pages\n                        </h1>\n                        \n                        \n                    \n                    \n    <h5 itemprop=\"author\" itemscope itemtype=\"https://schema.org/Person\">\n    <link itemprop=\"sameAs\" href=\"http://aramzs.github.io/aramzs/\" />\n    By <span itemprop=\"name\"><a href=\"http://aramzs.github.io/aramzs/\" target=\"_blank\">Aram Zucker-Scharff</a></span>\n</h5>\n\n                </header>\n                <main>\n                    \n    <section id=\"precontent\">\n        <aside id=\"toc-container\">\n            <div id=\"toc-container__inner\">\n                <h2>Contents</h2>\n                <nav class=\"toc\">\n        <ol><li><a href=\"#project-scope-and-todos\">Project Scope and ToDos</a></li><li><a href=\"#day-2\">Day 2</a></li></ol></nav>\n            </div>\n        </aside>\n        <div id=\"post-description\">I want to share lists of links, but make them readable and archived</div>\n\n        \n    <figure class=\"figure preview-image\">\n        <img src=\"https://fightwithtools.dev/img/close-up-keys.jpg\" alt=\"Close up photo of keyboard keys.\">\n        \n            <figcaption class=\"figcaption\">\n                \n                 | <em>\n                        <a href=\"https://www.flickr.com/photos/40393390@N00/2386752252\" target=\"_blank\">'TYPE' by SarahDeer is licensed with CC BY 2.0</a>\n                    </em> | \n            </figcaption>\n        \n    </figure>\n\n\n    </section>\n\n                    <section id=\"maincontent\" class=\"maincontent\">\n                    \n                        <h2 id=\"project-scope-and-todos\" tabindex=\"-1\">Project Scope and ToDos</h2>\n<ol>\n<li>Take a link and turn it into an oEmbed/Open Graph style share card</li>\n<li>Take a link and archive it in the most reliable way</li>\n<li>When the link is a tweet, display the tweet but also the whole tweet thread.</li>\n<li>When the link is a tweet, archive the tweets, and display them if the live ones are not available.</li>\n<li>Capture any embedded retweets in the thread. Capture their thread if one exists</li>\n<li>Capture any links in the Tweet</li>\n<li>Create the process as an abstract function that returns the data in a savable way</li>\n</ol>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input disabled=\"true\" type=\"checkbox\" class=\"markdown-todo\"></input> Archive links on <a href=\"http://Archive.org\" target=\"_blank\">Archive.org</a> and save the resulting archival links</li>\n<li class=\"task-list-item\"><input disabled=\"true\" type=\"checkbox\" class=\"markdown-todo\"></input> Create link IDs that can be used to cache related content</li>\n<li class=\"task-list-item\"><input disabled=\"true\" type=\"checkbox\" class=\"markdown-todo\"></input> Integrate it into the site to be able to make context pages here.</li>\n</ul>\n<h2 id=\"day-2\" tabindex=\"-1\">Day 2</h2>\n<p>Ok, let's set up the request process. I want to retrieve the page so let's move forward on that as the next step.</p>\n<p>Fetch is increasingly the way to handle HTTP requests in the browser, so it would be a good library to play with. Luckily there is a <a href=\"https://www.npmjs.com/package/node-fetch\" target=\"_blank\">Node Fetch library</a> I can leverage.</p>\n<p>If I want to use fetch v3 it looks like this is how I have to go</p>\n<p class=\"skip-link-graf\">\n<a href=\"#code-skip-day-2-5\" id=\"skip-to-code-skip-day-2-5\" class=\"skip-link\">Skip code block ▼</a></p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><br>\t<span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"node-fetch\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> fetch <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>`</code></pre>\n<p id=\"code-skip-day-2-5\">The other thing I know from working on PressForward is that requests will often get blocked if they look too much like a bot, so it is helpful to purposefully identify yourself as a trusted bot. There's <a href=\"https://user-agents.net/lookup\" target=\"_blank\">a list of UAs that I could search</a>, but I know from experiance that the most successful User Agent is Facebook's, especially when I'm trying to retrieve page metadata. So let's start there.</p>\n<p>I also want to check for errors.</p>\n<p>Let's use the advised pattern on the module page to start with. The logic here is that a response can still be &quot;successful&quot; even if it comes back with an error code. Their pattern should be able to catch that.</p>\n<p>Ok, here's my code now:</p>\n<p class=\"skip-link-graf\">\n<a href=\"#code-skip-day-2-4\" id=\"skip-to-code-skip-day-2-4\" class=\"skip-link\">Skip code block ▼</a></p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><br><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><br>\t<span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"node-fetch\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> fetch <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">const</span> ua <span class=\"token operator\">=</span><br>\t<span class=\"token string\">\"facebookexternalhit/1.1 (+http://www.facebook.com/externalhit_uatext.php)\"</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getRequestHeaders</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><br>\t\tcookie<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token string\">\"Accept-Language\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"en-US,en;q=0.8\"</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token string\">\"User-Agent\"</span><span class=\"token operator\">:</span> ua<span class=\"token punctuation\">,</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">HTTPResponseError</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Error</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><br>\t\t\t<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">HTTP Error Response: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>response<span class=\"token punctuation\">.</span>status<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>response<span class=\"token punctuation\">.</span>statusText<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span><br>\t\t\t<span class=\"token operator\">...</span>args<br>\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>response <span class=\"token operator\">=</span> response<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">checkStatus</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token comment\">// response.status >= 200 &amp;&amp; response.status &lt; 300</span><br>\t\t<span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HTTPResponseError</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchUrl</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><br>\t\t\tmethod<span class=\"token operator\">:</span> <span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span><br>\t\t\theader<span class=\"token operator\">:</span> <span class=\"token function\">getRequestHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fetch Error\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token function\">checkStatus</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p id=\"code-skip-day-2-4\">Let's add this to the module export and see if some basic requests work. Let's make a basic request that we know will respond to the GitHub API. Getting the head of this project's main commit tree should work just fine. Let's request <code>https://api.github.com/repos/AramZS/devblog/git/refs/heads/main</code>.</p>\n<p>Ok, so what does a fetch returned object look like?</p>\n<p class=\"skip-link-graf\">\n<a href=\"#code-skip-day-2-3\" id=\"skip-to-code-skip-day-2-3\" class=\"skip-link\">Skip code block ▼</a></p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span> size<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><br>  type<span class=\"token operator\">:</span> <span class=\"token string\">'default'</span><span class=\"token punctuation\">,</span><br>  url<span class=\"token operator\">:</span> <span class=\"token string\">'https://api.github.com/repos/AramZS/devblog/git/refs/heads/main'</span><span class=\"token punctuation\">,</span><br>  status<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span><br>  ok<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><br>  redirected<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><br>  statusText<span class=\"token operator\">:</span> <span class=\"token string\">'OK'</span><span class=\"token punctuation\">,</span><br>  headers<span class=\"token operator\">:</span><br>   <span class=\"token punctuation\">{</span> get<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token operator\">:</span> get<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     forEach<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token operator\">:</span> forEach<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     values<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token operator\">:</span> values<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     entries<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token operator\">:</span> entries<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     append<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     <span class=\"token keyword\">delete</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     getAll<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     has<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     set<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     sort<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token operator\">:</span> sort<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     keys<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>  clone<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token operator\">:</span> clone<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>  body<span class=\"token operator\">:</span><br>   <span class=\"token punctuation\">{</span> _writeState<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     _readableState<span class=\"token operator\">:</span><br>      <span class=\"token punctuation\">{</span> objectMode<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><br>        highWaterMark<span class=\"token operator\">:</span> <span class=\"token number\">16384</span><span class=\"token punctuation\">,</span><br>        buffer<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Object<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>        length<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><br>        pipes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>        flowing<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><br>        ended<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><br>        endEmitted<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><br>        reading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><br>        constructed<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><br>        sync<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><br>        needReadable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><br>        emittedReadable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><br>        readableListening<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><br>        resumeScheduled<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><br>        errorEmitted<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><br>        emitClose<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><br>        autoDestroy<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><br>        destroyed<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><br>        errored<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><br>        closed<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><br>        closeEmitted<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><br>        defaultEncoding<span class=\"token operator\">:</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">,</span><br>        awaitDrainWriters<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><br>        multiAwaitDrain<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><br>        readingMore<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><br>        dataEmitted<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><br>        decoder<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><br>        encoding<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>     _events<span class=\"token operator\">:</span><br>      <span class=\"token punctuation\">{</span> prefinish<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token operator\">:</span> prefinish<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>        close<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Object<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>        end<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token operator\">:</span> onend<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>        finish<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Object<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>        error<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Object<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>        unpipe<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token operator\">:</span> onunpipe<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>     _eventsCount<span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span><br>     _maxListeners<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span><br>     _writableState<span class=\"token operator\">:</span><br>      <span class=\"token punctuation\">{</span> objectMode<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><br>        highWaterMark<span class=\"token operator\">:</span> <span class=\"token number\">16384</span><span class=\"token punctuation\">,</span><br>        finalCalled<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><br>        needDrain<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><br>        ending<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><br>        ended<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><br>        finished<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><br>        destroyed<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><br>        decodeStrings<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><br>        defaultEncoding<span class=\"token operator\">:</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">,</span><br>        length<span class=\"token operator\">:</span> <span class=\"token number\">61</span><span class=\"token punctuation\">,</span><br>        writing<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><br>        corked<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><br>        sync<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><br>        bufferProcessing<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><br>        onwrite<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token operator\">:</span> bound onwrite<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>        writecb<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token operator\">:</span> nop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>        writelen<span class=\"token operator\">:</span> <span class=\"token number\">61</span><span class=\"token punctuation\">,</span><br>        afterWriteTickInfo<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><br>        buffered<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>        bufferedIndex<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><br>        allBuffers<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><br>        allNoop<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><br>        pendingcb<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><br>        constructed<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><br>        prefinished<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><br>        errorEmitted<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><br>        emitClose<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><br>        autoDestroy<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><br>        errored<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><br>        closed<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><br>        closeEmitted<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><br>        getBuffer<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token operator\">:</span> getBuffer<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>     allowHalfOpen<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><br>     bytesWritten<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><br>     _handle<span class=\"token operator\">:</span><br>      <span class=\"token punctuation\">{</span> onerror<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token operator\">:</span> zlibOnError<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>        buffer<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>Buffer <span class=\"token number\">1</span>f <span class=\"token number\">8</span>b <span class=\"token number\">08</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">03</span> <span class=\"token number\">9</span>d <span class=\"token number\">8</span>e <span class=\"token number\">3</span>f <span class=\"token number\">6</span>b c3 <span class=\"token number\">30</span> <span class=\"token number\">10</span> <span class=\"token number\">47</span> bf <span class=\"token number\">8</span>b e6 <span class=\"token number\">10</span> d9 <span class=\"token number\">8</span>e <span class=\"token number\">89</span> <span class=\"token number\">6</span>b <span class=\"token number\">43</span> <span class=\"token number\">86</span> <span class=\"token number\">40</span> e9 <span class=\"token number\">9</span>f <span class=\"token number\">80</span> <span class=\"token number\">92</span> a1 <span class=\"token number\">34</span> <span class=\"token number\">05</span> <span class=\"token number\">2</span>f e5 <span class=\"token number\">24</span> <span class=\"token number\">9</span>d <span class=\"token number\">2</span>d <span class=\"token number\">15</span> cb <span class=\"token number\">12</span> <span class=\"token number\">96</span> <span class=\"token number\">62</span> a8 <span class=\"token number\">43</span> be <span class=\"token number\">7</span>b <span class=\"token operator\">...</span> <span class=\"token number\">11</span> more bytes<span class=\"token operator\">></span><span class=\"token punctuation\">,</span><br>        cb<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>        availOutBefore<span class=\"token operator\">:</span> <span class=\"token number\">16384</span><span class=\"token punctuation\">,</span><br>        availInBefore<span class=\"token operator\">:</span> <span class=\"token number\">61</span><span class=\"token punctuation\">,</span><br>        inOff<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><br>        flushFlag<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span><br>        write<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token operator\">:</span> write<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>        writeSync<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token operator\">:</span> writeSync<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>        close<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token operator\">:</span> close<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>        init<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token operator\">:</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>        params<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token operator\">:</span> params<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>        reset<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token operator\">:</span> reset<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>        getAsyncId<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token operator\">:</span> getAsyncId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>        asyncReset<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token operator\">:</span> asyncReset<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>        getProviderType<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token operator\">:</span> getProviderType<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>     _outBuffer<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>Buffer <span class=\"token number\">7</span>b <span class=\"token number\">55</span> <span class=\"token number\">55</span> <span class=\"token number\">55</span> <span class=\"token number\">55</span> <span class=\"token number\">55</span> <span class=\"token number\">55</span> <span class=\"token number\">55</span> <span class=\"token number\">55</span> <span class=\"token number\">55</span> <span class=\"token number\">55</span> <span class=\"token number\">55</span> <span class=\"token number\">55</span> <span class=\"token number\">55</span> <span class=\"token number\">55</span> <span class=\"token number\">55</span> <span class=\"token number\">55</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> c3 <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> e0 bd <span class=\"token number\">80</span> f2 e8 <span class=\"token number\">7</span>f <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">20</span> b8 <span class=\"token number\">80</span> f2 e8 <span class=\"token number\">7</span>f <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token operator\">...</span> <span class=\"token number\">16334</span> more bytes<span class=\"token operator\">></span><span class=\"token punctuation\">,</span><br>     _outOffset<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><br>     _chunkSize<span class=\"token operator\">:</span> <span class=\"token number\">16384</span><span class=\"token punctuation\">,</span><br>     _defaultFlushFlag<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span><br>     _finishFlushFlag<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span><br>     _defaultFullFlushFlag<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span><br>     _info<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span><br>     _maxOutputLength<span class=\"token operator\">:</span> <span class=\"token number\">4294967296</span><span class=\"token punctuation\">,</span><br>     _level<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><br>     _strategy<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><br>     params<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token operator\">:</span> params<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     _closed<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><br>     bytesRead<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><br>     reset<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     _flush<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     _final<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     flush<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     close<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     _destroy<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     _transform<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     _processChunk<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     _write<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     _read<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     write<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     cork<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     uncork<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     setDefaultEncoding<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token operator\">:</span> setDefaultEncoding<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     _writev<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><br>     end<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     destroy<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token operator\">:</span> destroy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     _undestroy<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token operator\">:</span> undestroy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     push<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     unshift<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     isPaused<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     setEncoding<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     read<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     pipe<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     unpipe<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     on<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     addListener<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     removeListener<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     off<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     removeAllListeners<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     resume<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     pause<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     wrap<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     iterator<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     setMaxListeners<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token operator\">:</span> setMaxListeners<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     getMaxListeners<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token operator\">:</span> getMaxListeners<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     emit<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token operator\">:</span> emit<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     prependListener<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token operator\">:</span> prependListener<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     once<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token operator\">:</span> once<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     prependOnceListener<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token operator\">:</span> prependOnceListener<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     listeners<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token operator\">:</span> listeners<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     rawListeners<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token operator\">:</span> rawListeners<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     listenerCount<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token operator\">:</span> listenerCount<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>     eventNames<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token operator\">:</span> eventNames<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>  bodyUsed<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><br>  arrayBuffer<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token operator\">:</span> arrayBuffer<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>  blob<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token operator\">:</span> blob<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>  json<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token operator\">:</span> json<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>  text<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token operator\">:</span> text<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span></code></pre>\n<p id=\"code-skip-day-2-3\">Ok, this is pretty standard, we can get the body as JSON or as Text by using awaited functions. So I can check for a string that I expect inside that text and that will be there no matter when I make the HTTP request.</p>\n<p class=\"skip-link-graf\">\n<a href=\"#code-skip-day-2-2\" id=\"skip-to-code-skip-day-2-2\" class=\"skip-link\">Skip code block ▼</a></p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"handle basic requests\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should resolve a basic URL\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">linkModule</span><span class=\"token punctuation\">(</span><br>\t\t\t\t<span class=\"token string\">\"https://api.github.com/repos/AramZS/devblog/git/refs/heads/main\"</span><br>\t\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\tresult<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">.</span>should<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token keyword\">const</span> textResponse <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>textResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\ttextResponse<br>\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><br>\t\t\t\t\t<span class=\"token string\">'\"url\":\"https://api.github.com/repos/AramZS/devblog/git/refs/heads/main\"'</span><br>\t\t\t\t<span class=\"token punctuation\">)</span><br>\t\t\t\t<span class=\"token punctuation\">.</span>should<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p id=\"code-skip-day-2-2\">That works! This is a good test.</p>\n<p>Ok, I want to look up how to create oEmbeds (where they're available). I've done a lot with scraping pages but I've never done oEmbed. How does it work? Let's look around.</p>\n<p>It looks like the standard is described in a pretty basic way <a href=\"https://oembed.com/\" target=\"_blank\">here</a>. It looks like <a href=\"https://github.com/WordPress/wordpress-develop/blob/5.8.1/src/wp-includes/embed.php#L25-L28\" target=\"_blank\">the relevant code for WordPress is over here</a>. There are two popular options <a href=\"https://www.npmjs.com/package/oembed\" target=\"_blank\">oembed</a> and <a href=\"https://www.npmjs.com/package/oembed-parser\" target=\"_blank\">oembed-parser</a>.</p>\n<p>This is interesting. I'd always assumed oEmbeds were based off HEAD data, but it looks like sites declare an endpoint from which to retrieve them?</p>\n<p><code>oembed-parser</code> looks up to date and well maintained. I think I'll try pulling that in.</p>\n<p>It looks like, should any of the links be Facebook, I'll need a Facebook API key. I want to design this to be extended to other projects, so let's set up the function that way.</p>\n<p>And Now we have a pretty basic oEmbed functionality. Let's see what I get as a test result.</p>\n<p>Ok, first step is to log the result. Here's what I get</p>\n<p class=\"skip-link-graf\">\n<a href=\"#code-skip-day-2-1\" id=\"skip-to-code-skip-day-2-1\" class=\"skip-link\">Skip code block ▼</a></p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span><br>  type<span class=\"token operator\">:</span> <span class=\"token string\">'photo'</span><span class=\"token punctuation\">,</span><br>  flickr_type<span class=\"token operator\">:</span> <span class=\"token string\">'photo'</span><span class=\"token punctuation\">,</span><br>  title<span class=\"token operator\">:</span> <span class=\"token string\">'upload'</span><span class=\"token punctuation\">,</span><br>  author_name<span class=\"token operator\">:</span> <span class=\"token string\">'AramZS'</span><span class=\"token punctuation\">,</span><br>  author_url<span class=\"token operator\">:</span> <span class=\"token string\">'https://www.flickr.com/photos/aramzs/'</span><span class=\"token punctuation\">,</span><br>  width<span class=\"token operator\">:</span> <span class=\"token number\">640</span><span class=\"token punctuation\">,</span><br>  height<span class=\"token operator\">:</span> <span class=\"token number\">640</span><span class=\"token punctuation\">,</span><br>  url<span class=\"token operator\">:</span> <span class=\"token string\">'https://live.staticflickr.com/2941/33763840540_481ce97db2_z.jpg'</span><span class=\"token punctuation\">,</span><br>  web_page<span class=\"token operator\">:</span> <span class=\"token string\">'https://www.flickr.com/photos/aramzs/33763840540/'</span><span class=\"token punctuation\">,</span><br>  thumbnail_url<span class=\"token operator\">:</span> <span class=\"token string\">'https://live.staticflickr.com/2941/33763840540_481ce97db2_q.jpg'</span><span class=\"token punctuation\">,</span><br>  thumbnail_width<span class=\"token operator\">:</span> <span class=\"token number\">150</span><span class=\"token punctuation\">,</span><br>  thumbnail_height<span class=\"token operator\">:</span> <span class=\"token number\">150</span><span class=\"token punctuation\">,</span><br>  web_page_short_url<span class=\"token operator\">:</span> <span class=\"token string\">'https://flic.kr/p/TrAvtJ'</span><span class=\"token punctuation\">,</span><br>  license<span class=\"token operator\">:</span> <span class=\"token string\">'Attribution License'</span><span class=\"token punctuation\">,</span><br>  license_url<span class=\"token operator\">:</span> <span class=\"token string\">'https://creativecommons.org/licenses/by/2.0/'</span><span class=\"token punctuation\">,</span><br>  license_id<span class=\"token operator\">:</span> <span class=\"token string\">'4'</span><span class=\"token punctuation\">,</span><br>  html<span class=\"token operator\">:</span> <span class=\"token string\">'&lt;a data-flickr-embed=\"true\" href=\"https://www.flickr.com/photos/aramzs/33763840540/\" title=\"upload by AramZS, on Flickr\">&lt;img src=\"https://live.staticflickr.com/2941/33763840540_481ce97db2_z.jpg\" width=\"640\" height=\"640\" alt=\"upload\">&lt;/a>&lt;script async src=\"https://embedr.flickr.com/assets/client-code.js\" charset=\"utf-8\">&lt;/script>'</span><span class=\"token punctuation\">,</span><br>  version<span class=\"token operator\">:</span> <span class=\"token string\">'1.0'</span><span class=\"token punctuation\">,</span><br>  cache_age<span class=\"token operator\">:</span> <span class=\"token number\">3600</span><span class=\"token punctuation\">,</span><br>  provider_name<span class=\"token operator\">:</span> <span class=\"token string\">'Flickr'</span><span class=\"token punctuation\">,</span><br>  provider_url<span class=\"token operator\">:</span> <span class=\"token string\">'https://www.flickr.com/'</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p id=\"code-skip-day-2-1\">Ok, I can test for that. I should really modal the response instead of making an actual HTTP request, but for now this is a good place to be. Last thing I want to test is <a href=\"https://developers.facebook.com/docs/features-reference/oembed-read\" target=\"_blank\">if it can make a request to Facebook</a>.</p>\n<p>Hmm, trying some URLs and all I'm getting is <code>nulls</code>. That's annoying.</p>\n<p>Ok, well, I'm hungry for dinner, so let's stop here.</p>\n<p><a target=\"_blank\" href=\"https://github.com/AramZS/contexter/commit/c9f9149e61ecf9d17b836e81b5b7040a8804c43c\" class=\"git-commit-link\"><code>git commit -am &quot;Getting the Link Request modules requesting and testing oembed&quot;</code></a></p>\n\n                    \n                    </section>\n                    <section id=\"postcontent\">\n                    \n    \n        \n        \n        <div class=\"pagination\">\n            <a href=\"/posts/projects/context-pages/day-1/\" class=\"pagination-link cursor-pointer \">Previous Day</a>\n\n            <a href=\"/posts/projects/context-pages/day-3-wrestling-oembed-link-metadata/\" class=\"pagination-link cursor-pointer \">Next Day</a>\n        </div>\n    \n    <div class=\"social-icons-block\">\n    <div class=\"a-social-icon\">\n        <a href=\"https://github.com/AramZS/\" target=\"_blank\">\n            <svg role=\"img\" viewBox=\"0 0 24 24\" class=\"twitter-icon social-icon\" xmlns=\"http://www.w3.org/2000/svg\"><title>GitHub</title><path d=\"M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12\"/></svg>\n\n\n<!-- https://simpleicons.org/?q=github -->\n\n        </a>\n    </div>\n    <div class=\"a-social-icon\">\n        <a href=\"https://bit.ly/aramzs\" target=\"_blank\">\n            <svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><title>LinkedIn</title><path d=\"M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z\"/></svg>\n\n\n<!-- https://simpleicons.org/?q=linked -->\n\n        </a>\n    </div>\n    <div class=\"a-social-icon\">\n        <a href=\"https://twitter.com/Chronotope\" target=\"_blank\">\n            <svg role=\"img\" class=\"twitter-icon social-icon\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><title>Twitter</title><path d=\"M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z\"/></svg>\n\n<!-- https://simpleicons.org/?q=tw -->\n\n        </a>\n    </div>\n    \n    <div class=\"a-social-icon\">\n        <a href=\"https://indieweb.social/@Chronotope\" rel=\"me\" target=\"_blank\">\n            <svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><title>Mastodon</title><path d=\"M23.193 7.88c0-5.207-3.411-6.733-3.411-6.733C18.062.357 15.108.025 12.041 0h-.076c-3.069.025-6.02.357-7.74 1.147 0 0-3.412 1.526-3.412 6.732 0 1.193-.023 2.619.015 4.13.124 5.092.934 10.11 5.641 11.355 2.17.574 4.034.695 5.536.612 2.722-.15 4.25-.972 4.25-.972l-.09-1.975s-1.945.613-4.13.54c-2.165-.075-4.449-.234-4.799-2.892a5.5 5.5 0 0 1-.048-.745s2.125.52 4.818.643c1.646.075 3.19-.097 4.758-.283 3.007-.359 5.625-2.212 5.954-3.905.517-2.665.475-6.508.475-6.508zm-4.024 6.709h-2.497v-6.12c0-1.29-.543-1.944-1.628-1.944-1.2 0-1.802.776-1.802 2.313v3.349h-2.484v-3.35c0-1.537-.602-2.313-1.802-2.313-1.085 0-1.628.655-1.628 1.945v6.119H4.831V8.285c0-1.29.328-2.314.987-3.07.68-.759 1.57-1.147 2.674-1.147 1.278 0 2.246.491 2.886 1.474L12 6.585l.622-1.043c.64-.983 1.608-1.474 2.886-1.474 1.104 0 1.994.388 2.674 1.146.658.757.986 1.781.986 3.07v6.305z\"/></svg>\n\n<!-- https://simpleicons.org/?q=mastodon -->\n\n        </a>\n    </div>\n\n</div>\n\n\n                    </section>\n                </main>\n                <footer>\n                    \n    <div id=\"taglist\">\n        <h6>Tags: </h6>\n        <ul><li>\n                    <a href=\"https://fightwithtools.dev/tag/11ty\">11ty</a>\n                </li><li>\n                    <a href=\"https://fightwithtools.dev/tag/node\">Node</a>\n                </li><li>\n                    <a href=\"https://fightwithtools.dev/tag/wip\">WiP</a>\n                </li><li>\n                    <a href=\"https://fightwithtools.dev/tag/fetch\">fetch</a>\n                </li></ul>\n    </div>\n\n                    \n                        <p>\n                            <small>Hosted on <a href=\"https://pages.github.com\" target=\"_blank\">GitHub Pages</a> based on <a href=\"https://github.com/pages-themes/dinky\" target=\"_blank\">the Dinky theme</a>. <a href=\"https://github.com/AramZS/devblog\" target=\"_blank\">See the code</a>.</small>\n                        </p>\n                    \n                    \n                </footer>\n            </div>\n            <!--[if !IE]><script>fixScale(document);</script><![endif]-->\n        </body>\n    </html>\n",
		"oembed": false,
		"readabilityObject": {
			"title": "Day 2: Building a tool to generate context pages",
			"content": "<div id=\"readability-page-1\" class=\"page\"><div>\n                    \n    <section id=\"precontent\">\n        \n        <p>I want to share lists of links, but make them readable and archived</p>\n\n        \n    <figure>\n        <img src=\"https://fightwithtools.dev/img/close-up-keys.jpg\" alt=\"Close up photo of keyboard keys.\">\n        \n            <figcaption>\n                \n                 | <em>\n                        <a href=\"https://www.flickr.com/photos/40393390@N00/2386752252\" target=\"_blank\">'TYPE' by SarahDeer is licensed with CC BY 2.0</a>\n                    </em> | \n            </figcaption>\n        \n    </figure>\n\n\n    </section>\n\n                    <section id=\"maincontent\">\n                    \n                        <h2 id=\"project-scope-and-todos\" tabindex=\"-1\">Project Scope and ToDos</h2>\n<ol>\n<li>Take a link and turn it into an oEmbed/Open Graph style share card</li>\n<li>Take a link and archive it in the most reliable way</li>\n<li>When the link is a tweet, display the tweet but also the whole tweet thread.</li>\n<li>When the link is a tweet, archive the tweets, and display them if the live ones are not available.</li>\n<li>Capture any embedded retweets in the thread. Capture their thread if one exists</li>\n<li>Capture any links in the Tweet</li>\n<li>Create the process as an abstract function that returns the data in a savable way</li>\n</ol>\n<ul>\n<li> Archive links on <a href=\"http://archive.org/\" target=\"_blank\">Archive.org</a> and save the resulting archival links</li>\n<li> Create link IDs that can be used to cache related content</li>\n<li> Integrate it into the site to be able to make context pages here.</li>\n</ul>\n<h2 id=\"day-2\" tabindex=\"-1\">Day 2</h2>\n<p>Ok, let's set up the request process. I want to retrieve the page so let's move forward on that as the next step.</p>\n<p>Fetch is increasingly the way to handle HTTP requests in the browser, so it would be a good library to play with. Luckily there is a <a href=\"https://www.npmjs.com/package/node-fetch\" target=\"_blank\">Node Fetch library</a> I can leverage.</p>\n<p>If I want to use fetch v3 it looks like this is how I have to go</p>\n<p>\n<a href=\"#code-skip-day-2-5\" id=\"skip-to-code-skip-day-2-5\">Skip code block ▼</a></p>\n<pre><code><span>const</span> <span>fetch</span> <span>=</span> <span>(</span><span><span>...</span>args</span><span>)</span> <span>=&gt;</span><br>\t<span>import</span><span>(</span><span>\"node-fetch\"</span><span>)</span><span>.</span><span>then</span><span>(</span><span>(</span><span><span>{</span> <span>default</span><span>:</span> fetch <span>}</span></span><span>)</span> <span>=&gt;</span> <span>fetch</span><span>(</span><span>...</span>args<span>)</span><span>)</span><span>;</span>`</code></pre>\n<p id=\"code-skip-day-2-5\">The other thing I know from working on PressForward is that requests will often get blocked if they look too much like a bot, so it is helpful to purposefully identify yourself as a trusted bot. There's <a href=\"https://user-agents.net/lookup\" target=\"_blank\">a list of UAs that I could search</a>, but I know from experiance that the most successful User Agent is Facebook's, especially when I'm trying to retrieve page metadata. So let's start there.</p>\n<p>I also want to check for errors.</p>\n<p>Let's use the advised pattern on the module page to start with. The logic here is that a response can still be \"successful\" even if it comes back with an error code. Their pattern should be able to catch that.</p>\n<p>Ok, here's my code now:</p>\n<p>\n<a href=\"#code-skip-day-2-4\" id=\"skip-to-code-skip-day-2-4\">Skip code block ▼</a></p>\n<pre><code><br><span>const</span> <span>fetch</span> <span>=</span> <span>(</span><span><span>...</span>args</span><span>)</span> <span>=&gt;</span><br>\t<span>import</span><span>(</span><span>\"node-fetch\"</span><span>)</span><span>.</span><span>then</span><span>(</span><span>(</span><span><span>{</span> <span>default</span><span>:</span> fetch <span>}</span></span><span>)</span> <span>=&gt;</span> <span>fetch</span><span>(</span><span>...</span>args<span>)</span><span>)</span><span>;</span><p><span>const</span> ua <span>=</span><br>\t<span>\"facebookexternalhit/1.1 (+http://www.facebook.com/externalhit_uatext.php)\"</span><span>;</span></p><p><span>const</span> <span>getRequestHeaders</span> <span>=</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span><br>\t<span>return</span> <span>{</span><br>\t\tcookie<span>:</span> <span>\"\"</span><span>,</span><br>\t\t<span>\"Accept-Language\"</span><span>:</span> <span>\"en-US,en;q=0.8\"</span><span>,</span><br>\t\t<span>\"User-Agent\"</span><span>:</span> ua<span>,</span><br>\t<span>}</span><span>;</span><br><span>}</span><span>;</span></p><p><span>class</span> <span>HTTPResponseError</span> <span>extends</span> <span>Error</span> <span>{</span><br>\t<span>constructor</span><span>(</span><span>response<span>,</span> <span>...</span>args</span><span>)</span> <span>{</span><br>\t\t<span>super</span><span>(</span><br>\t\t\t<span><span>`</span><span>HTTP Error Response: </span><span><span>${</span>response<span>.</span>status<span>}</span></span><span> </span><span><span>${</span>response<span>.</span>statusText<span>}</span></span><span>`</span></span><span>,</span><br>\t\t\t<span>...</span>args<br>\t\t<span>)</span><span>;</span><br>\t\t<span>this</span><span>.</span>response <span>=</span> response<span>;</span><br>\t<span>}</span><br><span>}</span></p><p><span>const</span> <span>checkStatus</span> <span>=</span> <span>(</span><span>response</span><span>)</span> <span>=&gt;</span> <span>{</span><br>\t<span>if</span> <span>(</span>response<span>.</span>ok<span>)</span> <span>{</span><br>\t\t<span>// response.status &gt;= 200 &amp;&amp; response.status &lt; 300</span><br>\t\t<span>return</span> response<span>;</span><br>\t<span>}</span> <span>else</span> <span>{</span><br>\t\t<span>throw</span> <span>new</span> <span>HTTPResponseError</span><span>(</span>response<span>)</span><span>;</span><br>\t<span>}</span><br><span>}</span><span>;</span></p><p><span>const</span> <span>fetchUrl</span> <span>=</span> <span>async</span> <span>(</span><span>url</span><span>)</span> <span>=&gt;</span> <span>{</span><br>\t<span>try</span> <span>{</span><br>\t\t<span>const</span> response <span>=</span> <span>await</span> <span>fetch</span><span>(</span>url<span>,</span> <span>{</span><br>\t\t\tmethod<span>:</span> <span>\"get\"</span><span>,</span><br>\t\t\theader<span>:</span> <span>getRequestHeaders</span><span>(</span><span>)</span><span>,</span><br>\t\t<span>}</span><span>)</span><span>;</span><br>\t<span>}</span> <span>catch</span> <span>(</span>e<span>)</span> <span>{</span><br>\t\tconsole<span>.</span><span>error</span><span>(</span><span>\"Fetch Error\"</span><span>,</span> e<span>.</span>response<span>.</span><span>text</span><span>(</span><span>)</span><span>)</span><span>;</span><br>\t<span>}</span><br>\t<span>checkStatus</span><span>(</span>response<span>)</span><span>;</span><br><span>}</span><span>;</span></p></code></pre>\n<p id=\"code-skip-day-2-4\">Let's add this to the module export and see if some basic requests work. Let's make a basic request that we know will respond to the GitHub API. Getting the head of this project's main commit tree should work just fine. Let's request <code>https://api.github.com/repos/AramZS/devblog/git/refs/heads/main</code>.</p>\n<p>Ok, so what does a fetch returned object look like?</p>\n<p>\n<a href=\"#code-skip-day-2-3\" id=\"skip-to-code-skip-day-2-3\">Skip code block ▼</a></p>\n<pre><code><span>{</span> size<span>:</span> <span>0</span><span>,</span><br>  type<span>:</span> <span>'default'</span><span>,</span><br>  url<span>:</span> <span>'https://api.github.com/repos/AramZS/devblog/git/refs/heads/main'</span><span>,</span><br>  status<span>:</span> <span>200</span><span>,</span><br>  ok<span>:</span> <span>true</span><span>,</span><br>  redirected<span>:</span> <span>false</span><span>,</span><br>  statusText<span>:</span> <span>'OK'</span><span>,</span><br>  headers<span>:</span><br>   <span>{</span> get<span>:</span> <span>[</span>Function<span>:</span> get<span>]</span><span>,</span><br>     forEach<span>:</span> <span>[</span>Function<span>:</span> forEach<span>]</span><span>,</span><br>     values<span>:</span> <span>[</span>Function<span>:</span> values<span>]</span><span>,</span><br>     entries<span>:</span> <span>[</span>Function<span>:</span> entries<span>]</span><span>,</span><br>     append<span>:</span> <span>[</span>Function<span>]</span><span>,</span><br>     <span>delete</span><span>:</span> <span>[</span>Function<span>]</span><span>,</span><br>     getAll<span>:</span> <span>[</span>Function<span>]</span><span>,</span><br>     has<span>:</span> <span>[</span>Function<span>]</span><span>,</span><br>     set<span>:</span> <span>[</span>Function<span>]</span><span>,</span><br>     sort<span>:</span> <span>[</span>Function<span>:</span> sort<span>]</span><span>,</span><br>     keys<span>:</span> <span>[</span>Function<span>]</span> <span>}</span><span>,</span><br>  clone<span>:</span> <span>[</span>Function<span>:</span> clone<span>]</span><span>,</span><br>  body<span>:</span><br>   <span>{</span> _writeState<span>:</span> <span>[</span> <span>0</span><span>,</span> <span>0</span> <span>]</span><span>,</span><br>     _readableState<span>:</span><br>      <span>{</span> objectMode<span>:</span> <span>false</span><span>,</span><br>        highWaterMark<span>:</span> <span>16384</span><span>,</span><br>        buffer<span>:</span> <span>[</span>Object<span>]</span><span>,</span><br>        length<span>:</span> <span>0</span><span>,</span><br>        pipes<span>:</span> <span>[</span><span>]</span><span>,</span><br>        flowing<span>:</span> <span>null</span><span>,</span><br>        ended<span>:</span> <span>false</span><span>,</span><br>        endEmitted<span>:</span> <span>false</span><span>,</span><br>        reading<span>:</span> <span>false</span><span>,</span><br>        constructed<span>:</span> <span>true</span><span>,</span><br>        sync<span>:</span> <span>false</span><span>,</span><br>        needReadable<span>:</span> <span>false</span><span>,</span><br>        emittedReadable<span>:</span> <span>false</span><span>,</span><br>        readableListening<span>:</span> <span>false</span><span>,</span><br>        resumeScheduled<span>:</span> <span>false</span><span>,</span><br>        errorEmitted<span>:</span> <span>false</span><span>,</span><br>        emitClose<span>:</span> <span>true</span><span>,</span><br>        autoDestroy<span>:</span> <span>true</span><span>,</span><br>        destroyed<span>:</span> <span>false</span><span>,</span><br>        errored<span>:</span> <span>null</span><span>,</span><br>        closed<span>:</span> <span>false</span><span>,</span><br>        closeEmitted<span>:</span> <span>false</span><span>,</span><br>        defaultEncoding<span>:</span> <span>'utf8'</span><span>,</span><br>        awaitDrainWriters<span>:</span> <span>null</span><span>,</span><br>        multiAwaitDrain<span>:</span> <span>false</span><span>,</span><br>        readingMore<span>:</span> <span>false</span><span>,</span><br>        dataEmitted<span>:</span> <span>false</span><span>,</span><br>        decoder<span>:</span> <span>null</span><span>,</span><br>        encoding<span>:</span> <span>null</span> <span>}</span><span>,</span><br>     _events<span>:</span><br>      <span>{</span> prefinish<span>:</span> <span>[</span>Function<span>:</span> prefinish<span>]</span><span>,</span><br>        close<span>:</span> <span>[</span>Object<span>]</span><span>,</span><br>        end<span>:</span> <span>[</span>Function<span>:</span> onend<span>]</span><span>,</span><br>        finish<span>:</span> <span>[</span>Object<span>]</span><span>,</span><br>        error<span>:</span> <span>[</span>Object<span>]</span><span>,</span><br>        unpipe<span>:</span> <span>[</span>Function<span>:</span> onunpipe<span>]</span> <span>}</span><span>,</span><br>     _eventsCount<span>:</span> <span>6</span><span>,</span><br>     _maxListeners<span>:</span> <span>undefined</span><span>,</span><br>     _writableState<span>:</span><br>      <span>{</span> objectMode<span>:</span> <span>false</span><span>,</span><br>        highWaterMark<span>:</span> <span>16384</span><span>,</span><br>        finalCalled<span>:</span> <span>false</span><span>,</span><br>        needDrain<span>:</span> <span>false</span><span>,</span><br>        ending<span>:</span> <span>false</span><span>,</span><br>        ended<span>:</span> <span>false</span><span>,</span><br>        finished<span>:</span> <span>false</span><span>,</span><br>        destroyed<span>:</span> <span>false</span><span>,</span><br>        decodeStrings<span>:</span> <span>true</span><span>,</span><br>        defaultEncoding<span>:</span> <span>'utf8'</span><span>,</span><br>        length<span>:</span> <span>61</span><span>,</span><br>        writing<span>:</span> <span>true</span><span>,</span><br>        corked<span>:</span> <span>0</span><span>,</span><br>        sync<span>:</span> <span>false</span><span>,</span><br>        bufferProcessing<span>:</span> <span>false</span><span>,</span><br>        onwrite<span>:</span> <span>[</span>Function<span>:</span> bound onwrite<span>]</span><span>,</span><br>        writecb<span>:</span> <span>[</span>Function<span>:</span> nop<span>]</span><span>,</span><br>        writelen<span>:</span> <span>61</span><span>,</span><br>        afterWriteTickInfo<span>:</span> <span>null</span><span>,</span><br>        buffered<span>:</span> <span>[</span><span>]</span><span>,</span><br>        bufferedIndex<span>:</span> <span>0</span><span>,</span><br>        allBuffers<span>:</span> <span>true</span><span>,</span><br>        allNoop<span>:</span> <span>true</span><span>,</span><br>        pendingcb<span>:</span> <span>1</span><span>,</span><br>        constructed<span>:</span> <span>true</span><span>,</span><br>        prefinished<span>:</span> <span>false</span><span>,</span><br>        errorEmitted<span>:</span> <span>false</span><span>,</span><br>        emitClose<span>:</span> <span>true</span><span>,</span><br>        autoDestroy<span>:</span> <span>true</span><span>,</span><br>        errored<span>:</span> <span>null</span><span>,</span><br>        closed<span>:</span> <span>false</span><span>,</span><br>        closeEmitted<span>:</span> <span>false</span><span>,</span><br>        getBuffer<span>:</span> <span>[</span>Function<span>:</span> getBuffer<span>]</span> <span>}</span><span>,</span><br>     allowHalfOpen<span>:</span> <span>true</span><span>,</span><br>     bytesWritten<span>:</span> <span>0</span><span>,</span><br>     _handle<span>:</span><br>      <span>{</span> onerror<span>:</span> <span>[</span>Function<span>:</span> zlibOnError<span>]</span><span>,</span><br>        buffer<span>:</span> <span>&lt;</span>Buffer <span>1</span>f <span>8</span>b <span>08</span> <span>00</span> <span>00</span> <span>00</span> <span>00</span> <span>00</span> <span>00</span> <span>03</span> <span>9</span>d <span>8</span>e <span>3</span>f <span>6</span>b c3 <span>30</span> <span>10</span> <span>47</span> bf <span>8</span>b e6 <span>10</span> d9 <span>8</span>e <span>89</span> <span>6</span>b <span>43</span> <span>86</span> <span>40</span> e9 <span>9</span>f <span>80</span> <span>92</span> a1 <span>34</span> <span>05</span> <span>2</span>f e5 <span>24</span> <span>9</span>d <span>2</span>d <span>15</span> cb <span>12</span> <span>96</span> <span>62</span> a8 <span>43</span> be <span>7</span>b <span>...</span> <span>11</span> more bytes<span>&gt;</span><span>,</span><br>        cb<span>:</span> <span>[</span>Function<span>]</span><span>,</span><br>        availOutBefore<span>:</span> <span>16384</span><span>,</span><br>        availInBefore<span>:</span> <span>61</span><span>,</span><br>        inOff<span>:</span> <span>0</span><span>,</span><br>        flushFlag<span>:</span> <span>2</span><span>,</span><br>        write<span>:</span> <span>[</span>Function<span>:</span> write<span>]</span><span>,</span><br>        writeSync<span>:</span> <span>[</span>Function<span>:</span> writeSync<span>]</span><span>,</span><br>        close<span>:</span> <span>[</span>Function<span>:</span> close<span>]</span><span>,</span><br>        init<span>:</span> <span>[</span>Function<span>:</span> init<span>]</span><span>,</span><br>        params<span>:</span> <span>[</span>Function<span>:</span> params<span>]</span><span>,</span><br>        reset<span>:</span> <span>[</span>Function<span>:</span> reset<span>]</span><span>,</span><br>        getAsyncId<span>:</span> <span>[</span>Function<span>:</span> getAsyncId<span>]</span><span>,</span><br>        asyncReset<span>:</span> <span>[</span>Function<span>:</span> asyncReset<span>]</span><span>,</span><br>        getProviderType<span>:</span> <span>[</span>Function<span>:</span> getProviderType<span>]</span> <span>}</span><span>,</span><br>     _outBuffer<span>:</span> <span>&lt;</span>Buffer <span>7</span>b <span>55</span> <span>55</span> <span>55</span> <span>55</span> <span>55</span> <span>55</span> <span>55</span> <span>55</span> <span>55</span> <span>55</span> <span>55</span> <span>55</span> <span>55</span> <span>55</span> <span>55</span> <span>55</span> <span>00</span> <span>00</span> <span>00</span> <span>00</span> <span>00</span> <span>00</span> <span>00</span> c3 <span>00</span> <span>00</span> <span>00</span> <span>00</span> <span>00</span> <span>00</span> <span>00</span> e0 bd <span>80</span> f2 e8 <span>7</span>f <span>00</span> <span>00</span> <span>20</span> b8 <span>80</span> f2 e8 <span>7</span>f <span>00</span> <span>00</span> <span>00</span> <span>00</span> <span>...</span> <span>16334</span> more bytes<span>&gt;</span><span>,</span><br>     _outOffset<span>:</span> <span>0</span><span>,</span><br>     _chunkSize<span>:</span> <span>16384</span><span>,</span><br>     _defaultFlushFlag<span>:</span> <span>2</span><span>,</span><br>     _finishFlushFlag<span>:</span> <span>2</span><span>,</span><br>     _defaultFullFlushFlag<span>:</span> <span>3</span><span>,</span><br>     _info<span>:</span> <span>undefined</span><span>,</span><br>     _maxOutputLength<span>:</span> <span>4294967296</span><span>,</span><br>     _level<span>:</span> <span>-</span><span>1</span><span>,</span><br>     _strategy<span>:</span> <span>0</span><span>,</span><br>     params<span>:</span> <span>[</span>Function<span>:</span> params<span>]</span><span>,</span><br>     _closed<span>:</span> <span>false</span><span>,</span><br>     bytesRead<span>:</span> <span>0</span><span>,</span><br>     reset<span>:</span> <span>[</span>Function<span>]</span><span>,</span><br>     _flush<span>:</span> <span>[</span>Function<span>]</span><span>,</span><br>     _final<span>:</span> <span>[</span>Function<span>]</span><span>,</span><br>     flush<span>:</span> <span>[</span>Function<span>]</span><span>,</span><br>     close<span>:</span> <span>[</span>Function<span>]</span><span>,</span><br>     _destroy<span>:</span> <span>[</span>Function<span>]</span><span>,</span><br>     _transform<span>:</span> <span>[</span>Function<span>]</span><span>,</span><br>     _processChunk<span>:</span> <span>[</span>Function<span>]</span><span>,</span><br>     _write<span>:</span> <span>[</span>Function<span>]</span><span>,</span><br>     _read<span>:</span> <span>[</span>Function<span>]</span><span>,</span><br>     write<span>:</span> <span>[</span>Function<span>]</span><span>,</span><br>     cork<span>:</span> <span>[</span>Function<span>]</span><span>,</span><br>     uncork<span>:</span> <span>[</span>Function<span>]</span><span>,</span><br>     setDefaultEncoding<span>:</span> <span>[</span>Function<span>:</span> setDefaultEncoding<span>]</span><span>,</span><br>     _writev<span>:</span> <span>null</span><span>,</span><br>     end<span>:</span> <span>[</span>Function<span>]</span><span>,</span><br>     destroy<span>:</span> <span>[</span>Function<span>:</span> destroy<span>]</span><span>,</span><br>     _undestroy<span>:</span> <span>[</span>Function<span>:</span> undestroy<span>]</span><span>,</span><br>     push<span>:</span> <span>[</span>Function<span>]</span><span>,</span><br>     unshift<span>:</span> <span>[</span>Function<span>]</span><span>,</span><br>     isPaused<span>:</span> <span>[</span>Function<span>]</span><span>,</span><br>     setEncoding<span>:</span> <span>[</span>Function<span>]</span><span>,</span><br>     read<span>:</span> <span>[</span>Function<span>]</span><span>,</span><br>     pipe<span>:</span> <span>[</span>Function<span>]</span><span>,</span><br>     unpipe<span>:</span> <span>[</span>Function<span>]</span><span>,</span><br>     on<span>:</span> <span>[</span>Function<span>]</span><span>,</span><br>     addListener<span>:</span> <span>[</span>Function<span>]</span><span>,</span><br>     removeListener<span>:</span> <span>[</span>Function<span>]</span><span>,</span><br>     off<span>:</span> <span>[</span>Function<span>]</span><span>,</span><br>     removeAllListeners<span>:</span> <span>[</span>Function<span>]</span><span>,</span><br>     resume<span>:</span> <span>[</span>Function<span>]</span><span>,</span><br>     pause<span>:</span> <span>[</span>Function<span>]</span><span>,</span><br>     wrap<span>:</span> <span>[</span>Function<span>]</span><span>,</span><br>     iterator<span>:</span> <span>[</span>Function<span>]</span><span>,</span><br>     setMaxListeners<span>:</span> <span>[</span>Function<span>:</span> setMaxListeners<span>]</span><span>,</span><br>     getMaxListeners<span>:</span> <span>[</span>Function<span>:</span> getMaxListeners<span>]</span><span>,</span><br>     emit<span>:</span> <span>[</span>Function<span>:</span> emit<span>]</span><span>,</span><br>     prependListener<span>:</span> <span>[</span>Function<span>:</span> prependListener<span>]</span><span>,</span><br>     once<span>:</span> <span>[</span>Function<span>:</span> once<span>]</span><span>,</span><br>     prependOnceListener<span>:</span> <span>[</span>Function<span>:</span> prependOnceListener<span>]</span><span>,</span><br>     listeners<span>:</span> <span>[</span>Function<span>:</span> listeners<span>]</span><span>,</span><br>     rawListeners<span>:</span> <span>[</span>Function<span>:</span> rawListeners<span>]</span><span>,</span><br>     listenerCount<span>:</span> <span>[</span>Function<span>:</span> listenerCount<span>]</span><span>,</span><br>     eventNames<span>:</span> <span>[</span>Function<span>:</span> eventNames<span>]</span> <span>}</span><span>,</span><br>  bodyUsed<span>:</span> <span>false</span><span>,</span><br>  arrayBuffer<span>:</span> <span>[</span>Function<span>:</span> arrayBuffer<span>]</span><span>,</span><br>  blob<span>:</span> <span>[</span>Function<span>:</span> blob<span>]</span><span>,</span><br>  json<span>:</span> <span>[</span>Function<span>:</span> json<span>]</span><span>,</span><br>  text<span>:</span> <span>[</span>Function<span>:</span> text<span>]</span> <span>}</span></code></pre>\n<p id=\"code-skip-day-2-3\">Ok, this is pretty standard, we can get the body as JSON or as Text by using awaited functions. So I can check for a string that I expect inside that text and that will be there no matter when I make the HTTP request.</p>\n<p>\n<a href=\"#code-skip-day-2-2\" id=\"skip-to-code-skip-day-2-2\">Skip code block ▼</a></p>\n<pre><code><span>describe</span><span>(</span><span>\"handle basic requests\"</span><span>,</span> <span>function</span> <span>(</span><span>)</span> <span>{</span><br>\t\t<span>this</span><span>.</span><span>timeout</span><span>(</span><span>5000</span><span>)</span><span>;</span><br>\t\t<span>it</span><span>(</span><span>\"should resolve a basic URL\"</span><span>,</span> <span>async</span> <span>function</span> <span>(</span><span>)</span> <span>{</span><br>\t\t\t<span>const</span> result <span>=</span> <span>await</span> <span>linkModule</span><span>(</span><br>\t\t\t\t<span>\"https://api.github.com/repos/AramZS/devblog/git/refs/heads/main\"</span><br>\t\t\t<span>)</span><span>;</span><br>\t\t\tresult<span>.</span>status<span>.</span>should<span>.</span><span>equal</span><span>(</span><span>200</span><span>)</span><span>;</span><br>\t\t\t<span>const</span> textResponse <span>=</span> <span>await</span> result<span>.</span><span>text</span><span>(</span><span>)</span><span>;</span><br>\t\t\tconsole<span>.</span><span>log</span><span>(</span>textResponse<span>)</span><span>;</span><br>\t\t\ttextResponse<br>\t\t\t\t<span>.</span><span>includes</span><span>(</span><br>\t\t\t\t\t<span>'\"url\":\"https://api.github.com/repos/AramZS/devblog/git/refs/heads/main\"'</span><br>\t\t\t\t<span>)</span><br>\t\t\t\t<span>.</span>should<span>.</span><span>equal</span><span>(</span><span>true</span><span>)</span><span>;</span><br>\t\t<span>}</span><span>)</span><span>;</span><br>\t<span>}</span><span>)</span><span>;</span></code></pre>\n<p id=\"code-skip-day-2-2\">That works! This is a good test.</p>\n<p>Ok, I want to look up how to create oEmbeds (where they're available). I've done a lot with scraping pages but I've never done oEmbed. How does it work? Let's look around.</p>\n<p>It looks like the standard is described in a pretty basic way <a href=\"https://oembed.com/\" target=\"_blank\">here</a>. It looks like <a href=\"https://github.com/WordPress/wordpress-develop/blob/5.8.1/src/wp-includes/embed.php#L25-L28\" target=\"_blank\">the relevant code for WordPress is over here</a>. There are two popular options <a href=\"https://www.npmjs.com/package/oembed\" target=\"_blank\">oembed</a> and <a href=\"https://www.npmjs.com/package/oembed-parser\" target=\"_blank\">oembed-parser</a>.</p>\n<p>This is interesting. I'd always assumed oEmbeds were based off HEAD data, but it looks like sites declare an endpoint from which to retrieve them?</p>\n<p><code>oembed-parser</code> looks up to date and well maintained. I think I'll try pulling that in.</p>\n<p>It looks like, should any of the links be Facebook, I'll need a Facebook API key. I want to design this to be extended to other projects, so let's set up the function that way.</p>\n<p>And Now we have a pretty basic oEmbed functionality. Let's see what I get as a test result.</p>\n<p>Ok, first step is to log the result. Here's what I get</p>\n<p>\n<a href=\"#code-skip-day-2-1\" id=\"skip-to-code-skip-day-2-1\">Skip code block ▼</a></p>\n<pre><code><span>{</span><br>  type<span>:</span> <span>'photo'</span><span>,</span><br>  flickr_type<span>:</span> <span>'photo'</span><span>,</span><br>  title<span>:</span> <span>'upload'</span><span>,</span><br>  author_name<span>:</span> <span>'AramZS'</span><span>,</span><br>  author_url<span>:</span> <span>'https://www.flickr.com/photos/aramzs/'</span><span>,</span><br>  width<span>:</span> <span>640</span><span>,</span><br>  height<span>:</span> <span>640</span><span>,</span><br>  url<span>:</span> <span>'https://live.staticflickr.com/2941/33763840540_481ce97db2_z.jpg'</span><span>,</span><br>  web_page<span>:</span> <span>'https://www.flickr.com/photos/aramzs/33763840540/'</span><span>,</span><br>  thumbnail_url<span>:</span> <span>'https://live.staticflickr.com/2941/33763840540_481ce97db2_q.jpg'</span><span>,</span><br>  thumbnail_width<span>:</span> <span>150</span><span>,</span><br>  thumbnail_height<span>:</span> <span>150</span><span>,</span><br>  web_page_short_url<span>:</span> <span>'https://flic.kr/p/TrAvtJ'</span><span>,</span><br>  license<span>:</span> <span>'Attribution License'</span><span>,</span><br>  license_url<span>:</span> <span>'https://creativecommons.org/licenses/by/2.0/'</span><span>,</span><br>  license_id<span>:</span> <span>'4'</span><span>,</span><br>  html<span>:</span> <span>'&lt;a data-flickr-embed=\"true\" href=\"https://www.flickr.com/photos/aramzs/33763840540/\" title=\"upload by AramZS, on Flickr\"&gt;&lt;img src=\"https://live.staticflickr.com/2941/33763840540_481ce97db2_z.jpg\" width=\"640\" height=\"640\" alt=\"upload\"&gt;&lt;/a&gt;&lt;script async src=\"https://embedr.flickr.com/assets/client-code.js\" charset=\"utf-8\"&gt;&lt;/script&gt;'</span><span>,</span><br>  version<span>:</span> <span>'1.0'</span><span>,</span><br>  cache_age<span>:</span> <span>3600</span><span>,</span><br>  provider_name<span>:</span> <span>'Flickr'</span><span>,</span><br>  provider_url<span>:</span> <span>'https://www.flickr.com/'</span><br><span>}</span></code></pre>\n<p id=\"code-skip-day-2-1\">Ok, I can test for that. I should really modal the response instead of making an actual HTTP request, but for now this is a good place to be. Last thing I want to test is <a href=\"https://developers.facebook.com/docs/features-reference/oembed-read\" target=\"_blank\">if it can make a request to Facebook</a>.</p>\n<p>Hmm, trying some URLs and all I'm getting is <code>nulls</code>. That's annoying.</p>\n<p>Ok, well, I'm hungry for dinner, so let's stop here.</p>\n<p><a target=\"_blank\" href=\"https://github.com/AramZS/contexter/commit/c9f9149e61ecf9d17b836e81b5b7040a8804c43c\"><code>git commit -am \"Getting the Link Request modules requesting and testing oembed\"</code></a></p>\n\n                    \n                    </section>\n                    \n                </div></div>",
			"textContent": "\n                    \n    \n        \n        I want to share lists of links, but make them readable and archived\n\n        \n    \n        \n        \n            \n                \n                 | \n                        'TYPE' by SarahDeer is licensed with CC BY 2.0\n                     | \n            \n        \n    \n\n\n    \n\n                    \n                    \n                        Project Scope and ToDos\n\nTake a link and turn it into an oEmbed/Open Graph style share card\nTake a link and archive it in the most reliable way\nWhen the link is a tweet, display the tweet but also the whole tweet thread.\nWhen the link is a tweet, archive the tweets, and display them if the live ones are not available.\nCapture any embedded retweets in the thread. Capture their thread if one exists\nCapture any links in the Tweet\nCreate the process as an abstract function that returns the data in a savable way\n\n\n Archive links on Archive.org and save the resulting archival links\n Create link IDs that can be used to cache related content\n Integrate it into the site to be able to make context pages here.\n\nDay 2\nOk, let's set up the request process. I want to retrieve the page so let's move forward on that as the next step.\nFetch is increasingly the way to handle HTTP requests in the browser, so it would be a good library to play with. Luckily there is a Node Fetch library I can leverage.\nIf I want to use fetch v3 it looks like this is how I have to go\n\nSkip code block ▼\nconst fetch = (...args) =>\timport(\"node-fetch\").then(({ default: fetch }) => fetch(...args));`\nThe other thing I know from working on PressForward is that requests will often get blocked if they look too much like a bot, so it is helpful to purposefully identify yourself as a trusted bot. There's a list of UAs that I could search, but I know from experiance that the most successful User Agent is Facebook's, especially when I'm trying to retrieve page metadata. So let's start there.\nI also want to check for errors.\nLet's use the advised pattern on the module page to start with. The logic here is that a response can still be \"successful\" even if it comes back with an error code. Their pattern should be able to catch that.\nOk, here's my code now:\n\nSkip code block ▼\nconst fetch = (...args) =>\timport(\"node-fetch\").then(({ default: fetch }) => fetch(...args));const ua =\t\"facebookexternalhit/1.1 (+http://www.facebook.com/externalhit_uatext.php)\";const getRequestHeaders = () => {\treturn {\t\tcookie: \"\",\t\t\"Accept-Language\": \"en-US,en;q=0.8\",\t\t\"User-Agent\": ua,\t};};class HTTPResponseError extends Error {\tconstructor(response, ...args) {\t\tsuper(\t\t\t`HTTP Error Response: ${response.status} ${response.statusText}`,\t\t\t...args\t\t);\t\tthis.response = response;\t}}const checkStatus = (response) => {\tif (response.ok) {\t\t// response.status >= 200 && response.status < 300\t\treturn response;\t} else {\t\tthrow new HTTPResponseError(response);\t}};const fetchUrl = async (url) => {\ttry {\t\tconst response = await fetch(url, {\t\t\tmethod: \"get\",\t\t\theader: getRequestHeaders(),\t\t});\t} catch (e) {\t\tconsole.error(\"Fetch Error\", e.response.text());\t}\tcheckStatus(response);};\nLet's add this to the module export and see if some basic requests work. Let's make a basic request that we know will respond to the GitHub API. Getting the head of this project's main commit tree should work just fine. Let's request https://api.github.com/repos/AramZS/devblog/git/refs/heads/main.\nOk, so what does a fetch returned object look like?\n\nSkip code block ▼\n{ size: 0,  type: 'default',  url: 'https://api.github.com/repos/AramZS/devblog/git/refs/heads/main',  status: 200,  ok: true,  redirected: false,  statusText: 'OK',  headers:   { get: [Function: get],     forEach: [Function: forEach],     values: [Function: values],     entries: [Function: entries],     append: [Function],     delete: [Function],     getAll: [Function],     has: [Function],     set: [Function],     sort: [Function: sort],     keys: [Function] },  clone: [Function: clone],  body:   { _writeState: [ 0, 0 ],     _readableState:      { objectMode: false,        highWaterMark: 16384,        buffer: [Object],        length: 0,        pipes: [],        flowing: null,        ended: false,        endEmitted: false,        reading: false,        constructed: true,        sync: false,        needReadable: false,        emittedReadable: false,        readableListening: false,        resumeScheduled: false,        errorEmitted: false,        emitClose: true,        autoDestroy: true,        destroyed: false,        errored: null,        closed: false,        closeEmitted: false,        defaultEncoding: 'utf8',        awaitDrainWriters: null,        multiAwaitDrain: false,        readingMore: false,        dataEmitted: false,        decoder: null,        encoding: null },     _events:      { prefinish: [Function: prefinish],        close: [Object],        end: [Function: onend],        finish: [Object],        error: [Object],        unpipe: [Function: onunpipe] },     _eventsCount: 6,     _maxListeners: undefined,     _writableState:      { objectMode: false,        highWaterMark: 16384,        finalCalled: false,        needDrain: false,        ending: false,        ended: false,        finished: false,        destroyed: false,        decodeStrings: true,        defaultEncoding: 'utf8',        length: 61,        writing: true,        corked: 0,        sync: false,        bufferProcessing: false,        onwrite: [Function: bound onwrite],        writecb: [Function: nop],        writelen: 61,        afterWriteTickInfo: null,        buffered: [],        bufferedIndex: 0,        allBuffers: true,        allNoop: true,        pendingcb: 1,        constructed: true,        prefinished: false,        errorEmitted: false,        emitClose: true,        autoDestroy: true,        errored: null,        closed: false,        closeEmitted: false,        getBuffer: [Function: getBuffer] },     allowHalfOpen: true,     bytesWritten: 0,     _handle:      { onerror: [Function: zlibOnError],        buffer: <Buffer 1f 8b 08 00 00 00 00 00 00 03 9d 8e 3f 6b c3 30 10 47 bf 8b e6 10 d9 8e 89 6b 43 86 40 e9 9f 80 92 a1 34 05 2f e5 24 9d 2d 15 cb 12 96 62 a8 43 be 7b ... 11 more bytes>,        cb: [Function],        availOutBefore: 16384,        availInBefore: 61,        inOff: 0,        flushFlag: 2,        write: [Function: write],        writeSync: [Function: writeSync],        close: [Function: close],        init: [Function: init],        params: [Function: params],        reset: [Function: reset],        getAsyncId: [Function: getAsyncId],        asyncReset: [Function: asyncReset],        getProviderType: [Function: getProviderType] },     _outBuffer: <Buffer 7b 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 00 00 00 00 00 00 00 c3 00 00 00 00 00 00 00 e0 bd 80 f2 e8 7f 00 00 20 b8 80 f2 e8 7f 00 00 00 00 ... 16334 more bytes>,     _outOffset: 0,     _chunkSize: 16384,     _defaultFlushFlag: 2,     _finishFlushFlag: 2,     _defaultFullFlushFlag: 3,     _info: undefined,     _maxOutputLength: 4294967296,     _level: -1,     _strategy: 0,     params: [Function: params],     _closed: false,     bytesRead: 0,     reset: [Function],     _flush: [Function],     _final: [Function],     flush: [Function],     close: [Function],     _destroy: [Function],     _transform: [Function],     _processChunk: [Function],     _write: [Function],     _read: [Function],     write: [Function],     cork: [Function],     uncork: [Function],     setDefaultEncoding: [Function: setDefaultEncoding],     _writev: null,     end: [Function],     destroy: [Function: destroy],     _undestroy: [Function: undestroy],     push: [Function],     unshift: [Function],     isPaused: [Function],     setEncoding: [Function],     read: [Function],     pipe: [Function],     unpipe: [Function],     on: [Function],     addListener: [Function],     removeListener: [Function],     off: [Function],     removeAllListeners: [Function],     resume: [Function],     pause: [Function],     wrap: [Function],     iterator: [Function],     setMaxListeners: [Function: setMaxListeners],     getMaxListeners: [Function: getMaxListeners],     emit: [Function: emit],     prependListener: [Function: prependListener],     once: [Function: once],     prependOnceListener: [Function: prependOnceListener],     listeners: [Function: listeners],     rawListeners: [Function: rawListeners],     listenerCount: [Function: listenerCount],     eventNames: [Function: eventNames] },  bodyUsed: false,  arrayBuffer: [Function: arrayBuffer],  blob: [Function: blob],  json: [Function: json],  text: [Function: text] }\nOk, this is pretty standard, we can get the body as JSON or as Text by using awaited functions. So I can check for a string that I expect inside that text and that will be there no matter when I make the HTTP request.\n\nSkip code block ▼\ndescribe(\"handle basic requests\", function () {\t\tthis.timeout(5000);\t\tit(\"should resolve a basic URL\", async function () {\t\t\tconst result = await linkModule(\t\t\t\t\"https://api.github.com/repos/AramZS/devblog/git/refs/heads/main\"\t\t\t);\t\t\tresult.status.should.equal(200);\t\t\tconst textResponse = await result.text();\t\t\tconsole.log(textResponse);\t\t\ttextResponse\t\t\t\t.includes(\t\t\t\t\t'\"url\":\"https://api.github.com/repos/AramZS/devblog/git/refs/heads/main\"'\t\t\t\t)\t\t\t\t.should.equal(true);\t\t});\t});\nThat works! This is a good test.\nOk, I want to look up how to create oEmbeds (where they're available). I've done a lot with scraping pages but I've never done oEmbed. How does it work? Let's look around.\nIt looks like the standard is described in a pretty basic way here. It looks like the relevant code for WordPress is over here. There are two popular options oembed and oembed-parser.\nThis is interesting. I'd always assumed oEmbeds were based off HEAD data, but it looks like sites declare an endpoint from which to retrieve them?\noembed-parser looks up to date and well maintained. I think I'll try pulling that in.\nIt looks like, should any of the links be Facebook, I'll need a Facebook API key. I want to design this to be extended to other projects, so let's set up the function that way.\nAnd Now we have a pretty basic oEmbed functionality. Let's see what I get as a test result.\nOk, first step is to log the result. Here's what I get\n\nSkip code block ▼\n{  type: 'photo',  flickr_type: 'photo',  title: 'upload',  author_name: 'AramZS',  author_url: 'https://www.flickr.com/photos/aramzs/',  width: 640,  height: 640,  url: 'https://live.staticflickr.com/2941/33763840540_481ce97db2_z.jpg',  web_page: 'https://www.flickr.com/photos/aramzs/33763840540/',  thumbnail_url: 'https://live.staticflickr.com/2941/33763840540_481ce97db2_q.jpg',  thumbnail_width: 150,  thumbnail_height: 150,  web_page_short_url: 'https://flic.kr/p/TrAvtJ',  license: 'Attribution License',  license_url: 'https://creativecommons.org/licenses/by/2.0/',  license_id: '4',  html: '<a data-flickr-embed=\"true\" href=\"https://www.flickr.com/photos/aramzs/33763840540/\" title=\"upload by AramZS, on Flickr\"><img src=\"https://live.staticflickr.com/2941/33763840540_481ce97db2_z.jpg\" width=\"640\" height=\"640\" alt=\"upload\"></a><script async src=\"https://embedr.flickr.com/assets/client-code.js\" charset=\"utf-8\"></script>',  version: '1.0',  cache_age: 3600,  provider_name: 'Flickr',  provider_url: 'https://www.flickr.com/'}\nOk, I can test for that. I should really modal the response instead of making an actual HTTP request, but for now this is a good place to be. Last thing I want to test is if it can make a request to Facebook.\nHmm, trying some URLs and all I'm getting is nulls. That's annoying.\nOk, well, I'm hungry for dinner, so let's stop here.\ngit commit -am \"Getting the Link Request modules requesting and testing oembed\"\n\n                    \n                    \n                    \n                ",
			"length": 11838,
			"excerpt": "I want to share lists of links, but make them readable and archived",
			"byline": "Aram Zucker-Scharff",
			"dir": null,
			"siteName": "Fight With Tools: A Dev Blog",
			"lang": "en-US"
		},
		"finalizedMeta": {
			"title": "Day 2: Building a tool to generate context pages",
			"description": "I want to share lists of links, but make them readable and archived",
			"author": {
				"@type": "PronounceableText",
				"inLanguage": "en-US",
				"textValue": "Aram Zucker-Scharff",
				"speechToTextMarkup": "IPA",
				"phoneticText": "/ˌæ.ɹəm ˈt͡sʊ.kɚ 'ʃɑɹf/"
			},
			"creator": {
				"@type": "PronounceableText",
				"inLanguage": "en-US",
				"textValue": "Aram Zucker-Scharff",
				"speechToTextMarkup": "IPA",
				"phoneticText": "/ˌæ.ɹəm ˈt͡sʊ.kɚ 'ʃɑɹf/"
			},
			"publisher": "Fight With Tools",
			"date": "Sun, 09 Jan 2022 02:59:43 GMT",
			"subject": "Context Pages",
			"image": "https://fightwithtools.dev/img/close-up-keys.jpg",
			"topics": [
				"posts",
				"projects",
				"11ty",
				"Node",
				"WiP",
				"fetch",
				"Context Pages"
			]
		},
		"jsonLd": {
			"@type": "Blog",
			"headline": "Day 2: Building a tool to generate context pages",
			"description": false,
			"image": [
				"https://fightwithtools.dev/img/close-up-keys.jpg"
			],
			"mainEntityOfPage": {
				"@type": false,
				"@id": false
			},
			"datePublished": false,
			"dateModified": false,
			"isAccessibleForFree": "True",
			"isPartOf": {
				"@type": [
					"CreativeWork",
					"Product"
				],
				"name": "Fight With Tools",
				"productID": "fightwithtools.dev"
			},
			"discussionUrl": "https://twitter.com/search?q=to%3AChronotope%20%23dev&src=typed_query&f=top",
			"license": "http://creativecommons.org/licenses/by-sa/4.0/",
			"author": {
				"@type": "Person",
				"name": {
					"@type": "PronounceableText",
					"inLanguage": "en-US",
					"textValue": "Aram Zucker-Scharff",
					"speechToTextMarkup": "IPA",
					"phoneticText": "/ˌæ.ɹəm ˈt͡sʊ.kɚ 'ʃɑɹf/"
				},
				"description": "Aram Zucker-Scharff is Lead Privacy Engineer at The Washington Post, lead dev for PressForward and a consultant. Tech solutions for journo problems.",
				"disambiguatingDescription": "A media-focused developer and strategist.",
				"sameAs": "http://aramzs.github.io/aramzs/",
				"image": {
					"@type": "ImageObject",
					"url": "https://raw.githubusercontent.com/AramZS/aramzs.github.io/master/_includes/Aram-Zucker-Scharff-square.jpg"
				},
				"givenName": "Aram",
				"familyName": "Zucker-Scharff",
				"alternateName": "AramZS",
				"publishingPrinciples": "http://aramzs.github.io/about/"
			},
			"publisher": {
				"@type": "Organization",
				"name": "Fight With Tools",
				"description": "A site discussing how to imagine, build, analyze and use cool code and web tools. Better websites, better stories, better developers. Technology won't save the world, but you can.",
				"sameAs": "https://fightwithtools.dev/",
				"logo": {
					"@type": "ImageObject",
					"url": "https://fightwithtools.dev/img/close-up-keys.jpg"
				},
				"publishingPrinciples": "http://aramzs.github.io/about/"
			},
			"editor": {
				"@type": "Person",
				"name": {
					"@type": "PronounceableText",
					"inLanguage": "en-US",
					"textValue": "Aram Zucker-Scharff",
					"speechToTextMarkup": "IPA",
					"phoneticText": "/ˌæ.ɹəm ˈt͡sʊ.kɚ 'ʃɑɹf/"
				},
				"description": "Aram Zucker-Scharff is Lead Privacy Engineer at The Washington Post, lead dev for PressForward and a consultant. Tech solutions for journo problems.",
				"disambiguatingDescription": "A media-focused developer and strategist.",
				"sameAs": "http://aramzs.github.io/aramzs/",
				"image": {
					"@type": "ImageObject",
					"url": "https://raw.githubusercontent.com/AramZS/aramzs.github.io/master/_includes/Aram-Zucker-Scharff-square.jpg"
				},
				"givenName": "Aram",
				"familyName": "Zucker-Scharff",
				"alternateName": "AramZS",
				"publishingPrinciples": "http://aramzs.github.io/about/"
			},
			"@context": "http://schema.org",
			"url": "https://fightwithtools.dev/posts/projects/context-pages/day-2/",
			"about": "I want to share lists of links, but make them readable and archived",
			"inLanguage": "en-US",
			"additionalType": "CreativeWork",
			"alternateName": "Fight With Tools Dev"
		},
		"twitterObj": false,
		"status": 200,
		"metadata": {
			"author": "Aram Zucker-Scharff",
			"title": "Day 2: Building a tool to generate context pages",
			"description": "I want to share lists of links, but make them readable and archived",
			"canonical": "https://fightwithtools.dev/posts/projects/context-pages/day-2/",
			"keywords": [
				"posts",
				"projects",
				"11ty",
				"Node",
				"WiP",
				"fetch"
			],
			"image": "https://fightwithtools.dev/img/close-up-keys.jpg",
			"firstParagraph": "Ok, let's set up the request process. I want to retrieve the page so let's move forward on that as the next step."
		},
		"dublinCore": {},
		"opengraph": {
			"title": "Day 2: Building a tool to generate context pages",
			"description": "I want to share lists of links, but make them readable and archived",
			"url": "https://fightwithtools.dev/posts/projects/context-pages/day-2/",
			"site_name": "Fight With Tools: A Dev Blog",
			"locale": "en_US",
			"type": "article",
			"typeObject": {
				"published_time": "Sun, 09 Jan 2022 02:59:43 GMT",
				"modified_time": false,
				"author": "http://facebook.com/aramzs",
				"publisher": "https://www.facebook.com/aramzs",
				"section": "Context Pages",
				"tag": [
					"posts",
					"projects",
					"11ty",
					"Node",
					"WiP",
					"fetch"
				]
			},
			"image": "https://fightwithtools.dev/img/close-up-keys.jpg"
		},
		"twitter": {
			"site": "@chronotope",
			"description": "I want to share lists of links, but make them readable and archived",
			"card": "summary_large_image",
			"creator": "@chronotope",
			"title": "Day 2: Building a tool to generate context pages",
			"image": "https://fightwithtools.dev/img/close-up-keys.jpg"
		},
		"archivedData": {
			"link": "https://web.archive.org/web/20221110012608/https://fightwithtools.dev/posts/projects/context-pages/day-2/",
			"wayback": "https://web.archive.org/web/20221110012608/https://fightwithtools.dev/posts/projects/context-pages/day-2/"
		}
	},
	"localImage": "/assets/images/contexter/httpsfightwithtoolsdevpostsprojectscontext-pagesday-2//Users/zuckerscharffa/Dev/context-center/_contexterCache/images/httpsfightwithtoolsdevpostsprojectscontext-pagesday-2/close-up-keys.jpg"
}
