{"initialLink":"https://www.baldurbjarnason.com/2024/new-web-dev/","sanitizedLink":"https://www.baldurbjarnason.com/2024/new-web-dev/","finalLink":"https://www.baldurbjarnason.com/2024/new-web-dev/","htmlEmbed":"<script>window.contexterSetup=window.contexterSetup||function(){window.contexterSetupComplete=!0;class ContexterLink extends HTMLAnchorElement{constructor(){super()}connectedCallback(){this.setAttribute(\"target\",\"_blank\")}}customElements.define(\"contexter-link\",ContexterLink,{extends:\"a\"}),customElements.define(\"contexter-inner\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"contexter-box__inner\"}}),customElements.define(\"contexter-thumbnail\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"contexter-box__thumbnail\"}}),customElements.define(\"contexter-byline\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"contexter-box__byline\"}}),customElements.define(\"contexter-keywordset\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"contexter-box__keywordset\"}}),customElements.define(\"contexter-linkset\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"contexter-box__linkset\"}}),customElements.define(\"contexter-meta\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"contexter-box__meta\"}}),customElements.define(\"contexter-summary\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"p-summary entry-summary\"}}),customElements.define(\"contexter-box-head\",class extends HTMLElement{constructor(){super()}connectedCallback(){this.className=\"contexter-box__head\"}}),customElements.define(\"contexter-box-inner\",class extends HTMLElement{constructor(){super()}connectedCallback(){}});class ContexterBox extends HTMLElement{constructor(){super(),this.first=!0,this.shadow=this.attachShadow({mode:\"open\"})}connectedCallback(){if(this.first){this.first=!1;var style=document.createElement(\"style\"),lightDomStyle=(style.innerHTML=`:host {--background: #f5f6f7;--border: darkblue;--blue: #0000ee;--font-color: black;--inner-border: black;font-family: Franklin,Arial,Helvetica,sans-serif;font-size: 14px;background: var(--background);width: 600px;color: var(--font-color);min-height: 90px;display: block;padding: 8px;border: 1px solid var(--border);cursor: pointer;box-sizing: border-box;margin: 6px;contain: content;margin: 6px auto;}// can only select top-level nodes with slotted::slotted(*) {max-width: 100%;display:block;}::slotted([slot=thumbnail]) {max-width: 100%;display:block;}::slotted([slot=header]) {width: 100%;font-size: 1.25rem;font-weight: bold;display:block;margin-bottom: 6px;}::slotted([slot=author]) {max-width: 50%;font-size: 12px;display:inline-block;float: left;}::slotted([slot=time]) {max-width: 50%;font-size: 12px;display:inline-block;float: right;}::slotted([slot=summary]) {width: 100%;margin-top: 6px;padding: 10px 2px;border-top: 1px solid var(--inner-border);font-size: 15px;display:inline-block;margin-bottom: 6px;}contexter-meta {height: auto;margin-bottom: 4px;width: 100%;display: grid;position: relative;min-height: 16px;grid-template-columns: repeat(2, 1fr);}::slotted([slot=keywords]) {width: 80%;padding: 2px 4px;border-top: 1px solid var(--inner-border);font-size: 11px;display: block;float: right;font-style: italic;text-align: right;grid-column: 2/2;grid-row: 1;align-self: end;justify-self: end;}::slotted([slot=keywords]):empty {border-top: 0px solid var(--inner-border);}::slotted([slot=archive-link]) {font-size: 1em;display: inline;}::slotted([slot=archive-link])::after {content: \"|\";display: inline;color: var(--font-color);text-decoration: none;margin: 0 .5em;}::slotted([slot=read-link]) {font-size: 1em;display: inline;}contexter-linkset {width: 80%;padding: 2px 4px;font-size: 13px;float: left;font-weight: bold;grid-row: 1;grid-column: 1/2;align-self: end;justify-self: start;}/* Extra small devices (phones, 600px and down) */@media only screen and (max-width: 600px) {:host {width: 310px;}}/* Small devices (portrait tablets and large phones, 600px and up) */@media only screen and (min-width: 600px) {...}/* Medium devices (landscape tablets, 768px and up) */@media only screen and (min-width: 768px) {...}/* Large devices (laptops/desktops, 992px and up) */@media only screen and (min-width: 992px) {...}/* Extra large devices (large laptops and desktops, 1200px and up) */@media only screen and (min-width: 1200px) {...}@media (prefers-color-scheme: dark){:host {--background: #354150;--border: #1f2b37;--blue: #55b0ff;--font-color: #ffffff;--inner-border: #787a7c;background: var(--background);border: 1px solid var(--border)}}`,document.createElement(\"style\"));lightDomStyle.innerHTML=`contexter-box {contain: content;}contexter-box .read-link {font-weight: bold;}contexter-box a {color: #0000ee;}contexter-box img {width: 100%;border: 0;padding: 0;margin: 0;}/* Extra small devices (phones, 600px and down) */@media only screen and (max-width: 600px) {...}/* Small devices (portrait tablets and large phones, 600px and up) */@media only screen and (min-width: 600px) {...}/* Medium devices (landscape tablets, 768px and up) */@media only screen and (min-width: 768px) {...}/* Large devices (laptops/desktops, 992px and up) */@media only screen and (min-width: 992px) {...}/* Extra large devices (large laptops and desktops, 1200px and up) */@media only screen and (min-width: 1200px) {...}@media (prefers-color-scheme: dark){contexter-box a {color: #55b0ff;}}`,this.appendChild(lightDomStyle),this.shadow.appendChild(style);const innerContainer=document.createElement(\"contexter-box-inner\"),innerSlotThumbnail=(this.shadow.appendChild(innerContainer),document.createElement(\"slot\")),innerSlotHeader=(innerSlotThumbnail.name=\"thumbnail\",innerContainer.appendChild(innerSlotThumbnail),document.createElement(\"slot\")),innerSlotAuthor=(innerSlotHeader.name=\"header\",innerContainer.appendChild(innerSlotHeader),document.createElement(\"slot\")),innerSlotTime=(innerSlotAuthor.name=\"author\",innerContainer.appendChild(innerSlotAuthor),document.createElement(\"slot\")),innerSlotSummary=(innerSlotTime.name=\"time\",innerContainer.appendChild(innerSlotTime),document.createElement(\"slot\")),metaContainer=(innerSlotSummary.name=\"summary\",innerContainer.appendChild(innerSlotSummary),document.createElement(\"contexter-meta\")),innerSlotInfo=(innerContainer.appendChild(metaContainer),document.createElement(\"slot\")),linkContainer=(innerSlotInfo.name=\"keywords\",metaContainer.appendChild(innerSlotInfo),document.createElement(\"contexter-linkset\")),innerSlotArchiveLink=(metaContainer.appendChild(linkContainer),document.createElement(\"slot\")),innerSlotReadLink=(innerSlotArchiveLink.name=\"archive-link\",linkContainer.appendChild(innerSlotArchiveLink),document.createElement(\"slot\"));innerSlotReadLink.name=\"read-link\",linkContainer.appendChild(innerSlotReadLink),this.className=\"contexter-box\",this.onclick=e=>{if(!e.target.className.includes(\"read-link\")&&!e.target.className.includes(\"title-link\")){const mainLinks=this.querySelectorAll(\"a.main-link\");mainLinks[0].click()}}}}}customElements.define(\"contexter-box\",ContexterBox)},window.contexterSetupComplete||window.contexterSetup();</script><contexter-box class=\"link-card h-entry hentry\" itemscope=\"\" itemtype=\"https://schema.org/CreativeWork\"><contexter-thumbnail class=\"thumbnail\" slot=\"thumbnail\"></contexter-thumbnail><contexter-box-head slot=\"header\" class=\"p-name entry-title\" itemprop=\"headline\"><contexter-box-head slot=\"header\" class=\"p-name entry-title\" itemprop=\"headline\"><a is=\"contexter-link\" href=\"https://www.baldurbjarnason.com/2024/new-web-dev/\" itemprop=\"url\">New Web Development. Or, why Copilots and chatbots are particularly bad for modern web dev</a></contexter-box-head></contexter-box-head><contexter-byline class=\"p-author author\" slot=\"author\"><span class=\"p-name byline\" rel=\"author\" itemprop=\"author\">Baldur Bjarnason</span></contexter-byline><time class=\"dt-published published\" slot=\"time\" itemprop=\"datePublished\" datetime=\"2024-07-10T15:04:55.823Z\">7/10/2024</time><contexter-summary class=\"p-summary entry-summary\" itemprop=\"abstract\" slot=\"summary\"><p>There’s blood in the water. Angry developers, users, and regulatory bodies are circling React and Single-Page-App web development, snapping big chunks out of their sides. The smell of blood just brings more and more critics.</p></contexter-summary><contexter-keywordset itemprop=\"keywords\" slot=\"keywords\"></contexter-keywordset><a is=\"contexter-link\" href=\"https://www.baldurbjarnason.com/2024/new-web-dev/\" class=\"read-link main-link\" itemprop=\"sameAs\" slot=\"read-link\">Read</a></contexter-box>","linkId":"27c2399bb7107c995ab870f112443e63272923ce","data":{"originalLink":"https://www.baldurbjarnason.com/2024/new-web-dev/","sanitizedLink":"https://www.baldurbjarnason.com/2024/new-web-dev/","canonical":"https://www.baldurbjarnason.com/2024/new-web-dev/","htmlText":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <script type=\"module\" src=\"/sw-register.js\"></script>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    \n    \n    \n    <title>New Web Development. Or, why Copilots and chatbots are particularly bad for modern web dev – Baldur Bjarnason</title>\n    \n    \n    <meta\n      name=\"description\"\n      content=\"There&rsquo;s blood in the water. Angry developers, users, and regulatory bodies are circling React and Single-Page-App web development, snapping big chunks out of their sides. The smell of blood just brings more and more critics.\"\n    />\n    \n    \n    <meta name=\"twitter:site\" content=\"@fakebaldur\" />\n    <meta name=\"twitter:card\" content=\"summary\" />\n    <meta name=\"twitter:title\" content=\"New Web Development. Or, why Copilots and chatbots are particularly bad for modern web dev\" />\n    <meta\n      name=\"twitter:description\"\n      content=\"There&rsquo;s blood in the water. Angry developers, users, and regulatory bodies are circling React and Single-Page-App web development, snapping big chunks out of their sides. The smell of blood just brings more and more critics.\"\n    />\n    <meta name=\"twitter:image\" content=\"https://www.baldurbjarnason.com/favicon-96x96.png\" />\n    \n    \n    \n    \n    <meta name=\"og:title\" content=\"New Web Development. Or, why Copilots and chatbots are particularly bad for modern web dev\" />\n    <meta\n      name=\"og:description\"\n      content=\"There&rsquo;s blood in the water. Angry developers, users, and regulatory bodies are circling React and Single-Page-App web development, snapping big chunks out of their sides. The smell of blood just brings more and more critics.\"\n    />\n    <meta name=\"og:image\"\n    content=\"https://www.baldurbjarnason.com//icon.png\">\n    <meta name=\"og:url\" content=\"https://www.baldurbjarnason.com/2024/new-web-dev/\" />\n    <meta name=\"og:site_name\" content=\"Baldur Bjarnason\" />\n    <meta name=\"og:type\" content=\"article\" />\n    \n    <meta name=\"article:author\" content=\"https://www.baldurbjarnason.com/\" />\n    <meta name=\"author\" content=\"Baldur Bjarnason\" />\n    <meta name=\"article:tag\" content=\"\" />\n    <link href=\"/fonts/literata/literata.css\" rel=\"stylesheet\" />\n    \n    <link rel=\"stylesheet\" href=\"/styles/main.min.5b97949ea731174511b377ccc411136cc70a515613dd1dc4ad1863be6b57c362.css\" />\n     \n\n    <link href=\"/stylesheets/syntax.css\" rel=\"stylesheet\" />\n    <link href=\"https://www.baldurbjarnason.com/feed.xml\" rel=\"alternate\"\n    type=\"application/rss+xml\" title=\"All posts for Baldur Bjarnason\" > <link\n    href=\"https://www.baldurbjarnason.com/index.xml\" rel=\"feed\" type=\"application/rss+xml\"\n    title=\"All posts for Baldur Bjarnason\" >\n    <link href=\"https://micro.blog/baldur\" rel=\"me\" />\n     \n    \n     \n    \n    \n    <link rel=\"manifest\" href=\"/manifest.json\" />\n    <script\n      defer\n      data-domain=\"baldurbjarnason.com\"\n      src=\"https://plausible.io/js/script.js\"\n    ></script>\n    <link rel=\"icon\" href=\"/dark-bird.svg\" type=\"image/svg+xml\" />\n  </head>\n  <body class=\"page\">\n    <nav class=\"Top\" aria-label=\"Site navigation\">\n      <ul>\n        \n        <li><a href=\"/archive\">Archive</a></li>\n        \n        <li><a href=\"https://softwarecrisis.dev/\">Newsletter</a></li>\n        <li><a href=\"/work/2021/\">Work</a></li>\n        \n        \n        <li><a href=\"mailto:baldur.bjarnason@gmail.com\">Contact</a></li>\n      </ul>\n    </nav>\n    <header class=\"header\">\n      <div class=\"Description\">\n        <div class=\"Title\"><a href=\"/\">Baldur Bjarnason</a></div>\n        \n        <p class=\"Tagline\">\n          <em>Web dev at the end of the world, from Hveragerði, Iceland</em>\n        </p>\n\n        \n      </div>\n    </header>\n\n    \r\n\r\n<main class=\" new-web-development-or-why-copilots-and-chatbots-are-particularly-bad-for-modern-web-dev\">\r\n  <div class=\"FrontBody\">\r\n    <header id=\"start\">\r\n      <aside class=\"Date\">\n  <time datetime=\"2024-07-01T14:27:00Z\"\n    >1 July 2024</time\n  >\n</aside>\n\r\n      <h1>New Web Development. Or, why Copilots and chatbots are particularly bad for modern web dev</h1>\r\n      \n\r\n    </header>\r\n    <article class=\"post\">\n  \n <p>There&rsquo;s blood in the water. Angry developers, users, and regulatory bodies are circling React and Single-Page-App web development, snapping big chunks out of their sides. The smell of blood just brings more and more critics.</p>\n<ul>\n<li><a href=\"https://blog.frankmtaylor.com/2024/06/20/a-rant-about-front-end-development/\">&ldquo;JavaScript is not always the answer&rdquo;</a>.</li>\n<li><a href=\"https://gomakethings.com/your-site-or-app-should-work-as-much-as-possible-without-javascript/\">&ldquo;The web is more capable than ever, yet the sites and apps we use feel more slow and fragile than ever.&quot;</a>.</li>\n<li><a href=\"https://blog.jim-nielsen.com/2024/futuristic-progressive-enhanement/\">&ldquo;We’re all tired of: write some code, come back to it in six months, try to make it do more, and find the whole project is broken until you upgrade everything.&quot;</a></li>\n</ul>\n<p>It&rsquo;s finally safe to point out the flaws in the status quo without risking your job, both because more and more people are voicing their concerns, but also because so many have already <em>been</em> fired. What&rsquo;re they going to do, fire you again?</p>\n<p>With nothing to lose, we might as well point out what&rsquo;s broken.</p>\n<p>At the same time, the exact people who cause the shit storm of broken websites and plodding web apps &ndash; management &ndash; are finally receptive because they now have to get things done with fewer people and at a lower price.</p>\n<p>Shit actually needs to work now, because tech can&rsquo;t coast on &ldquo;AI&rdquo; funding forever. They know this. We know this.</p>\n<p>Web development is on the verge of a <em>paradigm shift.</em></p>\n<p><em>Paradigm</em> is a term that&rsquo;s easy to dismiss and wave off with a mocking hand. It&rsquo;s been overused &ndash; turned into a word salad cliche by executives and consultants &ndash; but the fundamental idea has a core truth that helps us understand how fields and professional practices change.</p>\n<p>A <em>paradigm</em> is a mental model or worldview that&rsquo;s defined through exemplary examples. That&rsquo;s how it was originally defined. Thomas S. Kuhn, in his book <em>The Structure of Scientific Revolutions,</em> had to choose between two different words for his concept: <em>exemplar</em> and <em>paradigm</em>, both roughly meaning the same. He chose paradigm.</p>\n<p>Gmail was the exemplar that defined the <em>ajax</em> paradigm of thinking about web development.</p>\n<p>Facebook was the exemplar that defined the <em>React</em> and <em>Component</em> paradigm of web app development.</p>\n<p>A paradigm is a way of thinking about practical problems in the field using and exemplar as a reference. As the paradigm matures, it gains more exemplars (<em>Twitter</em>, <em>web-based MS Word</em>, etc) and those <em>examples</em> converge on a set of &ldquo;best practices&rdquo;.</p>\n<p>The best practices are <em>derived</em> from example, not the other way around. Facebook didn&rsquo;t converge on their best practices until after they&rsquo;d delivered a mature app using React.</p>\n<p>The important consequence of switching to a new a new paradigm &ndash; mental model &ndash; is that many formerly intractable problems suddenly become solvable. A complex social media app made by a literal army of developers would have been impossible witout the component model. Facebook would not have managed to deliver a workable app with the earlier <a href=\"https://en.wikipedia.org/wiki/Ajax_(programming)\"><em>Ajax</em></a> paradigm and a traditional <a href=\"https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller\"><em>Model-View-Container</em></a> architecture.</p>\n<p>A paradigm offers a new way of looking at problems, which enables new solutions that would have been impossible to predict or conceive of in the older worldview.</p>\n<p>A paradigm, originally popularised by Thomas S. Kuhn in his book <em>The Structure of Scientific Revolutions,</em> is a mental model or a worldview that helps explain why and how a particular thing works.</p>\n<p>Newtonian physics was a paradigm. It explained the mechanics of motion, gravity, and mass in ways that was <em>predictive</em> and <em>practical</em>. You could use the model to guide further work in both physics and engineering. But as science progressed we discovered more and more exceptions and outliers that the model couldn’t explain which made it useless for work in those areas. As a mental model, it went from being an aid to a hindrance.</p>\n<p>Einstein’s theory of relativity explained those outliers, while still being useful for all of the prior examples of Newtonian mechanics, and helped predict future work that would have been impossible using the Newtonian way of thinking.</p>\n<p>When the older paradigm ceases to be useful and begins to be replaced by a new paradigm that is <em>more</em> useful, that’s <em>a paradigm shift</em>.</p>\n<p>As I wrote above paradigms aren’t defined by theory but through example. If Newtonian physics had been confined to just Newton’s writings, it wouldn’t have become a paradigm. What defines a paradigm <em>is the work done in the field</em>. That it was used as a foundation for future theories, academic practice, and to guide engineering and other work is what made it a paradigm.</p>\n<p>This is also why paradigm shifts are messy. They aren’t all-or-nothing because the older paradigm continues to work for many of its intended use cases. The transition takes time and may never complete fully. We still apply Newtonian mechanics to this day. We&rsquo;ll still be using React web apps years from now.</p>\n<p>Exactly how much time a shift takes depends on the value of the <em>new</em> kind of work that the incoming paradigm enables and the rate of churn in the industry or field. An older paradigm in a mature field may never be fully replaced until all of its adherents age out or die.</p>\n<p>The paradigm shift that web development is entering hinges on the fact that while React was a key enabler of the <em>Single-Page-App</em> and <em>Component</em> era of the web, in practice it normally tends to result in extremely poor <em>products</em>. Built-in browser APIs are now much more capable than they were when React was first invented.</p>\n<ul>\n<li>Websites and web apps made in React tend to be slower than those made in other frameworks and <em>much</em> slower than those made using just the built-in/DOM APIs necessary to fulfil the product&rsquo;s requirements. It’s built for an era when those capabilities didn’t exist natively in the browser so the inherent performance issues didn’t matter. Slow was better than not at all, but that isn’t a trade-off we have to make anymore.</li>\n<li>Many popular React approaches tend to be inaccessible by default. Accessibility is increasingly both a hard legal requirement and positive business investments. (Accessibility features usually benefit a plurality of a service’s customers, just in varying degrees. The benefit isn’t exclusive to a a single demographic. Accessibility work also tends to be a source of innovation as it drives research into new modes of interactivity.)</li>\n<li>React apps tend to be disproportionately <em>complex</em>. Or, to be more specific, React apps have a baseline complexity that exists due to the unavoidably thick abstraction layer over the base browser platform. This ratchets up the implementation and design complexity of many small- to mid-sized apps by a notch or several.</li>\n<li>The various popular approaches to state management for React usually only let you choose which <em>flavour</em> of complicated spaghetti code you end up with, not avoid it altogether.</li>\n<li>They tend to have poor support for low- to mid-ranged devices and connections.</li>\n<li>Framework churn &ndash; the constant release of partially-incompatible versions &ndash; makes <em>maintenance</em> of React-based projects much more expensive than those built on standardised browser APIs, which in practice never change once they get widely supported. This cost can be enormous in the long term.</li>\n</ul>\n<p>React has been great for <a href=\"https://www.baldurbjarnason.com/2024/react-electron-llms-labour-arbitrage/\">commodifying developers</a>. By forcing all web development into the same shape and size, you make recruitment easier and can more easily force the structure of your development teams to conform to your organisation’s whims. This was great during the period when investors considered developer headcounts and escalating team sizes to be a positive signal for their investment, but it’s no longer useful now that the same crowd arbitrarily considers those same measures to be a <em>negative</em> signal.</p>\n<p>Changing attitudes among investors, toxic influences as they are, took the “tailwind”, <a href=\"https://en.wikipedia.org/wiki/Headwind_and_tailwind\">so to speak</a>, out of React’s sails, making it more acutely noticeable that it’s a generally poor fit to modern web projects.</p>\n<p>People are noticing. We’re starting to see more and more reports of teams and organisations who are switching away from React and seeing both performance and productivity gains as a result.</p>\n<p>For example:</p>\n<blockquote>\n<p>“We were completely surprised by the speed gain,” Moulis said. “Our application engine is designed to produce complex ERP-type applications, which involve heavy data consumption to present in real-time. On a page we consider complex, with over 800 DOM elements, some of which use different subscription systems via our event system at initialization to update when necessary, the overall load time dropped from 4-5 seconds to 400ms.”</p>\n<p>As well as speed gains, the user interactions markedly improved, said Moulis.</p>\n<p><a href=\"https://thenewstack.io/pivoting-from-react-to-native-dom-apis-a-real-world-example/\"><em>Pivoting From React to Native DOM APIs: A Real World Example</em></a></p>\n</blockquote>\n<p>But there’s a problem. After years of industry disinterest in training for fundamentals, such as CSS, HTML, or built-in platform APIs, those who are switching are finding that neither their organisation nor the job market seem to know how to train or find people with these skill sets.</p>\n<p>From the above report:</p>\n<blockquote>\n<p>He added that finding developers who know vanilla JavaScript and not just the frameworks was an “unexpected difficulty.”</p>\n</blockquote>\n<p>This may be unexpected to those used to the meatgrind of the developer pipeline consistently, just crank the handle to get a fresh batch of identikit React coders delivered. Thow developers in turn have never been given the opportunity to broaden their skill sets.</p>\n<p>To those of us outside the React community it’s been a slow motion train wreck unfolding over several years. We’ve been watching developers reach for bloated React components long since been made obsolete by <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\">single</a><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/position#sticky\">lines</a> of CSS code or DOM API calls, not because they had a concrete practical reason to do so, but because they simply weren’t aware of just how powerful the web platform has become. It’s been obvious for a long while that most web developer training isn’t for making you a web developer with a broad foundation. It’s for turning you into a homogenous React unit that management can freely move around on their org charts.</p>\n<p>Now those people risk being left behind &ndash; effectively betrayed by the training and recruitment industry that had “standardised” on React.</p>\n<p>As the web developer (and extremely astute observer of many things) Marco Rogers <a href=\"https://social.polotek.net/@polotek/112617566060238200\">said on Mastodon the other day</a>:</p>\n<blockquote>\n<p>This has been brewing in my head for a long time. The frontend ecosystem is kind of broken right now. And it&rsquo;s frustrating to me for a few different reasons. New developers are having an extremely hard time learning enough skills to be gainfully employed. They are drowning in this complex garbage and feeling really disheartened. As a result, companies are finding it more difficult to do basic hiring. The bar is so high just to get a regular dev job. And everybody loses.</p>\n<p>What&rsquo;s even worse is that I believe a lot of this energy is wasted. People that are learning the current tech ecosystem are absolutely not learning web fundamentals. They are too abstracted away. And when the stack changes again, these folks are going to be at a serious disadvantage when they have to adapt away from what they learned. It&rsquo;s a deep disservice to people&rsquo;s professional careers, and it&rsquo;s going to cause a lot of heartache later.</p>\n</blockquote>\n<p>The organisations themselves are under increasing pressure to lower costs. Investors want less money spent on software development, primarily through lower pay and fewer developers, but the overall desire to lower costs underlies both demands. That’s one of the drivers of the paradigm shift: projects built on DOM APIs are cheaper to maintain because once an API is a standard, browsers are <em>extremely</em> hesitant to change them. Frameworks, conversely, change every season in ways that break your code again and again.</p>\n<p>Again from <a href=\"https://social.polotek.net/@polotek/112617500867891048\">Marco Rogers’ thread</a> I quoted above:</p>\n<blockquote>\n<p>I always have to start with the cynical take. It&rsquo;s just how I am. But I do want to talk about what I think should be happening instead.</p>\n<p>Companies that want to reduce the cost of their frontend tech becoming obsoleted so often should be looking to get back to fundamentals. Your teams should be working closer to the web platform with a lot less complex abstractions. We need to relearn what the web is capable of and go back to that.</p>\n</blockquote>\n<p>Organisations are caught in a bind. They are being pressured to lower costs but to take advantage of one of the more concrete and empirically validated cost-cutting measure (getting back to fundamentals and using simpler abstractions) requires either retraining developers or recruiting developers who are disproportionally senior: people who originally came into the field <em>before</em> React completely took over.</p>\n<p>And senior people are both in shorter supply and more expensive when you can find them.</p>\n<p>(There’s also the issue of age prejudice in the tech industry, but let’s leave that topic for a later day.)</p>\n<p>Developers have rightly focused on acquiring skills that pay the bills: <em>React</em>.</p>\n<p>Organisations have, rightly or wrongly, focused on recruiting developers whose skillsets made them more easily slotted wherever and whenever the org chart du jour required it.</p>\n<p>Those who <em>train</em> or <em>teach</em> web development have followed suit. Courses, ebooks, and videos that focus on core <em>built-in</em> APIs, CSS, and HTML are the exception, not the norm.</p>\n<p>Effectively, everybody wants to build the training infrastructure the new paradigm needs…</p>\n<p><strong><em>But nobody wants to pay for it.</em></strong></p>\n<p>Enter, chatbots and copilots.</p>\n<p>I, and other people who have been writing about web development, keep hearing two kinds of reports on how people are using LLMs.</p>\n<ol>\n<li>Developers use chatbots to “teach themselves” vanilla JS, CSS, or HTML.</li>\n<li>And they use it to generate vanilla JS code, either by describing a problem they’d normally solve using React to a chatbot or by prompting a copilot to autocomplete a solution.</li>\n</ol>\n<p>Organisations don’t mind this, some even outright <em>require</em> it, because they don’t want to invest in retraining their developers. And if an experienced React developer can use a language model to auto-generate enough &ldquo;vanilla&rdquo; JS and CSS code to replace a few junior developers, that represents substantial cost savings to the organisation.</p>\n<p>Even if you believe in the usefulness of language models for coding &ndash; for argument’s sake &ndash; this particular use of an LLM is an extremely bad idea as it leans on these models where they’re weakest: genuine novelty.</p>\n<h2 id=\"why-llms-are-an-extremely-bad-fit-for-new-standards-oriented-web-development\">Why LLMs are an extremely bad fit for new standards-oriented web development</h2>\n<p><a href=\"https://softwarecrisis.dev/letters/ai-and-software-quality/\">I’m not a fan of using Large Language Models for software development</a>, but even if you consider those concers to be either overblown or already solved &ndash; even if you think that copilots and chatbots as implemented today are great tools for software development &ndash; they’re still extremely poor tools for specifically shifting your organisation’s coding practices to a new reality of core platform-oriented web development and for learning how to use the many new features of the web platform.</p>\n<p><em>It’s all down to how a Large Language Model works.</em></p>\n<p>I’m not going to get into the weeds of how these models work, the issue can be explained at a bit of a higher level.</p>\n<p>The core observation that underlies these models is that <em>size matters</em>. The more training data you have for a specific use case, the better the outcomes tend to be. Tools built on Large Language Models are statistical models of a (mostly) textual landscape. The more data they have to derive their statistical modelling from, the better, more plausible, and more realistic the answer tends to be.</p>\n<p>There are limits, of course, and depending on who you ask, we may or may not have already reached that limit as the improvements over the early GPT-4 models have all been incremental at best.</p>\n<p>But, generally, the more training data you have, the better the model is at what it does.</p>\n<p>There are downsides. There are some indications that larger models actually hallucinate <em>more</em> and get less predictable, but it’s hard to tell whether that’s integral to how these methods work or whether it’s down to, well, <a href=\"https://www.baldurbjarnason.com/2023/beware-of-ai-snake-oil/\">the kinds of people who run AI companies.</a> Dishonest people with poor judgment tend to make poor decisions and then try to hide them.</p>\n<p>This size-over-everything characteristic also goes to partially explain why these tools tend to be bias magnifiers.</p>\n<p>The majority of the body of text in the training data is biased. Most of it was written before we had a broader cultural awakening about biased language and, even today, biased language still represents the majority of what you can find on the web &ndash; even of newer writing. It’s merely gone from a super-majority to regular majority.</p>\n<p>The models are expected to statistically boil this broad data set into <em>single answers</em> and the single answer that most accurately represents the broad consensus in the training data is going to be one that’s biased. <em>Always</em>. Prejudice and biased language gets amplified and, because less biased language is a smaller proportion of the training data set, the unbiased answers are at risk of being of a lower quality and a higher <em>overfitting</em> rate.</p>\n<p>The odds of overfitting, or verbatim copies of text from the training data, increases the smaller the portion of the training data the answer draws from. A smaller body of text means less variation in the training data, which occasionally gets amplified into no variation in the answer.</p>\n<p>This represents a problem when faced with a paradigm shift.</p>\n<p><strong><em>Training data sets implicitly represent the status quo &ndash; the old paradigm. By definition, it is useless for modelling of a new paradigm.</em></strong></p>\n<p>It’s the old world and you can’t begin to understand a new unexplored world from maps of the familiar and the already known. It&rsquo;s unexplored. There are no maps.</p>\n<p>A key characteristic of new web development is that modern platform features are <em>underused</em>. This means they are underrepresented, if not entirely non-existent, in all existing data sets. The exemplars haven&rsquo;t been made yet, but we&rsquo;re getting closer with every new project that switches to working with DOM APIs directly.</p>\n<h2 id=\"large-language-models-cant-model-what-doesnt-yet-exist\">Large Language Models can’t model what doesn’t yet exist</h2>\n<p>That’s the core issue here: new web development is in the process of being invented and defined through practice. What it looks like today does not represent its final form. It won’t look like the web development I learned twenty or ten years ago because the platform has evolved.</p>\n<p>It has a number of new and frankly amazing capabilities that are either severely underused by the field at large or almost entirely <em>unused</em>.</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:has\">The :has CSS selector.</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Cascade_layers\">Cascade Layers</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@container\">CSS Containers</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_nesting/Using_CSS_nesting\">CSS Nesting</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties\">Custom CSS properties</a>. (I know people think this is overused. I’m telling you that we haven’t even started.)</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/View_Transitions_API\">View Transitions</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template#shadowrootmode\">Declarative Shadow DOM</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/File_System_API/Origin_private_file_system\">Origin Private File System</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Compression_Streams_API\">Compression Streams</a></li>\n<li>Web streams and async iterators in general</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics\">Atomics and SharedWorkers</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker\">Service Workers</a>. (Using “scope” to modularise service workers, for example, hasn’t been investigated much by the field.)</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Broadcast_Channel_API\">Broadcast Channels</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/type/importmap\">JavaScript modules and import maps</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Trusted_Types_API\">Trusted Types API</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AbortController\">AbortControllers</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@scope\">Scoped CSS</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Using_data_channels\">WebRTC data channels</a></li>\n</ul>\n<p>This is not even close to being a complete list of powerful and underused features of the modern browser platform.</p>\n<p>Some of these are underused because they still have limited availability. Some of them because they’re so new and we’re still trying to figure them out (in between projects, because employers still generally don’t pay for research even if it presents an opportunity for substantial cost savings).</p>\n<p>Some of them, like JavaScript modules and import maps or custom properties, we’re still figuring out because they represent a new way of thinking or have complex implications.</p>\n<p>Modern web applications and websites that build directly on these features are going to be very different from those that translate the React Single-Page-App mode of thinking directly into “vanilla” JS or those that represent what was the status quo over a decade ago.</p>\n<p>New Web Development isn&rsquo;t old <em>old</em> web development. It isn&rsquo;t going to be a nostalgia movement.</p>\n<p>It took five years for the simple <a href=\"https://en.wikipedia.org/wiki/XMLHttpRequest\">XMLHttpRequest</a> component to trigger the evolution of <a href=\"https://en.wikipedia.org/wiki/Ajax_(programming)\"><em>Ajax</em></a>, the precursor paradigm to the React SPA paradigm, and that was in a tech industry that was arguably marginally more functional and coherent than today’s oligopolies.</p>\n<p>We’re still in the progress of inventing this future and a technology that’s as fundamentally <a href=\"https://softwarecrisis.dev/letters/ai-code-quality/\">backwards-facing as Large Language Models</a> is incapable of predicting what it will look like.</p>\n<p>And all the rest of us know is that it&rsquo;s going to be <em>new</em>.</p>\n\n  <footer>\n    <div class=\"FooterNav\">\n      <p class=\"left\">\n        <a href=\"https://www.baldurbjarnason.com/2024/links-23/\"\n          ><svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"16\"\n            height=\"16\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            stroke-width=\"3\"\n            stroke-linecap=\"butt\"\n            stroke-linejoin=\"round\"\n          >\n            <path d=\"M19 12H6M12 5l-7 7 7 7\" />\n          </svg>\n          Links (1 July 2024)</a\n        >&nbsp;\n      </p>\n      <p class=\"right\">\n        <a href=\"https://www.baldurbjarnason.com/2024/ai-asbestos/\"\n          >AI and Asbestos: the offset and trade-off models for large-scale risks are inherently harmful\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"16\"\n            height=\"16\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            stroke-width=\"3\"\n            stroke-linecap=\"butt\"\n            stroke-linejoin=\"round\"\n          >\n            <path d=\"M5 12h13M12 5l7 7-7 7\" /></svg></a\n        >\n      </p>\n    </div>\n    <div class=\"Form\">\n  <script src=\"https://f.convertkit.com/ckjs/ck.5.js\"></script>\n  <form\n    action=\"https://app.convertkit.com/forms/3922716/subscriptions\"\n    class=\"seva-form formkit-form\"\n    method=\"post\"\n    data-sv-form=\"3922716\"\n    data-uid=\"800e2efbee\"\n    data-format=\"inline\"\n    data-version=\"5\"\n    data-options='{\"settings\":{\"after_subscribe\":{\"action\":\"message\",\"success_message\":\"Success! Now check your email to confirm your subscription.\",\"redirect_url\":\"\"},\"analytics\":{\"google\":null,\"fathom\":null,\"facebook\":null,\"segment\":null,\"pinterest\":null,\"sparkloop\":null,\"googletagmanager\":null},\"modal\":{\"trigger\":\"timer\",\"scroll_percentage\":null,\"timer\":5,\"devices\":\"all\",\"show_once_every\":15},\"powered_by\":{\"show\":false,\"url\":\"https://convertkit.com/features/forms?utm_campaign=poweredby&amp;utm_content=form&amp;utm_medium=referral&amp;utm_source=dynamic\"},\"recaptcha\":{\"enabled\":false},\"return_visitor\":{\"action\":\"hide\",\"custom_content\":\"\"},\"slide_in\":{\"display_in\":\"bottom_right\",\"trigger\":\"timer\",\"scroll_percentage\":null,\"timer\":5,\"devices\":\"all\",\"show_once_every\":15},\"sticky_bar\":{\"display_in\":\"top\",\"trigger\":\"timer\",\"scroll_percentage\":null,\"timer\":5,\"devices\":\"all\",\"show_once_every\":15}},\"version\":\"5\"}'\n    min-width=\"400 500 600 700 800\"\n  >\n    <div data-style=\"full\">\n      <div data-element=\"column\" class=\"formkit-column\">\n        <div class=\"formkit-background\" style=\"opacity: 0.3;\"></div>\n        <div\n          class=\"formkit-header\"\n          data-element=\"header\"\n          style=\"font-size: 20px; font-weight: 700;\"\n        >\n          <h2>Join the Newsletter</h2>\n        </div>\n        <div\n          class=\"formkit-subheader\"\n          data-element=\"subheader\"\n          style=\"font-size: 15px;\"\n        >\n          <p>\n            Subscribe to the\n            <strong\n              ><em\n                ><a href=\"https://softwarecrisis.dev/\"\n                  >Out of the Software Crisis</a\n                ></em\n              ></strong\n            >\n            newsletter to get my weekly (at least) essays on how to avoid or get\n            out of software development crises.\n          </p>\n          <p>\n            Join now and get a free PDF of\n            <strong>three bonus essays</strong> from\n            <em>Out of the Software Crisis.</em>\n          </p>\n        </div>\n      </div>\n      <div data-element=\"column\" class=\"formkit-column\">\n        <ul\n          class=\"formkit-alert formkit-alert-error\"\n          data-element=\"errors\"\n          data-group=\"alert\"\n        ></ul>\n        <div data-element=\"fields\" class=\"seva-fields formkit-fields\">\n          <div class=\"formkit-field\">\n            <input\n              class=\"formkit-input\"\n              name=\"email_address\"\n              aria-label=\"Email Address\"\n              placeholder=\"Email Address\"\n              required=\"\"\n              type=\"email\"\n              style=\"color: rgb(0, 0, 0); border-color: rgb(227, 227, 227); border-radius: 4px; font-weight: 400;\"\n            />\n          </div>\n          <button\n            data-element=\"submit\"\n            class=\"formkit-submit formkit-submit\"\n            style=\"color: rgb(255, 255, 255); background-color: rgb(22, 119, 190); border-radius: 24px; font-weight: 700;\"\n          >\n            <div class=\"formkit-spinner\"></div>\n            <span class=\"\">Subscribe</span>\n          </button>\n        </div>\n        <div\n          class=\"formkit-guarantee\"\n          data-element=\"guarantee\"\n          style=\"font-size: 13px; font-weight: 400; text-align: left;\"\n        >\n          <p>We respect your privacy.</p>\n          <p>Unsubscribe at any time.</p>\n        </div>\n      </div>\n    </div>\n    <style>\n      .formkit-form[data-uid=\"800e2efbee\"] * {\n        box-sizing: border-box;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"] {\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"] legend {\n        border: none;\n        font-size: inherit;\n        margin-bottom: 10px;\n        padding: 0;\n        position: relative;\n        display: table;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"] fieldset {\n        border: 0;\n        padding: 0.01em 0 0 0;\n        margin: 0;\n        min-width: 0;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"]\n        body:not(:-moz-handler-blocked)\n        fieldset {\n        display: table-cell;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"] h1,\n      .formkit-form[data-uid=\"800e2efbee\"] h2,\n      .formkit-form[data-uid=\"800e2efbee\"] h3,\n      .formkit-form[data-uid=\"800e2efbee\"] h4,\n      .formkit-form[data-uid=\"800e2efbee\"] h5,\n      .formkit-form[data-uid=\"800e2efbee\"] h6 {\n        color: inherit;\n        font-size: inherit;\n        font-weight: inherit;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"] h2 {\n        font-size: 1.5em;\n        margin: 1em 0;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"] h3 {\n        font-size: 1.17em;\n        margin: 1em 0;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"] p {\n        color: inherit;\n        font-size: inherit;\n        font-weight: inherit;\n        margin-bottom: 1.25rem;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"] ol:not([template-default]),\n      .formkit-form[data-uid=\"800e2efbee\"] ul:not([template-default]),\n      .formkit-form[data-uid=\"800e2efbee\"] blockquote:not([template-default]) {\n        text-align: left;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"] p:not([template-default]),\n      .formkit-form[data-uid=\"800e2efbee\"] hr:not([template-default]),\n      .formkit-form[data-uid=\"800e2efbee\"] blockquote:not([template-default]),\n      .formkit-form[data-uid=\"800e2efbee\"] ol:not([template-default]),\n      .formkit-form[data-uid=\"800e2efbee\"] ul:not([template-default]) {\n        color: inherit;\n        font-style: initial;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"] .ordered-list,\n      .formkit-form[data-uid=\"800e2efbee\"] .unordered-list {\n        list-style-position: outside !important;\n        padding-left: 1em;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"] .list-item {\n        padding-left: 0;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"][data-format=\"modal\"] {\n        display: none;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"][data-format=\"slide in\"] {\n        display: none;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"][data-format=\"sticky bar\"] {\n        display: none;\n      }\n      .formkit-sticky-bar\n        .formkit-form[data-uid=\"800e2efbee\"][data-format=\"sticky bar\"] {\n        display: block;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"] .formkit-input,\n      .formkit-form[data-uid=\"800e2efbee\"] .formkit-select,\n      .formkit-form[data-uid=\"800e2efbee\"] .formkit-checkboxes {\n        width: 100%;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"] .formkit-button,\n      .formkit-form[data-uid=\"800e2efbee\"] .formkit-submit {\n        border: 0;\n        border-radius: 5px;\n        color: #ffffff;\n        cursor: pointer;\n        display: inline-block;\n        text-align: center;\n        font-size: 15px;\n        font-weight: 500;\n        cursor: pointer;\n        margin-bottom: 15px;\n        overflow: hidden;\n        padding: 0;\n        position: relative;\n        vertical-align: middle;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"] .formkit-button:hover,\n      .formkit-form[data-uid=\"800e2efbee\"] .formkit-submit:hover,\n      .formkit-form[data-uid=\"800e2efbee\"] .formkit-button:focus,\n      .formkit-form[data-uid=\"800e2efbee\"] .formkit-submit:focus {\n        outline: none;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"] .formkit-button:hover > span,\n      .formkit-form[data-uid=\"800e2efbee\"] .formkit-submit:hover > span,\n      .formkit-form[data-uid=\"800e2efbee\"] .formkit-button:focus > span,\n      .formkit-form[data-uid=\"800e2efbee\"] .formkit-submit:focus > span {\n        background-color: rgba(0, 0, 0, 0.1);\n      }\n      .formkit-form[data-uid=\"800e2efbee\"] .formkit-button > span,\n      .formkit-form[data-uid=\"800e2efbee\"] .formkit-submit > span {\n        display: block;\n        -webkit-transition: all 300ms ease-in-out;\n        transition: all 300ms ease-in-out;\n        padding: 12px 24px;\n        text-align: center;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"] .formkit-input {\n        background: #ffffff;\n        font-size: 15px;\n        padding: 12px;\n        border: 1px solid #e3e3e3;\n        -webkit-flex: 1 0 auto;\n        -ms-flex: 1 0 auto;\n        flex: 1 0 auto;\n        line-height: 1.4;\n        margin: 0;\n        -webkit-transition: border-color ease-out 300ms;\n        transition: border-color ease-out 300ms;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"] .formkit-input:focus {\n        outline: none;\n        border-color: #1677be;\n        -webkit-transition: border-color ease 300ms;\n        transition: border-color ease 300ms;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"]\n        .formkit-input::-webkit-input-placeholder {\n        color: inherit;\n        opacity: 0.8;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"] .formkit-input::-moz-placeholder {\n        color: inherit;\n        opacity: 0.8;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"]\n        .formkit-input:-ms-input-placeholder {\n        color: inherit;\n        opacity: 0.8;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"] .formkit-input::placeholder {\n        color: inherit;\n        opacity: 0.8;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"] [data-group=\"dropdown\"] {\n        position: relative;\n        display: inline-block;\n        width: 100%;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"] [data-group=\"dropdown\"]::before {\n        content: \"\";\n        top: calc(50% - 2.5px);\n        right: 10px;\n        position: absolute;\n        pointer-events: none;\n        border-color: #4f4f4f transparent transparent transparent;\n        border-style: solid;\n        border-width: 6px 6px 0 6px;\n        height: 0;\n        width: 0;\n        z-index: 999;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"] [data-group=\"dropdown\"] select {\n        height: auto;\n        width: 100%;\n        cursor: pointer;\n        color: #333333;\n        line-height: 1.4;\n        margin-bottom: 0;\n        padding: 0 6px;\n        -webkit-appearance: none;\n        -moz-appearance: none;\n        appearance: none;\n        font-size: 15px;\n        padding: 12px;\n        padding-right: 25px;\n        border: 1px solid #e3e3e3;\n        background: #ffffff;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"]\n        [data-group=\"dropdown\"]\n        select:focus {\n        outline: none;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"] [data-group=\"checkboxes\"] {\n        text-align: left;\n        margin: 0;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"]\n        [data-group=\"checkboxes\"]\n        [data-group=\"checkbox\"] {\n        margin-bottom: 10px;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"]\n        [data-group=\"checkboxes\"]\n        [data-group=\"checkbox\"]\n        * {\n        cursor: pointer;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"]\n        [data-group=\"checkboxes\"]\n        [data-group=\"checkbox\"]:last-of-type {\n        margin-bottom: 0;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"]\n        [data-group=\"checkboxes\"]\n        [data-group=\"checkbox\"]\n        input[type=\"checkbox\"] {\n        display: none;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"]\n        [data-group=\"checkboxes\"]\n        [data-group=\"checkbox\"]\n        input[type=\"checkbox\"]\n        + label::after {\n        content: none;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"]\n        [data-group=\"checkboxes\"]\n        [data-group=\"checkbox\"]\n        input[type=\"checkbox\"]:checked\n        + label::after {\n        border-color: #ffffff;\n        content: \"\";\n      }\n      .formkit-form[data-uid=\"800e2efbee\"]\n        [data-group=\"checkboxes\"]\n        [data-group=\"checkbox\"]\n        input[type=\"checkbox\"]:checked\n        + label::before {\n        background: #10bf7a;\n        border-color: #10bf7a;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"]\n        [data-group=\"checkboxes\"]\n        [data-group=\"checkbox\"]\n        label {\n        position: relative;\n        display: inline-block;\n        padding-left: 28px;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"]\n        [data-group=\"checkboxes\"]\n        [data-group=\"checkbox\"]\n        label::before,\n      .formkit-form[data-uid=\"800e2efbee\"]\n        [data-group=\"checkboxes\"]\n        [data-group=\"checkbox\"]\n        label::after {\n        position: absolute;\n        content: \"\";\n        display: inline-block;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"]\n        [data-group=\"checkboxes\"]\n        [data-group=\"checkbox\"]\n        label::before {\n        height: 16px;\n        width: 16px;\n        border: 1px solid #e3e3e3;\n        background: #ffffff;\n        left: 0px;\n        top: 3px;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"]\n        [data-group=\"checkboxes\"]\n        [data-group=\"checkbox\"]\n        label::after {\n        height: 4px;\n        width: 8px;\n        border-left: 2px solid #4d4d4d;\n        border-bottom: 2px solid #4d4d4d;\n        -webkit-transform: rotate(-45deg);\n        -ms-transform: rotate(-45deg);\n        transform: rotate(-45deg);\n        left: 4px;\n        top: 8px;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"] .formkit-alert {\n        background: #f9fafb;\n        border: 1px solid #e3e3e3;\n        border-radius: 5px;\n        -webkit-flex: 1 0 auto;\n        -ms-flex: 1 0 auto;\n        flex: 1 0 auto;\n        list-style: none;\n        margin: 25px auto;\n        padding: 12px;\n        text-align: center;\n        width: 100%;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"] .formkit-alert:empty {\n        display: none;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"] .formkit-alert-success {\n        background: #d3fbeb;\n        border-color: #10bf7a;\n        color: #0c905c;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"] .formkit-alert-error {\n        background: #fde8e2;\n        border-color: #f2643b;\n        color: #ea4110;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"] .formkit-spinner {\n        display: -webkit-box;\n        display: -webkit-flex;\n        display: -ms-flexbox;\n        display: flex;\n        height: 0px;\n        width: 0px;\n        margin: 0 auto;\n        position: absolute;\n        top: 0;\n        left: 0;\n        right: 0;\n        width: 0px;\n        overflow: hidden;\n        text-align: center;\n        -webkit-transition: all 300ms ease-in-out;\n        transition: all 300ms ease-in-out;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"] .formkit-spinner > div {\n        margin: auto;\n        width: 12px;\n        height: 12px;\n        background-color: #fff;\n        opacity: 0.3;\n        border-radius: 100%;\n        display: inline-block;\n        -webkit-animation: formkit-bouncedelay-formkit-form-data-uid-800e2efbee-\n          1.4s infinite ease-in-out both;\n        animation: formkit-bouncedelay-formkit-form-data-uid-800e2efbee- 1.4s\n          infinite ease-in-out both;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"] .formkit-spinner > div:nth-child(1) {\n        -webkit-animation-delay: -0.32s;\n        animation-delay: -0.32s;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"] .formkit-spinner > div:nth-child(2) {\n        -webkit-animation-delay: -0.16s;\n        animation-delay: -0.16s;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"]\n        .formkit-submit[data-active]\n        .formkit-spinner {\n        opacity: 1;\n        height: 100%;\n        width: 50px;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"]\n        .formkit-submit[data-active]\n        .formkit-spinner\n        ~ span {\n        opacity: 0;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"]\n        .formkit-powered-by[data-active=\"false\"] {\n        opacity: 0.35;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"]\n        .formkit-powered-by-convertkit-container {\n        display: -webkit-box;\n        display: -webkit-flex;\n        display: -ms-flexbox;\n        display: flex;\n        width: 100%;\n        z-index: 5;\n        margin: 10px 0;\n        position: relative;\n      }\n      @-webkit-keyframes formkit-bouncedelay-formkit-form-data-uid-800e2efbee- {\n        0%,\n        80%,\n        100% {\n          -webkit-transform: scale(0);\n          -ms-transform: scale(0);\n          transform: scale(0);\n        }\n        40% {\n          -webkit-transform: scale(1);\n          -ms-transform: scale(1);\n          transform: scale(1);\n        }\n      }\n      @keyframes formkit-bouncedelay-formkit-form-data-uid-800e2efbee- {\n        0%,\n        80%,\n        100% {\n          -webkit-transform: scale(0);\n          -ms-transform: scale(0);\n          transform: scale(0);\n        }\n        40% {\n          -webkit-transform: scale(1);\n          -ms-transform: scale(1);\n          transform: scale(1);\n        }\n      }\n      .formkit-form[data-uid=\"800e2efbee\"] blockquote {\n        padding: 10px 20px;\n        margin: 0 0 20px;\n        border-left: 5px solid #e1e1e1;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"] .seva-custom-content {\n        padding: 15px;\n        font-size: 16px;\n        color: #fff;\n        mix-blend-mode: difference;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"] .formkit-modal.guard {\n        max-width: 420px;\n        width: 100%;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"] {\n        margin: 3rem 0;\n        max-width: 100%;\n        overflow: hidden;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"] [data-style=\"full\"] {\n        width: 100%;\n        display: block;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"] .formkit-header {\n        margin-top: 0;\n        margin-bottom: 20px;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"] .formkit-subheader {\n        margin: 15px 0;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"] .formkit-column {\n        padding: 0;\n        position: relative;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"] .formkit-background {\n        width: 100%;\n        height: 100%;\n        position: absolute;\n        top: 0;\n        left: 0;\n        background-size: cover;\n        background-position: center;\n        opacity: 0.5;\n        z-index: 1;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"] .formkit-header,\n      .formkit-form[data-uid=\"800e2efbee\"] .formkit-subheader,\n      .formkit-form[data-uid=\"800e2efbee\"] .formkit-image {\n        z-index: 2;\n        position: relative;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"] .formkit-field {\n        margin: 0 0 15px 0;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"] .formkit-input,\n      .formkit-form[data-uid=\"800e2efbee\"] .formkit-submit {\n        width: 100%;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"] .formkit-guarantee {\n        font-size: 13px;\n        margin: 0 0 15px 0;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"] .formkit-guarantee > p {\n        margin: 0;\n        margin-top: 0.75rem;\n        text-align: center;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"]\n        .formkit-powered-by-convertkit-container {\n        margin-bottom: 0;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"][min-width~=\"600\"]\n        [data-style=\"full\"],\n      .formkit-form[data-uid=\"800e2efbee\"][min-width~=\"700\"]\n        [data-style=\"full\"],\n      .formkit-form[data-uid=\"800e2efbee\"][min-width~=\"800\"]\n        [data-style=\"full\"] {\n        display: grid;\n        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n      }\n      .formkit-form[data-uid=\"800e2efbee\"][min-width~=\"600\"] .formkit-submit,\n      .formkit-form[data-uid=\"800e2efbee\"][min-width~=\"700\"] .formkit-submit,\n      .formkit-form[data-uid=\"800e2efbee\"][min-width~=\"800\"] .formkit-submit {\n        width: 100%;\n      }\n      .formkit-form[data-uid=\"800e2efbee\"][min-width~=\"600\"]\n        .formkit-column:nth-child(2),\n      .formkit-form[data-uid=\"800e2efbee\"][min-width~=\"700\"]\n        .formkit-column:nth-child(2),\n      .formkit-form[data-uid=\"800e2efbee\"][min-width~=\"800\"]\n        .formkit-column:nth-child(2) {\n        border-top: none;\n      }\n    </style>\n  </form>\n</div>\n\n  </footer>\n</article>\n\r\n  </div>\r\n</main>\r\n\r\n    \n    \n    <div class=\"Bottom\">\n      You can also find me on\n      <a rel=\"me\" href=\"https://toot.cafe/@baldur\">Mastodon</a> and\n      <a href=\"https://bsky.app/profile/baldurbjarnason.com\">Bluesky</a>\n    </div>\n  </body>\n</html>\n","oembed":false,"readabilityObject":{"title":"New Web Development. Or, why Copilots and chatbots are particularly bad for modern web dev","content":"<div id=\"readability-page-1\" class=\"page\"><article>\n  \n <p>There’s blood in the water. Angry developers, users, and regulatory bodies are circling React and Single-Page-App web development, snapping big chunks out of their sides. The smell of blood just brings more and more critics.</p>\n<ul>\n<li><a href=\"https://blog.frankmtaylor.com/2024/06/20/a-rant-about-front-end-development/\">“JavaScript is not always the answer”</a>.</li>\n<li><a href=\"https://gomakethings.com/your-site-or-app-should-work-as-much-as-possible-without-javascript/\">“The web is more capable than ever, yet the sites and apps we use feel more slow and fragile than ever.\"</a>.</li>\n<li><a href=\"https://blog.jim-nielsen.com/2024/futuristic-progressive-enhanement/\">“We’re all tired of: write some code, come back to it in six months, try to make it do more, and find the whole project is broken until you upgrade everything.\"</a></li>\n</ul>\n<p>It’s finally safe to point out the flaws in the status quo without risking your job, both because more and more people are voicing their concerns, but also because so many have already <em>been</em> fired. What’re they going to do, fire you again?</p>\n<p>With nothing to lose, we might as well point out what’s broken.</p>\n<p>At the same time, the exact people who cause the shit storm of broken websites and plodding web apps – management – are finally receptive because they now have to get things done with fewer people and at a lower price.</p>\n<p>Shit actually needs to work now, because tech can’t coast on “AI” funding forever. They know this. We know this.</p>\n<p>Web development is on the verge of a <em>paradigm shift.</em></p>\n<p><em>Paradigm</em> is a term that’s easy to dismiss and wave off with a mocking hand. It’s been overused – turned into a word salad cliche by executives and consultants – but the fundamental idea has a core truth that helps us understand how fields and professional practices change.</p>\n<p>A <em>paradigm</em> is a mental model or worldview that’s defined through exemplary examples. That’s how it was originally defined. Thomas S. Kuhn, in his book <em>The Structure of Scientific Revolutions,</em> had to choose between two different words for his concept: <em>exemplar</em> and <em>paradigm</em>, both roughly meaning the same. He chose paradigm.</p>\n<p>Gmail was the exemplar that defined the <em>ajax</em> paradigm of thinking about web development.</p>\n<p>Facebook was the exemplar that defined the <em>React</em> and <em>Component</em> paradigm of web app development.</p>\n<p>A paradigm is a way of thinking about practical problems in the field using and exemplar as a reference. As the paradigm matures, it gains more exemplars (<em>Twitter</em>, <em>web-based MS Word</em>, etc) and those <em>examples</em> converge on a set of “best practices”.</p>\n<p>The best practices are <em>derived</em> from example, not the other way around. Facebook didn’t converge on their best practices until after they’d delivered a mature app using React.</p>\n<p>The important consequence of switching to a new a new paradigm – mental model – is that many formerly intractable problems suddenly become solvable. A complex social media app made by a literal army of developers would have been impossible witout the component model. Facebook would not have managed to deliver a workable app with the earlier <a href=\"https://en.wikipedia.org/wiki/Ajax_(programming)\"><em>Ajax</em></a> paradigm and a traditional <a href=\"https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller\"><em>Model-View-Container</em></a> architecture.</p>\n<p>A paradigm offers a new way of looking at problems, which enables new solutions that would have been impossible to predict or conceive of in the older worldview.</p>\n<p>A paradigm, originally popularised by Thomas S. Kuhn in his book <em>The Structure of Scientific Revolutions,</em> is a mental model or a worldview that helps explain why and how a particular thing works.</p>\n<p>Newtonian physics was a paradigm. It explained the mechanics of motion, gravity, and mass in ways that was <em>predictive</em> and <em>practical</em>. You could use the model to guide further work in both physics and engineering. But as science progressed we discovered more and more exceptions and outliers that the model couldn’t explain which made it useless for work in those areas. As a mental model, it went from being an aid to a hindrance.</p>\n<p>Einstein’s theory of relativity explained those outliers, while still being useful for all of the prior examples of Newtonian mechanics, and helped predict future work that would have been impossible using the Newtonian way of thinking.</p>\n<p>When the older paradigm ceases to be useful and begins to be replaced by a new paradigm that is <em>more</em> useful, that’s <em>a paradigm shift</em>.</p>\n<p>As I wrote above paradigms aren’t defined by theory but through example. If Newtonian physics had been confined to just Newton’s writings, it wouldn’t have become a paradigm. What defines a paradigm <em>is the work done in the field</em>. That it was used as a foundation for future theories, academic practice, and to guide engineering and other work is what made it a paradigm.</p>\n<p>This is also why paradigm shifts are messy. They aren’t all-or-nothing because the older paradigm continues to work for many of its intended use cases. The transition takes time and may never complete fully. We still apply Newtonian mechanics to this day. We’ll still be using React web apps years from now.</p>\n<p>Exactly how much time a shift takes depends on the value of the <em>new</em> kind of work that the incoming paradigm enables and the rate of churn in the industry or field. An older paradigm in a mature field may never be fully replaced until all of its adherents age out or die.</p>\n<p>The paradigm shift that web development is entering hinges on the fact that while React was a key enabler of the <em>Single-Page-App</em> and <em>Component</em> era of the web, in practice it normally tends to result in extremely poor <em>products</em>. Built-in browser APIs are now much more capable than they were when React was first invented.</p>\n<ul>\n<li>Websites and web apps made in React tend to be slower than those made in other frameworks and <em>much</em> slower than those made using just the built-in/DOM APIs necessary to fulfil the product’s requirements. It’s built for an era when those capabilities didn’t exist natively in the browser so the inherent performance issues didn’t matter. Slow was better than not at all, but that isn’t a trade-off we have to make anymore.</li>\n<li>Many popular React approaches tend to be inaccessible by default. Accessibility is increasingly both a hard legal requirement and positive business investments. (Accessibility features usually benefit a plurality of a service’s customers, just in varying degrees. The benefit isn’t exclusive to a a single demographic. Accessibility work also tends to be a source of innovation as it drives research into new modes of interactivity.)</li>\n<li>React apps tend to be disproportionately <em>complex</em>. Or, to be more specific, React apps have a baseline complexity that exists due to the unavoidably thick abstraction layer over the base browser platform. This ratchets up the implementation and design complexity of many small- to mid-sized apps by a notch or several.</li>\n<li>The various popular approaches to state management for React usually only let you choose which <em>flavour</em> of complicated spaghetti code you end up with, not avoid it altogether.</li>\n<li>They tend to have poor support for low- to mid-ranged devices and connections.</li>\n<li>Framework churn – the constant release of partially-incompatible versions – makes <em>maintenance</em> of React-based projects much more expensive than those built on standardised browser APIs, which in practice never change once they get widely supported. This cost can be enormous in the long term.</li>\n</ul>\n<p>React has been great for <a href=\"https://www.baldurbjarnason.com/2024/react-electron-llms-labour-arbitrage/\">commodifying developers</a>. By forcing all web development into the same shape and size, you make recruitment easier and can more easily force the structure of your development teams to conform to your organisation’s whims. This was great during the period when investors considered developer headcounts and escalating team sizes to be a positive signal for their investment, but it’s no longer useful now that the same crowd arbitrarily considers those same measures to be a <em>negative</em> signal.</p>\n<p>Changing attitudes among investors, toxic influences as they are, took the “tailwind”, <a href=\"https://en.wikipedia.org/wiki/Headwind_and_tailwind\">so to speak</a>, out of React’s sails, making it more acutely noticeable that it’s a generally poor fit to modern web projects.</p>\n<p>People are noticing. We’re starting to see more and more reports of teams and organisations who are switching away from React and seeing both performance and productivity gains as a result.</p>\n<p>For example:</p>\n<blockquote>\n<p>“We were completely surprised by the speed gain,” Moulis said. “Our application engine is designed to produce complex ERP-type applications, which involve heavy data consumption to present in real-time. On a page we consider complex, with over 800 DOM elements, some of which use different subscription systems via our event system at initialization to update when necessary, the overall load time dropped from 4-5 seconds to 400ms.”</p>\n<p>As well as speed gains, the user interactions markedly improved, said Moulis.</p>\n<p><a href=\"https://thenewstack.io/pivoting-from-react-to-native-dom-apis-a-real-world-example/\"><em>Pivoting From React to Native DOM APIs: A Real World Example</em></a></p>\n</blockquote>\n<p>But there’s a problem. After years of industry disinterest in training for fundamentals, such as CSS, HTML, or built-in platform APIs, those who are switching are finding that neither their organisation nor the job market seem to know how to train or find people with these skill sets.</p>\n<p>From the above report:</p>\n<blockquote>\n<p>He added that finding developers who know vanilla JavaScript and not just the frameworks was an “unexpected difficulty.”</p>\n</blockquote>\n<p>This may be unexpected to those used to the meatgrind of the developer pipeline consistently, just crank the handle to get a fresh batch of identikit React coders delivered. Thow developers in turn have never been given the opportunity to broaden their skill sets.</p>\n<p>To those of us outside the React community it’s been a slow motion train wreck unfolding over several years. We’ve been watching developers reach for bloated React components long since been made obsolete by <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\">single</a><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/position#sticky\">lines</a> of CSS code or DOM API calls, not because they had a concrete practical reason to do so, but because they simply weren’t aware of just how powerful the web platform has become. It’s been obvious for a long while that most web developer training isn’t for making you a web developer with a broad foundation. It’s for turning you into a homogenous React unit that management can freely move around on their org charts.</p>\n<p>Now those people risk being left behind – effectively betrayed by the training and recruitment industry that had “standardised” on React.</p>\n<p>As the web developer (and extremely astute observer of many things) Marco Rogers <a href=\"https://social.polotek.net/@polotek/112617566060238200\">said on Mastodon the other day</a>:</p>\n<blockquote>\n<p>This has been brewing in my head for a long time. The frontend ecosystem is kind of broken right now. And it’s frustrating to me for a few different reasons. New developers are having an extremely hard time learning enough skills to be gainfully employed. They are drowning in this complex garbage and feeling really disheartened. As a result, companies are finding it more difficult to do basic hiring. The bar is so high just to get a regular dev job. And everybody loses.</p>\n<p>What’s even worse is that I believe a lot of this energy is wasted. People that are learning the current tech ecosystem are absolutely not learning web fundamentals. They are too abstracted away. And when the stack changes again, these folks are going to be at a serious disadvantage when they have to adapt away from what they learned. It’s a deep disservice to people’s professional careers, and it’s going to cause a lot of heartache later.</p>\n</blockquote>\n<p>The organisations themselves are under increasing pressure to lower costs. Investors want less money spent on software development, primarily through lower pay and fewer developers, but the overall desire to lower costs underlies both demands. That’s one of the drivers of the paradigm shift: projects built on DOM APIs are cheaper to maintain because once an API is a standard, browsers are <em>extremely</em> hesitant to change them. Frameworks, conversely, change every season in ways that break your code again and again.</p>\n<p>Again from <a href=\"https://social.polotek.net/@polotek/112617500867891048\">Marco Rogers’ thread</a> I quoted above:</p>\n<blockquote>\n<p>I always have to start with the cynical take. It’s just how I am. But I do want to talk about what I think should be happening instead.</p>\n<p>Companies that want to reduce the cost of their frontend tech becoming obsoleted so often should be looking to get back to fundamentals. Your teams should be working closer to the web platform with a lot less complex abstractions. We need to relearn what the web is capable of and go back to that.</p>\n</blockquote>\n<p>Organisations are caught in a bind. They are being pressured to lower costs but to take advantage of one of the more concrete and empirically validated cost-cutting measure (getting back to fundamentals and using simpler abstractions) requires either retraining developers or recruiting developers who are disproportionally senior: people who originally came into the field <em>before</em> React completely took over.</p>\n<p>And senior people are both in shorter supply and more expensive when you can find them.</p>\n<p>(There’s also the issue of age prejudice in the tech industry, but let’s leave that topic for a later day.)</p>\n<p>Developers have rightly focused on acquiring skills that pay the bills: <em>React</em>.</p>\n<p>Organisations have, rightly or wrongly, focused on recruiting developers whose skillsets made them more easily slotted wherever and whenever the org chart du jour required it.</p>\n<p>Those who <em>train</em> or <em>teach</em> web development have followed suit. Courses, ebooks, and videos that focus on core <em>built-in</em> APIs, CSS, and HTML are the exception, not the norm.</p>\n<p>Effectively, everybody wants to build the training infrastructure the new paradigm needs…</p>\n<p><strong><em>But nobody wants to pay for it.</em></strong></p>\n<p>Enter, chatbots and copilots.</p>\n<p>I, and other people who have been writing about web development, keep hearing two kinds of reports on how people are using LLMs.</p>\n<ol>\n<li>Developers use chatbots to “teach themselves” vanilla JS, CSS, or HTML.</li>\n<li>And they use it to generate vanilla JS code, either by describing a problem they’d normally solve using React to a chatbot or by prompting a copilot to autocomplete a solution.</li>\n</ol>\n<p>Organisations don’t mind this, some even outright <em>require</em> it, because they don’t want to invest in retraining their developers. And if an experienced React developer can use a language model to auto-generate enough “vanilla” JS and CSS code to replace a few junior developers, that represents substantial cost savings to the organisation.</p>\n<p>Even if you believe in the usefulness of language models for coding – for argument’s sake – this particular use of an LLM is an extremely bad idea as it leans on these models where they’re weakest: genuine novelty.</p>\n<h2 id=\"why-llms-are-an-extremely-bad-fit-for-new-standards-oriented-web-development\">Why LLMs are an extremely bad fit for new standards-oriented web development</h2>\n<p><a href=\"https://softwarecrisis.dev/letters/ai-and-software-quality/\">I’m not a fan of using Large Language Models for software development</a>, but even if you consider those concers to be either overblown or already solved – even if you think that copilots and chatbots as implemented today are great tools for software development – they’re still extremely poor tools for specifically shifting your organisation’s coding practices to a new reality of core platform-oriented web development and for learning how to use the many new features of the web platform.</p>\n<p><em>It’s all down to how a Large Language Model works.</em></p>\n<p>I’m not going to get into the weeds of how these models work, the issue can be explained at a bit of a higher level.</p>\n<p>The core observation that underlies these models is that <em>size matters</em>. The more training data you have for a specific use case, the better the outcomes tend to be. Tools built on Large Language Models are statistical models of a (mostly) textual landscape. The more data they have to derive their statistical modelling from, the better, more plausible, and more realistic the answer tends to be.</p>\n<p>There are limits, of course, and depending on who you ask, we may or may not have already reached that limit as the improvements over the early GPT-4 models have all been incremental at best.</p>\n<p>But, generally, the more training data you have, the better the model is at what it does.</p>\n<p>There are downsides. There are some indications that larger models actually hallucinate <em>more</em> and get less predictable, but it’s hard to tell whether that’s integral to how these methods work or whether it’s down to, well, <a href=\"https://www.baldurbjarnason.com/2023/beware-of-ai-snake-oil/\">the kinds of people who run AI companies.</a> Dishonest people with poor judgment tend to make poor decisions and then try to hide them.</p>\n<p>This size-over-everything characteristic also goes to partially explain why these tools tend to be bias magnifiers.</p>\n<p>The majority of the body of text in the training data is biased. Most of it was written before we had a broader cultural awakening about biased language and, even today, biased language still represents the majority of what you can find on the web – even of newer writing. It’s merely gone from a super-majority to regular majority.</p>\n<p>The models are expected to statistically boil this broad data set into <em>single answers</em> and the single answer that most accurately represents the broad consensus in the training data is going to be one that’s biased. <em>Always</em>. Prejudice and biased language gets amplified and, because less biased language is a smaller proportion of the training data set, the unbiased answers are at risk of being of a lower quality and a higher <em>overfitting</em> rate.</p>\n<p>The odds of overfitting, or verbatim copies of text from the training data, increases the smaller the portion of the training data the answer draws from. A smaller body of text means less variation in the training data, which occasionally gets amplified into no variation in the answer.</p>\n<p>This represents a problem when faced with a paradigm shift.</p>\n<p><strong><em>Training data sets implicitly represent the status quo – the old paradigm. By definition, it is useless for modelling of a new paradigm.</em></strong></p>\n<p>It’s the old world and you can’t begin to understand a new unexplored world from maps of the familiar and the already known. It’s unexplored. There are no maps.</p>\n<p>A key characteristic of new web development is that modern platform features are <em>underused</em>. This means they are underrepresented, if not entirely non-existent, in all existing data sets. The exemplars haven’t been made yet, but we’re getting closer with every new project that switches to working with DOM APIs directly.</p>\n<h2 id=\"large-language-models-cant-model-what-doesnt-yet-exist\">Large Language Models can’t model what doesn’t yet exist</h2>\n<p>That’s the core issue here: new web development is in the process of being invented and defined through practice. What it looks like today does not represent its final form. It won’t look like the web development I learned twenty or ten years ago because the platform has evolved.</p>\n<p>It has a number of new and frankly amazing capabilities that are either severely underused by the field at large or almost entirely <em>unused</em>.</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:has\">The :has CSS selector.</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Cascade_layers\">Cascade Layers</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@container\">CSS Containers</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_nesting/Using_CSS_nesting\">CSS Nesting</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties\">Custom CSS properties</a>. (I know people think this is overused. I’m telling you that we haven’t even started.)</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/View_Transitions_API\">View Transitions</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template#shadowrootmode\">Declarative Shadow DOM</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/File_System_API/Origin_private_file_system\">Origin Private File System</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Compression_Streams_API\">Compression Streams</a></li>\n<li>Web streams and async iterators in general</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics\">Atomics and SharedWorkers</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker\">Service Workers</a>. (Using “scope” to modularise service workers, for example, hasn’t been investigated much by the field.)</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Broadcast_Channel_API\">Broadcast Channels</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/type/importmap\">JavaScript modules and import maps</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Trusted_Types_API\">Trusted Types API</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AbortController\">AbortControllers</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@scope\">Scoped CSS</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Using_data_channels\">WebRTC data channels</a></li>\n</ul>\n<p>This is not even close to being a complete list of powerful and underused features of the modern browser platform.</p>\n<p>Some of these are underused because they still have limited availability. Some of them because they’re so new and we’re still trying to figure them out (in between projects, because employers still generally don’t pay for research even if it presents an opportunity for substantial cost savings).</p>\n<p>Some of them, like JavaScript modules and import maps or custom properties, we’re still figuring out because they represent a new way of thinking or have complex implications.</p>\n<p>Modern web applications and websites that build directly on these features are going to be very different from those that translate the React Single-Page-App mode of thinking directly into “vanilla” JS or those that represent what was the status quo over a decade ago.</p>\n<p>New Web Development isn’t old <em>old</em> web development. It isn’t going to be a nostalgia movement.</p>\n<p>It took five years for the simple <a href=\"https://en.wikipedia.org/wiki/XMLHttpRequest\">XMLHttpRequest</a> component to trigger the evolution of <a href=\"https://en.wikipedia.org/wiki/Ajax_(programming)\"><em>Ajax</em></a>, the precursor paradigm to the React SPA paradigm, and that was in a tech industry that was arguably marginally more functional and coherent than today’s oligopolies.</p>\n<p>We’re still in the progress of inventing this future and a technology that’s as fundamentally <a href=\"https://softwarecrisis.dev/letters/ai-code-quality/\">backwards-facing as Large Language Models</a> is incapable of predicting what it will look like.</p>\n<p>And all the rest of us know is that it’s going to be <em>new</em>.</p>\n\n  \n</article></div>","textContent":"\n  \n There’s blood in the water. Angry developers, users, and regulatory bodies are circling React and Single-Page-App web development, snapping big chunks out of their sides. The smell of blood just brings more and more critics.\n\n“JavaScript is not always the answer”.\n“The web is more capable than ever, yet the sites and apps we use feel more slow and fragile than ever.\".\n“We’re all tired of: write some code, come back to it in six months, try to make it do more, and find the whole project is broken until you upgrade everything.\"\n\nIt’s finally safe to point out the flaws in the status quo without risking your job, both because more and more people are voicing their concerns, but also because so many have already been fired. What’re they going to do, fire you again?\nWith nothing to lose, we might as well point out what’s broken.\nAt the same time, the exact people who cause the shit storm of broken websites and plodding web apps – management – are finally receptive because they now have to get things done with fewer people and at a lower price.\nShit actually needs to work now, because tech can’t coast on “AI” funding forever. They know this. We know this.\nWeb development is on the verge of a paradigm shift.\nParadigm is a term that’s easy to dismiss and wave off with a mocking hand. It’s been overused – turned into a word salad cliche by executives and consultants – but the fundamental idea has a core truth that helps us understand how fields and professional practices change.\nA paradigm is a mental model or worldview that’s defined through exemplary examples. That’s how it was originally defined. Thomas S. Kuhn, in his book The Structure of Scientific Revolutions, had to choose between two different words for his concept: exemplar and paradigm, both roughly meaning the same. He chose paradigm.\nGmail was the exemplar that defined the ajax paradigm of thinking about web development.\nFacebook was the exemplar that defined the React and Component paradigm of web app development.\nA paradigm is a way of thinking about practical problems in the field using and exemplar as a reference. As the paradigm matures, it gains more exemplars (Twitter, web-based MS Word, etc) and those examples converge on a set of “best practices”.\nThe best practices are derived from example, not the other way around. Facebook didn’t converge on their best practices until after they’d delivered a mature app using React.\nThe important consequence of switching to a new a new paradigm – mental model – is that many formerly intractable problems suddenly become solvable. A complex social media app made by a literal army of developers would have been impossible witout the component model. Facebook would not have managed to deliver a workable app with the earlier Ajax paradigm and a traditional Model-View-Container architecture.\nA paradigm offers a new way of looking at problems, which enables new solutions that would have been impossible to predict or conceive of in the older worldview.\nA paradigm, originally popularised by Thomas S. Kuhn in his book The Structure of Scientific Revolutions, is a mental model or a worldview that helps explain why and how a particular thing works.\nNewtonian physics was a paradigm. It explained the mechanics of motion, gravity, and mass in ways that was predictive and practical. You could use the model to guide further work in both physics and engineering. But as science progressed we discovered more and more exceptions and outliers that the model couldn’t explain which made it useless for work in those areas. As a mental model, it went from being an aid to a hindrance.\nEinstein’s theory of relativity explained those outliers, while still being useful for all of the prior examples of Newtonian mechanics, and helped predict future work that would have been impossible using the Newtonian way of thinking.\nWhen the older paradigm ceases to be useful and begins to be replaced by a new paradigm that is more useful, that’s a paradigm shift.\nAs I wrote above paradigms aren’t defined by theory but through example. If Newtonian physics had been confined to just Newton’s writings, it wouldn’t have become a paradigm. What defines a paradigm is the work done in the field. That it was used as a foundation for future theories, academic practice, and to guide engineering and other work is what made it a paradigm.\nThis is also why paradigm shifts are messy. They aren’t all-or-nothing because the older paradigm continues to work for many of its intended use cases. The transition takes time and may never complete fully. We still apply Newtonian mechanics to this day. We’ll still be using React web apps years from now.\nExactly how much time a shift takes depends on the value of the new kind of work that the incoming paradigm enables and the rate of churn in the industry or field. An older paradigm in a mature field may never be fully replaced until all of its adherents age out or die.\nThe paradigm shift that web development is entering hinges on the fact that while React was a key enabler of the Single-Page-App and Component era of the web, in practice it normally tends to result in extremely poor products. Built-in browser APIs are now much more capable than they were when React was first invented.\n\nWebsites and web apps made in React tend to be slower than those made in other frameworks and much slower than those made using just the built-in/DOM APIs necessary to fulfil the product’s requirements. It’s built for an era when those capabilities didn’t exist natively in the browser so the inherent performance issues didn’t matter. Slow was better than not at all, but that isn’t a trade-off we have to make anymore.\nMany popular React approaches tend to be inaccessible by default. Accessibility is increasingly both a hard legal requirement and positive business investments. (Accessibility features usually benefit a plurality of a service’s customers, just in varying degrees. The benefit isn’t exclusive to a a single demographic. Accessibility work also tends to be a source of innovation as it drives research into new modes of interactivity.)\nReact apps tend to be disproportionately complex. Or, to be more specific, React apps have a baseline complexity that exists due to the unavoidably thick abstraction layer over the base browser platform. This ratchets up the implementation and design complexity of many small- to mid-sized apps by a notch or several.\nThe various popular approaches to state management for React usually only let you choose which flavour of complicated spaghetti code you end up with, not avoid it altogether.\nThey tend to have poor support for low- to mid-ranged devices and connections.\nFramework churn – the constant release of partially-incompatible versions – makes maintenance of React-based projects much more expensive than those built on standardised browser APIs, which in practice never change once they get widely supported. This cost can be enormous in the long term.\n\nReact has been great for commodifying developers. By forcing all web development into the same shape and size, you make recruitment easier and can more easily force the structure of your development teams to conform to your organisation’s whims. This was great during the period when investors considered developer headcounts and escalating team sizes to be a positive signal for their investment, but it’s no longer useful now that the same crowd arbitrarily considers those same measures to be a negative signal.\nChanging attitudes among investors, toxic influences as they are, took the “tailwind”, so to speak, out of React’s sails, making it more acutely noticeable that it’s a generally poor fit to modern web projects.\nPeople are noticing. We’re starting to see more and more reports of teams and organisations who are switching away from React and seeing both performance and productivity gains as a result.\nFor example:\n\n“We were completely surprised by the speed gain,” Moulis said. “Our application engine is designed to produce complex ERP-type applications, which involve heavy data consumption to present in real-time. On a page we consider complex, with over 800 DOM elements, some of which use different subscription systems via our event system at initialization to update when necessary, the overall load time dropped from 4-5 seconds to 400ms.”\nAs well as speed gains, the user interactions markedly improved, said Moulis.\nPivoting From React to Native DOM APIs: A Real World Example\n\nBut there’s a problem. After years of industry disinterest in training for fundamentals, such as CSS, HTML, or built-in platform APIs, those who are switching are finding that neither their organisation nor the job market seem to know how to train or find people with these skill sets.\nFrom the above report:\n\nHe added that finding developers who know vanilla JavaScript and not just the frameworks was an “unexpected difficulty.”\n\nThis may be unexpected to those used to the meatgrind of the developer pipeline consistently, just crank the handle to get a fresh batch of identikit React coders delivered. Thow developers in turn have never been given the opportunity to broaden their skill sets.\nTo those of us outside the React community it’s been a slow motion train wreck unfolding over several years. We’ve been watching developers reach for bloated React components long since been made obsolete by singlelines of CSS code or DOM API calls, not because they had a concrete practical reason to do so, but because they simply weren’t aware of just how powerful the web platform has become. It’s been obvious for a long while that most web developer training isn’t for making you a web developer with a broad foundation. It’s for turning you into a homogenous React unit that management can freely move around on their org charts.\nNow those people risk being left behind – effectively betrayed by the training and recruitment industry that had “standardised” on React.\nAs the web developer (and extremely astute observer of many things) Marco Rogers said on Mastodon the other day:\n\nThis has been brewing in my head for a long time. The frontend ecosystem is kind of broken right now. And it’s frustrating to me for a few different reasons. New developers are having an extremely hard time learning enough skills to be gainfully employed. They are drowning in this complex garbage and feeling really disheartened. As a result, companies are finding it more difficult to do basic hiring. The bar is so high just to get a regular dev job. And everybody loses.\nWhat’s even worse is that I believe a lot of this energy is wasted. People that are learning the current tech ecosystem are absolutely not learning web fundamentals. They are too abstracted away. And when the stack changes again, these folks are going to be at a serious disadvantage when they have to adapt away from what they learned. It’s a deep disservice to people’s professional careers, and it’s going to cause a lot of heartache later.\n\nThe organisations themselves are under increasing pressure to lower costs. Investors want less money spent on software development, primarily through lower pay and fewer developers, but the overall desire to lower costs underlies both demands. That’s one of the drivers of the paradigm shift: projects built on DOM APIs are cheaper to maintain because once an API is a standard, browsers are extremely hesitant to change them. Frameworks, conversely, change every season in ways that break your code again and again.\nAgain from Marco Rogers’ thread I quoted above:\n\nI always have to start with the cynical take. It’s just how I am. But I do want to talk about what I think should be happening instead.\nCompanies that want to reduce the cost of their frontend tech becoming obsoleted so often should be looking to get back to fundamentals. Your teams should be working closer to the web platform with a lot less complex abstractions. We need to relearn what the web is capable of and go back to that.\n\nOrganisations are caught in a bind. They are being pressured to lower costs but to take advantage of one of the more concrete and empirically validated cost-cutting measure (getting back to fundamentals and using simpler abstractions) requires either retraining developers or recruiting developers who are disproportionally senior: people who originally came into the field before React completely took over.\nAnd senior people are both in shorter supply and more expensive when you can find them.\n(There’s also the issue of age prejudice in the tech industry, but let’s leave that topic for a later day.)\nDevelopers have rightly focused on acquiring skills that pay the bills: React.\nOrganisations have, rightly or wrongly, focused on recruiting developers whose skillsets made them more easily slotted wherever and whenever the org chart du jour required it.\nThose who train or teach web development have followed suit. Courses, ebooks, and videos that focus on core built-in APIs, CSS, and HTML are the exception, not the norm.\nEffectively, everybody wants to build the training infrastructure the new paradigm needs…\nBut nobody wants to pay for it.\nEnter, chatbots and copilots.\nI, and other people who have been writing about web development, keep hearing two kinds of reports on how people are using LLMs.\n\nDevelopers use chatbots to “teach themselves” vanilla JS, CSS, or HTML.\nAnd they use it to generate vanilla JS code, either by describing a problem they’d normally solve using React to a chatbot or by prompting a copilot to autocomplete a solution.\n\nOrganisations don’t mind this, some even outright require it, because they don’t want to invest in retraining their developers. And if an experienced React developer can use a language model to auto-generate enough “vanilla” JS and CSS code to replace a few junior developers, that represents substantial cost savings to the organisation.\nEven if you believe in the usefulness of language models for coding – for argument’s sake – this particular use of an LLM is an extremely bad idea as it leans on these models where they’re weakest: genuine novelty.\nWhy LLMs are an extremely bad fit for new standards-oriented web development\nI’m not a fan of using Large Language Models for software development, but even if you consider those concers to be either overblown or already solved – even if you think that copilots and chatbots as implemented today are great tools for software development – they’re still extremely poor tools for specifically shifting your organisation’s coding practices to a new reality of core platform-oriented web development and for learning how to use the many new features of the web platform.\nIt’s all down to how a Large Language Model works.\nI’m not going to get into the weeds of how these models work, the issue can be explained at a bit of a higher level.\nThe core observation that underlies these models is that size matters. The more training data you have for a specific use case, the better the outcomes tend to be. Tools built on Large Language Models are statistical models of a (mostly) textual landscape. The more data they have to derive their statistical modelling from, the better, more plausible, and more realistic the answer tends to be.\nThere are limits, of course, and depending on who you ask, we may or may not have already reached that limit as the improvements over the early GPT-4 models have all been incremental at best.\nBut, generally, the more training data you have, the better the model is at what it does.\nThere are downsides. There are some indications that larger models actually hallucinate more and get less predictable, but it’s hard to tell whether that’s integral to how these methods work or whether it’s down to, well, the kinds of people who run AI companies. Dishonest people with poor judgment tend to make poor decisions and then try to hide them.\nThis size-over-everything characteristic also goes to partially explain why these tools tend to be bias magnifiers.\nThe majority of the body of text in the training data is biased. Most of it was written before we had a broader cultural awakening about biased language and, even today, biased language still represents the majority of what you can find on the web – even of newer writing. It’s merely gone from a super-majority to regular majority.\nThe models are expected to statistically boil this broad data set into single answers and the single answer that most accurately represents the broad consensus in the training data is going to be one that’s biased. Always. Prejudice and biased language gets amplified and, because less biased language is a smaller proportion of the training data set, the unbiased answers are at risk of being of a lower quality and a higher overfitting rate.\nThe odds of overfitting, or verbatim copies of text from the training data, increases the smaller the portion of the training data the answer draws from. A smaller body of text means less variation in the training data, which occasionally gets amplified into no variation in the answer.\nThis represents a problem when faced with a paradigm shift.\nTraining data sets implicitly represent the status quo – the old paradigm. By definition, it is useless for modelling of a new paradigm.\nIt’s the old world and you can’t begin to understand a new unexplored world from maps of the familiar and the already known. It’s unexplored. There are no maps.\nA key characteristic of new web development is that modern platform features are underused. This means they are underrepresented, if not entirely non-existent, in all existing data sets. The exemplars haven’t been made yet, but we’re getting closer with every new project that switches to working with DOM APIs directly.\nLarge Language Models can’t model what doesn’t yet exist\nThat’s the core issue here: new web development is in the process of being invented and defined through practice. What it looks like today does not represent its final form. It won’t look like the web development I learned twenty or ten years ago because the platform has evolved.\nIt has a number of new and frankly amazing capabilities that are either severely underused by the field at large or almost entirely unused.\n\nThe :has CSS selector.\nCascade Layers\nCSS Containers\nCSS Nesting\nCustom CSS properties. (I know people think this is overused. I’m telling you that we haven’t even started.)\nView Transitions\nDeclarative Shadow DOM\nOrigin Private File System\nCompression Streams\nWeb streams and async iterators in general\nAtomics and SharedWorkers\nService Workers. (Using “scope” to modularise service workers, for example, hasn’t been investigated much by the field.)\nBroadcast Channels\nJavaScript modules and import maps\nTrusted Types API\nAbortControllers\nScoped CSS\nWebRTC data channels\n\nThis is not even close to being a complete list of powerful and underused features of the modern browser platform.\nSome of these are underused because they still have limited availability. Some of them because they’re so new and we’re still trying to figure them out (in between projects, because employers still generally don’t pay for research even if it presents an opportunity for substantial cost savings).\nSome of them, like JavaScript modules and import maps or custom properties, we’re still figuring out because they represent a new way of thinking or have complex implications.\nModern web applications and websites that build directly on these features are going to be very different from those that translate the React Single-Page-App mode of thinking directly into “vanilla” JS or those that represent what was the status quo over a decade ago.\nNew Web Development isn’t old old web development. It isn’t going to be a nostalgia movement.\nIt took five years for the simple XMLHttpRequest component to trigger the evolution of Ajax, the precursor paradigm to the React SPA paradigm, and that was in a tech industry that was arguably marginally more functional and coherent than today’s oligopolies.\nWe’re still in the progress of inventing this future and a technology that’s as fundamentally backwards-facing as Large Language Models is incapable of predicting what it will look like.\nAnd all the rest of us know is that it’s going to be new.\n\n  \n","length":20256,"excerpt":"There’s blood in the water. Angry developers, users, and regulatory bodies are circling React and Single-Page-App web development, snapping big chunks out of their sides. The smell of blood just brings more and more critics.","byline":"Baldur Bjarnason","dir":null,"siteName":"Baldur Bjarnason","lang":"en"},"finalizedMeta":{"title":"New Web Development. Or, why Copilots and chatbots are particularly bad for modern web dev","description":"There’s blood in the water. Angry developers, users, and regulatory bodies are circling React and Single-Page-App web development, snapping big chunks out of their sides. The smell of blood just brings more and more critics.","author":false,"creator":"Baldur Bjarnason","publisher":false,"date":"2024-07-10T15:04:55.823Z","topics":[]},"jsonLd":{"@type":false,"headline":false,"description":false,"image":[],"mainEntityOfPage":{"@type":false,"@id":false},"datePublished":false,"dateModified":false,"isAccessibleForFree":false,"isPartOf":{"@type":[],"name":false,"productID":false},"discussionUrl":false,"license":false,"author":{"@type":false,"name":false,"description":false,"sameAs":false,"image":{"@type":false,"url":false},"givenName":false,"familyName":false,"alternateName":false,"publishingPrinciples":false},"publisher":{"@type":false,"name":false,"description":false,"sameAs":false,"logo":{"@type":false,"url":false},"publishingPrinciples":false},"editor":{"@type":false,"name":false,"description":false,"sameAs":false,"image":{"@type":false,"url":false},"givenName":false,"familyName":false,"alternateName":false,"publishingPrinciples":false}},"twitterObj":false,"status":200,"metadata":{"author":"Baldur Bjarnason","title":"New Web Development. Or, why Copilots and chatbots are particularly bad for modern web dev – Baldur Bjarnason","description":"There’s blood in the water. Angry developers, users, and regulatory bodies are circling React and Single-Page-App web development, snapping big chunks out of their sides. The smell of blood just brings more and more critics.","canonical":"https://www.baldurbjarnason.com/2024/new-web-dev/","keywords":[],"image":false,"firstParagraph":"\n          Web dev at the end of the world, from Hveragerði, Iceland\n        "},"dublinCore":{},"opengraph":{"title":false,"description":false,"url":false,"site_name":false,"locale":false,"type":false,"typeObject":{"published_time":false,"modified_time":false,"author":false,"publisher":false,"section":false,"tag":[]},"image":false},"twitter":{"site":"@fakebaldur","description":"There’s blood in the water. Angry developers, users, and regulatory bodies are circling React and Single-Page-App web development, snapping big chunks out of their sides. The smell of blood just brings more and more critics.","card":"summary","creator":false,"title":"New Web Development. Or, why Copilots and chatbots are particularly bad for modern web dev","image":"https://www.baldurbjarnason.com/favicon-96x96.png"},"archivedData":{"link":false,"wayback":false}}}