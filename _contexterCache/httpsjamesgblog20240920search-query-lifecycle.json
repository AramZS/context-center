{"initialLink":"https://jamesg.blog/2024/09/20/search-query-lifecycle","sanitizedLink":"https://jamesg.blog/2024/09/20/search-query-lifecycle","finalLink":"https://jamesg.blog/2024/09/20/search-query-lifecycle","htmlEmbed":"<script>window.contexterSetup=window.contexterSetup||function(){window.contexterSetupComplete=!0;class ContexterLink extends HTMLAnchorElement{constructor(){super()}connectedCallback(){this.setAttribute(\"target\",\"_blank\")}}customElements.define(\"contexter-link\",ContexterLink,{extends:\"a\"}),customElements.define(\"contexter-inner\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"contexter-box__inner\"}}),customElements.define(\"contexter-thumbnail\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"contexter-box__thumbnail\"}}),customElements.define(\"contexter-byline\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"contexter-box__byline\"}}),customElements.define(\"contexter-keywordset\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"contexter-box__keywordset\"}}),customElements.define(\"contexter-linkset\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"contexter-box__linkset\"}}),customElements.define(\"contexter-meta\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"contexter-box__meta\"}}),customElements.define(\"contexter-summary\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"p-summary entry-summary\"}}),customElements.define(\"contexter-box-head\",class extends HTMLElement{constructor(){super()}connectedCallback(){this.className=\"contexter-box__head\"}}),customElements.define(\"contexter-box-inner\",class extends HTMLElement{constructor(){super()}connectedCallback(){}});class ContexterBox extends HTMLElement{constructor(){super(),this.first=!0,this.shadow=this.attachShadow({mode:\"open\"})}connectedCallback(){if(this.first){this.first=!1;var style=document.createElement(\"style\"),lightDomStyle=(style.innerHTML=`:host {--background: #f5f6f7;--border: darkblue;--blue: #0000ee;--font-color: black;--inner-border: black;font-family: Franklin,Arial,Helvetica,sans-serif;font-size: 14px;background: var(--background);width: 600px;color: var(--font-color);min-height: 90px;display: block;padding: 8px;border: 1px solid var(--border);cursor: pointer;box-sizing: border-box;margin: 6px;contain: content;margin: 6px auto;}// can only select top-level nodes with slotted::slotted(*) {max-width: 100%;display:block;}::slotted([slot=thumbnail]) {max-width: 100%;display:block;}::slotted([slot=header]) {width: 100%;font-size: 1.25rem;font-weight: bold;display:block;margin-bottom: 6px;}::slotted([slot=author]) {max-width: 50%;font-size: 12px;display:inline-block;float: left;}::slotted([slot=time]) {max-width: 50%;font-size: 12px;display:inline-block;float: right;}::slotted([slot=summary]) {width: 100%;margin-top: 6px;padding: 10px 2px;border-top: 1px solid var(--inner-border);font-size: 15px;display:inline-block;margin-bottom: 6px;}contexter-meta {height: auto;margin-bottom: 4px;width: 100%;display: grid;position: relative;min-height: 16px;grid-template-columns: repeat(2, 1fr);}::slotted([slot=keywords]) {width: 80%;padding: 2px 4px;border-top: 1px solid var(--inner-border);font-size: 11px;display: block;float: right;font-style: italic;text-align: right;grid-column: 2/2;grid-row: 1;align-self: end;justify-self: end;}::slotted([slot=keywords]):empty {border-top: 0px solid var(--inner-border);}::slotted([slot=archive-link]) {font-size: 1em;display: inline;}::slotted([slot=archive-link])::after {content: \"|\";display: inline;color: var(--font-color);text-decoration: none;margin: 0 .5em;}::slotted([slot=read-link]) {font-size: 1em;display: inline;}contexter-linkset {width: 80%;padding: 2px 4px;font-size: 13px;float: left;font-weight: bold;grid-row: 1;grid-column: 1/2;align-self: end;justify-self: start;}/* Extra small devices (phones, 600px and down) */@media only screen and (max-width: 600px) {:host {width: 310px;}}/* Small devices (portrait tablets and large phones, 600px and up) */@media only screen and (min-width: 600px) {...}/* Medium devices (landscape tablets, 768px and up) */@media only screen and (min-width: 768px) {...}/* Large devices (laptops/desktops, 992px and up) */@media only screen and (min-width: 992px) {...}/* Extra large devices (large laptops and desktops, 1200px and up) */@media only screen and (min-width: 1200px) {...}@media (prefers-color-scheme: dark){:host {--background: #354150;--border: #1f2b37;--blue: #55b0ff;--font-color: #ffffff;--inner-border: #787a7c;background: var(--background);border: 1px solid var(--border)}}`,document.createElement(\"style\"));lightDomStyle.innerHTML=`contexter-box {contain: content;}contexter-box .read-link {font-weight: bold;}contexter-box a {color: #0000ee;}contexter-box img {width: 100%;border: 0;padding: 0;margin: 0;}/* Extra small devices (phones, 600px and down) */@media only screen and (max-width: 600px) {...}/* Small devices (portrait tablets and large phones, 600px and up) */@media only screen and (min-width: 600px) {...}/* Medium devices (landscape tablets, 768px and up) */@media only screen and (min-width: 768px) {...}/* Large devices (laptops/desktops, 992px and up) */@media only screen and (min-width: 992px) {...}/* Extra large devices (large laptops and desktops, 1200px and up) */@media only screen and (min-width: 1200px) {...}@media (prefers-color-scheme: dark){contexter-box a {color: #55b0ff;}}`,this.appendChild(lightDomStyle),this.shadow.appendChild(style);const innerContainer=document.createElement(\"contexter-box-inner\"),innerSlotThumbnail=(this.shadow.appendChild(innerContainer),document.createElement(\"slot\")),innerSlotHeader=(innerSlotThumbnail.name=\"thumbnail\",innerContainer.appendChild(innerSlotThumbnail),document.createElement(\"slot\")),innerSlotAuthor=(innerSlotHeader.name=\"header\",innerContainer.appendChild(innerSlotHeader),document.createElement(\"slot\")),innerSlotTime=(innerSlotAuthor.name=\"author\",innerContainer.appendChild(innerSlotAuthor),document.createElement(\"slot\")),innerSlotSummary=(innerSlotTime.name=\"time\",innerContainer.appendChild(innerSlotTime),document.createElement(\"slot\")),metaContainer=(innerSlotSummary.name=\"summary\",innerContainer.appendChild(innerSlotSummary),document.createElement(\"contexter-meta\")),innerSlotInfo=(innerContainer.appendChild(metaContainer),document.createElement(\"slot\")),linkContainer=(innerSlotInfo.name=\"keywords\",metaContainer.appendChild(innerSlotInfo),document.createElement(\"contexter-linkset\")),innerSlotArchiveLink=(metaContainer.appendChild(linkContainer),document.createElement(\"slot\")),innerSlotReadLink=(innerSlotArchiveLink.name=\"archive-link\",linkContainer.appendChild(innerSlotArchiveLink),document.createElement(\"slot\"));innerSlotReadLink.name=\"read-link\",linkContainer.appendChild(innerSlotReadLink),this.className=\"contexter-box\",this.onclick=e=>{if(!e.target.className.includes(\"read-link\")&&!e.target.className.includes(\"title-link\")){const mainLinks=this.querySelectorAll(\"a.main-link\");mainLinks[0].click()}}}}}customElements.define(\"contexter-box\",ContexterBox)},window.contexterSetupComplete||window.contexterSetup();</script><contexter-box class=\"link-card h-entry hentry\" itemscope=\"\" itemtype=\"https://schema.org/CreativeWork\"><contexter-thumbnail class=\"thumbnail\" slot=\"thumbnail\"></contexter-thumbnail><contexter-box-head slot=\"header\" class=\"p-name entry-title\" itemprop=\"headline\"><contexter-box-head slot=\"header\" class=\"p-name entry-title\" itemprop=\"headline\"><a is=\"contexter-link\" href=\"https://jamesg.blog/2024/09/20/search-query-lifecycle\" itemprop=\"url\">The lifecycle of a search query on my blog | James' Coffee Blog</a></contexter-box-head></contexter-box-head><time class=\"dt-published published\" slot=\"time\" itemprop=\"datePublished\" datetime=\"2025-04-20T21:45:31.493Z\">4/20/2025</time><contexter-summary class=\"p-summary entry-summary\" itemprop=\"abstract\" slot=\"summary\"><p>Suppose you are looking for my Aeropress recipe. To find this information, you could turn to my blog search engine. This search engine indexes all of my blog posts. The search engine is powered by JameSQL, a NoSQL document database.</p></contexter-summary><contexter-keywordset itemprop=\"keywords\" slot=\"keywords\"></contexter-keywordset><a is=\"contexter-link\" href=\"https://jamesg.blog/2024/09/20/search-query-lifecycle\" class=\"read-link main-link\" itemprop=\"sameAs\" slot=\"read-link\">Read</a></contexter-box>","linkId":"06ccd004584e64cd87ca3adb5f5efadb76b04188","data":{"originalLink":"https://jamesg.blog/2024/09/20/search-query-lifecycle","sanitizedLink":"https://jamesg.blog/2024/09/20/search-query-lifecycle","canonical":"https://jamesg.blog/2024/09/20/search-query-lifecycle","htmlText":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\"/>\n<!-- The preload links below indicate to the browser that the links will be needed soon for loading the page.\n            These links are added to help make pages load faster. -->\n<link as=\"style\" href=\"https://jamesg.blog/assets/styles/styles.css\" rel=\"preload\"/>\n<link as=\"font\" crossorigin=\"\" href=\"/assets/fonts/standard-book-webfont.woff2\" rel=\"preload\" type=\"font/woff2\"/>\n<link as=\"script\" href=\"/assets/js/seasonal.js\" rel=\"preload\"/>\n<!-- styles.css contains the CSS that styles most of this website. -->\n<!-- If you are interested in learning how dark mode works, see https://jamesg.blog/2024/11/24/dark-mode/ -->\n<link href=\"https://jamesg.blog/assets/styles/styles.css\" rel=\"stylesheet\"/>\n<link href=\"/publish\" rel=\"edit\"/>\n<title>The lifecycle of a search query on my blog | James' Coffee Blog</title>\n<!-- I use Webmention to receive comments on my website. Learn more at https://indieweb.org/Webmention -->\n<link href=\"https://webmention.io/jamesg.blog/webmention\" rel=\"webmention\"/>\n<meta content=\"#f7f7f7\" media=\"(prefers-color-scheme: light)\" name=\"theme-color\"/>\n<meta content=\"#02003c\" media=\"(prefers-color-scheme: dark)\" name=\"theme-color\"/>\n<!-- rel=me lets me specify where to find me on other sites.\n      These links can be used with IndieAuth for authentication.\n      If jamesg.blog links to a profile page with rel=me, and that profile page links back to jamesg.blog,\n      it can be inferred that the profile page and jamesg.blog are controlled by the same person.\n      This allows rel=me to be used for authentication, when a two-way link is made.\n      Learn more about rel=me at https://indieweb.org/rel-me -->\n<link href=\"mailto:jamesg@jamesg.blog\" rel=\"me\"/>\n<link href=\"https://github.com/capjamesg\" rel=\"me\"/>\n<!-- This is used to optimise my website for mobile use.\n      See https://developer.mozilla.org/en-US/docs/Web/HTML/Viewport_meta_tag for more information about what the tag means. -->\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\"/>\n<!-- This link lets RSS readers discover my website's RSS feed\n      so that people can subscribe to this website! -->\n<link href=\"https://jamesg.blog/feeds/posts.xml\" rel=\"alternate\" title=\"RSS\" type=\"application/rss+xml\"/>\n<!-- This link contains information that mobile devices use to render progressive web apps (PWAs).\n        PWAs make websites feel more native to some mobile devices when a web page is added to a device home screen\n        or saved as a device app. -->\n<link href=\"https://jamesg.blog/assets/manifest.json\" rel=\"manifest\"/>\n<!--This link tells iPhone devices to use the colour of the background I set on my blog pages when deciding on a background for\n        the iPhone task bar. -->\n<meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\"/>\n<meta content=\"Suppose you are looking for my Aeropress recipe. To find this information, you could turn to my blog search engine. This search engine indexes all of my blog posts. The search engine is powered by JameSQL, a NoSQL document database.\" name=\"description\"/>\n<script>\n            if ('serviceWorker' in navigator) {\n                window.addEventListener('load', function() {\n                    navigator.serviceWorker.register('/service-worker.js');\n                });\n            }\n        </script>\n<!-- This link lets me register my blog as a search engine. I have my blog set up\n         with a shortcut in Firefox that lets me type \"j {query}\" to search my website.\n         You can read how this works at https://jamesg.blog/2024/10/13/search-engine-shortcuts-firefox/ -->\n<link href=\"https://jamesg.blog/assets/opensearch.xml\" rel=\"search\" title=\"James' Coffee Blog Search\" type=\"application/opensearchdescription+xml\"/>\n<!-- screenshots.jamesg.blog generates preview screenshots of my blog posts to show on social platforms.\n            See https://github.com/capjamesg/screenshots to set it up for yourself. -->\n<meta content=\"https://screenshots.jamesg.blog/?url=https://jamesg.blog/2024/09/20/search-query-lifecycle/\" property=\"og:image\"/>\n<!-- This sets the icon that appears in your browser tab. -->\n<link href=\"https://jamesg.blog/assets/mascot/mascot.svg\" rel=\"icon\"/>\n</head>\n<body><style media=\"(prefers-color-scheme: dark)\">pre { line-height: 125%; }\ntd.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\nspan.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\ntd.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\nspan.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\n.highlight .hll { background-color: #49483e }\n.highlight { background: #272822; color: #F8F8F2 }\n.highlight .c { color: #959077 } /* Comment */\n.highlight .err { color: #ED007E; background-color: #1E0010 } /* Error */\n.highlight .esc { color: #F8F8F2 } /* Escape */\n.highlight .g { color: #F8F8F2 } /* Generic */\n.highlight .k { color: #66D9EF } /* Keyword */\n.highlight .l { color: #AE81FF } /* Literal */\n.highlight .n { color: #F8F8F2 } /* Name */\n.highlight .o { color: #FF4689 } /* Operator */\n.highlight .x { color: #F8F8F2 } /* Other */\n.highlight .p { color: #F8F8F2 } /* Punctuation */\n.highlight .ch { color: #959077 } /* Comment.Hashbang */\n.highlight .cm { color: #959077 } /* Comment.Multiline */\n.highlight .cp { color: #959077 } /* Comment.Preproc */\n.highlight .cpf { color: #959077 } /* Comment.PreprocFile */\n.highlight .c1 { color: #959077 } /* Comment.Single */\n.highlight .cs { color: #959077 } /* Comment.Special */\n.highlight .gd { color: #FF4689 } /* Generic.Deleted */\n.highlight .ge { color: #F8F8F2; font-style: italic } /* Generic.Emph */\n.highlight .ges { color: #F8F8F2; font-weight: bold; font-style: italic } /* Generic.EmphStrong */\n.highlight .gr { color: #F8F8F2 } /* Generic.Error */\n.highlight .gh { color: #F8F8F2 } /* Generic.Heading */\n.highlight .gi { color: #A6E22E } /* Generic.Inserted */\n.highlight .go { color: #66D9EF } /* Generic.Output */\n.highlight .gp { color: #FF4689; font-weight: bold } /* Generic.Prompt */\n.highlight .gs { color: #F8F8F2; font-weight: bold } /* Generic.Strong */\n.highlight .gu { color: #959077 } /* Generic.Subheading */\n.highlight .gt { color: #F8F8F2 } /* Generic.Traceback */\n.highlight .kc { color: #66D9EF } /* Keyword.Constant */\n.highlight .kd { color: #66D9EF } /* Keyword.Declaration */\n.highlight .kn { color: #FF4689 } /* Keyword.Namespace */\n.highlight .kp { color: #66D9EF } /* Keyword.Pseudo */\n.highlight .kr { color: #66D9EF } /* Keyword.Reserved */\n.highlight .kt { color: #66D9EF } /* Keyword.Type */\n.highlight .ld { color: #E6DB74 } /* Literal.Date */\n.highlight .m { color: #AE81FF } /* Literal.Number */\n.highlight .s { color: #E6DB74 } /* Literal.String */\n.highlight .na { color: #A6E22E } /* Name.Attribute */\n.highlight .nb { color: #F8F8F2 } /* Name.Builtin */\n.highlight .nc { color: #A6E22E } /* Name.Class */\n.highlight .no { color: #66D9EF } /* Name.Constant */\n.highlight .nd { color: #A6E22E } /* Name.Decorator */\n.highlight .ni { color: #F8F8F2 } /* Name.Entity */\n.highlight .ne { color: #A6E22E } /* Name.Exception */\n.highlight .nf { color: #A6E22E } /* Name.Function */\n.highlight .nl { color: #F8F8F2 } /* Name.Label */\n.highlight .nn { color: #F8F8F2 } /* Name.Namespace */\n.highlight .nx { color: #A6E22E } /* Name.Other */\n.highlight .py { color: #F8F8F2 } /* Name.Property */\n.highlight .nt { color: #FF4689 } /* Name.Tag */\n.highlight .nv { color: #F8F8F2 } /* Name.Variable */\n.highlight .ow { color: #FF4689 } /* Operator.Word */\n.highlight .pm { color: #F8F8F2 } /* Punctuation.Marker */\n.highlight .w { color: #F8F8F2 } /* Text.Whitespace */\n.highlight .mb { color: #AE81FF } /* Literal.Number.Bin */\n.highlight .mf { color: #AE81FF } /* Literal.Number.Float */\n.highlight .mh { color: #AE81FF } /* Literal.Number.Hex */\n.highlight .mi { color: #AE81FF } /* Literal.Number.Integer */\n.highlight .mo { color: #AE81FF } /* Literal.Number.Oct */\n.highlight .sa { color: #E6DB74 } /* Literal.String.Affix */\n.highlight .sb { color: #E6DB74 } /* Literal.String.Backtick */\n.highlight .sc { color: #E6DB74 } /* Literal.String.Char */\n.highlight .dl { color: #E6DB74 } /* Literal.String.Delimiter */\n.highlight .sd { color: #E6DB74 } /* Literal.String.Doc */\n.highlight .s2 { color: #E6DB74 } /* Literal.String.Double */\n.highlight .se { color: #AE81FF } /* Literal.String.Escape */\n.highlight .sh { color: #E6DB74 } /* Literal.String.Heredoc */\n.highlight .si { color: #E6DB74 } /* Literal.String.Interpol */\n.highlight .sx { color: #E6DB74 } /* Literal.String.Other */\n.highlight .sr { color: #E6DB74 } /* Literal.String.Regex */\n.highlight .s1 { color: #E6DB74 } /* Literal.String.Single */\n.highlight .ss { color: #E6DB74 } /* Literal.String.Symbol */\n.highlight .bp { color: #F8F8F2 } /* Name.Builtin.Pseudo */\n.highlight .fm { color: #A6E22E } /* Name.Function.Magic */\n.highlight .vc { color: #F8F8F2 } /* Name.Variable.Class */\n.highlight .vg { color: #F8F8F2 } /* Name.Variable.Global */\n.highlight .vi { color: #F8F8F2 } /* Name.Variable.Instance */\n.highlight .vm { color: #F8F8F2 } /* Name.Variable.Magic */\n.highlight .il { color: #AE81FF } /* Literal.Number.Integer.Long */ .highlight .nn, .highlight .n{color: light-dark(black, var(--dark-foreground-color)) }</style><style media=\"(prefers-color-scheme: light)\">pre { line-height: 125%; }\ntd.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\nspan.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\ntd.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\nspan.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\n.highlight .hll { background-color: #ffffcc }\n.highlight { background: #f8f8f8; }\n.highlight .c { color: #3D7B7B; font-style: italic } /* Comment */\n.highlight .err { border: 1px solid #F00 } /* Error */\n.highlight .k { color: #008000; font-weight: bold } /* Keyword */\n.highlight .o { color: #666 } /* Operator */\n.highlight .ch { color: #3D7B7B; font-style: italic } /* Comment.Hashbang */\n.highlight .cm { color: #3D7B7B; font-style: italic } /* Comment.Multiline */\n.highlight .cp { color: #9C6500 } /* Comment.Preproc */\n.highlight .cpf { color: #3D7B7B; font-style: italic } /* Comment.PreprocFile */\n.highlight .c1 { color: #3D7B7B; font-style: italic } /* Comment.Single */\n.highlight .cs { color: #3D7B7B; font-style: italic } /* Comment.Special */\n.highlight .gd { color: #A00000 } /* Generic.Deleted */\n.highlight .ge { font-style: italic } /* Generic.Emph */\n.highlight .ges { font-weight: bold; font-style: italic } /* Generic.EmphStrong */\n.highlight .gr { color: #E40000 } /* Generic.Error */\n.highlight .gh { color: #000080; font-weight: bold } /* Generic.Heading */\n.highlight .gi { color: #008400 } /* Generic.Inserted */\n.highlight .go { color: #717171 } /* Generic.Output */\n.highlight .gp { color: #000080; font-weight: bold } /* Generic.Prompt */\n.highlight .gs { font-weight: bold } /* Generic.Strong */\n.highlight .gu { color: #800080; font-weight: bold } /* Generic.Subheading */\n.highlight .gt { color: #04D } /* Generic.Traceback */\n.highlight .kc { color: #008000; font-weight: bold } /* Keyword.Constant */\n.highlight .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */\n.highlight .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */\n.highlight .kp { color: #008000 } /* Keyword.Pseudo */\n.highlight .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */\n.highlight .kt { color: #B00040 } /* Keyword.Type */\n.highlight .m { color: #666 } /* Literal.Number */\n.highlight .s { color: #BA2121 } /* Literal.String */\n.highlight .na { color: #687822 } /* Name.Attribute */\n.highlight .nb { color: #008000 } /* Name.Builtin */\n.highlight .nc { color: #00F; font-weight: bold } /* Name.Class */\n.highlight .no { color: #800 } /* Name.Constant */\n.highlight .nd { color: #A2F } /* Name.Decorator */\n.highlight .ni { color: #717171; font-weight: bold } /* Name.Entity */\n.highlight .ne { color: #CB3F38; font-weight: bold } /* Name.Exception */\n.highlight .nf { color: #00F } /* Name.Function */\n.highlight .nl { color: #767600 } /* Name.Label */\n.highlight .nn { color: #00F; font-weight: bold } /* Name.Namespace */\n.highlight .nt { color: #008000; font-weight: bold } /* Name.Tag */\n.highlight .nv { color: #19177C } /* Name.Variable */\n.highlight .ow { color: #A2F; font-weight: bold } /* Operator.Word */\n.highlight .w { color: #BBB } /* Text.Whitespace */\n.highlight .mb { color: #666 } /* Literal.Number.Bin */\n.highlight .mf { color: #666 } /* Literal.Number.Float */\n.highlight .mh { color: #666 } /* Literal.Number.Hex */\n.highlight .mi { color: #666 } /* Literal.Number.Integer */\n.highlight .mo { color: #666 } /* Literal.Number.Oct */\n.highlight .sa { color: #BA2121 } /* Literal.String.Affix */\n.highlight .sb { color: #BA2121 } /* Literal.String.Backtick */\n.highlight .sc { color: #BA2121 } /* Literal.String.Char */\n.highlight .dl { color: #BA2121 } /* Literal.String.Delimiter */\n.highlight .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */\n.highlight .s2 { color: #BA2121 } /* Literal.String.Double */\n.highlight .se { color: #AA5D1F; font-weight: bold } /* Literal.String.Escape */\n.highlight .sh { color: #BA2121 } /* Literal.String.Heredoc */\n.highlight .si { color: #A45A77; font-weight: bold } /* Literal.String.Interpol */\n.highlight .sx { color: #008000 } /* Literal.String.Other */\n.highlight .sr { color: #A45A77 } /* Literal.String.Regex */\n.highlight .s1 { color: #BA2121 } /* Literal.String.Single */\n.highlight .ss { color: #19177C } /* Literal.String.Symbol */\n.highlight .bp { color: #008000 } /* Name.Builtin.Pseudo */\n.highlight .fm { color: #00F } /* Name.Function.Magic */\n.highlight .vc { color: #19177C } /* Name.Variable.Class */\n.highlight .vg { color: #19177C } /* Name.Variable.Global */\n.highlight .vi { color: #19177C } /* Name.Variable.Instance */\n.highlight .vm { color: #19177C } /* Name.Variable.Magic */\n.highlight .il { color: #666 } /* Literal.Number.Integer.Long */</style>\n<style>\n@font-face {\n    font-family: 'MonaspaceArgon';\n    src: url('/assets/fonts/MonaspaceArgon-Regular.woff2') format('woff2');\n    font-weight: 400;\n    font-style: normal;\n}\npre, code {\n    font-family: 'MonaspaceArgon', ui-monospace, monospace;\n}\n</style>\n\n<!--\n  Welcome, fellow web wanderer, to James' Coffee Blog: web developer edition!\n\n  Here, I have documented what various parts of my website mean. I haven't documented everything, but I hope what is below is useful to you.\n\n  In this HTML, you will be introduced to everything from microformats to Webmention to penguins.\n\n  This site is generated using a static site generator. Static site generators use logic to generate HTML.\n\n  If you see a page that lists blog posts, for example, that list was generated with some static site generator magic.\n\n  If you love making personal websites, you may like the IndieWeb community! Join us at https://indieweb.org/discuss.\n\n  If you have questions about my website and how it works, feel free to email readers [at] jamesg [dot] blog!\n\n  Please feel free to use the source code below as inspiration in your web adventures.\n\n  If you are unsure whether to start a personal website: I recommend you give it a try! Your site can be a single web page! You can grow it over time if\n  that interests you. If it doesn't, that's okay, too: your website is _your_ place on the web.\n\n  I hope you have a wonderful day, and that you continue wandering the web to explore more websites!\n\n  --------------\n\n  Nix: How would your jet pack make the world a better place?\n\n  Young Frank Walker: Can't it just be fun?\n\n  - Tomorrowland\n\n  --------------\n  -->\n<main>\n<!-- Skip link so that screen reader users can skip narration of the navigation bar. -->\n<nav>\n<div id=\"navigation_meta\">\n<a class=\"accessibility_label\" href=\"#main\" id=\"skip-to-main-content-link\">Skip to main content</a>\n<!-- My site has a cute mascot! Learn more about him at https://jamesg.blog/mascot/.\n\t\tA friend suggested I come up with a name other than James, which I gave to the mascot in the aforelinked post. I thought about MJ, short for Mascot James.\n\t\tHerein, my mascot will be MJ and James. Or perhaps any of the myriad other nicknames I am likely to come up with over the years.\n\n\t\tI hired someone to design this mascot. The aforelinked post provides more information and a recommendation for the designer!\n\t\t-->\n<p>\n<a aria-label=\"Go to the homepage\" class=\"noborder\" href=\"/\" rel=\"author\">\n<svg height=\"990.7\" id=\"Layer_2\" style=\"height: 76px; width: 76px;\" viewbox=\"0 0 949.51 990.7\" width=\"949.51\" xmlns=\"http://www.w3.org/2000/svg\"><g id=\"Layer_1-2\"><path d=\"m669.2,263.5c6.5-11.31,14.1-23.15,22.96-35.23,11.68-15.92,23.82-29.86,35.8-42.03,22.52-22.86,61.42-11.74,68.67,19.51,4.16,17.89,7.31,37.75,8.58,59.35,1.4,24.01.19,45.64-2.11,64.21,14.21,36.41,83.47,215.11,124.11,370.25,9.9,37.8,24.23,97.58-5.42,150.25-9.57,17-22.12,30.31-37.49,42.59-94.19,75.23-230.89,86.55-315.89,87.87-84.45,1.31-217.62,4.48-335.62-80.93-14.9-10.78-27.07-22.69-36.63-38.04-29.76-47.78-18.85-104.21-11.27-139.48,31.35-145.92,88.33-314.96,100.03-349.4-6.54-17.53-12.71-38.3-16.91-61.99-3.77-21.3-5.29-41.35-5.4-59.72-.18-32.09,35.09-51.91,62.28-34.87,14.47,9.06,29.51,19.82,44.55,32.6,17.42,14.8,31.85,29.76,43.67,43.67,15.28-8.41,32.16-16.13,50.72-22.54,113.48-39.19,220.65-5.28,271.91,15.5\" fill=\"#90a4ae\" stroke=\"#263238\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"20\"></path><path d=\"m735.75,285.1c-16.78-6.79-39.54-15.01-66.55-21.59-55.53-13.56-129.02-20.27-205.36,6.09-18.55,6.4-35.44,14.14-50.72,22.55-11.83-13.92-26.25-28.87-43.67-43.68-15.04-12.77-30.07-23.53-44.55-32.59-27.2-17.03-62.47,2.78-62.28,34.87.11,18.36,1.63,38.41,5.4,59.71,4.2,23.69,10.37,44.47,16.91,62-11.7,34.44-68.68,203.46-100.03,349.39-1.74,8.07-3.64,17.24-5.19,27.16-4.45,28.42-6.02,62.98,7.67,95.34\" fill=\"none\" stroke=\"#263238\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"20\"></path><path d=\"m187.37,844.34l-140.81-37.25c-26.22-6.94-41.84-33.8-34.92-60.03,7.14-27.42,36.59-43.16,63.38-33.89l53.11,18.17,43.7,14.97,7.87,2.69c-4.45,28.42-6.02,62.98,7.67,95.34Z\" fill=\"#90a4ae\" stroke=\"#263238\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"20\"></path><path d=\"m108.96,724.97c-17.93,3.45-33.44,16.8-38.35,35.71\" fill=\"none\" stroke=\"#263238\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"20\"></path><path d=\"m118.78,774.55c4.5-17.32,17.89-29.96,33.89-34.62\" fill=\"none\" stroke=\"#263238\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"20\"></path><path d=\"m466.86,492.53c4.55-5.16,14.7-15.23,31.06-20.85,21.24-7.29,39.54-2.48,45.9-.49\" fill=\"none\" stroke=\"#263238\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"20\"></path><path d=\"m721.66,444.45c5.94-3.48,18.72-9.87,36.02-10.1,22.46-.29,38.34,10,43.76,13.88\" fill=\"none\" stroke=\"#263238\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"20\"></path><path d=\"m585,483.75c1.64.95,8.97,5.09,18.93,5.67,4.16.25,8.78-.12,13.63-1.6,10.5-3.2,17.29-10.1,21.5-16.39,2.72-4.07,4.37-7.88,5.24-10.26.5-1.34.75-2.23.82-2.47\" fill=\"none\" stroke=\"#263238\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"20\"></path><path d=\"m697.65,469.21c-1.71,1.93-11.5,12.65-27.42,13.9-.73.06-1.48.1-2.25.12-13.27.28-23.07-6.29-28.93-11.79\" fill=\"none\" stroke=\"#263238\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"20\"></path><path d=\"m672.35,495.02c0,19.02-15.42,34.44-34.44,34.44s-34.44-15.42-34.44-34.44c0-1.91.16-3.77.46-5.6,4.16.25,8.78-.12,13.63-1.6,10.5-3.2,17.29-10.1,21.5-16.39,5.86,5.5,15.66,12.06,28.93,11.79.76-.02,1.52-.05,2.25-.12,1.37,3.71,2.12,7.73,2.12,11.91Z\" fill=\"#ff8080\" stroke=\"#263238\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"20\"></path><path d=\"m436.6,663.14c.05,3.74.98,34.5,25.36,51.66,25.58,18.01,58.52,8.04,77.02-5.64,4.42-3.27,34.45-25.48,28.18-57.29-3.79-19.2-19.46-35.06-40.39-41.33\" fill=\"none\" stroke=\"#263238\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"20\"></path><path d=\"m870.37,612.95c-.05,3.45-.9,31.76-23.35,47.57-23.56,16.58-53.89,7.41-70.92-5.19-4.07-3.01-31.72-23.46-25.94-52.75,3.49-17.68,17.92-32.29,37.19-38.05\" fill=\"none\" stroke=\"#263238\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"20\"></path><path d=\"m558.01,107.55h-118.59l44.46,189.73c0,30.47,148.27,30.47,148.27,0l44.46-189.73h-118.59Z\" fill=\"#ef5350\" stroke=\"#263238\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"20\"></path><path d=\"m675.44,69.87l-30.12-50.82c0-5-39.09-9.05-87.31-9.05s-87.31,4.05-87.31,9.05l-30.12,50.82c-7.91,1.74-12.34,3.68-12.34,5.74v31.95c0,28.21,259.54,28.21,259.54,0v-31.95c0-2.05-4.43-4-12.35-5.74Z\" fill=\"#fff\" stroke=\"#263238\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"20\"></path><path d=\"m675.7,70.31l-30.38-51.26c0-5-39.09-9.05-87.31-9.05s-87.31,4.05-87.31,9.05l-30.38,51.26c-.59.5-.9,1.01-.9,1.53,0,26.57,237.18,26.57,237.18,0,0-.52-.31-1.03-.9-1.53Z\" fill=\"#fff\" stroke=\"#263238\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"20\"></path><ellipse cx=\"558.96\" cy=\"19.79\" fill=\"#fff\" rx=\"86.47\" ry=\"9.79\" stroke=\"#263238\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"10\"></ellipse><path d=\"m671.99,147.24s-17,78.45-23.03,104.51c-7.95,34.37-174.47,31.79-181.88,0-6.08-26.06-23.04-104.51-23.04-104.51,0,21.64,227.96,21.64,227.96,0Z\" fill=\"#957c67\" stroke=\"#263238\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"20\"></path><path d=\"m617.28,181.71c.83,2.62,1.2,11.24,1.29,15.43-2.06.84-4.13,1.62-6.22,2.33.47,8.25.74,18.03.65,28.91-.16,19.16-12.81,26.32-22.26,25.92-16.9-.59-23.76-17.7-23.77-17.46-.02.15,10.49-8.69,12.1-8.29,1.59.55,4.03,7.47,9.5,7.7,3.96.14,6.03-2.57,6.03-6.49,0-18.17-.47-28.46-.47-28.46,0,.13-9.81.01-10.55-.37-.75-.25-1.5-10.25-1.5-15.4,10.3-.41,35.21-3.29,35.19-3.82Z\" fill=\"#263238\"></path><path d=\"m474.17,927.49c-2.02-4.39-18.08-40.77.79-74.36,19.8-35.25,63.75-41.98,92.94-36.34,6.97,1.35,54.37,10.52,64.77,51.1,6.28,24.5-3.15,51.72-24.07,70.69\" fill=\"none\" stroke=\"#263238\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"20\"></path><path d=\"m775.6,898.24c-3.55-2.48-32.43-23.3-33.08-57.79-.68-36.2,30.22-61.31,55.32-70.18,5.99-2.12,46.76-16.51,73.18,10.12,15.95,16.08,21,41.38,13.44,65.5\" fill=\"none\" stroke=\"#263238\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"20\"></path></g></svg>\n</a>\n</p>\n<p class=\"site-name\">James' Coffee <br/> Blog <span aria-hidden=\"true\" class=\"seasonal_emoji\">☕</span></p>\n<em>with words, wonder.</em>\n</div>\n<section class=\"navigation-full\">\n<p class=\"hide-on-desktop site-name-mobile\">James' Coffee Blog <span aria-hidden=\"true\" class=\"seasonal_emoji\">☕</span></p>\n<ul class=\"navigation\">\n<li><a class=\"p-author\" href=\"https://jamesg.blog/\" rel=\"home author\">Home</a></li>\n<li><label aria-label=\"Show or hide navigation links\" class=\"hide-on-desktop\" id=\"toggle_nav\"><input id=\"toggle_nav_checkbox\" type=\"checkbox\"/></label></li>\n<div class=\"hide-on-mobile\" id=\"extended_nav\">\n<li><a href=\"https://jamesg.blog/indieweb/\"><svg viewbox=\"0 0 256 256\" xmlns=\"http://www.w3.org/2000/svg\"><rect fill=\"none\" height=\"256\" width=\"256\"></rect><circle cx=\"128\" cy=\"128\" fill=\"none\" r=\"96\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\"></circle><path d=\"M168,128c0,64-40,96-40,96s-40-32-40-96,40-96,40-96S168,64,168,128Z\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\"></path><line fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\" x1=\"37.46\" x2=\"218.54\" y1=\"96\" y2=\"96\"></line><line fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\" x1=\"37.46\" x2=\"218.54\" y1=\"160\" y2=\"160\"></line></svg> Indie Web</a></li>\n<li><a href=\"https://jamesg.blog/2024/02/19/personal-website-ideas/\"><svg viewbox=\"0 0 256 256\" xmlns=\"http://www.w3.org/2000/svg\"><rect fill=\"none\" height=\"256\" width=\"256\"></rect><line fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\" x1=\"88\" x2=\"168\" y1=\"232\" y2=\"232\"></line><line fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\" x1=\"128\" x2=\"128\" y1=\"200\" y2=\"144\"></line><polyline fill=\"none\" points=\"96 112 128 144 160 112\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\"></polyline><path d=\"M78.7,167A79.87,79.87,0,0,1,48,104.45C47.76,61.09,82.72,25,126.07,24a80,80,0,0,1,51.34,142.9A24.3,24.3,0,0,0,168,186v6a8,8,0,0,1-8,8H96a8,8,0,0,1-8-8v-6A24.11,24.11,0,0,0,78.7,167Z\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\"></path></svg> Website Ideas</a></li>\n<li><a href=\"https://jamesg.blog/technical-writing/\"><svg viewbox=\"0 0 256 256\" xmlns=\"http://www.w3.org/2000/svg\"><rect fill=\"none\" height=\"256\" width=\"256\"></rect><rect fill=\"none\" height=\"176\" rx=\"8\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\" width=\"64\" x=\"152\" y=\"40\"></rect><line fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\" x1=\"152\" x2=\"184\" y1=\"88\" y2=\"88\"></line><line fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\" x1=\"152\" x2=\"184\" y1=\"128\" y2=\"128\"></line><line fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\" x1=\"152\" x2=\"184\" y1=\"168\" y2=\"168\"></line><path d=\"M40,64,72,32l32,32V208a8,8,0,0,1-8,8H48a8,8,0,0,1-8-8Z\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\"></path><line fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\" x1=\"72\" x2=\"72\" y1=\"72\" y2=\"184\"></line><line fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\" x1=\"104\" x2=\"40\" y1=\"72\" y2=\"72\"></line><line fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\" x1=\"104\" x2=\"40\" y1=\"184\" y2=\"184\"></line></svg> Technical Writing</a></li>\n<li><a href=\"https://jamesg.blog/moments-of-joy/\"><svg viewbox=\"0 0 256 256\" xmlns=\"http://www.w3.org/2000/svg\"><rect fill=\"none\" height=\"256\" width=\"256\"></rect><path d=\"M84.27,171.73l-55.09-20.3a7.92,7.92,0,0,1,0-14.86l55.09-20.3,20.3-55.09a7.92,7.92,0,0,1,14.86,0l20.3,55.09,55.09,20.3a7.92,7.92,0,0,1,0,14.86l-55.09,20.3-20.3,55.09a7.92,7.92,0,0,1-14.86,0Z\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\"></path><line fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\" x1=\"176\" x2=\"176\" y1=\"16\" y2=\"64\"></line><line fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\" x1=\"224\" x2=\"224\" y1=\"72\" y2=\"104\"></line><line fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\" x1=\"152\" x2=\"200\" y1=\"40\" y2=\"40\"></line><line fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\" x1=\"208\" x2=\"240\" y1=\"88\" y2=\"88\"></line></svg> Moments of Joy</a></li>\n<li><a href=\"https://jamesg.blog/explore/\"><svg viewbox=\"0 0 256 256\" xmlns=\"http://www.w3.org/2000/svg\"><rect fill=\"none\" height=\"256\" width=\"256\"></rect><line fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\" x1=\"96\" x2=\"96\" y1=\"184\" y2=\"40\"></line><line fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\" x1=\"160\" x2=\"160\" y1=\"72\" y2=\"216\"></line><polygon fill=\"none\" points=\"96 184 32 200 32 56 96 40 160 72 224 56 224 200 160 216 96 184\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\"></polygon></svg> Explore</a></li>\n<li><a href=\"https://jamesg.blog/wander/\"><svg viewbox=\"0 0 256 256\" xmlns=\"http://www.w3.org/2000/svg\"><rect fill=\"none\" height=\"256\" width=\"256\"></rect><path d=\"M152,192h56v12a28,28,0,0,1-56,0Z\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\"></path><path d=\"M48,168h56v12a28,28,0,0,1-56,0Z\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\"></path><path d=\"M50.74,136C24.54,104,51.48,24,76,24s51.46,80,25.26,112Z\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\"></path><path d=\"M154.74,160c-26.2-32,.74-112,25.26-112s51.46,80,25.26,112Z\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\"></path></svg> Wander</a></li>\n<li><a href=\"https://jamesg.blog/search-pages/\"><svg viewbox=\"0 0 256 256\" xmlns=\"http://www.w3.org/2000/svg\"><rect fill=\"none\" height=\"256\" width=\"256\"></rect><circle cx=\"112\" cy=\"112\" fill=\"none\" r=\"80\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\"></circle><line fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\" x1=\"168.57\" x2=\"224\" y1=\"168.57\" y2=\"224\"></line></svg> Search</a></li>\n<li><a href=\"https://jamesg.blog/email/\"><svg viewbox=\"0 0 256 256\" xmlns=\"http://www.w3.org/2000/svg\"><rect fill=\"none\" height=\"256\" width=\"256\"></rect><circle cx=\"128\" cy=\"128\" fill=\"none\" r=\"40\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\"></circle><path d=\"M184,208c-15.21,10.11-36.37,16-56,16a96,96,0,1,1,96-96c0,22.09-8,40-28,40s-28-17.91-28-40V88\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\"></path></svg> Email</a></li>\n</div>\n</ul>\n</section>\n</nav>\n<div id=\"main\">\n<!-- This page uses microformats to structure different pieces of information.\n    I use h-entry to state this is a post. Any class name that starts with h-, p-, or -e is a microformat.\n    By specifying microformats, some web tools can better understand this post. For example, IndieNews can use\n    the p-name to figure out the title of the post (without the \"| James' Coffee Blog\" I add to the <title> tag of my website.\n    Learn more about h-entry: https://indieweb.org/h-entry\n-->\n<article class=\"h-entry post\">\n<header>\n<h1 class=\"p-name\" id=\"the-lifecycle-of-a-search-query-on-my-blog\">The lifecycle of a search query on my blog</h1>\n<p>\n<em>Published on\n                <a href=\"/2024/09/\"><time class=\"dt-published\" datetime=\"2024-09-20T09:58:00\">September 20, 2024</time></a>\n                under the\n                <a class=\"p-category\" href=\"https://jamesg.blog/coding/\">Coding</a>\n                category.</em>\n</p>\n<span class=\"p-author h-card\" href=\"https://jamesg.blog\" rel=\"author\" style=\"visibility: hidden; display: none;\">James</span>\n</header>\n<section class=\"e-content\">\n<p>Suppose you are looking for my Aeropress recipe. To find this information, you could turn to my <a href=\"/search-pages/\">blog search engine</a>. This search engine indexes all of my blog posts. The search engine is powered by <a href=\"https://github.com/capjamesg/jamesql\">JameSQL</a>, a NoSQL document database.</p>\n<h2 id=\"turning-text-queries-into-json-queries\"><a href=\"#turning-text-queries-into-json-queries\">Turning text queries into JSON queries</a></h2>\n<p>Let’s start with a query:</p>\n<pre>\naeropress recipe\n</pre>\n<p>When you type this query into my search engine, it is first interpreted with a transpiler.</p>\n<p>The transpiler converts the text that you have typed into a JSON structure that the document database powering the search engine can understand. The transpiler understands various special arguments. For example, <code>aeropress -recipe</code> would return results that contain “aeropress” but not “recipe”; <code>aeropress recipe category:recipe</code> would return documents that contain the words <code>aeropress</code> and <code>recipe</code> and have a category equal to <code>recipe</code>.</p>\n<p>Here is the JSON representation of the above query:</p>\n<div class=\"highlight\"><pre><span></span><span class=\"p\">{</span>\n    <span class=\"s2\">\"query\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"and\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">{</span>\n                <span class=\"s2\">\"or\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                    <span class=\"p\">{</span><span class=\"s2\">\"post\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"contains\"</span><span class=\"p\">:</span> <span class=\"s2\">\"aeropress\"</span><span class=\"p\">}},</span>\n                    <span class=\"p\">{</span><span class=\"s2\">\"title_lower\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"contains\"</span><span class=\"p\">:</span> <span class=\"s2\">\"aeropress\"</span><span class=\"p\">}}</span>\n                <span class=\"p\">]</span>\n            <span class=\"p\">},</span>\n            <span class=\"p\">{</span>\n                <span class=\"s2\">\"or\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                    <span class=\"p\">{</span><span class=\"s2\">\"post\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"contains\"</span><span class=\"p\">:</span> <span class=\"s2\">\"recipe\"</span><span class=\"p\">}},</span>\n                    <span class=\"p\">{</span><span class=\"s2\">\"title_lower\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"contains\"</span><span class=\"p\">:</span> <span class=\"s2\">\"recipe\"</span><span class=\"p\">}}</span>\n                <span class=\"p\">]</span>\n            <span class=\"p\">},</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">\"limit\"</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n<p>There is a lot going on in this query. Let’s talk about it step by step.</p>\n<p>The search query has created two OR statements:</p>\n<ul>\n<li>If the post or title contains <code>aeropress</code>.</li>\n<li>If the post or title contains <code>recipe</code>.</li>\n</ul>\n<p>First, all documents whose post content or titles contain <code>aeropress</code> are retrieved. Then, documents whose post content or title contains <code>recipe</code> are retrieved.</p>\n<p>The <code>and</code> statement at the top of the query says that only documents that match both of the inner clauses are returned. This means that documents that match the above two statements – post or title contains <code>aeropress</code>, and post or title contains <code>recipe</code> – will be returned.</p>\n<p>At this stage, rudimentary query simplification rules are applied. These rules ensure that redundant terms are removed. These rules follow Boolean logic.</p>\n<p>For instance, if you search for <code>coffee coffee</code>, the query will be reduced to <code>coffee</code>. If you search for <code>aeropress recipe -recipe</code>, the query will be reduced to <code>recipe</code>, since <code>recipe -recipe</code> cancel each other out.</p>\n<p>Results are limited to 10 documents using the <code>limit</code> query.</p>\n<p>Once the query is generated, a special <code>query_score</code> argument is added that looks like this:</p>\n<pre>\n\"query_score\": \"((_score * decay published) * log((inlinks + 1)))\"\n</pre>\n<p>This algorithm is used to rank documents. The algorithm says:</p>\n<ol>\n<li>Take the TF-IDF document score (keyword relevance).</li>\n<li>Multiply this value by a decay factor.</li>\n<li>Multiply this value by the logarithm of the number of links pointing to a document, plus one.</li>\n</ol>\n<p>The decay factor is equal to:</p>\n<div class=\"highlight\"><pre><span></span><span class=\"p\">(</span><span class=\"mf\">0.9</span> <span class=\"o\">**</span> <span class=\"p\">(</span><span class=\"n\">days_since_post</span> <span class=\"o\">/</span> <span class=\"mi\">30</span><span class=\"p\">))</span>\n</pre></div>\n\n<p>This algorithm allows me to account for keyword relevance, slightly improve the rank of newer pieces of content, and improve the rank of documents that have more internal links pointing to them.</p>\n<h2 id=\"the-query-lifecycle\"><a href=\"#the-query-lifecycle\">The query lifecycle</a></h2>\n<p>At this point, we have a complete JSON query with criteria for:</p>\n<ol>\n<li>Selecting documents.</li>\n<li>Ranking documents.</li>\n<li>Limiting the number of documents returned.</li>\n</ol>\n<p>This query is then sent for evaluation, in the order above.</p>\n<h2 id=\"selecting-documents-that-match-the-query\"><a href=\"#selecting-documents-that-match-the-query\">Selecting documents that match the query</a></h2>\n<p>First, the <code>query</code> key is evaluated to retrieve all documents that match the query. This is done using bottom-up parsing. In this case, it means that the following inner clauses are evaluated first:</p>\n<div class=\"highlight\"><pre><span></span><span class=\"s2\">\"or\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s2\">\"post\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"contains\"</span><span class=\"p\">:</span> <span class=\"s2\">\"aeropress\"</span><span class=\"p\">}},</span>\n    <span class=\"p\">{</span><span class=\"s2\">\"title_lower\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"contains\"</span><span class=\"p\">:</span> <span class=\"s2\">\"aeropress\"</span><span class=\"p\">}}</span>\n<span class=\"p\">]</span>\n</pre></div>\n\n<p>Then, the next or statement is evaluated:</p>\n<div class=\"highlight\"><pre><span></span><span class=\"s2\">\"or\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s2\">\"post\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"contains\"</span><span class=\"p\">:</span> <span class=\"s2\">\"recipe\"</span><span class=\"p\">}},</span>\n    <span class=\"p\">{</span><span class=\"s2\">\"title_lower\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"contains\"</span><span class=\"p\">:</span> <span class=\"s2\">\"recipe\"</span><span class=\"p\">}}</span>\n<span class=\"p\">]</span>\n</pre></div>\n\n<p>Then, the <code>and</code> statement is evaluated that finds the intersection of the results from the above two sub-queries.</p>\n<p>Let’s take a look at one of the innermost clauses:</p>\n<div class=\"highlight\"><pre><span></span><span class=\"p\">{</span><span class=\"s2\">\"post\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"contains\"</span><span class=\"p\">:</span> <span class=\"s2\">\"aeropress\"</span><span class=\"p\">}}</span>\n</pre></div>\n\n<p>This clause says:</p>\n<ol>\n<li>Look up the <code>post</code> index.</li>\n<li>Find all documents that contain <code>aeropress</code>.</li>\n</ol>\n<p>This information is retrieved using a reverse index. A reverse index is an efficient method of retrieving documents.</p>\n<p>The reverse index looks like this:</p>\n<pre>\n\"word\": [docid1, docid2...]\n</pre>\n<p>Where <code>docid</code> corresponds with the IDs of all documents that contain a word. Thus, to find all documents that contain <code>aeropress</code> or <code>recipe</code>, JameSQL can do two dictionary lookups:</p>\n<div class=\"highlight\"><pre><span></span><span class=\"n\">index</span><span class=\"p\">[</span><span class=\"s2\">\"aeropress\"</span><span class=\"p\">]</span>\n<span class=\"n\">index</span><span class=\"p\">[</span><span class=\"s2\">\"recipe\"</span><span class=\"p\">]</span>\n</pre></div>\n\n<p>Each of the dictionary lookups can be completed in O(1) time.</p>\n<p>With a reverse index, the entire query can be processed in sub-millisecond time, even with thousands of documents that each have thousands of words.</p>\n<p>You can learn more about how to build reverse indices in my <a href=\"https://jamesg.blog/2024/07/16/build-a-search-index/\">How to build a search index in Python</a> guide.</p>\n<p>At this stage, document keyword relevance scores are calculated according to the TF-IDF formula. This score specifically says how related each document is to each keyword. The relevance of a document to the query <code>aeropress recipe</code> for a single document is the sum of the TF-IDF for <code>aeropress</code> and <code>recipe</code> for that document.</p>\n<h2 id=\"ranking-documents\"><a href=\"#ranking-documents\">Ranking documents</a></h2>\n<p>When the <code>query</code> key is evaluated, the search engine has a list of <em>candidate documents</em>. These are documents that match the search criteria. Then, these documents can be ranked.</p>\n<p>The ranking formula, <code>((_score * decay published) * log((inlinks + 1)))</code>, is implemented using another grammar. This grammar is for writing ranking algorithms.</p>\n<p>The ranking formula is parsed into a syntax tree. This syntax tree and accompanying logic is then used to evaluate every document.</p>\n<p>By the end of this process, every document has a score based on its keyword relevance (<code>_score</code>), its published date, and the number of internal links pointing to the document.</p>\n<p>The top 10 results are then retrieved, per the <code>limit</code> value.</p>\n<p>Then, results are returned to the front-end.</p>\n<p>Here is an example of a result to the query aeropress recipe:</p>\n<p><img alt=\"Two search results for the query aeropress recipe\" src=\"https://jamesg.blog/assets/searchresult.webp\"/></p>\n<p>Of note, the first result is not particularly relevant. The post contains <code>aeropress recipe</code> as an example. This could be mitigated by giving a boost to the title field, so that titles get more weight. I still need to implement this.</p>\n<p>With that said, the second result answers our query exactly. The second result is my Aeropress recipe.</p>\n<h2 id=\"conclusion\"><a href=\"#conclusion\">Conclusion</a></h2>\n<p>The search system above has three main components:</p>\n<ol>\n<li>A grammar that turns a user query (i.e. <code>aeropress recipe</code>) into a JSON format that can be evaluated by the query engine.</li>\n<li>A bottoms-up parser that evaluates the JSON query and returns all documents that match the query structure.</li>\n<li>A ranking grammar that parses a ranking algorithm and computes scores for every document.</li>\n</ol>\n<p>With the above system, documents can be retrieved in &lt; 10ms then sent to the browser for display.</p>\n<p>If you have any questions about how the system works, feel free to email me at readers [at] jamesg [dot] blog.</p>\n</section>\n</article>\n<p class=\"accessibility_label\">\n<a href=\"#main\" id=\"back-to-top\">Go Back to the Top</a>\n</p>\n</div>\n</main>\n<script src=\"https://jamesg.blog/assets/js/seasonal.js\"></script>\n<!-- This code is used to add an edit button for me when I am logged in. \n            You can read about how this code works at https://jamesg.blog/2025/03/15/adding-an-edit-button-to-my-static-site-on-mobile. -->\n<a href=\"javascript:void(0)\" id=\"edit-link\" style=\"display: none; visibility: hidden;\">\n<div class=\"edit-button\">\n<svg style=\"height: 100%;color: var(--dark-border-color);\" viewbox=\"0 0 256 256\" xmlns=\"http://www.w3.org/2000/svg\"><rect fill=\"none\" height=\"256\" width=\"256\"></rect><path d=\"M92.69,216H48a8,8,0,0,1-8-8V163.31a8,8,0,0,1,2.34-5.65L165.66,34.34a8,8,0,0,1,11.31,0L221.66,79a8,8,0,0,1,0,11.31L98.34,213.66A8,8,0,0,1,92.69,216Z\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\"></path><line fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\" x1=\"136\" x2=\"192\" y1=\"64\" y2=\"120\"></line><line fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\" x1=\"164\" x2=\"68\" y1=\"92\" y2=\"188\"></line><line fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\" x1=\"95.49\" x2=\"40.51\" y1=\"215.49\" y2=\"160.51\"></line>\n</svg>\n</div>\n</a>\n<script>\n            if (window.location.pathname == \"/mobile-edit\") {\n                localStorage.setItem(\"enabled-editing-mode\", \"true\");\n            }\n            if (localStorage.getItem(\"enabled-editing-mode\") == \"true\") {\n                var editLinkButton = document.getElementById(\"edit-link\");\n                editLinkButton.style.display = \"inline\";\n                editLinkButton.style.visibility = \"visible\";\n                \n                var url = window.location.href;\n                    var githubUrl = \"github://github.com/capjamesg/jamesg.blog/\";\n                    var postMatch = url.match(/https:\\/\\/jamesg\\.blog\\/(\\d{4})\\/(\\d{2})\\/(\\d{2})\\/([^\\/]+)/);\n                    var gh_url = null;\n                    if (postMatch) {\n                        var year = postMatch[1];\n                        var month = postMatch[2];\n                        var day = postMatch[3];\n                        var slug = postMatch[4];\n                        var gh_url = `${githubUrl}/tree/main/pages/posts/${year}-${month}-${day}-${slug}.md`;\n                    }\n                    var exampleMatch = url.match(/https:\\/\\/jamesg\\.blog\\/([^\\/]+)/);\n                    var dataFormat = document.body.getElementsByClassName(\"file-format\");\n                    if (dataFormat.length > 0 && dataFormat[0].value == \"markdown\") {\n                        var format = \"md\";\n                    } else {\n                        var format = \"html\";\n                    }\n                    if (exampleMatch && !gh_url) {\n                        var example = exampleMatch[1];\n                        var filename = `${encodeURIComponent(example)}.${format}`;\n                        var title = encodeURIComponent(example);\n                        var capitalized_title = String(filename).charAt(0).toUpperCase() + String(title).slice(1);\n                        var capitalized_title = capitalized_title.replace(/-/g, \" \");\n                        var value = `---\\nlayout: default\\ntitle: ${capitalized_title}\\npermalink: /${example}/\\n---\\n\\n<h1>${capitalized_title}</h1>\\n\\n<p></p>`;\n                        var value = encodeURIComponent(value);\n                        if (document.body.innerText.includes(\"Page Not Found\")) {\n                            var gh_url = `${githubUrl}/tree/main/pages/templates/wiki/?filename=${filename}&value=${value}`;\n                        }\n                        var gh_url = `${githubUrl}/tree/main/pages/templates/wiki/${filename}`;\n                    }\n                    editLinkButton.href = \"#\";\n                }\n\n                var timer;\n                var toggled = false;\n\n                var button = document.querySelector('#edit-link')\n\n                button.addEventListener('touchstart', function() {\n                    // button.innerHTML = 'loading...'\n                    timer = setTimeout(function() {\n                        toggled = true;\n                    }, 300)\n                }, false)\n\n                button.addEventListener('touchend', function() {\n                    clearTimeout(timer)\n                    if (toggled) { \n                        window.location.href = \"/mobile-edit\";\n                    } else {\n                        window.location.href = gh_url;\n                    }\n                    return false;\n                }, false)\n        </script>\n</body>\n</html>","oembed":false,"readabilityObject":{"title":"The lifecycle of a search query on my blog","content":"<div id=\"readability-page-1\" class=\"page\"><section>\n<p>Suppose you are looking for my Aeropress recipe. To find this information, you could turn to my <a href=\"/search-pages/\">blog search engine</a>. This search engine indexes all of my blog posts. The search engine is powered by <a href=\"https://github.com/capjamesg/jamesql\">JameSQL</a>, a NoSQL document database.</p>\n<h2 id=\"turning-text-queries-into-json-queries\"><a href=\"#turning-text-queries-into-json-queries\">Turning text queries into JSON queries</a></h2>\n<p>Let’s start with a query:</p>\n<pre>aeropress recipe\n</pre>\n<p>When you type this query into my search engine, it is first interpreted with a transpiler.</p>\n<p>The transpiler converts the text that you have typed into a JSON structure that the document database powering the search engine can understand. The transpiler understands various special arguments. For example, <code>aeropress -recipe</code> would return results that contain “aeropress” but not “recipe”; <code>aeropress recipe category:recipe</code> would return documents that contain the words <code>aeropress</code> and <code>recipe</code> and have a category equal to <code>recipe</code>.</p>\n<p>Here is the JSON representation of the above query:</p>\n<div><pre><span></span><span>{</span>\n    <span>\"query\"</span><span>:</span> <span>{</span>\n        <span>\"and\"</span><span>:</span> <span>[</span>\n            <span>{</span>\n                <span>\"or\"</span><span>:</span> <span>[</span>\n                    <span>{</span><span>\"post\"</span><span>:</span> <span>{</span><span>\"contains\"</span><span>:</span> <span>\"aeropress\"</span><span>}},</span>\n                    <span>{</span><span>\"title_lower\"</span><span>:</span> <span>{</span><span>\"contains\"</span><span>:</span> <span>\"aeropress\"</span><span>}}</span>\n                <span>]</span>\n            <span>},</span>\n            <span>{</span>\n                <span>\"or\"</span><span>:</span> <span>[</span>\n                    <span>{</span><span>\"post\"</span><span>:</span> <span>{</span><span>\"contains\"</span><span>:</span> <span>\"recipe\"</span><span>}},</span>\n                    <span>{</span><span>\"title_lower\"</span><span>:</span> <span>{</span><span>\"contains\"</span><span>:</span> <span>\"recipe\"</span><span>}}</span>\n                <span>]</span>\n            <span>},</span>\n        <span>]</span>\n    <span>},</span>\n    <span>\"limit\"</span><span>:</span> <span>10</span><span>,</span>\n<span>}</span>\n</pre></div>\n\n<p>There is a lot going on in this query. Let’s talk about it step by step.</p>\n<p>The search query has created two OR statements:</p>\n<ul>\n<li>If the post or title contains <code>aeropress</code>.</li>\n<li>If the post or title contains <code>recipe</code>.</li>\n</ul>\n<p>First, all documents whose post content or titles contain <code>aeropress</code> are retrieved. Then, documents whose post content or title contains <code>recipe</code> are retrieved.</p>\n<p>The <code>and</code> statement at the top of the query says that only documents that match both of the inner clauses are returned. This means that documents that match the above two statements – post or title contains <code>aeropress</code>, and post or title contains <code>recipe</code> – will be returned.</p>\n<p>At this stage, rudimentary query simplification rules are applied. These rules ensure that redundant terms are removed. These rules follow Boolean logic.</p>\n<p>For instance, if you search for <code>coffee coffee</code>, the query will be reduced to <code>coffee</code>. If you search for <code>aeropress recipe -recipe</code>, the query will be reduced to <code>recipe</code>, since <code>recipe -recipe</code> cancel each other out.</p>\n<p>Results are limited to 10 documents using the <code>limit</code> query.</p>\n<p>Once the query is generated, a special <code>query_score</code> argument is added that looks like this:</p>\n<pre>\"query_score\": \"((_score * decay published) * log((inlinks + 1)))\"\n</pre>\n<p>This algorithm is used to rank documents. The algorithm says:</p>\n<ol>\n<li>Take the TF-IDF document score (keyword relevance).</li>\n<li>Multiply this value by a decay factor.</li>\n<li>Multiply this value by the logarithm of the number of links pointing to a document, plus one.</li>\n</ol>\n<p>The decay factor is equal to:</p>\n<div><pre><span></span><span>(</span><span>0.9</span> <span>**</span> <span>(</span><span>days_since_post</span> <span>/</span> <span>30</span><span>))</span>\n</pre></div>\n\n<p>This algorithm allows me to account for keyword relevance, slightly improve the rank of newer pieces of content, and improve the rank of documents that have more internal links pointing to them.</p>\n<h2 id=\"the-query-lifecycle\"><a href=\"#the-query-lifecycle\">The query lifecycle</a></h2>\n<p>At this point, we have a complete JSON query with criteria for:</p>\n<ol>\n<li>Selecting documents.</li>\n<li>Ranking documents.</li>\n<li>Limiting the number of documents returned.</li>\n</ol>\n<p>This query is then sent for evaluation, in the order above.</p>\n<h2 id=\"selecting-documents-that-match-the-query\"><a href=\"#selecting-documents-that-match-the-query\">Selecting documents that match the query</a></h2>\n<p>First, the <code>query</code> key is evaluated to retrieve all documents that match the query. This is done using bottom-up parsing. In this case, it means that the following inner clauses are evaluated first:</p>\n<div><pre><span></span><span>\"or\"</span><span>:</span> <span>[</span>\n    <span>{</span><span>\"post\"</span><span>:</span> <span>{</span><span>\"contains\"</span><span>:</span> <span>\"aeropress\"</span><span>}},</span>\n    <span>{</span><span>\"title_lower\"</span><span>:</span> <span>{</span><span>\"contains\"</span><span>:</span> <span>\"aeropress\"</span><span>}}</span>\n<span>]</span>\n</pre></div>\n\n<p>Then, the next or statement is evaluated:</p>\n<div><pre><span></span><span>\"or\"</span><span>:</span> <span>[</span>\n    <span>{</span><span>\"post\"</span><span>:</span> <span>{</span><span>\"contains\"</span><span>:</span> <span>\"recipe\"</span><span>}},</span>\n    <span>{</span><span>\"title_lower\"</span><span>:</span> <span>{</span><span>\"contains\"</span><span>:</span> <span>\"recipe\"</span><span>}}</span>\n<span>]</span>\n</pre></div>\n\n<p>Then, the <code>and</code> statement is evaluated that finds the intersection of the results from the above two sub-queries.</p>\n<p>Let’s take a look at one of the innermost clauses:</p>\n<div><pre><span></span><span>{</span><span>\"post\"</span><span>:</span> <span>{</span><span>\"contains\"</span><span>:</span> <span>\"aeropress\"</span><span>}}</span>\n</pre></div>\n\n<p>This clause says:</p>\n<ol>\n<li>Look up the <code>post</code> index.</li>\n<li>Find all documents that contain <code>aeropress</code>.</li>\n</ol>\n<p>This information is retrieved using a reverse index. A reverse index is an efficient method of retrieving documents.</p>\n<p>The reverse index looks like this:</p>\n<pre>\"word\": [docid1, docid2...]\n</pre>\n<p>Where <code>docid</code> corresponds with the IDs of all documents that contain a word. Thus, to find all documents that contain <code>aeropress</code> or <code>recipe</code>, JameSQL can do two dictionary lookups:</p>\n<div><pre><span></span><span>index</span><span>[</span><span>\"aeropress\"</span><span>]</span>\n<span>index</span><span>[</span><span>\"recipe\"</span><span>]</span>\n</pre></div>\n\n<p>Each of the dictionary lookups can be completed in O(1) time.</p>\n<p>With a reverse index, the entire query can be processed in sub-millisecond time, even with thousands of documents that each have thousands of words.</p>\n<p>You can learn more about how to build reverse indices in my <a href=\"https://jamesg.blog/2024/07/16/build-a-search-index/\">How to build a search index in Python</a> guide.</p>\n<p>At this stage, document keyword relevance scores are calculated according to the TF-IDF formula. This score specifically says how related each document is to each keyword. The relevance of a document to the query <code>aeropress recipe</code> for a single document is the sum of the TF-IDF for <code>aeropress</code> and <code>recipe</code> for that document.</p>\n<h2 id=\"ranking-documents\"><a href=\"#ranking-documents\">Ranking documents</a></h2>\n<p>When the <code>query</code> key is evaluated, the search engine has a list of <em>candidate documents</em>. These are documents that match the search criteria. Then, these documents can be ranked.</p>\n<p>The ranking formula, <code>((_score * decay published) * log((inlinks + 1)))</code>, is implemented using another grammar. This grammar is for writing ranking algorithms.</p>\n<p>The ranking formula is parsed into a syntax tree. This syntax tree and accompanying logic is then used to evaluate every document.</p>\n<p>By the end of this process, every document has a score based on its keyword relevance (<code>_score</code>), its published date, and the number of internal links pointing to the document.</p>\n<p>The top 10 results are then retrieved, per the <code>limit</code> value.</p>\n<p>Then, results are returned to the front-end.</p>\n<p>Here is an example of a result to the query aeropress recipe:</p>\n<p><img alt=\"Two search results for the query aeropress recipe\" src=\"https://jamesg.blog/assets/searchresult.webp\"></p>\n<p>Of note, the first result is not particularly relevant. The post contains <code>aeropress recipe</code> as an example. This could be mitigated by giving a boost to the title field, so that titles get more weight. I still need to implement this.</p>\n<p>With that said, the second result answers our query exactly. The second result is my Aeropress recipe.</p>\n<h2 id=\"conclusion\"><a href=\"#conclusion\">Conclusion</a></h2>\n<p>The search system above has three main components:</p>\n<ol>\n<li>A grammar that turns a user query (i.e. <code>aeropress recipe</code>) into a JSON format that can be evaluated by the query engine.</li>\n<li>A bottoms-up parser that evaluates the JSON query and returns all documents that match the query structure.</li>\n<li>A ranking grammar that parses a ranking algorithm and computes scores for every document.</li>\n</ol>\n<p>With the above system, documents can be retrieved in &lt; 10ms then sent to the browser for display.</p>\n<p>If you have any questions about how the system works, feel free to email me at readers [at] jamesg [dot] blog.</p>\n</section></div>","textContent":"\nSuppose you are looking for my Aeropress recipe. To find this information, you could turn to my blog search engine. This search engine indexes all of my blog posts. The search engine is powered by JameSQL, a NoSQL document database.\nTurning text queries into JSON queries\nLet’s start with a query:\naeropress recipe\n\nWhen you type this query into my search engine, it is first interpreted with a transpiler.\nThe transpiler converts the text that you have typed into a JSON structure that the document database powering the search engine can understand. The transpiler understands various special arguments. For example, aeropress -recipe would return results that contain “aeropress” but not “recipe”; aeropress recipe category:recipe would return documents that contain the words aeropress and recipe and have a category equal to recipe.\nHere is the JSON representation of the above query:\n{\n    \"query\": {\n        \"and\": [\n            {\n                \"or\": [\n                    {\"post\": {\"contains\": \"aeropress\"}},\n                    {\"title_lower\": {\"contains\": \"aeropress\"}}\n                ]\n            },\n            {\n                \"or\": [\n                    {\"post\": {\"contains\": \"recipe\"}},\n                    {\"title_lower\": {\"contains\": \"recipe\"}}\n                ]\n            },\n        ]\n    },\n    \"limit\": 10,\n}\n\n\nThere is a lot going on in this query. Let’s talk about it step by step.\nThe search query has created two OR statements:\n\nIf the post or title contains aeropress.\nIf the post or title contains recipe.\n\nFirst, all documents whose post content or titles contain aeropress are retrieved. Then, documents whose post content or title contains recipe are retrieved.\nThe and statement at the top of the query says that only documents that match both of the inner clauses are returned. This means that documents that match the above two statements – post or title contains aeropress, and post or title contains recipe – will be returned.\nAt this stage, rudimentary query simplification rules are applied. These rules ensure that redundant terms are removed. These rules follow Boolean logic.\nFor instance, if you search for coffee coffee, the query will be reduced to coffee. If you search for aeropress recipe -recipe, the query will be reduced to recipe, since recipe -recipe cancel each other out.\nResults are limited to 10 documents using the limit query.\nOnce the query is generated, a special query_score argument is added that looks like this:\n\"query_score\": \"((_score * decay published) * log((inlinks + 1)))\"\n\nThis algorithm is used to rank documents. The algorithm says:\n\nTake the TF-IDF document score (keyword relevance).\nMultiply this value by a decay factor.\nMultiply this value by the logarithm of the number of links pointing to a document, plus one.\n\nThe decay factor is equal to:\n(0.9 ** (days_since_post / 30))\n\n\nThis algorithm allows me to account for keyword relevance, slightly improve the rank of newer pieces of content, and improve the rank of documents that have more internal links pointing to them.\nThe query lifecycle\nAt this point, we have a complete JSON query with criteria for:\n\nSelecting documents.\nRanking documents.\nLimiting the number of documents returned.\n\nThis query is then sent for evaluation, in the order above.\nSelecting documents that match the query\nFirst, the query key is evaluated to retrieve all documents that match the query. This is done using bottom-up parsing. In this case, it means that the following inner clauses are evaluated first:\n\"or\": [\n    {\"post\": {\"contains\": \"aeropress\"}},\n    {\"title_lower\": {\"contains\": \"aeropress\"}}\n]\n\n\nThen, the next or statement is evaluated:\n\"or\": [\n    {\"post\": {\"contains\": \"recipe\"}},\n    {\"title_lower\": {\"contains\": \"recipe\"}}\n]\n\n\nThen, the and statement is evaluated that finds the intersection of the results from the above two sub-queries.\nLet’s take a look at one of the innermost clauses:\n{\"post\": {\"contains\": \"aeropress\"}}\n\n\nThis clause says:\n\nLook up the post index.\nFind all documents that contain aeropress.\n\nThis information is retrieved using a reverse index. A reverse index is an efficient method of retrieving documents.\nThe reverse index looks like this:\n\"word\": [docid1, docid2...]\n\nWhere docid corresponds with the IDs of all documents that contain a word. Thus, to find all documents that contain aeropress or recipe, JameSQL can do two dictionary lookups:\nindex[\"aeropress\"]\nindex[\"recipe\"]\n\n\nEach of the dictionary lookups can be completed in O(1) time.\nWith a reverse index, the entire query can be processed in sub-millisecond time, even with thousands of documents that each have thousands of words.\nYou can learn more about how to build reverse indices in my How to build a search index in Python guide.\nAt this stage, document keyword relevance scores are calculated according to the TF-IDF formula. This score specifically says how related each document is to each keyword. The relevance of a document to the query aeropress recipe for a single document is the sum of the TF-IDF for aeropress and recipe for that document.\nRanking documents\nWhen the query key is evaluated, the search engine has a list of candidate documents. These are documents that match the search criteria. Then, these documents can be ranked.\nThe ranking formula, ((_score * decay published) * log((inlinks + 1))), is implemented using another grammar. This grammar is for writing ranking algorithms.\nThe ranking formula is parsed into a syntax tree. This syntax tree and accompanying logic is then used to evaluate every document.\nBy the end of this process, every document has a score based on its keyword relevance (_score), its published date, and the number of internal links pointing to the document.\nThe top 10 results are then retrieved, per the limit value.\nThen, results are returned to the front-end.\nHere is an example of a result to the query aeropress recipe:\n\nOf note, the first result is not particularly relevant. The post contains aeropress recipe as an example. This could be mitigated by giving a boost to the title field, so that titles get more weight. I still need to implement this.\nWith that said, the second result answers our query exactly. The second result is my Aeropress recipe.\nConclusion\nThe search system above has three main components:\n\nA grammar that turns a user query (i.e. aeropress recipe) into a JSON format that can be evaluated by the query engine.\nA bottoms-up parser that evaluates the JSON query and returns all documents that match the query structure.\nA ranking grammar that parses a ranking algorithm and computes scores for every document.\n\nWith the above system, documents can be retrieved in < 10ms then sent to the browser for display.\nIf you have any questions about how the system works, feel free to email me at readers [at] jamesg [dot] blog.\n","length":6831,"excerpt":"Suppose you are looking for my Aeropress recipe. To find this information, you could turn to my blog search engine. This search engine indexes all of my blog posts. The search engine is powered by JameSQL, a NoSQL document database.","byline":"Home","dir":null,"siteName":null,"lang":"en"},"finalizedMeta":{"title":"The lifecycle of a search query on my blog | James' Coffee Blog","description":"Suppose you are looking for my Aeropress recipe. To find this information, you could turn to my blog search engine. This search engine indexes all of my blog posts. The search engine is powered by JameSQL, a NoSQL document database.","author":false,"creator":"","publisher":false,"date":"2025-04-20T21:45:31.493Z","topics":[]},"jsonLd":{"@type":false,"headline":false,"description":false,"image":[],"mainEntityOfPage":{"@type":false,"@id":false},"datePublished":false,"dateModified":false,"isAccessibleForFree":false,"isPartOf":{"@type":[],"name":false,"productID":false},"discussionUrl":false,"license":false,"author":{"@type":false,"name":false,"description":false,"sameAs":false,"image":{"@type":false,"url":false},"givenName":false,"familyName":false,"alternateName":false,"publishingPrinciples":false},"publisher":{"@type":false,"name":false,"description":false,"sameAs":false,"logo":{"@type":false,"url":false},"publishingPrinciples":false},"editor":{"@type":false,"name":false,"description":false,"sameAs":false,"image":{"@type":false,"url":false},"givenName":false,"familyName":false,"alternateName":false,"publishingPrinciples":false}},"twitterObj":false,"status":200,"metadata":{"author":false,"title":"The lifecycle of a search query on my blog | James' Coffee Blog","description":"Suppose you are looking for my Aeropress recipe. To find this information, you could turn to my blog search engine. This search engine indexes all of my blog posts. The search engine is powered by JameSQL, a NoSQL document database.","canonical":"https://jamesg.blog/2024/09/20/search-query-lifecycle","keywords":[],"image":"https://jamesg.blog/assets/searchresult.webp","firstParagraph":"\n\n\n\n"},"dublinCore":{},"opengraph":{"title":false,"description":false,"url":false,"site_name":false,"locale":false,"type":false,"typeObject":{"published_time":false,"modified_time":false,"author":false,"publisher":false,"section":false,"tag":[]},"image":"https://screenshots.jamesg.blog/?url=https://jamesg.blog/2024/09/20/search-query-lifecycle/"},"twitter":{"site":false,"description":false,"card":false,"creator":false,"title":false,"image":false},"archivedData":{"link":false,"wayback":false}}}