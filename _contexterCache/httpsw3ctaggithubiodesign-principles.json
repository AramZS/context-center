{"initialLink":"https://w3ctag.github.io/design-principles","sanitizedLink":"https://w3ctag.github.io/design-principles","finalLink":"https://www.w3.org/TR/design-principles/","htmlEmbed":"<script>window.contexterSetup=window.contexterSetup||function(){window.contexterSetupComplete=!0;class ContexterLink extends HTMLAnchorElement{constructor(){super()}connectedCallback(){this.setAttribute(\"target\",\"_blank\")}}customElements.define(\"contexter-link\",ContexterLink,{extends:\"a\"}),customElements.define(\"contexter-inner\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"contexter-box__inner\"}}),customElements.define(\"contexter-thumbnail\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"contexter-box__thumbnail\"}}),customElements.define(\"contexter-byline\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"contexter-box__byline\"}}),customElements.define(\"contexter-keywordset\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"contexter-box__keywordset\"}}),customElements.define(\"contexter-linkset\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"contexter-box__linkset\"}}),customElements.define(\"contexter-meta\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"contexter-box__meta\"}}),customElements.define(\"contexter-summary\",class extends HTMLElement{constructor(){super()}attributeChangedCallback(name,oldValue,newValue){}connectedCallback(){this.className=\"p-summary entry-summary\"}}),customElements.define(\"contexter-box-head\",class extends HTMLElement{constructor(){super()}connectedCallback(){this.className=\"contexter-box__head\"}}),customElements.define(\"contexter-box-inner\",class extends HTMLElement{constructor(){super()}connectedCallback(){}});class ContexterBox extends HTMLElement{constructor(){super(),this.first=!0,this.shadow=this.attachShadow({mode:\"open\"})}connectedCallback(){if(this.first){this.first=!1;var style=document.createElement(\"style\"),lightDomStyle=(style.innerHTML=`:host {--background: #f5f6f7;--border: darkblue;--blue: #0000ee;--font-color: black;--inner-border: black;font-family: Franklin,Arial,Helvetica,sans-serif;font-size: 14px;background: var(--background);width: 600px;color: var(--font-color);min-height: 90px;display: block;padding: 8px;border: 1px solid var(--border);cursor: pointer;box-sizing: border-box;margin: 6px;contain: content;margin: 6px auto;}// can only select top-level nodes with slotted::slotted(*) {max-width: 100%;display:block;}::slotted([slot=thumbnail]) {max-width: 100%;display:block;}::slotted([slot=header]) {width: 100%;font-size: 1.25rem;font-weight: bold;display:block;margin-bottom: 6px;}::slotted([slot=author]) {max-width: 50%;font-size: 12px;display:inline-block;float: left;}::slotted([slot=time]) {max-width: 50%;font-size: 12px;display:inline-block;float: right;}::slotted([slot=summary]) {width: 100%;margin-top: 6px;padding: 10px 2px;border-top: 1px solid var(--inner-border);font-size: 15px;display:inline-block;margin-bottom: 6px;}contexter-meta {height: auto;margin-bottom: 4px;width: 100%;display: grid;position: relative;min-height: 16px;grid-template-columns: repeat(2, 1fr);}::slotted([slot=keywords]) {width: 80%;padding: 2px 4px;border-top: 1px solid var(--inner-border);font-size: 11px;display: block;float: right;font-style: italic;text-align: right;grid-column: 2/2;grid-row: 1;align-self: end;justify-self: end;}::slotted([slot=keywords]):empty {border-top: 0px solid var(--inner-border);}::slotted([slot=archive-link]) {font-size: 1em;display: inline;}::slotted([slot=archive-link])::after {content: \"|\";display: inline;color: var(--font-color);text-decoration: none;margin: 0 .5em;}::slotted([slot=read-link]) {font-size: 1em;display: inline;}contexter-linkset {width: 80%;padding: 2px 4px;font-size: 13px;float: left;font-weight: bold;grid-row: 1;grid-column: 1/2;align-self: end;justify-self: start;}/* Extra small devices (phones, 600px and down) */@media only screen and (max-width: 600px) {:host {width: 310px;}}/* Small devices (portrait tablets and large phones, 600px and up) */@media only screen and (min-width: 600px) {...}/* Medium devices (landscape tablets, 768px and up) */@media only screen and (min-width: 768px) {...}/* Large devices (laptops/desktops, 992px and up) */@media only screen and (min-width: 992px) {...}/* Extra large devices (large laptops and desktops, 1200px and up) */@media only screen and (min-width: 1200px) {...}@media (prefers-color-scheme: dark){:host {--background: #354150;--border: #1f2b37;--blue: #55b0ff;--font-color: #ffffff;--inner-border: #787a7c;background: var(--background);border: 1px solid var(--border)}}`,document.createElement(\"style\"));lightDomStyle.innerHTML=`contexter-box {contain: content;}contexter-box .read-link {font-weight: bold;}contexter-box a {color: #0000ee;}contexter-box img {width: 100%;border: 0;padding: 0;margin: 0;}/* Extra small devices (phones, 600px and down) */@media only screen and (max-width: 600px) {...}/* Small devices (portrait tablets and large phones, 600px and up) */@media only screen and (min-width: 600px) {...}/* Medium devices (landscape tablets, 768px and up) */@media only screen and (min-width: 768px) {...}/* Large devices (laptops/desktops, 992px and up) */@media only screen and (min-width: 992px) {...}/* Extra large devices (large laptops and desktops, 1200px and up) */@media only screen and (min-width: 1200px) {...}@media (prefers-color-scheme: dark){contexter-box a {color: #55b0ff;}}`,this.appendChild(lightDomStyle),this.shadow.appendChild(style);const innerContainer=document.createElement(\"contexter-box-inner\"),innerSlotThumbnail=(this.shadow.appendChild(innerContainer),document.createElement(\"slot\")),innerSlotHeader=(innerSlotThumbnail.name=\"thumbnail\",innerContainer.appendChild(innerSlotThumbnail),document.createElement(\"slot\")),innerSlotAuthor=(innerSlotHeader.name=\"header\",innerContainer.appendChild(innerSlotHeader),document.createElement(\"slot\")),innerSlotTime=(innerSlotAuthor.name=\"author\",innerContainer.appendChild(innerSlotAuthor),document.createElement(\"slot\")),innerSlotSummary=(innerSlotTime.name=\"time\",innerContainer.appendChild(innerSlotTime),document.createElement(\"slot\")),metaContainer=(innerSlotSummary.name=\"summary\",innerContainer.appendChild(innerSlotSummary),document.createElement(\"contexter-meta\")),innerSlotInfo=(innerContainer.appendChild(metaContainer),document.createElement(\"slot\")),linkContainer=(innerSlotInfo.name=\"keywords\",metaContainer.appendChild(innerSlotInfo),document.createElement(\"contexter-linkset\")),innerSlotArchiveLink=(metaContainer.appendChild(linkContainer),document.createElement(\"slot\")),innerSlotReadLink=(innerSlotArchiveLink.name=\"archive-link\",linkContainer.appendChild(innerSlotArchiveLink),document.createElement(\"slot\"));innerSlotReadLink.name=\"read-link\",linkContainer.appendChild(innerSlotReadLink),this.className=\"contexter-box\",this.onclick=e=>{if(!e.target.className.includes(\"read-link\")&&!e.target.className.includes(\"title-link\")){const mainLinks=this.querySelectorAll(\"a.main-link\");mainLinks[0].click()}}}}}customElements.define(\"contexter-box\",ContexterBox)},window.contexterSetupComplete||window.contexterSetup();</script><contexter-box class=\"link-card h-entry hentry\" itemscope=\"\" itemtype=\"https://schema.org/CreativeWork\"><contexter-thumbnail class=\"thumbnail\" slot=\"thumbnail\"></contexter-thumbnail><contexter-box-head slot=\"header\" class=\"p-name entry-title\" itemprop=\"headline\"><contexter-box-head slot=\"header\" class=\"p-name entry-title\" itemprop=\"headline\"><a is=\"contexter-link\" href=\"https://www.w3.org/TR/design-principles/\" itemprop=\"url\">Web Platform Design Principles</a></contexter-box-head></contexter-box-head><time class=\"dt-published published\" slot=\"time\" itemprop=\"datePublished\" datetime=\"2022-04-05T17:38:56.137Z\">3/5/2022</time><contexter-summary class=\"p-summary entry-summary\" itemprop=\"abstract\" slot=\"summary\"><p>The Design Principles are directly informed by the ethical frameworkset out in the Ethical Web Principles [ETHICAL-WEB].These principles provide concrete practical advicein response to the higher level ethical responsibilitiesthat come with developing the web platform.</p></contexter-summary><contexter-keywordset itemprop=\"keywords\" slot=\"keywords\"></contexter-keywordset><a is=\"contexter-link\" href=\"https://www.w3.org/TR/design-principles/\" class=\"read-link main-link\" itemprop=\"sameAs\" slot=\"read-link\">Read</a></contexter-box>","linkId":"cce8040d39668303c9dee82e548c712a739f6fee","data":{"originalLink":"https://w3ctag.github.io/design-principles","sanitizedLink":"https://w3ctag.github.io/design-principles","canonical":"https://www.w3.org/TR/design-principles/","htmlText":"<!doctype html><html lang=\"en\">\n <head>\n  <meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\">\n  <meta content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" name=\"viewport\">\n  <title>Web Platform Design Principles</title>\n  <meta content=\"ED\" name=\"w3c-status\">\n  <link href=\"https://www.w3.org/StyleSheets/TR/2021/W3C-ED\" rel=\"stylesheet\">\n  <link href=\"https://www.w3.org/2008/site/images/favicon.ico\" rel=\"icon\">\n  <meta content=\"Bikeshed version 2e3c4c68b, updated Fri Jan 14 14:49:00 2022 -0800\" name=\"generator\">\n  <link href=\"https://www.w3.org/TR/design-principles/\" rel=\"canonical\">\n  <meta content=\"8388c68f4c4f0eb838db617ce1f4e4b98ca8766f\" name=\"document-revision\">\n<style>\n    table.data {\n        text-align: left;\n        font-size: small;\n    }\n</style>\n<style>/* style-autolinks */\n\n.css.css, .property.property, .descriptor.descriptor {\n    color: var(--a-normal-text);\n    font-size: inherit;\n    font-family: inherit;\n}\n.css::before, .property::before, .descriptor::before {\n    content: \"‘\";\n}\n.css::after, .property::after, .descriptor::after {\n    content: \"’\";\n}\n.property, .descriptor {\n    /* Don't wrap property and descriptor names */\n    white-space: nowrap;\n}\n.type { /* CSS value <type> */\n    font-style: italic;\n}\npre .property::before, pre .property::after {\n    content: \"\";\n}\n[data-link-type=\"property\"]::before,\n[data-link-type=\"propdesc\"]::before,\n[data-link-type=\"descriptor\"]::before,\n[data-link-type=\"value\"]::before,\n[data-link-type=\"function\"]::before,\n[data-link-type=\"at-rule\"]::before,\n[data-link-type=\"selector\"]::before,\n[data-link-type=\"maybe\"]::before {\n    content: \"‘\";\n}\n[data-link-type=\"property\"]::after,\n[data-link-type=\"propdesc\"]::after,\n[data-link-type=\"descriptor\"]::after,\n[data-link-type=\"value\"]::after,\n[data-link-type=\"function\"]::after,\n[data-link-type=\"at-rule\"]::after,\n[data-link-type=\"selector\"]::after,\n[data-link-type=\"maybe\"]::after {\n    content: \"’\";\n}\n\n[data-link-type].production::before,\n[data-link-type].production::after,\n.prod [data-link-type]::before,\n.prod [data-link-type]::after {\n    content: \"\";\n}\n\n[data-link-type=element],\n[data-link-type=element-attr] {\n    font-family: Menlo, Consolas, \"DejaVu Sans Mono\", monospace;\n    font-size: .9em;\n}\n[data-link-type=element]::before { content: \"<\" }\n[data-link-type=element]::after  { content: \">\" }\n\n[data-link-type=biblio] {\n    white-space: pre;\n}</style>\n<style>/* style-colors */\n\n/* Any --*-text not paired with a --*-bg is assumed to have a transparent bg */\n:root {\n    color-scheme: light dark;\n\n    --text: black;\n    --bg: white;\n\n    --unofficial-watermark: url(https://www.w3.org/StyleSheets/TR/2016/logos/UD-watermark);\n\n    --logo-bg: #1a5e9a;\n    --logo-active-bg: #c00;\n    --logo-text: white;\n\n    --tocnav-normal-text: #707070;\n    --tocnav-normal-bg: var(--bg);\n    --tocnav-hover-text: var(--tocnav-normal-text);\n    --tocnav-hover-bg: #f8f8f8;\n    --tocnav-active-text: #c00;\n    --tocnav-active-bg: var(--tocnav-normal-bg);\n\n    --tocsidebar-text: var(--text);\n    --tocsidebar-bg: #f7f8f9;\n    --tocsidebar-shadow: rgba(0,0,0,.1);\n    --tocsidebar-heading-text: hsla(203,20%,40%,.7);\n\n    --toclink-text: var(--text);\n    --toclink-underline: #3980b5;\n    --toclink-visited-text: var(--toclink-text);\n    --toclink-visited-underline: #054572;\n\n    --heading-text: #005a9c;\n\n    --hr-text: var(--text);\n\n    --algo-border: #def;\n\n    --del-text: red;\n    --del-bg: transparent;\n    --ins-text: #080;\n    --ins-bg: transparent;\n\n    --a-normal-text: #034575;\n    --a-normal-underline: #bbb;\n    --a-visited-text: var(--a-normal-text);\n    --a-visited-underline: #707070;\n    --a-hover-bg: rgba(75%, 75%, 75%, .25);\n    --a-active-text: #c00;\n    --a-active-underline: #c00;\n\n    --blockquote-border: silver;\n    --blockquote-bg: transparent;\n    --blockquote-text: currentcolor;\n\n    --issue-border: #e05252;\n    --issue-bg: #fbe9e9;\n    --issue-text: var(--text);\n    --issueheading-text: #831616;\n\n    --example-border: #e0cb52;\n    --example-bg: #fcfaee;\n    --example-text: var(--text);\n    --exampleheading-text: #574b0f;\n\n    --note-border: #52e052;\n    --note-bg: #e9fbe9;\n    --note-text: var(--text);\n    --noteheading-text: hsl(120, 70%, 30%);\n    --notesummary-underline: silver;\n\n    --assertion-border: #aaa;\n    --assertion-bg: #eee;\n    --assertion-text: black;\n\n    --advisement-border: orange;\n    --advisement-bg: #fec;\n    --advisement-text: var(--text);\n    --advisementheading-text: #b35f00;\n\n    --warning-border: red;\n    --warning-bg: hsla(40,100%,50%,0.95);\n    --warning-text: var(--text);\n\n    --amendment-border: #330099;\n    --amendment-bg: #F5F0FF;\n    --amendment-text: var(--text);\n    --amendmentheading-text: #220066;\n\n    --def-border: #8ccbf2;\n    --def-bg: #def;\n    --def-text: var(--text);\n    --defrow-border: #bbd7e9;\n\n    --datacell-border: silver;\n\n    --indexinfo-text: #707070;\n\n    --indextable-hover-text: black;\n    --indextable-hover-bg: #f7f8f9;\n\n    --outdatedspec-bg: rgba(0, 0, 0, .5);\n    --outdatedspec-text: black;\n    --outdated-bg: maroon;\n    --outdated-text: white;\n    --outdated-shadow: red;\n\n    --editedrec-bg: darkorange;\n}</style>\n<style>/* style-counters */\n\nbody {\n    counter-reset: example figure issue;\n}\n.issue {\n    counter-increment: issue;\n}\n.issue:not(.no-marker)::before {\n    content: \"Issue \" counter(issue);\n}\n\n.example {\n    counter-increment: example;\n}\n.example:not(.no-marker)::before {\n    content: \"Example \" counter(example);\n}\n.invalid.example:not(.no-marker)::before,\n.illegal.example:not(.no-marker)::before {\n    content: \"Invalid Example\" counter(example);\n}\n\nfigcaption {\n    counter-increment: figure;\n}\nfigcaption:not(.no-marker)::before {\n    content: \"Figure \" counter(figure) \" \";\n}</style>\n<style>/* style-dfn-panel */\n\n:root {\n    --dfnpanel-bg: #ddd;\n    --dfnpanel-text: var(--text);\n}\n.dfn-panel {\n    position: absolute;\n    z-index: 35;\n    height: auto;\n    width: -webkit-fit-content;\n    width: fit-content;\n    max-width: 300px;\n    max-height: 500px;\n    overflow: auto;\n    padding: 0.5em 0.75em;\n    font: small Helvetica Neue, sans-serif, Droid Sans Fallback;\n    background: var(--dfnpanel-bg);\n    color: var(--dfnpanel-text);\n    border: outset 0.2em;\n}\n.dfn-panel:not(.on) { display: none; }\n.dfn-panel * { margin: 0; padding: 0; text-indent: 0; }\n.dfn-panel > b { display: block; }\n.dfn-panel a { color: var(--dfnpanel-text); }\n.dfn-panel a:not(:hover) { text-decoration: none !important; border-bottom: none !important; }\n.dfn-panel > b + b { margin-top: 0.25em; }\n.dfn-panel ul { padding: 0; }\n.dfn-panel li { list-style: inside; }\n.dfn-panel.activated {\n    display: inline-block;\n    position: fixed;\n    left: .5em;\n    bottom: 2em;\n    margin: 0 auto;\n    max-width: calc(100vw - 1.5em - .4em - .5em);\n    max-height: 30vh;\n}\n\n.dfn-paneled { cursor: pointer; }\n</style>\n<style>/* style-issues */\n\na[href].issue-return {\n    float: right;\n    float: inline-end;\n    color: var(--issueheading-text);\n    font-weight: bold;\n    text-decoration: none;\n}\n</style>\n<style>/* style-md-lists */\n\n/* This is a weird hack for me not yet following the commonmark spec\n   regarding paragraph and lists. */\n[data-md] > :first-child {\n    margin-top: 0;\n}\n[data-md] > :last-child {\n    margin-bottom: 0;\n}</style>\n<style>/* style-selflinks */\n\n:root {\n    --selflink-text: white;\n    --selflink-bg: gray;\n    --selflink-hover-text: black;\n}\n.heading, .issue, .note, .example, li, dt {\n    position: relative;\n}\na.self-link {\n    position: absolute;\n    top: 0;\n    left: calc(-1 * (3.5rem - 26px));\n    width: calc(3.5rem - 26px);\n    height: 2em;\n    text-align: center;\n    border: none;\n    transition: opacity .2s;\n    opacity: .5;\n}\na.self-link:hover {\n    opacity: 1;\n}\n.heading > a.self-link {\n    font-size: 83%;\n}\nli > a.self-link {\n    left: calc(-1 * (3.5rem - 26px) - 2em);\n}\ndfn > a.self-link {\n    top: auto;\n    left: auto;\n    opacity: 0;\n    width: 1.5em;\n    height: 1.5em;\n    background: var(--selflink-bg);\n    color: var(--selflink-text);\n    font-style: normal;\n    transition: opacity .2s, background-color .2s, color .2s;\n}\ndfn:hover > a.self-link {\n    opacity: 1;\n}\ndfn > a.self-link:hover {\n    color: var(--selflink-hover-text);\n}\n\na.self-link::before            { content: \"¶\"; }\n.heading > a.self-link::before { content: \"§\"; }\ndfn > a.self-link::before      { content: \"#\"; }\n</style>\n<style>/* style-syntax-highlighting */\n\ncode.highlight { padding: .1em; border-radius: .3em; }\npre.highlight, pre > code.highlight { display: block; padding: 1em; margin: .5em 0; overflow: auto; border-radius: 0; }\n\n.highlight:not(.idl) { background: rgba(0, 0, 0, .03); }\nc-[a] { color: #990055 } /* Keyword.Declaration */\nc-[b] { color: #990055 } /* Keyword.Type */\nc-[c] { color: #708090 } /* Comment */\nc-[d] { color: #708090 } /* Comment.Multiline */\nc-[e] { color: #0077aa } /* Name.Attribute */\nc-[f] { color: #669900 } /* Name.Tag */\nc-[g] { color: #222222 } /* Name.Variable */\nc-[k] { color: #990055 } /* Keyword */\nc-[l] { color: #000000 } /* Literal */\nc-[m] { color: #000000 } /* Literal.Number */\nc-[n] { color: #0077aa } /* Name */\nc-[o] { color: #999999 } /* Operator */\nc-[p] { color: #999999 } /* Punctuation */\nc-[s] { color: #a67f59 } /* Literal.String */\nc-[t] { color: #a67f59 } /* Literal.String.Single */\nc-[u] { color: #a67f59 } /* Literal.String.Double */\nc-[cp] { color: #708090 } /* Comment.Preproc */\nc-[c1] { color: #708090 } /* Comment.Single */\nc-[cs] { color: #708090 } /* Comment.Special */\nc-[kc] { color: #990055 } /* Keyword.Constant */\nc-[kn] { color: #990055 } /* Keyword.Namespace */\nc-[kp] { color: #990055 } /* Keyword.Pseudo */\nc-[kr] { color: #990055 } /* Keyword.Reserved */\nc-[ld] { color: #000000 } /* Literal.Date */\nc-[nc] { color: #0077aa } /* Name.Class */\nc-[no] { color: #0077aa } /* Name.Constant */\nc-[nd] { color: #0077aa } /* Name.Decorator */\nc-[ni] { color: #0077aa } /* Name.Entity */\nc-[ne] { color: #0077aa } /* Name.Exception */\nc-[nf] { color: #0077aa } /* Name.Function */\nc-[nl] { color: #0077aa } /* Name.Label */\nc-[nn] { color: #0077aa } /* Name.Namespace */\nc-[py] { color: #0077aa } /* Name.Property */\nc-[ow] { color: #999999 } /* Operator.Word */\nc-[mb] { color: #000000 } /* Literal.Number.Bin */\nc-[mf] { color: #000000 } /* Literal.Number.Float */\nc-[mh] { color: #000000 } /* Literal.Number.Hex */\nc-[mi] { color: #000000 } /* Literal.Number.Integer */\nc-[mo] { color: #000000 } /* Literal.Number.Oct */\nc-[sb] { color: #a67f59 } /* Literal.String.Backtick */\nc-[sc] { color: #a67f59 } /* Literal.String.Char */\nc-[sd] { color: #a67f59 } /* Literal.String.Doc */\nc-[se] { color: #a67f59 } /* Literal.String.Escape */\nc-[sh] { color: #a67f59 } /* Literal.String.Heredoc */\nc-[si] { color: #a67f59 } /* Literal.String.Interpol */\nc-[sx] { color: #a67f59 } /* Literal.String.Other */\nc-[sr] { color: #a67f59 } /* Literal.String.Regex */\nc-[ss] { color: #a67f59 } /* Literal.String.Symbol */\nc-[vc] { color: #0077aa } /* Name.Variable.Class */\nc-[vg] { color: #0077aa } /* Name.Variable.Global */\nc-[vi] { color: #0077aa } /* Name.Variable.Instance */\nc-[il] { color: #000000 } /* Literal.Number.Integer.Long */\n</style>\n<style>/* style-darkmode */\n\n@media (prefers-color-scheme: dark) {\n    :root {\n        --text: #ddd;\n        --bg: black;\n\n        --unofficial-watermark: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='400' height='400'%3E%3Cg fill='%23100808' transform='translate(200 200) rotate(-45) translate(-200 -200)' stroke='%23100808' stroke-width='3'%3E%3Ctext x='50%25' y='220' style='font: bold 70px sans-serif; text-anchor: middle; letter-spacing: 6px;'%3EUNOFFICIAL%3C/text%3E%3Ctext x='50%25' y='305' style='font: bold 70px sans-serif; text-anchor: middle; letter-spacing: 6px;'%3EDRAFT%3C/text%3E%3C/g%3E%3C/svg%3E\");\n\n        --logo-bg: #1a5e9a;\n        --logo-active-bg: #c00;\n        --logo-text: white;\n\n        --tocnav-normal-text: #999;\n        --tocnav-normal-bg: var(--bg);\n        --tocnav-hover-text: var(--tocnav-normal-text);\n        --tocnav-hover-bg: #080808;\n        --tocnav-active-text: #f44;\n        --tocnav-active-bg: var(--tocnav-normal-bg);\n\n        --tocsidebar-text: var(--text);\n        --tocsidebar-bg: #080808;\n        --tocsidebar-shadow: rgba(255,255,255,.1);\n        --tocsidebar-heading-text: hsla(203,20%,40%,.7);\n\n        --toclink-text: var(--text);\n        --toclink-underline: #6af;\n        --toclink-visited-text: var(--toclink-text);\n        --toclink-visited-underline: #054572;\n\n        --heading-text: #8af;\n\n        --hr-text: var(--text);\n\n        --algo-border: #456;\n\n        --del-text: #f44;\n        --del-bg: transparent;\n        --ins-text: #4a4;\n        --ins-bg: transparent;\n\n        --a-normal-text: #6af;\n        --a-normal-underline: #555;\n        --a-visited-text: var(--a-normal-text);\n        --a-visited-underline: var(--a-normal-underline);\n        --a-hover-bg: rgba(25%, 25%, 25%, .2);\n        --a-active-text: #f44;\n        --a-active-underline: var(--a-active-text);\n\n        --borderedblock-bg: rgba(255, 255, 255, .05);\n\n        --blockquote-border: silver;\n        --blockquote-bg: var(--borderedblock-bg);\n        --blockquote-text: currentcolor;\n\n        --issue-border: #e05252;\n        --issue-bg: var(--borderedblock-bg);\n        --issue-text: var(--text);\n        --issueheading-text: hsl(0deg, 70%, 70%);\n\n        --example-border: hsl(50deg, 90%, 60%);\n        --example-bg: var(--borderedblock-bg);\n        --example-text: var(--text);\n        --exampleheading-text: hsl(50deg, 70%, 70%);\n\n        --note-border: hsl(120deg, 100%, 35%);\n        --note-bg: var(--borderedblock-bg);\n        --note-text: var(--text);\n        --noteheading-text: hsl(120, 70%, 70%);\n        --notesummary-underline: silver;\n\n        --assertion-border: #444;\n        --assertion-bg: var(--borderedblock-bg);\n        --assertion-text: var(--text);\n\n        --advisement-border: orange;\n        --advisement-bg: #222218;\n        --advisement-text: var(--text);\n        --advisementheading-text: #f84;\n\n        --warning-border: red;\n        --warning-bg: hsla(40,100%,20%,0.95);\n        --warning-text: var(--text);\n\n        --amendment-border: #330099;\n        --amendment-bg: #080010;\n        --amendment-text: var(--text);\n        --amendmentheading-text: #cc00ff;\n\n        --def-border: #8ccbf2;\n        --def-bg: #080818;\n        --def-text: var(--text);\n        --defrow-border: #136;\n\n        --datacell-border: silver;\n\n        --indexinfo-text: #aaa;\n\n        --indextable-hover-text: var(--text);\n        --indextable-hover-bg: #181818;\n\n        --outdatedspec-bg: rgba(255, 255, 255, .5);\n        --outdatedspec-text: black;\n        --outdated-bg: maroon;\n        --outdated-text: white;\n        --outdated-shadow: red;\n\n        --editedrec-bg: darkorange;\n    }\n    /* In case a transparent-bg image doesn't expect to be on a dark bg,\n       which is quite common in practice... */\n    img { background: white; }\n}\n@media (prefers-color-scheme: dark) {\n    :root {\n        --selflink-text: black;\n        --selflink-bg: silver;\n        --selflink-hover-text: white;\n    }\n}\n\n@media (prefers-color-scheme: dark) {\n    :root {\n        --dfnpanel-bg: #222;\n        --dfnpanel-text: var(--text);\n    }\n}\n@media (prefers-color-scheme: dark) {\n    .highlight:not(.idl) { background: rgba(255, 255, 255, .05); }\n\n    c-[a] { color: #d33682 } /* Keyword.Declaration */\n    c-[b] { color: #d33682 } /* Keyword.Type */\n    c-[c] { color: #2aa198 } /* Comment */\n    c-[d] { color: #2aa198 } /* Comment.Multiline */\n    c-[e] { color: #268bd2 } /* Name.Attribute */\n    c-[f] { color: #b58900 } /* Name.Tag */\n    c-[g] { color: #cb4b16 } /* Name.Variable */\n    c-[k] { color: #d33682 } /* Keyword */\n    c-[l] { color: #657b83 } /* Literal */\n    c-[m] { color: #657b83 } /* Literal.Number */\n    c-[n] { color: #268bd2 } /* Name */\n    c-[o] { color: #657b83 } /* Operator */\n    c-[p] { color: #657b83 } /* Punctuation */\n    c-[s] { color: #6c71c4 } /* Literal.String */\n    c-[t] { color: #6c71c4 } /* Literal.String.Single */\n    c-[u] { color: #6c71c4 } /* Literal.String.Double */\n    c-[ch] { color: #2aa198 } /* Comment.Hashbang */\n    c-[cp] { color: #2aa198 } /* Comment.Preproc */\n    c-[cpf] { color: #2aa198 } /* Comment.PreprocFile */\n    c-[c1] { color: #2aa198 } /* Comment.Single */\n    c-[cs] { color: #2aa198 } /* Comment.Special */\n    c-[kc] { color: #d33682 } /* Keyword.Constant */\n    c-[kn] { color: #d33682 } /* Keyword.Namespace */\n    c-[kp] { color: #d33682 } /* Keyword.Pseudo */\n    c-[kr] { color: #d33682 } /* Keyword.Reserved */\n    c-[ld] { color: #657b83 } /* Literal.Date */\n    c-[nc] { color: #268bd2 } /* Name.Class */\n    c-[no] { color: #268bd2 } /* Name.Constant */\n    c-[nd] { color: #268bd2 } /* Name.Decorator */\n    c-[ni] { color: #268bd2 } /* Name.Entity */\n    c-[ne] { color: #268bd2 } /* Name.Exception */\n    c-[nf] { color: #268bd2 } /* Name.Function */\n    c-[nl] { color: #268bd2 } /* Name.Label */\n    c-[nn] { color: #268bd2 } /* Name.Namespace */\n    c-[py] { color: #268bd2 } /* Name.Property */\n    c-[ow] { color: #657b83 } /* Operator.Word */\n    c-[mb] { color: #657b83 } /* Literal.Number.Bin */\n    c-[mf] { color: #657b83 } /* Literal.Number.Float */\n    c-[mh] { color: #657b83 } /* Literal.Number.Hex */\n    c-[mi] { color: #657b83 } /* Literal.Number.Integer */\n    c-[mo] { color: #657b83 } /* Literal.Number.Oct */\n    c-[sa] { color: #6c71c4 } /* Literal.String.Affix */\n    c-[sb] { color: #6c71c4 } /* Literal.String.Backtick */\n    c-[sc] { color: #6c71c4 } /* Literal.String.Char */\n    c-[dl] { color: #6c71c4 } /* Literal.String.Delimiter */\n    c-[sd] { color: #6c71c4 } /* Literal.String.Doc */\n    c-[se] { color: #6c71c4 } /* Literal.String.Escape */\n    c-[sh] { color: #6c71c4 } /* Literal.String.Heredoc */\n    c-[si] { color: #6c71c4 } /* Literal.String.Interpol */\n    c-[sx] { color: #6c71c4 } /* Literal.String.Other */\n    c-[sr] { color: #6c71c4 } /* Literal.String.Regex */\n    c-[ss] { color: #6c71c4 } /* Literal.String.Symbol */\n    c-[fm] { color: #268bd2 } /* Name.Function.Magic */\n    c-[vc] { color: #cb4b16 } /* Name.Variable.Class */\n    c-[vg] { color: #cb4b16 } /* Name.Variable.Global */\n    c-[vi] { color: #cb4b16 } /* Name.Variable.Instance */\n    c-[vm] { color: #cb4b16 } /* Name.Variable.Magic */\n    c-[il] { color: #657b83 } /* Literal.Number.Integer.Long */\n}\n</style>\n <body class=\"h-entry\">\n  <div class=\"head\">\n   <p data-fill-with=\"logo\"><a class=\"logo\" href=\"https://www.w3.org/\"> <img alt=\"W3C\" height=\"48\" src=\"https://www.w3.org/StyleSheets/TR/2021/logos/W3C\" width=\"72\"> </a> </p>\n   <h1 class=\"p-name no-ref\" id=\"title\">Web Platform Design Principles</h1>\n   <p id=\"w3c-state\"><a href=\"https://www.w3.org/standards/types#ED\">Editor’s Draft</a>, <time class=\"dt-updated\" datetime=\"2022-01-27\">27 January 2022</time></p>\n   <details open>\n    <summary>More details about this document</summary>\n    <div data-fill-with=\"spec-metadata\">\n     <dl>\n      <dt>This version:\n      <dd><a class=\"u-url\" href=\"https://w3ctag.github.io/design-principles/\">https://w3ctag.github.io/design-principles/</a>\n      <dt>Latest published version:\n      <dd><a href=\"https://www.w3.org/TR/design-principles/\">https://www.w3.org/TR/design-principles/</a>\n      <dt>Feedback:\n      <dd><a href=\"https://github.com/w3ctag/design-principles/issues/\">GitHub</a>\n      <dt class=\"editor\">Editor:\n      <dd class=\"editor p-author h-card vcard\" data-editor-id=\"42399\"><a class=\"p-name fn u-url url\" href=\"https://sangwhan.com\">Sangwhan Moon</a> (<a class=\"p-org org\" href=\"https://www.google.com/\">Google</a>)\n      <dt class=\"editor\">Former Editors:\n      <dd class=\"editor p-author h-card vcard\"><a class=\"p-name fn u-url url\" href=\"https://domenic.me/\">Domenic Denicola</a> (<a class=\"p-org org\" href=\"https://www.google.com/\">Google</a>) <a class=\"u-email email\" href=\"mailto:d@domenic.me\">d@domenic.me</a>\n      <dd class=\"editor p-author h-card vcard\"><a class=\"p-name fn u-email email\" href=\"mailto:travil@microsoft.com\">Travis Leithead</a> (<span class=\"p-org org\">Microsoft</span>)\n      <dt>By:\n      <dd><a href=\"https://www.w3.org/2001/tag/\">Members of the TAG</a>, past and present\n      <dt>Participate:\n      <dd><a href=\"https://github.com/w3ctag/design-principles\">GitHub w3ctag/design-principles</a> (<a href=\"https://github.com/w3ctag/design-principles/issues/new\">file an issue</a>; <a href=\"https://github.com/w3ctag/design-principles/issues?state=open\">open issues</a>)\n     </dl>\n    </div>\n   </details>\n   <div data-fill-with=\"warning\"></div>\n   <p class=\"copyright\" data-fill-with=\"copyright\"><a href=\"https://www.w3.org/Consortium/Legal/ipr-notice#Copyright\">Copyright</a> © 2022 <a href=\"https://www.w3.org/\"><abbr title=\"World Wide Web Consortium\">W3C</abbr></a><sup>®</sup> (<a href=\"https://www.csail.mit.edu/\"><abbr title=\"Massachusetts Institute of Technology\">MIT</abbr></a>, <a href=\"https://www.ercim.eu/\"><abbr title=\"European Research Consortium for Informatics and Mathematics\">ERCIM</abbr></a>, <a href=\"https://www.keio.ac.jp/\">Keio</a>, <a href=\"https://ev.buaa.edu.cn/\">Beihang</a>). W3C <a href=\"https://www.w3.org/Consortium/Legal/ipr-notice#Legal_Disclaimer\">liability</a>, <a href=\"https://www.w3.org/Consortium/Legal/ipr-notice#W3C_Trademarks\">trademark</a> and <a href=\"https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\" rel=\"license\">permissive document license</a> rules apply. </p>\n   <hr title=\"Separator for header\">\n  </div>\n  <div class=\"p-summary\" data-fill-with=\"abstract\">\n   <h2 class=\"no-num no-toc no-ref heading settled\" id=\"abstract\"><span class=\"content\">Abstract</span></h2>\n   <p>This document contains a set of design principles to be used when designing web platform technologies. These principles have been collected during the Technical Architecture Group’s discussions in <a href=\"https://github.com/w3ctag/design-reviews/\">reviewing</a> developing specifications, and build upon the Ethical Web Principles <a data-link-type=\"biblio\" href=\"#biblio-ethical-web\">[ETHICAL-WEB]</a>. We encourage specification designers to read this document and use it as a resource when making design decisions.</p>\n  </div>\n  <h2 class=\"no-num no-toc no-ref heading settled\" id=\"sotd\"><span class=\"content\">Status of this document</span></h2>\n  <div data-fill-with=\"status\">\n   <p> <em>This section describes the status of this document at the time of its\n    publication. A list of current <abbr title=\"World Wide Web Consortium\">W3C</abbr> publications and the\n    latest revision of this technical report can be found in the <a href=\"https://www.w3.org/TR/\"><abbr title=\"World Wide Web\n    Consortium\">W3C</abbr> technical reports index</a>.</em> </p>\n   <p> This document was published by the <a href=\"https://www.w3.org/2001/tag/\">W3C Technical Architecture Group\n    (TAG)</a> as an Editor’s Draft.\n    Publication as an Editor’s Draft does not imply endorsement by <abbr title=\"World Wide Web Consortium\">W3C</abbr> and its Members. This is a\n    draft document and may be updated, replaced or obsoleted by other documents\n    at any time. It is inappropriate to cite this document as other than work in\n    progress. </p>\n   <p></p>\n   <p> Feedback and comments on this document are welcome. Please <a href=\"https://github.com/w3ctag/design-principles/issues\">file an issue</a> in this document’s <a href=\"https://github.com/w3ctag/design-principles/\">GitHub repository</a>. </p>\n   <p> This document is governed by the <a href=\"https://www.w3.org/2019/Process-20190301/\" id=\"w3c_process_revision\">1 March 2019 W3C Process\n    Document</a>. </p>\n  </div>\n  <div data-fill-with=\"at-risk\"></div>\n  <nav data-fill-with=\"table-of-contents\" id=\"toc\">\n   <h2 class=\"no-num no-toc no-ref\" id=\"contents\">Table of Contents</h2>\n   <ol class=\"toc\" role=\"directory\">\n    <li>\n     <a href=\"#basic-principles\"><span class=\"secno\">1</span> <span class=\"content\">Principles behind design of Web APIs</span></a>\n     <ol class=\"toc\">\n      <li><a href=\"#priority-of-constituencies\"><span class=\"secno\">1.1</span> <span class=\"content\">Put user needs first (Priority of Constituencies)</span></a>\n      <li><a href=\"#safe-to-browse\"><span class=\"secno\">1.2</span> <span class=\"content\">It should be safe to visit a web page</span></a>\n      <li><a href=\"#trusted-ui\"><span class=\"secno\">1.3</span> <span class=\"content\">Trusted user interface should be trustworthy</span></a>\n      <li><a href=\"#consent\"><span class=\"secno\">1.4</span> <span class=\"content\">Ask users for meaningful consent when appropriate</span></a>\n      <li><a href=\"#devices-platforms\"><span class=\"secno\">1.5</span> <span class=\"content\">Support the full range of devices and platforms (Media Independence)</span></a>\n     </ol>\n    <li>\n     <a href=\"#api-across-languages\"><span class=\"secno\">2</span> <span class=\"content\">API Design Across Languages</span></a>\n     <ol class=\"toc\">\n      <li><a href=\"#simplicity\"><span class=\"secno\">2.1</span> <span class=\"content\">Prefer simple solutions</span></a>\n      <li><a href=\"#high-level-low-level\"><span class=\"secno\">2.2</span> <span class=\"content\">Resolving tension between high level and low level APIs</span></a>\n      <li><a href=\"#name-thoughtfully\"><span class=\"secno\">2.3</span> <span class=\"content\">Name things thoughtfully</span></a>\n      <li><a href=\"#consistency\"><span class=\"secno\">2.4</span> <span class=\"content\">Consistency</span></a>\n      <li><a href=\"#feature-detect\"><span class=\"secno\">2.5</span> <span class=\"content\">New features should be detectable</span></a>\n      <li><a href=\"#secure-context\"><span class=\"secno\">2.6</span> <span class=\"content\">Consider limiting new features to secure contexts</span></a>\n      <li><a href=\"#do-not-expose-use-of-private-browsing-mode\"><span class=\"secno\">2.7</span> <span class=\"content\">Don’t reveal that private browsing mode is engaged</span></a>\n      <li><a href=\"#private-browsing-mode\"><span class=\"secno\">2.8</span> <span class=\"content\">Consider how your API should behave in private browsing mode</span></a>\n      <li><a href=\"#do-not-expose-use-of-assistive-tech\"><span class=\"secno\">2.9</span> <span class=\"content\">Don’t reveal that assistive technologies are being used</span></a>\n      <li>\n       <a href=\"#support-non-fully-active\"><span class=\"secno\">2.10</span> <span class=\"content\">Support non-\"fully active\" documents</span></a>\n       <ol class=\"toc\">\n        <li><a href=\"#gate-fully-active\"><span class=\"secno\">2.10.1</span> <span class=\"content\">Gate actions with <span>fully active</span> checks</span></a>\n        <li><a href=\"#listen-fully-active\"><span class=\"secno\">2.10.2</span> <span class=\"content\">Listen for changes to <span>fully active</span> status</span></a>\n        <li><a href=\"#omit-non-fully-active\"><span class=\"secno\">2.10.3</span> <span class=\"content\">Omit non-<span>fully active</span> documents from APIs that span multiple documents</span></a>\n        <li><a href=\"#discard\"><span class=\"secno\">2.10.4</span> <span class=\"content\">Discard non-<span>fully active</span> documents for situations that can’t be supported</span></a>\n        <li><a href=\"#per-document-state\"><span class=\"secno\">2.10.5</span> <span class=\"content\">Be aware that per-document state/data might persist after navigation</span></a>\n       </ol>\n      <li><a href=\"#third-party-tools\"><span class=\"secno\">2.11</span> <span class=\"content\">Prioritize usability over compatibility with third-party tools</span></a>\n     </ol>\n    <li>\n     <a href=\"#html\"><span class=\"secno\">3</span> <span class=\"content\">HTML</span></a>\n     <ol class=\"toc\">\n      <li><a href=\"#attribute-reuse\"><span class=\"secno\">3.1</span> <span class=\"content\">Re-use attribute names (only) for similar functionality</span></a>\n      <li><a href=\"#avoid-html-parser-blocking\"><span class=\"secno\">3.2</span> <span class=\"content\"> Do not pause the HTML parser</span></a>\n      <li><a href=\"#avoid-render-blocking\"><span class=\"secno\">3.3</span> <span class=\"content\"> Avoid features that block rendering</span></a>\n     </ol>\n    <li>\n     <a href=\"#css\"><span class=\"secno\">4</span> <span class=\"content\">Cascading Style Sheets (CSS)</span></a>\n     <ol class=\"toc\">\n      <li><a href=\"#css-property-separation\"><span class=\"secno\">4.1</span> <span class=\"content\">Separate CSS properties based on what should cascade separately</span></a>\n      <li><a href=\"#css-inherited-or-not\"><span class=\"secno\">4.2</span> <span class=\"content\">Make appropriate choices for whether CSS properties are inherited</span></a>\n      <li><a href=\"#css-computed-value\"><span class=\"secno\">4.3</span> <span class=\"content\">Choose the computed value type based on how the property should inherit</span></a>\n      <li><a href=\"#css-naming\"><span class=\"secno\">4.4</span> <span class=\"content\">Naming of CSS properties and values</span></a>\n      <li><a href=\"#css-content-should-be-visible\"><span class=\"secno\">4.5</span> <span class=\"content\">Content should be viewable and accessible by default</span></a>\n     </ol>\n    <li>\n     <a href=\"#js\"><span class=\"secno\">5</span> <span class=\"content\">JavaScript Language</span></a>\n     <ol class=\"toc\">\n      <li><a href=\"#js-only\"><span class=\"secno\">5.1</span> <span class=\"content\">Web APIs are for JavaScript</span></a>\n      <li><a href=\"#js-rtc\"><span class=\"secno\">5.2</span> <span class=\"content\">Preserve run-to-completion semantics</span></a>\n      <li><a href=\"#js-gc\"><span class=\"secno\">5.3</span> <span class=\"content\">Don’t expose garbage collection</span></a>\n     </ol>\n    <li>\n     <a href=\"#api-surface\"><span class=\"secno\">6</span> <span class=\"content\">JavaScript API Surface Concerns</span></a>\n     <ol class=\"toc\">\n      <li><a href=\"#attributes-like-data\"><span class=\"secno\">6.1</span> <span class=\"content\">Attributes should behave like data properties</span></a>\n      <li><a href=\"#live-vs-static\"><span class=\"secno\">6.2</span> <span class=\"content\">Consider whether objects should be live or static</span></a>\n      <li><a href=\"#attributes-vs-methods\"><span class=\"secno\">6.3</span> <span class=\"content\">Use attributes or methods appropriately</span></a>\n      <li><a href=\"#prefer-dict-to-bool\"><span class=\"secno\">6.4</span> <span class=\"content\">Prefer dictionary arguments over primitive arguments</span></a>\n      <li><a href=\"#optional-parameters\"><span class=\"secno\">6.5</span> <span class=\"content\">Make method arguments optional if possible</span></a>\n      <li><a href=\"#naming-optional-parameters\"><span class=\"secno\">6.6</span> <span class=\"content\">Naming optional arguments</span></a>\n      <li><a href=\"#constructors\"><span class=\"secno\">6.7</span> <span class=\"content\">Classes should have constructors when possible</span></a>\n      <li><a href=\"#synchronous\"><span class=\"secno\">6.8</span> <span class=\"content\">Use synchronous when appropriate</span></a>\n      <li><a href=\"#promises\"><span class=\"secno\">6.9</span> <span class=\"content\">Design asynchronous APIs using Promises</span></a>\n      <li><a href=\"#aborting\"><span class=\"secno\">6.10</span> <span class=\"content\">Cancel asynchronous APIs/operations using AbortSignal</span></a>\n      <li><a href=\"#string-constants\"><span class=\"secno\">6.11</span> <span class=\"content\">Use strings for constants and enums</span></a>\n      <li><a href=\"#properties-vs-methods\"><span class=\"secno\">6.12</span> <span class=\"content\">Properties vs. Methods</span></a>\n     </ol>\n    <li>\n     <a href=\"#event-design\"><span class=\"secno\">7</span> <span class=\"content\">Event Design</span></a>\n     <ol class=\"toc\">\n      <li><a href=\"#one-time-events\"><span class=\"secno\">7.1</span> <span class=\"content\">Use promises for one time events</span></a>\n      <li><a href=\"#promises-and-events\"><span class=\"secno\">7.2</span> <span class=\"content\">Events should fire before Promises resolve</span></a>\n      <li><a href=\"#dont-invent-event-like\"><span class=\"secno\">7.3</span> <span class=\"content\">Don’t invent your own event listener-like infrastructure</span></a>\n      <li><a href=\"#always-add-event-handlers\"><span class=\"secno\">7.4</span> <span class=\"content\">Always add event handler attributes</span></a>\n      <li><a href=\"#events-are-for-notification\"><span class=\"secno\">7.5</span> <span class=\"content\">Events are for notification</span></a>\n      <li><a href=\"#guard-against-recursion\"><span class=\"secno\">7.6</span> <span class=\"content\">Guard against potential recursion</span></a>\n      <li><a href=\"#state-and-subclassing\"><span class=\"secno\">7.7</span> <span class=\"content\">State and <code class=\"idl\"><span>Event</span></code> subclasses</span></a>\n      <li><a href=\"#events-vs-observers\"><span class=\"secno\">7.8</span> <span class=\"content\">How to decide between Events and Observers</span></a>\n     </ol>\n    <li>\n     <a href=\"#types-and-units\"><span class=\"secno\">8</span> <span class=\"content\">Web IDL, Types, and Units</span></a>\n     <ol class=\"toc\">\n      <li><a href=\"#numeric-types\"><span class=\"secno\">8.1</span> <span class=\"content\">Use numeric types appropriately</span></a>\n      <li><a href=\"#idl-string-types\"><span class=\"secno\">8.2</span> <span class=\"content\">Represent strings appropriately</span></a>\n      <li><a href=\"#milliseconds\"><span class=\"secno\">8.3</span> <span class=\"content\">Use milliseconds for time measurement</span></a>\n      <li><a href=\"#times-and-dates\"><span class=\"secno\">8.4</span> <span class=\"content\">Use the appropriate type to represent times and dates</span></a>\n      <li><a href=\"#error-types\"><span class=\"secno\">8.5</span> <span class=\"content\">Use Error or DOMException for errors</span></a>\n     </ol>\n    <li>\n     <a href=\"#device-apis\"><span class=\"secno\">9</span> <span class=\"content\">OS and Device Wrapper APIs</span></a>\n     <ol class=\"toc\">\n      <li><a href=\"#device-ids\"><span class=\"secno\">9.1</span> <span class=\"content\">Use care when exposing identifying information about devices</span></a>\n      <li><a href=\"#device-enumeration\"><span class=\"secno\">9.2</span> <span class=\"content\">Use care when exposing APIs for selecting or enumerating devices</span></a>\n      <li><a href=\"#usecase-oriented-apis\"><span class=\"secno\">9.3</span> <span class=\"content\">Design based on user needs, not the underlying API or hardware</span></a>\n      <li><a href=\"#hardware-is-scary\"><span class=\"secno\">9.4</span> <span class=\"content\">Be proactive about safety</span></a>\n      <li><a href=\"#wrapper-apis\"><span class=\"secno\">9.5</span> <span class=\"content\">Native APIs don’t typically translate well to the web</span></a>\n     </ol>\n    <li>\n     <a href=\"#other-considerations\"><span class=\"secno\">10</span> <span class=\"content\">Other API Design Considerations</span></a>\n     <ol class=\"toc\">\n      <li><a href=\"#polyfills\"><span class=\"secno\">10.1</span> <span class=\"content\">Polyfills</span></a>\n      <li><a href=\"#consider-dedicatedworker-support\"><span class=\"secno\">10.2</span> <span class=\"content\">Where possible APIs should be made available in DedicatedWorker</span></a>\n      <li><a href=\"#new-data-formats\"><span class=\"secno\">10.3</span> <span class=\"content\">New Data Formats</span></a>\n      <li><a href=\"#new-http-header-syntax\"><span class=\"secno\">10.4</span> <span class=\"content\">New HTTP Headers</span></a>\n      <li><a href=\"#extend-manifests\"><span class=\"secno\">10.5</span> <span class=\"content\">Extend existing manifest files rather than creating new ones</span></a>\n      <li><a href=\"#debuggability\"><span class=\"secno\">10.6</span> <span class=\"content\">Features should be developer-friendly</span></a>\n      <li><a href=\"#crypto\"><span class=\"secno\">10.7</span> <span class=\"content\">Use the best crypto, and expect it to evolve</span></a>\n     </ol>\n    <li>\n     <a href=\"#spec-writing\"><span class=\"secno\">11</span> <span class=\"content\">Writing good specifications</span></a>\n     <ol class=\"toc\">\n      <li><a href=\"#requirements-on-authors-and-implementers\"><span class=\"secno\">11.1</span> <span class=\"content\">Identify the audience of each requirement in your specification</span></a>\n      <li>\n       <a href=\"#avoid-ambiguity\"><span class=\"secno\">11.2</span> <span class=\"content\">Specify completely and avoid ambiguity</span></a>\n       <ol class=\"toc\">\n        <li><a href=\"#algorithms\"><span class=\"secno\">11.2.1</span> <span class=\"content\">Defining algorithms in specifications</span></a>\n        <li><a href=\"#use-flags-for-states\"><span class=\"secno\">11.2.2</span> <span class=\"content\">Use explicit flags for state</span></a>\n       </ol>\n     </ol>\n    <li>\n     <a href=\"#naming-is-hard\"><span class=\"secno\">12</span> <span class=\"content\">Naming principles</span></a>\n     <ol class=\"toc\">\n      <li><a href=\"#naming-common-words\"><span class=\"secno\">12.1</span> <span class=\"content\">Use common words</span></a>\n      <li><a href=\"#naming-charset\"><span class=\"secno\">12.2</span> <span class=\"content\">Use ASCII names</span></a>\n      <li><a href=\"#naming-consultation\"><span class=\"secno\">12.3</span> <span class=\"content\">Consultation</span></a>\n      <li><a href=\"#naming-future-proofing\"><span class=\"secno\">12.4</span> <span class=\"content\">Future-proofing</span></a>\n      <li><a href=\"#naming-consistency\"><span class=\"secno\">12.5</span> <span class=\"content\">Consistency</span></a>\n      <li><a href=\"#naming-unsafe\"><span class=\"secno\">12.6</span> <span class=\"content\">Warning about dangerous features</span></a>\n      <li><a href=\"#writing-resources\"><span class=\"secno\">12.7</span> <span class=\"content\">Other resources</span></a>\n     </ol>\n    <li><a href=\"#acks\"><span class=\"secno\"></span> <span class=\"content\">Acknowledgments</span></a>\n    <li>\n     <a href=\"#w3c-conformance\"><span class=\"secno\"></span> <span class=\"content\">Conformance</span></a>\n     <ol class=\"toc\">\n      <li><a href=\"#w3c-conventions\"><span class=\"secno\"></span> <span class=\"content\">Document conventions</span></a>\n      <li><a href=\"#w3c-conformant-algorithms\"><span class=\"secno\"></span> <span class=\"content\">Conformant Algorithms</span></a>\n     </ol>\n    <li>\n     <a href=\"#index\"><span class=\"secno\"></span> <span class=\"content\">Index</span></a>\n     <ol class=\"toc\">\n      <li><a href=\"#index-defined-here\"><span class=\"secno\"></span> <span class=\"content\">Terms defined by this specification</span></a>\n      <li><a href=\"#index-defined-elsewhere\"><span class=\"secno\"></span> <span class=\"content\">Terms defined by reference</span></a>\n     </ol>\n    <li>\n     <a href=\"#references\"><span class=\"secno\"></span> <span class=\"content\">References</span></a>\n     <ol class=\"toc\">\n      <li><a href=\"#normative\"><span class=\"secno\"></span> <span class=\"content\">Normative References</span></a>\n      <li><a href=\"#informative\"><span class=\"secno\"></span> <span class=\"content\">Informative References</span></a>\n     </ol>\n    <li><a href=\"#issues-index\"><span class=\"secno\"></span> <span class=\"content\">Issues Index</span></a>\n   </ol>\n  </nav>\n  <main>\n   <h2 class=\"heading settled\" data-level=\"1\" id=\"basic-principles\"><span class=\"secno\">1. </span><span class=\"content\">Principles behind design of Web APIs</span><a class=\"self-link\" href=\"#basic-principles\"></a></h2>\n   <p>The Design Principles are directly informed by the ethical framework\nset out in the Ethical Web Principles <a data-link-type=\"biblio\" href=\"#biblio-ethical-web\">[ETHICAL-WEB]</a>.\nThese principles provide concrete practical advice\nin response to the higher level ethical responsibilities\nthat come with developing the web platform.</p>\n   <h3 class=\"heading settled\" data-level=\"1.1\" id=\"priority-of-constituencies\"><span class=\"secno\">1.1. </span><span class=\"content\">Put user needs first (Priority of Constituencies)</span><a class=\"self-link\" href=\"#priority-of-constituencies\"></a></h3>\n   <p>If a trade-off needs to be made,\nalways put user needs above all.</p>\n   <p>Similarly, when beginning to design an API,\nbe sure to understand and document the user need that the API aims to address.</p>\n   <p><a href=\"https://tools.ietf.org/html/rfc8890\">The internet is for end users</a>:\nany change made to the web platform has the potential to <a href=\"https://www.w3.org/2001/tag/doc/ethical-web-principles/#allpeople\">affect vast numbers of people</a>,\nand may have a profound impact on any person’s life. <a data-link-type=\"biblio\" href=\"#biblio-rfc8890\">[RFC8890]</a></p>\n   <p>User needs come before the needs of web page authors,\nwhich come before than the needs of user agent implementors,\nwhich come before than the needs of specification writers,\nwhich come before theoretical purity.</p>\n   <p>Like all principles,\nthis isn’t absolute.\nEase of authoring affects how content reaches users.\nUser agents have to prioritize finite engineering resources,\nwhich affects how features reach authors.\nSpecification writers also have finite resources,\nand theoretical concerns reflect underlying needs of all of these groups.</p>\n   <p>See also:</p>\n   <ul>\n    <li data-md>\n     <p><a href=\"https://www.w3.org/2001/tag/doc/ethical-web-principles/#noharm\">The web should not cause harm to society</a></p>\n    <li data-md>\n     <p><a href=\"https://www.w3.org/2001/tag/doc/ethical-web-principles/#control\">The web must enhance individuals' control and power</a></p>\n    <li data-md>\n     <p><a data-link-type=\"biblio\" href=\"#biblio-rfc8890\">[RFC8890]</a></p>\n   </ul>\n   <h3 class=\"heading settled\" data-level=\"1.2\" id=\"safe-to-browse\"><span class=\"secno\">1.2. </span><span class=\"content\">It should be safe to visit a web page</span><a class=\"self-link\" href=\"#safe-to-browse\"></a></h3>\n   <p>When adding new features,\ndesign them to preserve the user expectation\nthat visiting a web page is generally safe.</p>\n   <p>The Web is named for its hyperlinked structure.\nIn order for the web to remain vibrant,\nusers need to be able to expect that merely visiting any given link\nwon’t have implications for the security of their computer,\nor for any essential aspects of their <a href=\"https://www.w3.org/2001/tag/doc/ethical-web-principles/#privacy\">privacy</a>.</p>\n   <p>For example, an API which allows any website to <a href=\"#do-not-expose-use-of-assistive-tech\">detect the use of assistive technologies</a> may make users of these technologies feel unsafe visiting unknown web pages,\nsince any web page may detect this private information.</p>\n   <p>If users have a realistic expectation of safety,\nthey can make informed decisions\nbetween Web-based technologies and other technologies.\nFor example, users may choose to use a web-based food ordering page,\nrather than installing an app,\nsince installing a native app is riskier than visiting a web page.</p>\n   <p>To work towards making sure the reality of safety on the web matches users' expectations,\nwe can take complementary approaches when adding new features:</p>\n   <ul>\n    <li data-md>\n     <p>We can improve the user interfaces through which the Web is used\nto make it clearer what users of the Web should (and should not) expect;</p>\n    <li data-md>\n     <p>We can change the technical foundations of the Web\nso that they match user expectations of privacy;</p>\n    <li data-md>\n     <p>We can consider the cases where users would be better off\nif expectations were higher,\nand in those cases\ntry to change both technical foundations and expectations.</p>\n   </ul>\n   <p>A new feature which introduces safety risks may still improve user safety overall,\nif it allows users to perform a task more safely on a web page\nthan it would be for them to install a native app to do the same thing.\nHowever, this benefit needs to be weighed against the common goal\nof users having a reasonable expectation of safety on web pages.</p>\n   <p>See also:</p>\n   <ul>\n    <li data-md>\n     <p><a href=\"https://www.w3.org/TR/security-privacy-questionnaire/\">Security and Privacy Self-Review</a></p>\n   </ul>\n   <h3 class=\"heading settled\" data-level=\"1.3\" id=\"trusted-ui\"><span class=\"secno\">1.3. </span><span class=\"content\">Trusted user interface should be trustworthy</span><a class=\"self-link\" href=\"#trusted-ui\"></a></h3>\n   <p>Consider whether new features impact trusted user interfaces.</p>\n   <p>Users depend on trusted user interfaces\nsuch as the address bar, security indicators and permission prompts,\nto understand who they are interacting with and how.\nThese trusted user interfaces must be able to be designed in a way\nthat enables users to trust <a href=\"https://www.w3.org/2001/tag/doc/ethical-web-principles/#verify\">and verify</a> that the information they provide is genuine,\nand hasn’t been spoofed or hijacked by the website.</p>\n   <p>If a new feature allows untrusted user interfaces\nto resemble trusted user interfaces,\nthis makes it more difficult for users to understand what information is trustworthy.</p>\n   <p class=\"example\" id=\"example-59575e9e\"><a class=\"self-link\" href=\"#example-59575e9e\"></a> For example, JavaScript <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-alert-noargs\" id=\"ref-for-dom-alert-noargs\">alert()</a></code> allows a page to show a modal dialog which looks like part of the browser.\nThis is often used to attempt to trick users into visiting scam websites.\nIf this feature was proposed today, it would probably not proceed. </p>\n   <h3 class=\"heading settled\" data-level=\"1.4\" id=\"consent\"><span class=\"secno\">1.4. </span><span class=\"content\">Ask users for meaningful consent when appropriate</span><a class=\"self-link\" href=\"#consent\"></a></h3>\n   <p>If a useful feature has the potential to cause harm to users,\nmake sure that the user can give <a href=\"https://www.w3.org/2001/tag/doc/ethical-web-principles/#control\">*meaningful consent*</a> for that feature to be used,\nand that they can refuse consent effectively.</p>\n   <p>In order to give <em>meaningful consent</em>, the user must:</p>\n   <ul>\n    <li data-md>\n     <p><strong>understand</strong> what permission they may choose whether to grant the web page</p>\n    <li data-md>\n     <p>be able to choose to give or refuse that permission <strong>effectively</strong>.</p>\n   </ul>\n   <p>If a feature is powerful enough to require a user consent,\nbut it’s impossible to explain to a typical user what they are consenting to,\nthat’s a signal that you may need to reconsider the design of the feature.</p>\n   <p>If a permission prompt is shown,\nand the user doesn’t grant permission,\nthe Web page should not be able to do anything\nthat the user believes they have refused consent for.</p>\n   <p>By asking for consent,\nwe can inform the user of what capabilities the web page does or doesn’t have,\nreinforcing their confidence that <a href=\"#safe-to-browse\">the web is safe</a>.\nHowever, the <a href=\"#priority-of-constituencies\">user benefit</a> of a new feature must justify the additional burden on users\nto decide whether to grant permission for each feature\nwhenever it’s requested by a Web page.</p>\n   <p class=\"example\" id=\"example-07793d34\"><a class=\"self-link\" href=\"#example-07793d34\"></a> For example,\nthe <a href=\"https://www.w3.org/TR/geolocation-API/\">Geolocation API</a> grants access to a user’s location.\nThis can help users in some contexts,\nlike a mapping application,\nbut may be dangerous to some users in other contexts -\nespecially if used without the user’s knowledge.\nSo that the user may decide whether their location may be used by a Web page,\na permission prompt should be shown to the user asking whether to grant location access.\nIf the user refuses permission,\nno location information is available to the Web page. </p>\n   <p>See also:</p>\n   <ul>\n    <li data-md>\n     <p><a href=\"https://www.w3.org/2001/tag/doc/ethical-web-principles/#privacy\">Security and privacy are essential</a></p>\n   </ul>\n   <h3 class=\"heading settled\" data-level=\"1.5\" id=\"devices-platforms\"><span class=\"secno\">1.5. </span><span class=\"content\">Support the full range of devices and platforms (Media Independence)</span><a class=\"self-link\" href=\"#devices-platforms\"></a></h3>\n   <p>As much as possible,\nensure that features on the web work across different input and output [devices,\nscreen sizes, interaction modes, platforms, and media]\n(https://www.w3.org/2001/tag/doc/ethical-web-principles/#multi).</p>\n   <p>One of the main values of the Web is that it’s extremely flexible:\na Web page may be viewed on virtually any consumer computing device\nat a very wide range of screen sizes,\nmay be used to generate printed media,\nand may be interacted with in a large number of different ways.\nNew features should match the <a href=\"https://www.w3.org/2001/tag/doc/ethical-web-principles/#render\">existing flexibility</a> of the web platform.</p>\n   <div class=\"note\" role=\"note\">\n     This doesn’t imply that features which don’t work in <em>every</em> possible context should be excluded.\nFor example, hyperlinks can’t be visited when printed on paper,\nand the <span class=\"css\">click</span> event doesn’t translate perfectly to touch input devices\nwhere positioning and clicking the pointer occur in the same gesture (a \"tap\"). \n    <p>These features still work across a wide variety of contexts,\nand can be adapted to devices that don’t support their original intent -\nfor example, a tap on a mobile device will fire a <span class=\"css\">click</span> event as a fallback.</p>\n   </div>\n   <p>Features should also be designed so that the easiest way to use them\nmaintains flexibility.</p>\n   <div class=\"example\" id=\"example-f162158a\"><a class=\"self-link\" href=\"#example-f162158a\"></a> The 'display: block',\n'display: flex',\nand 'display: grid' layout models in CSS\nall default to placing content within the available space and without overlap,\nso that it works across screen sizes,\nand allows users to choose their own font and font size without causing text to overflow. </div>\n   <h2 class=\"heading settled\" data-level=\"2\" id=\"api-across-languages\"><span class=\"secno\">2. </span><span class=\"content\">API Design Across Languages</span><a class=\"self-link\" href=\"#api-across-languages\"></a></h2>\n   <h3 class=\"heading settled\" data-level=\"2.1\" id=\"simplicity\"><span class=\"secno\">2.1. </span><span class=\"content\">Prefer simple solutions</span><a class=\"self-link\" href=\"#simplicity\"></a></h3>\n   <p>Look hard for simple solutions to the <a href=\"#priority-of-constituencies\">user needs</a> you intend to address.</p>\n   <p>Simple solutions are generally better than complex solutions,\nalthough they may be harder to find.\nSimpler features are easier for user agents to implement and test,\nmore likely to be interoperable,\nand easier for authors to understand.\nIt is especially important to design your feature so that \nthe most common use cases are easy to accomplish.</p>\n   <p>Make sure that your <a href=\"#priority-of-constituencies\">user needs</a> are well-defined.\nThis allows you to avoid scope creep,\nand make sure that your API does actually meet the needs of all users.\nOf course,\ncomplex or rare use cases are also worth solving,\nthough their solutions may be more complicated to use.\nAs Alan Kay said,\n\"simple things should be simple, complex things should be possible.\"</p>\n   <p>Do note however that while common cases are often simple,\ncommonality and complexity are not always correlated.</p>\n   <div class=\"example\" id=\"example-b89cef20\"><a class=\"self-link\" href=\"#example-b89cef20\"></a> Sanitizing HTML to prevent XSS attacks is a complex process\nthat requires extensive security knowledge,\nhowever the <a href=\"https://wicg.github.io/sanitizer-api/\">Sanitizer API</a> provides a shortcut for this common use case. \nIt also permits simpler types of filtering, but with more configuration. </div>\n   <p>See also:</p>\n   <ul>\n    <li data-md>\n     <p><a data-link-type=\"biblio\" href=\"#biblio-least-power\">[LEAST-POWER]</a></p>\n   </ul>\n   <h3 class=\"heading settled\" data-level=\"2.2\" id=\"high-level-low-level\"><span class=\"secno\">2.2. </span><span class=\"content\">Resolving tension between high level and low level APIs</span><a class=\"self-link\" href=\"#high-level-low-level\"></a></h3>\n   <p>High-level APIs allow user agents more ability to\nintervene in various ways <a href=\"#priority-of-constituencies\">on behalf of the user</a>,\nsuch as to ensure accessibility, privacy, or usability.</p>\n   <div class=\"example\" id=\"font-enumeration\">\n    <a class=\"self-link\" href=\"#font-enumeration\"></a> \n    <p>A font picker (high level API) <a href=\"https://github.com/w3ctag/design-reviews/issues/399\">was recommended by the TAG</a> over a Font Enumeration API (low level API)\nas it addresses the bulk of use cases,\nwhile preserving user privacy,\nas it is free from the the fingerprinting concerns that accompany\na general Font Enumeration API.\nA native font picker also comes with accessibility built-in,\nand provides consistency for end users.</p>\n   </div>\n   <p>Low-level APIs afford authors room for experimentation\nso that high level APIs can organically emerge\nfrom usage patterns over time.\nThey also provide an escape hatch when the higher-level API\nis not adequate for the use case at hand.</p>\n   <p>Lower level building blocks cannot always be exposed as Web APIs.\nA few possible reasons for this are\nto preserve the user’s security and privacy,\nor to avoid tying Web APIs to specific hardware implementations.\nHowever, high level APIs should be designed in terms of\nbuilding blocks over lower level APIs\nwhenever possible.\nThis may guide decisions on how high level the API needs to be.</p>\n   <p>A well-layered solution should ensure continuity\nof the ease-of-use vs power tradeoff curve\nand avoid sharp cliffs\nwhere a small amount of incremental use case complexity\nresults in a large increase of code complexity.</p>\n   <h3 class=\"heading settled\" data-level=\"2.3\" id=\"name-thoughtfully\"><span class=\"secno\">2.3. </span><span class=\"content\">Name things thoughtfully</span><a class=\"self-link\" href=\"#name-thoughtfully\"></a></h3>\n   <p>Name APIs with care.\nNaming APIs well makes it much easier for authors to use them correctly.</p>\n   <p>See the more detailed <a href=\"#naming-is-hard\">Naming principles</a> section\nfor specific guidance on naming.</p>\n   <h3 class=\"heading settled\" data-level=\"2.4\" id=\"consistency\"><span class=\"secno\">2.4. </span><span class=\"content\">Consistency</span><a class=\"self-link\" href=\"#consistency\"></a></h3>\n   <p>It is good practice to consider precedent in the design of your API\nand to try to be consistent with it.</p>\n   <p>There is often a tension between API ergonomics and consistency,\nwhen existing precedent is of poor usability.\nIn some cases it makes sense to break consistency to improve usability,\nbut the improvement should be very significant to justify this.</p>\n   <p>Since the web platform has gradually evolved over time,\nthere are often multiple conflicting precedents\nwhich are mutually exclusive.\nYou can weigh which precdent to follow by taking into account\nprevalence (all else being equal, follow the more popular precedent),\nAPI ergonomics (all else being equal, follow the more usable precedent),\nand API age (all else being equal, follow the newer precedent).</p>\n   <p>There is often a tension between internal and external consistency. <em>Internal consistency</em> is consistency with the rest of the system,\nwhereas <em>external consistency</em> is consistency with the rest of the world.\nIn the web platform, that might materialize in three layers:\nconsistency within the technology the API belongs to (e.g. CSS),\nconsistency with the rest of the web platform,\nand in some cases external precedent,\nwhen the API relates to a particular specialized outside domain.\nIn those cases, it is useful to consider what the majority of users will be.\nSince for most APIs the target user is someone who is familiar with the\ntechnology they are defined in,\nerr on the side of favoring consistency with that.</p>\n   <div class=\"example\" id=\"example-10a5f89c\"><a class=\"self-link\" href=\"#example-10a5f89c\"></a> One example is <a href=\"https://www.w3.org/TR/css-color-4/#funcdef-lab\">Lab colors</a>:\nIt would be more consistent with the rest of CSS to use percentages for L (0%-100%),\nbut more consistent with the rest of Color Science to use a unitless number (0-100).\nThere was a lot of heated debate,\nwhich resolved in favor of percentages,\ni.e. consistency within CSS. </div>\n   <p>There is also a separate section on <a href=\"#naming-consistency\">naming consistency</a>.</p>\n   <h3 class=\"heading settled\" data-level=\"2.5\" id=\"feature-detect\"><span class=\"secno\">2.5. </span><span class=\"content\">New features should be detectable</span><a class=\"self-link\" href=\"#feature-detect\"></a></h3>\n   <p>Provide a way for authors to programmatically detect\nwhether your feature is available,\nso that web content may gracefully handle the feature not being present.</p>\n   <p>An existing feature may not be available on a page for a number of reasons.\nTwo of the more common reasons are\nbecause it hasn’t been implemented yet, or\nbecause it’s only available in <a href=\"#secure-context\">secure contexts</a>.</p>\n   <p>Authors shouldn’t need to write different code to handle each scenario.\nThat way, even if an author only knows or cares about one scenario,\nthe code will handle all of them.</p>\n   <p class=\"note\" role=\"note\"> When a feature is available but isn’t feasible to use\nbecause a required device isn’t present,\nit’s better to expose that the feature is available\nand have a separate way to detect that the device isn’t.\nThis allows authors to handle a device not being available differently\nfrom the feature not being available,\nfor example by suggesting the user connect or enable the device. </p>\n   <p>See <a href=\"#device-enumeration\">§ 9.2 Use care when exposing APIs for selecting or enumerating devices</a>.</p>\n   <p></p>\n   <p>Authors should always be able to detect a feature from JavaScript,\nand in some cases the feature should also be detectable\nin the language where it’s used\n(such as <a class=\"css\" data-link-type=\"maybe\" href=\"https://drafts.csswg.org/css-conditional-3/#at-ruledef-supports\" id=\"ref-for-at-ruledef-supports\">@supports</a> in CSS).</p>\n   <p>In some cases, it may <strong>not</strong> be appropriate to allow feature detection.\nWhether the feature should be detectable or not\nshould be based on the <a href=\"#priority-of-constituencies\">user need</a> for the feature:\nif there is a user need or design principle which would fail\nif feature detection were available for the feature,\nthen you should not support feature detection.</p>\n   <p>Also, if a feature is generally not exposed to developers,\nit is not appropriate to support feature detection.\nFor example, private browsing mode is a concept\nwhich is recognised in web specifications,\nbut not exposed to authors.\nFor private browsing mode to support the user’s needs,\nit must not be feature detected.</p>\n   <p>See also:</p>\n   <ul>\n    <li data-md>\n     <p><a href=\"#do-not-expose-use-of-private-browsing-mode\">§ 2.7 Don’t reveal that private browsing mode is engaged</a></p>\n    <li data-md>\n     <p><a href=\"#do-not-expose-use-of-assistive-tech\">§ 2.9 Don’t reveal that assistive technologies are being used</a></p>\n    <li data-md>\n     <p><a href=\"#secure-context\">§ 2.6 Consider limiting new features to secure contexts</a></p>\n   </ul>\n   <h3 class=\"heading settled\" data-level=\"2.6\" id=\"secure-context\"><span class=\"secno\">2.6. </span><span class=\"content\">Consider limiting new features to secure contexts</span><a class=\"self-link\" href=\"#secure-context\"></a></h3>\n   <p>Always limit your feature to secure contexts\nif it would pose a risk to the user\nwithout the authentication, integrity, or confidentiality\nthat’s present only in secure contexts.</p>\n   <div class=\"example\" id=\"example-ba6f372c\"><a class=\"self-link\" href=\"#example-ba6f372c\"></a> One example of a feature that should be limited to secure contexts\nis <a href=\"https://www.w3.org/TR/geolocation-API/\">Geolocation</a>,\nsince it would be a risk to users' privacy to transmit their location in an insecure way. </div>\n   <p>For other features, TAG members past and present\nhaven’t reached consensus on general advice.\nSome believe that all new features\n(other than features which are additions to existing features)\nshould be limited to secure contexts.\nThis would help encourage the use of HTTPS,\nhelping users be more secure in general.</p>\n   <p>Others believe that features should only be limited to secure contexts\nif they have a known security or privacy impact.\nThis lowers the barrier to entry for creating web pages\nthat take advantage of new features which don’t impact user security or privacy.</p>\n   <div class=\"note\" role=\"note\">\n     Specification authors can limit most features defined in <a href=\"https://heycam.github.io/webidl/\">Web IDL</a>,\nto secure contexts\nby using the\n[<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#SecureContext\" id=\"ref-for-SecureContext\">SecureContext</a></code>] extended attribute\non interfaces, namespaces, or their members (such as methods and attributes). \n    <p>However, for some types of API (e.g., dispatching an event),\nlimitation to secure contexts should just\nbe defined in normative prose in the specification.\nIf this is the case,\nconsider whether there might be scope for adding a similar mechanism\nto [<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#SecureContext\" id=\"ref-for-SecureContext①\">SecureContext</a></code>]\nto make this process easier for future API developers.</p>\n   </div>\n   <div class=\"note\" role=\"note\">\n     As described in <a href=\"#feature-detect\">§ 2.5 New features should be detectable</a>,\nyou should provide a way to programmatically detect whether a feature is available,\nincluding cases where the feature is unavailable because the context isn’t secure. \n    <p>However, if, for some reason\nthere is no way for code to gracefully handle the feature not being present,\nlimiting the feature to secure contexts might cause problems\nfor code (such as libraries) that may be used in either secure or non-secure contexts.</p>\n   </div>\n   <h3 class=\"heading settled\" data-level=\"2.7\" id=\"do-not-expose-use-of-private-browsing-mode\"><span class=\"secno\">2.7. </span><span class=\"content\">Don’t reveal that private browsing mode is engaged</span><a class=\"self-link\" href=\"#do-not-expose-use-of-private-browsing-mode\"></a></h3>\n   <p>Make sure that your feature doesn’t give authors a way to detect private browsing mode.</p>\n   <p>Some people use <a href=\"https://www.w3.org/2001/tag/doc/private-browsing-modes/\">private browsing mode</a> to protect their own personal safety.\nBecause of this, the fact that someone is using private browsing mode\nmay be <a href=\"https://www.w3.org/TR/security-privacy-questionnaire/#sensitive-data\">sensitive information</a> about them.\nThis information may <a href=\"https://www.w3.org/2001/tag/doc/ethical-web-principles/#noharm\">harm</a> people\nif it is revealed to a web site controlled by others who have power over them\n(such as employers, parents, partners,\nor <a href=\"https://www.w3.org/2001/tag/doc/ethical-web-principles/#expression\">state actors</a>).</p>\n   <p>Given such dangers,\nwebsites should not be able to detect that private browsing mode is engaged.</p>\n   <div class=\"example\" id=\"example-52cad010\"><a class=\"self-link\" href=\"#example-52cad010\"></a> User Agents which support <a href=\"https://www.w3.org/TR/IndexedDB/\">IndexedDB</a> should not disable it in private browsing mode,\nbecause that would reveal that private browsing mode is engaged </div>\n   <div class=\"example\" id=\"example-bc7df47d\">\n    <a class=\"self-link\" href=\"#example-bc7df47d\"></a> The <a href=\"https://www.w3.org/TR/payment-request/\">Payment Request API</a>'s <a href=\"https://www.w3.org/TR/payment-request/#show-method\">show() method</a>,\nwhen called,\nallows User Agents <q cite=\"https://www.w3.org/TR/payment-request/#show-method\">to act\nas if the user had immediately <a href=\"https://www.w3.org/TR/payment-request/#dfn-user-aborts-the-payment-request\">aborted the payment request</a></q>. \n    <p>This enables User Agents to automatically abort payment requests\nin private browsing mode\n(thus protecting <a href=\"https://www.w3.org/TR/security-privacy-questionnaire/#sensitive-data\">sensitive information</a> such as the user’s shipping or billing address)\nwithout revealing that private browsing mode is engaged.</p>\n   </div>\n   <p>See also:</p>\n   <ul>\n    <li data-md>\n     <p><a href=\"https://www.w3.org/2001/tag/doc/ethical-web-principles/#privacy\">Security and privacy are essential</a></p>\n    <li data-md>\n     <p><a href=\"https://www.w3.org/TR/security-privacy-questionnaire/#underlying-platform-data\">What data does this specification expose to an origin?</a></p>\n    <li data-md>\n     <p><a href=\"#private-browsing-mode\">§ 2.8 Consider how your API should behave in private browsing mode</a></p>\n   </ul>\n   <h3 class=\"heading settled\" data-level=\"2.8\" id=\"private-browsing-mode\"><span class=\"secno\">2.8. </span><span class=\"content\">Consider how your API should behave in private browsing mode</span><a class=\"self-link\" href=\"#private-browsing-mode\"></a></h3>\n   <p>If necessary, specify how your API should behave differently\nin private browsing mode.</p>\n   <p>For example, if your API would reveal information\nthat would allow someone to correlate\na single user’s activity\nboth in and out of private browsing mode,\nconsider possible <a href=\"https://www.w3.org/TR/security-privacy-questionnaire/#mitigations\">mitigations</a> such as introducing noise,\nor using permission prompts to give the user extra information\nto help them meaningfully consent to this tracking (see <a href=\"#consent\">§ 1.4 Ask users for meaningful consent when appropriate</a>).</p>\n   <p>Private browsing modes enable users to browse the web\nwithout leaving any trace of their private browsing on their device.\nTherefore, APIs which provide client-side storage\nshould not persist data stored\nwhile private browsing mode is engaged\nafter it’s disengaged.\nThis can and should be done\nwithout revealing any detectable API differences to the site.</p>\n   <div class=\"example\" id=\"example-fb11a26c\">\n    <a class=\"self-link\" href=\"#example-fb11a26c\"></a> User Agents which support <a href=\"https://html.spec.whatwg.org/multipage/webstorage.html#dom-localstorage\">localStorage</a> should not persist storage area changes\nmade while private browsing mode is engaged. \n    <p>If the User Agent has two simultaneous sessions with a site,\none in private browsing mode and one not,\nstorage area changes made in the private browsing mode session\nshould not be revealed to the other browsing session,\nand vice versa.\n(The <a href=\"https://html.spec.whatwg.org/multipage/indices.html#event-storage\">storage event</a> should not be fired\nat the other session’s <a href=\"https://html.spec.whatwg.org/multipage/window-object.html#window\" id=\"termref-for-window\">window object</a>.)</p>\n   </div>\n   <p>See also:</p>\n   <ul>\n    <li data-md>\n     <p><a href=\"#do-not-expose-use-of-private-browsing-mode\">§ 2.7 Don’t reveal that private browsing mode is engaged</a></p>\n    <li data-md>\n     <p><a href=\"https://www.w3.org/TR/security-privacy-questionnaire/#persistent-origin-specific-state\">Does this specification introduce new state for an origin that persists across browsing sessions?</a></p>\n    <li data-md>\n     <p><a href=\"https://www.w3.org/TR/security-privacy-questionnaire/#private-browsing\">Security and privacy self review: Private Browsing</a></p>\n   </ul>\n   <h3 class=\"heading settled\" data-level=\"2.9\" id=\"do-not-expose-use-of-assistive-tech\"><span class=\"secno\">2.9. </span><span class=\"content\">Don’t reveal that assistive technologies are being used</span><a class=\"self-link\" href=\"#do-not-expose-use-of-assistive-tech\"></a></h3>\n   <p>Make sure that your API doesn’t provide a way\nfor authors to detect that a user is using assistive technology\nwithout the user’s consent.</p>\n   <p><a href=\"https://www.w3.org/2001/tag/doc/ethical-web-principles/#allpeople\">The web platform must be accessible to people with disabilities.</a> If a site can detect that a user is using an assistive technology,\nthat site can deny or restrict the user’s access to the services it provides.</p>\n   <p>People who make use of assistive technologies\nare often <a href=\"https://www.w3.org/2001/tag/doc/ethical-web-principles/#noharm\">vulnerable members of society</a>;\ntheir use of assistive technologies is <a href=\"https://www.w3.org/TR/security-privacy-questionnaire/#sensitive-data\">sensitive information</a> about them.\nIf an API provides access to this information\nwithout the user’s <a href=\"#consent\">consent</a>,\nthis sensitive information may be revealed to others\n(including <a href=\"https://www.w3.org/2001/tag/doc/ethical-web-principles/#expression\">state actors</a>)\nwho may wish them harm.</p>\n   <p>Sometimes people propose features which aim to improve the user experience\nfor users of assistive technology,\nbut which would reveal the user’s use of assistive technology as a side effect.\nWhile these are well intentioned,\nthey violate <a href=\"#safe-to-browse\">§ 1.2 It should be safe to visit a web page</a>,\nso alternative solutions must be found.</p>\n   <div class=\"example\" id=\"example-f5a7b3e0\">\n    <a class=\"self-link\" href=\"#example-f5a7b3e0\"></a> \n    <p>The <a href=\"https://wicg.github.io/aom/\">Accessibility Object Model</a> (AOM)\nused to define a set of events which, when fired, <a href=\"https://github.com/WICG/aom/issues/81\">revealed the use of assistive technology</a>.</p>\n    <p>AOM has since removed these events and <a href=\"https://github.com/WICG/aom/blob/gh-pages/explainer.md#user-action-events-from-assistive-technology\">replaced them</a> with synthetic DOM events\nwhich don’t reveal the use of assistive technology.</p>\n   </div>\n   <p>See also:</p>\n   <ul>\n    <li data-md>\n     <p><a href=\"https://w3c.github.io/apa/fast/\">Web Technology Accessibility Guidelines</a></p>\n    <li data-md>\n     <p><a href=\"https://www.w3.org/2001/tag/doc/ethical-web-principles/#privacy\">Security and privacy are essential</a></p>\n    <li data-md>\n     <p><a href=\"https://www.w3.org/TR/security-privacy-questionnaire/#underlying-platform-data\">What data does this specification expose to an origin?</a></p>\n   </ul>\n   <h3 class=\"heading settled\" data-level=\"2.10\" id=\"support-non-fully-active\"><span class=\"secno\">2.10. </span><span class=\"content\">Support non-\"fully active\" documents</span><a class=\"self-link\" href=\"#support-non-fully-active\"></a></h3>\n   <p>After a user navigated away from a document,\nthe document might be cached in a non-<a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active\">fully active</a> state,\nand might be reused when the user navigates back to the entry holding the document, which makes navigation fast for users.\nIn browsers, this is known as the back/forward cache, or \"<abbr title=\"back/forward cache\">BFCache</abbr>\" for short.\nIn the past, many APIs have missed specifying support for non-<a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active①\">fully active</a> documents,\nmaking them hard to support in various user agents to cache pages in the BFCache, effectively making the user experience of navigating back and forth less optimal.</p>\n   <p>To avoid this happening with your API,\nyou should specify support for non-<a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active②\">fully active</a> documents by following these guidelines:</p>\n   <p class=\"note\" role=\"note\"><span>Note:</span> It is possible for a document to not become <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active③\">fully active</a> for other reasons not related to\ncaching, such as when the iframe holding the document gets detached.\nSome advices below might not be relevant for those cases,\nsince the document will never return to <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active④\">fully active</a> again.</p>\n   <h4 class=\"heading settled\" data-level=\"2.10.1\" id=\"gate-fully-active\"><span class=\"secno\">2.10.1. </span><span class=\"content\">Gate actions with <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active⑤\">fully active</a> checks</span><a class=\"self-link\" href=\"#gate-fully-active\"></a></h4>\n   <p>When performing actions that might update the state of a document,\nbe aware that the document might not be <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active⑥\">fully active</a> and is considered as \"non-existent\" from the user’s perspective.\nThis means they should not receive updates or perform actions.</p>\n   <p class=\"note\" role=\"note\"><span>Note:</span> It is possible for a <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active⑦\">fully active</a> document to be perceived as \"non-existent\" by users,\nsuch as when the document is <a href=\"https://jeremyroman.github.io/alternate-loading-modes/\">displaying prerendered content</a>.\nThese documents might behave differently than non-<a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active⑧\">fully active</a> documents,\nand the guidelines here might not be applicable to them,\nas it is written only for handling non-<a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active⑨\">fully active</a> documents.</p>\n   <p>In many cases,\nanything that happens while the document is not <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active①⓪\">fully active</a> should be treated as if it never happened.\nIf it makes more sense to \"update\" a document to ensure it does not hold  stale information\nafter it becomes <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active①①\">fully active</a> again, consider the <a href=\"#listen-fully-active\">§ 2.10.2 Listen for changes to fully active status</a> pattern below.</p>\n   <div class=\"example\" id=\"example-86baec91\"><a class=\"self-link\" href=\"#example-86baec91\"></a> APIs that periodically send information updates,\n  such as Geolocation API’s <code class=\"idl\"><a data-link-type=\"idl\">watchPosition()</a></code> should not send updates if the document is no longer fully active.\n  They also should not queue those updates to arrive later,\n  and only resume sending updates when the document becomes active again,\n  possibly sending one update with the latest information then. </div>\n   <h4 class=\"heading settled\" data-level=\"2.10.2\" id=\"listen-fully-active\"><span class=\"secno\">2.10.2. </span><span class=\"content\">Listen for changes to <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active①②\">fully active</a> status</span><a class=\"self-link\" href=\"#listen-fully-active\"></a></h4>\n   <p>When a document goes from <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active①③\">fully active</a> to non-<a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active①④\">fully active</a>,\nit should be treated similarly to the way discarded documents are treated.\nThe document must not retain exclusive access to shared resources\nand must ensure that no new requests are issued\nand that connections that allow for new incoming requests are terminated.\nWhen a document goes from non-<a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active①⑤\">fully active</a> to <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active①⑥\">fully active</a> again,\nit can restore connections if appropriate.</p>\n   <p>While web authors can manually do cleanup (e.g. release the resources, sever connections)\nfrom within the <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/indices.html#event-pagehide\" id=\"ref-for-event-pagehide\">pagehide</a></code> event and restore them from the <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/indices.html#event-pageshow\" id=\"ref-for-event-pageshow\">pageshow</a></code> event themselves,\ndoing this automatically from the API design allows the document to be kept alive after navigation by default,\nand is more likely to lead to well-functioning web applications.</p>\n   <div class=\"example\" id=\"example-76ebae04\"><a class=\"self-link\" href=\"#example-76ebae04\"></a> APIs that create live connections can pause/close the connection and possibly resume/reopen it later.\n  It’s also possible to let the connection stay open to complete existing ongoing requests,\n  and later update the document with the result when it gets restored, if appropriate (e.g.\n  resource loads). </div>\n   <div class=\"example\" id=\"example-1dfbe459\"><a class=\"self-link\" href=\"#example-1dfbe459\"></a> APIs that hold non-exclusive resources\n  may be able to release the resource when the document becomes not fully active,\n  and re-acquire them when it becomes <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active①⑦\">fully active</a> again\n  (Screen Wake Lock API is already <a href=\"https://w3c.github.io/screen-wake-lock/#handling-document-loss-of-full-activity\">doing</a> the first part). </div>\n   <p class=\"note\" role=\"note\"><span>Note:</span> this might not be appropriate for all types of resources,\ne.g. if an exclusive lock is held,\nwe cannot just release it and reacquire when <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active①⑧\">fully active</a> since another page could then take that lock.\nIf there is an API to signal to the page that this has happened,\nit may be acceptable but beware that if the only time this happens is with BFCache,\nthen it’s likely many pages are not prepared for it. If it is not possible to support BFCache,\nfollow the <a href=\"#discard\">§ 2.10.4 Discard non-fully active documents for situations that can’t be supported</a> pattern described below.</p>\n   <p>Additionally, when a document becomes <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active①⑨\">fully active</a> again,\nit can be useful to update it with the current state of the world,\nif anything has changed while it is in the non-<a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active②⓪\">fully active</a> state.\nHowever, care needs to be taken with events that occurred while in the BFCache.\nWhen not <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active②①\">fully active</a>, for some cases, all events should be dropped,\nin some the latest state should be delivered in a single event,\nin others it may be appropriate to queue events or deliver a combined event.\nThe correct approach is case by case and should consider privacy,\ncorrectness, performance and ergonomics.</p>\n   <p class=\"note\" role=\"note\"><span>Note:</span> Making sure the latest state is sent to a document that becomes <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active②②\">fully active</a> again is especially important when retrofitting existing APIs.\nThis is because current users of these APIs expect to always have the latest information.\nDropping state updates can leave the document with stale information,\nwhich can lead to unexpected and hard-to-detect breakage of existing sites.</p>\n   <div class=\"example\" id=\"example-32a4ab83\"><a class=\"self-link\" href=\"#example-32a4ab83\"></a> The <code class=\"idl\"><a data-link-type=\"idl\">gamepadconnected</a></code> event\n  can be sent to a document that becomes <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active②③\">fully active</a> again\n  if a gamepad is connected while the document is not <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active②④\">fully active</a>.\n  If the gamepad was repeatedly connected and disconnected,\n  only the final connected event should be delivered.\n  (This is not specified yet, see <a href=\"https://github.com/w3c/gamepad/issues/149\">issue</a>) </div>\n   <div class=\"example\" id=\"example-46b7099c\"><a class=\"self-link\" href=\"#example-46b7099c\"></a> For geolocation or other physical sensors,\n  no information about what happened while not <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active②⑤\">fully active</a> should be delivered.\n  The events should simply resume from when the document became <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active②⑥\">fully active</a>.\n  However, these APIs should check the state when the document becomes <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active②⑦\">fully active</a> again,\n  to determine if a status update should be sent (e.g. is the current location far away from the\n  location when the document becomes not fully active?), to ensure the document has the latest\n  information, as guaranteed by the API normally. </div>\n   <div class=\"example\" id=\"example-3f8cc6e6\"><a class=\"self-link\" href=\"#example-3f8cc6e6\"></a> For network connections or streams,\n  the data received while not <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active②⑧\">fully active</a> should be delivered only\n  when the document becomes <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active②⑨\">fully active</a> again,\n  but whereas a stream might have created many events with a small amount of data each,\n  it could be delivered as smaller number of events with more data in each. </div>\n   <h4 class=\"heading settled\" data-level=\"2.10.3\" id=\"omit-non-fully-active\"><span class=\"secno\">2.10.3. </span><span class=\"content\">Omit non-<a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active③⓪\">fully active</a> documents from APIs that span multiple documents</span><a class=\"self-link\" href=\"#omit-non-fully-active\"></a></h4>\n    Non-<a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active③①\">fully active</a> documents should not be observable,\nso APIs should treat them as if they no longer exist.\nThey should not be visible to the \"outside world\" through document-spanning APIs\n(e.g. <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://w3c.github.io/ServiceWorker/#dom-clients-matchall\" id=\"ref-for-dom-clients-matchall\">clients.matchAll()</a></code>, <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#dom-opener\" id=\"ref-for-dom-opener\">window.opener</a></code>). \n   <p class=\"note\" role=\"note\"><span>Note:</span> This should be rare since cross-document-spanning APIs are themselves relatively rare.</p>\n   <div class=\"example\" id=\"example-20998cac\"><a class=\"self-link\" href=\"#example-20998cac\"></a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/web-messaging.html#broadcastchannel\" id=\"ref-for-broadcastchannel\">BroadcastChannel</a></code> <a href=\"https://html.spec.whatwg.org/multipage/web-messaging.html#broadcasting-to-other-browsing-contexts:fully-active\">checks</a> for <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active③②\">fully active</a> before sending messages to other browsing contexts. </div>\n   <div class=\"example\" id=\"example-1a865af0\"><a class=\"self-link\" href=\"#example-1a865af0\"></a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://w3c.github.io/ServiceWorker/#dom-clients-matchall\" id=\"ref-for-dom-clients-matchall①\">clients.matchAll()</a></code> currently does not distinguish between <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active③③\">fully active</a> and non-<a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active③④\">fully active</a> clients,\n  but correct implementations should only return <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active③⑤\">fully active</a> clients.\n  (See <a href=\"https://github.com/w3c/ServiceWorker/issues/1594\">issue</a>) </div>\n   <h4 class=\"heading settled\" data-level=\"2.10.4\" id=\"discard\"><span class=\"secno\">2.10.4. </span><span class=\"content\">Discard non-<a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active③⑥\">fully active</a> documents for situations that can’t be supported</span><a class=\"self-link\" href=\"#discard\"></a></h4>\n    If supporting non-<a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active③⑦\">fully active</a> documents is not possible for certain cases,\nexplicitly specify it by <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/window-object.html#discard-a-document\" id=\"ref-for-discard-a-document\">discarding the document|</a> if the situation happens after the user navigated away,\nor setting the document’s <a href=\"https://html.spec.whatwg.org/multipage/browsing-the-web.html#concept-document-salvageable\">salvageable</a> bit to false if the situation happens before or during the navigation away from the document,\nto cause it to be automatically discarded after navigation. \n   <p class=\"note\" role=\"note\"><span>Note:</span> this should be rare and probably should only be used when retrofitting old APIs,\nas new APIs should always strive to work well with BFCache.</p>\n   <div class=\"example\" id=\"example-94d4ddf4\"><a class=\"self-link\" href=\"#example-94d4ddf4\"></a> WebSockets <a href=\"https://html.spec.whatwg.org/#unloading-documents:concept-document-salvageable-7\">sets the salvageable bit to false</a> during unload. </div>\n   <div class=\"example\" id=\"example-47c778e3\"><a class=\"self-link\" href=\"#example-47c778e3\"></a> Calling <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://w3c.github.io/ServiceWorker/#dom-clients-claim\" id=\"ref-for-dom-clients-claim\">clients.claim()</a></code> should not wait for non-<a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active③⑧\">fully active</a> clients,\n  instead it should cause the non-<a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active③⑨\">fully active</a> client documents to be discarded.\n  (This is currently not specified, see <a href=\"https://github.com/w3c/ServiceWorker/issues/1594\">issue</a>) </div>\n   <h4 class=\"heading settled\" data-level=\"2.10.5\" id=\"per-document-state\"><span class=\"secno\">2.10.5. </span><span class=\"content\">Be aware that per-document state/data might persist after navigation</span><a class=\"self-link\" href=\"#per-document-state\"></a></h4>\n    As a document might be reused even after navigation,\nbe aware that tying something to a document’s lifetime\nalso means reusing it after navigations.\nIf this is not desirable,\nconsider listening to changes to the <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active④⓪\">fully active</a> state\nand doing cleanup as necessary (see above). \n   <div class=\"example\" id=\"example-9be02aaf\"><a class=\"self-link\" href=\"#example-9be02aaf\"></a> <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/interaction.html#sticky-activation\" id=\"ref-for-sticky-activation\">Sticky activation</a> is determined by the \"last activation timestamp\",\n  which is tied to a document.\n  This means after a user triggers activation once on a document,\n  the document will have sticky activation forever,\n  even after the user navigated away and back to it again.\n  Whether this should actually be reset when full activity is lost or not\n  is still <a href=\"https://github.com/whatwg/html/issues/6588\">under discussion</a>. </div>\n   <h3 class=\"heading settled\" data-level=\"2.11\" id=\"third-party-tools\"><span class=\"secno\">2.11. </span><span class=\"content\">Prioritize usability over compatibility with third-party tools</span><a class=\"self-link\" href=\"#third-party-tools\"></a></h3>\n   <p>Design new features with usability as the primary goal, and compatibility with third-party tooling as a secondary goal.</p>\n   <p>The web platform benefits from a wide ecosystem of tooling\nto facilitate easier and faster development.\nA lot of the time, the syntax of an upcoming web platform feature\nmay conflict with that of a third-party tool causing breakage.\nThis is especially common as third-party tools are often used to prototype\nnew web platform features.</p>\n   <p>In general, web platform features last a lot longer than most third-party tools,\nand thus giving them the optimal syntax and functionality should be of high priority.</p>\n   <p>In some cases, the conflict will introduce problems across a large number of\nweb sites, necessitating the feature’s syntax to be redesigned to avoid clashes.</p>\n   <div class=\"example\" id=\"example-1e284310\"><a class=\"self-link\" href=\"#example-1e284310\"></a> <code>Array.prototype.contains()</code> had to be renamed to <code>Array.prototype.includes()</code> to avoid clashes with\n    the identically named but incompatible method from PrototypeJS,\n    a library that was in use in millions of websites. </div>\n   <p>However, these cases should be exceptions.</p>\n   <p>When deciding whether to break third party tools with new syntax, there are several factors to consider,\nsuch as severity of the breakage,\npopularity of the third party tool,\nand many more.</p>\n   <p>Possibly the most important factor is how severely would the usability of the web platform feature be compromised\nif its syntax was changed to avoid breaking the third party tool?\nIf several alternatives of similar usability are being considered,\nit is usually preferable to prioritize the ones that inconvenience third party tools the least.</p>\n   <div class=\"example\" id=\"example-4a031163\"><a class=\"self-link\" href=\"#example-4a031163\"></a> When the CSS WG was designing <a data-link-type=\"biblio\" href=\"#biblio-css-grid-1\">CSS Grid Layout</a>,\nsquare brackets were chosen instead of parentheses for naming grid tracks\nto avoid breaking Sass, a popular preprocessor. </div>\n   <p>However, if avoiding breaking the third party tool would lead to\na <em>significant</em> negative impact on of the feature’s usability,\nthat is rarely an acceptable tradeoff,\nunless it causes significant breakage of live websites.</p>\n   <p>Languages should also provide mechanisms for extensibility\nthat authors can use to extend the language\nwithout breaking future native functionality,\nto reduce such dilemmas in the future.</p>\n   <h2 class=\"heading settled\" data-level=\"3\" id=\"html\"><span class=\"secno\">3. </span><span class=\"content\">HTML</span><a class=\"self-link\" href=\"#html\"></a></h2>\n   <p>This section details design principles for features which are exposed via HTML.</p>\n   <h3 class=\"heading settled\" data-level=\"3.1\" id=\"attribute-reuse\"><span class=\"secno\">3.1. </span><span class=\"content\">Re-use attribute names (only) for similar functionality</span><a class=\"self-link\" href=\"#attribute-reuse\"></a></h3>\n   <p>If you are adding a feature that is specified through an HTML attribute,\ncheck if there is an existing attribute name on another element\nthat specifies similar functionality.\nRe-using an existing attribute name means authors can utilize existing knowledge,\nmaintains <a href=\"#consistency\">consistency</a> across the language,\nand keeps its vocabulary small.</p>\n   <div class=\"example\" id=\"example-c1977603\"><a class=\"self-link\" href=\"#example-c1977603\"></a> The same attribute name, <code><a data-link-type=\"element-sub\" href=\"https://html.spec.whatwg.org/multipage/form-elements.html#attr-select-multiple\" id=\"ref-for-attr-select-multiple\">multiple</a></code>,\n\tis used on both <code><a data-link-type=\"element\" href=\"https://html.spec.whatwg.org/multipage/form-elements.html#the-select-element\" id=\"ref-for-the-select-element\">select</a></code> to allow selection of multiple values,\n\tas well as on <code><a data-link-type=\"element\" href=\"https://html.spec.whatwg.org/multipage/input.html#the-input-element\" id=\"ref-for-the-input-element\">input</a></code> to allow entry of multiple values. </div>\n   <div class=\"example\" id=\"example-628fe6cf\"><a class=\"self-link\" href=\"#example-628fe6cf\"></a> The <code><a data-link-type=\"element-sub\" href=\"https://html.spec.whatwg.org/multipage/interactive-elements.html#attr-details-open\" id=\"ref-for-attr-details-open\">open</a></code> attribute was introduced on the <code><a data-link-type=\"element\" href=\"https://html.spec.whatwg.org/multipage/interactive-elements.html#the-details-element\" id=\"ref-for-the-details-element\">details</a></code> element,\n\tand then re-used by <code><a data-link-type=\"element\" href=\"https://html.spec.whatwg.org/multipage/interactive-elements.html#the-dialog-element\" id=\"ref-for-the-dialog-element\">dialog</a></code>. </div>\n   <p>If you do re-use an existing attribute,\ntry to keep its syntax as close as possible to the syntax of the existing attribute.</p>\n   <div class=\"example\" id=\"example-0e853da5\"><a class=\"self-link\" href=\"#example-0e853da5\"></a> The <code><a data-link-type=\"element-sub\" href=\"https://html.spec.whatwg.org/multipage/forms.html#attr-label-for\" id=\"ref-for-attr-label-for\">for</a></code> attribute was introduced on the <code><a data-link-type=\"element\" href=\"https://html.spec.whatwg.org/multipage/forms.html#the-label-element\" id=\"ref-for-the-label-element\">label</a></code> element,\n\tfor specifying which form element it should be associated with.\n\tIt was later re-used by <code><a data-link-type=\"element\" href=\"https://html.spec.whatwg.org/multipage/form-elements.html#the-output-element\" id=\"ref-for-the-output-element\">output</a></code>,\n\tfor specifying which elements contributed\n\tinput values to or otherwise affected the calculation.\n\tThe syntax of the latter is broader:\n\tit accepts a space-separated list of ids,\n\twhereas the former only accepts one id.\n\tHowever, they both still conform to the same syntax,\n\twhereas e.g. if one of them accepted a list of ids,\n\tand the other one a selector, that would be an antipattern. </div>\n   <p>The inverse also applies:\ndo <strong>not</strong> re-use an existing attribute name if\nthe functionality you are adding is <strong>not</strong> similar to that of the existing attribute.</p>\n   <div class=\"example\" id=\"example-9866c588\"><a class=\"self-link\" href=\"#example-9866c588\"></a> The <code>type</code> attribute is used on the <code><a data-link-type=\"element\" href=\"https://html.spec.whatwg.org/multipage/input.html#the-input-element\" id=\"ref-for-the-input-element①\">input</a></code> and <code><a data-link-type=\"element\" href=\"https://html.spec.whatwg.org/multipage/form-elements.html#the-button-element\" id=\"ref-for-the-button-element\">button</a></code> elements\n    to further specialize the element type,\n    whereas on every other element (e.g. <code><a data-link-type=\"element\" href=\"https://html.spec.whatwg.org/multipage/semantics.html#the-link-element\" id=\"ref-for-the-link-element\">link</a></code>, <code><a data-link-type=\"element\" href=\"https://html.spec.whatwg.org/multipage/scripting.html#script\" id=\"ref-for-script\">script</a></code>, <code><a data-link-type=\"element\" href=\"https://html.spec.whatwg.org/multipage/semantics.html#the-style-element\" id=\"ref-for-the-style-element\">style</a></code>)\n    it specifies MIME type.\n    This is an antipattern; one of these groups of attributes should have had a different name. </div>\n   <h3 class=\"heading settled\" data-level=\"3.2\" id=\"avoid-html-parser-blocking\"><span class=\"secno\">3.2. </span><span class=\"content\"> Do not pause the HTML parser</span><a class=\"self-link\" href=\"#avoid-html-parser-blocking\"></a></h3>\n   <p>Ensure that your design does not require HTML parser to pause to handle external resources.</p>\n   <p>As a page parses,\nthe browser discovers assets that the page needs,\nand figures out a priority in which they should be loaded in parallel.\nSuch parsing can be disrupted by a resource which blocks the discovery of subsequent resources.\nAt worst, it means the browser downloads items in series rather than parallel.\nAt best, it means the browser queues downloads based on speculative parsing,\nwhich may turn out to be incorrect.</p>\n   <p>Features that block the parser generally do so\nbecause they want to feed additional content into the parser\nbefore subsequent content.\nThis is the case of legacy <code>&lt;script src=\"…\"></code> elements,\nwhich can inject into the parser using <code>document.write(…)</code>.\nDue to the performance issues above, new features must not do this.</p>\n   <h3 class=\"heading settled\" data-level=\"3.3\" id=\"avoid-render-blocking\"><span class=\"secno\">3.3. </span><span class=\"content\"> Avoid features that block rendering</span><a class=\"self-link\" href=\"#avoid-render-blocking\"></a></h3>\n   <p>Features that require resource loading or other operations before rendering the page,\noften result in blank page (or the previous page). The result is a poor user experience.</p>\n   <p>Consider adding such features only in cases when the overall user experience is improved.\nA canonical example of this is blocking rendering in order to download and process a stylesheet. \nThe alternative user experience is a flash of unstyled content, which is undesirable.</p>\n   <h2 class=\"heading settled\" data-level=\"4\" id=\"css\"><span class=\"secno\">4. </span><span class=\"content\">Cascading Style Sheets (CSS)</span><a class=\"self-link\" href=\"#css\"></a></h2>\n   <p>This section details design principles for features which are exposed via CSS.</p>\n   <h3 class=\"heading settled\" data-level=\"4.1\" id=\"css-property-separation\"><span class=\"secno\">4.1. </span><span class=\"content\">Separate CSS properties based on what should cascade separately</span><a class=\"self-link\" href=\"#css-property-separation\"></a></h3>\n   <p>Decide which values should be grouped together as CSS properties\nand which should be separate properties\nbased on what makes sense to set independently.</p>\n   <p><a href=\"https://www.w3.org/TR/2011/REC-CSS2-20110607/cascade.html#cascade\">CSS cascading</a> allows <a href=\"https://www.w3.org/TR/2011/REC-CSS2-20110607/syndata.html#declaration\">declarations</a> from different rules or different style sheets\nto override one another.\nA set of values that should all be overridden together\nshould be grouped together in a single property so that they cascade together.\nLikewise, values that should be able to be overridden independently\nshould be separate properties.</p>\n   <div class=\"example\" id=\"example-e15a5479\">\n    <a class=\"self-link\" href=\"#example-e15a5479\"></a>For example, the \"size\" and \"sink\" aspects of the <a class=\"property css\" data-link-type=\"property\" href=\"https://drafts.csswg.org/css-inline-3/#propdef-initial-letter\" id=\"ref-for-propdef-initial-letter\">initial-letter</a> property\nbelong in a single property\nbecause they are part of a single initial letter effect\n(e.g., a drop cap, sunken cap, or raised cap). \n    <p>However, the <a class=\"property css\" data-link-type=\"property\" href=\"https://drafts.csswg.org/css-inline-3/#propdef-initial-letter-align\" id=\"ref-for-propdef-initial-letter-align\">initial-letter-align</a> property should be separate because it\nsets an alignment policy for all of these effects across the document\nwhich is a general stylistic choice\nand a function of the script (e.g., Latin, Cyrillic, Arabic) used in the document.</p>\n   </div>\n   <h3 class=\"heading settled\" data-level=\"4.2\" id=\"css-inherited-or-not\"><span class=\"secno\">4.2. </span><span class=\"content\">Make appropriate choices for whether CSS properties are inherited</span><a class=\"self-link\" href=\"#css-inherited-or-not\"></a></h3>\n   <p>Decide whether a property should be <a href=\"https://drafts.csswg.org/css-cascade-3/#inherited-property\">inherited</a> based on whether the effect of the property should be overridden or added to\nif set on an ancestor as well as a descendant.</p>\n   <p>If setting the property on a descendant element needs to override (rather than add to)\nthe effect of setting it on an ancestor,\nthen the property should probably be inherited.</p>\n   <p>If setting the property on a descendant element is a separate effect\nthat adds to setting it on an ancestor,\nthen the property should probably <strong>not</strong> be inherited.</p>\n   <p>A specification of an non-inherited property requiring that the handling of an element\nlook at the value of that property on its ancestors (which may also be slow)\nis a \"code smell\" that suggests that the property likely should have been inherited.\nA specification of an inherited property requiring that the handling of an element\nignore the value of a property if it’s the same as the value on the parent element\nis a \"code smell\" that suggests that the property likely should not have been inherited.</p>\n   <div class=\"note\" role=\"note\"> If a property has an effect on text,\nthen it’s almost always true that\na descendant element needs to override (rather than add to)\nthe effect of setting it on an ancestor,\nand the property should be inherited.\nThis is also needed to maintain the design principle that\ninserting an unstyled inline element around a piece of text\ndoesn’t change the appearance of that text. </div>\n   <div class=\"example\" id=\"example-58897411\">\n    <a class=\"self-link\" href=\"#example-58897411\"></a> For example, the <a class=\"property css\" data-link-type=\"property\" href=\"https://drafts.csswg.org/css-backgrounds-3/#propdef-background-image\" id=\"ref-for-propdef-background-image\">background-image</a> property is <strong>not</strong> inherited. \n    <p>If the <a class=\"property css\" data-link-type=\"property\" href=\"https://drafts.csswg.org/css-backgrounds-3/#propdef-background-image\" id=\"ref-for-propdef-background-image①\">background-image</a> property had been inherited,\nthen the specification would have had to create a good bit of complexity\nto avoid a partially-transparent image\nbeing visibly repeated for each descendant element.\nThis complexity probably would have involved\nbehaving differently if the property had the same value on the parent element,\nwhich is the \"code smell\" mentioned above that suggests\nthat a property likely should not have been inherited.</p>\n   </div>\n   <div class=\"example\" id=\"example-51dea7ed\">\n    <a class=\"self-link\" href=\"#example-51dea7ed\"></a> Another example is the <a class=\"property css\" data-link-type=\"property\" href=\"https://drafts.csswg.org/css-fonts-4/#propdef-font-size\" id=\"ref-for-propdef-font-size\">font-size</a> property, which <strong>is</strong> inherited.\nIt sets the size of the font used for the text in the element,\nand continues to apply to any descendants that don’t\nhave a declaration setting <a class=\"property css\" data-link-type=\"property\" href=\"https://drafts.csswg.org/css-fonts-4/#propdef-font-size\" id=\"ref-for-propdef-font-size①\">font-size</a> to a different value. \n    <p>If the <a class=\"property css\" data-link-type=\"property\" href=\"https://drafts.csswg.org/css-fonts-4/#propdef-font-size\" id=\"ref-for-propdef-font-size②\">font-size</a> property were not inherited,\nthen it would probably have to have an initial value\nthat requires walking up the ancestor chain to find the nearest ancestor\nthat doesn’t have that value.\nThis is the \"code smell\" mentioned above that suggests\nthat a property likely should have been inherited.</p>\n   </div>\n   <h3 class=\"heading settled\" data-level=\"4.3\" id=\"css-computed-value\"><span class=\"secno\">4.3. </span><span class=\"content\">Choose the computed value type based on how the property should inherit</span><a class=\"self-link\" href=\"#css-computed-value\"></a></h3>\n   <p>Choose the <a data-link-type=\"dfn\" href=\"https://drafts.csswg.org/css-cascade-5/#computed-value\" id=\"ref-for-computed-value\">computed value</a> of a CSS property\nbased on how it will <a data-link-type=\"dfn\" href=\"https://drafts.csswg.org/css-cascade-5/#inheritance\" id=\"ref-for-inheritance\">inherit</a>,\nincluding how values where it depends on other properties should inherit.</p>\n   <p>Inheritance means that\nan element gets the same computed value for a property that its parent has.\nThis means that processing steps that happen before reaching the computed value\naffect the value that is inherited,\nand those that happen after (such as for the <a data-link-type=\"dfn\" href=\"https://drafts.csswg.org/css-cascade-5/#used-value\" id=\"ref-for-used-value\">used value</a>) do not.</p>\n   <div class=\"note\" role=\"note\"> Note: the <a data-link-type=\"dfn\" href=\"https://drafts.csswg.org/css-cascade-5/#computed-value\" id=\"ref-for-computed-value①\">computed value</a> should not be confused with the <a data-link-type=\"dfn\" href=\"https://drafts.csswg.org/cssom-1/#resolved-value\" id=\"ref-for-resolved-value\">resolved value</a> which is returned from the <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://drafts.csswg.org/cssom-1/#dom-window-getcomputedstyle\" id=\"ref-for-dom-window-getcomputedstyle\">getComputedStyle()</a></code> method. </div>\n   <div class=\"example\" id=\"example-bdfc8e34\">\n    <a class=\"self-link\" href=\"#example-bdfc8e34\"></a> For example, the <a class=\"property css\" data-link-type=\"property\" href=\"https://drafts.csswg.org/css2/#propdef-line-height\" id=\"ref-for-propdef-line-height\">line-height</a> property may accept a <a class=\"production css\" data-link-type=\"type\" href=\"https://drafts.csswg.org/css-values-4/#number-value\" id=\"ref-for-number-value\">&lt;number></a> value,\nsuch as <a class=\"css\" data-link-type=\"propdesc\" href=\"https://drafts.csswg.org/css2/#propdef-line-height\" id=\"ref-for-propdef-line-height①\">line-height: 1.4</a>.\nThis value represents a multiple of the <a class=\"property css\" data-link-type=\"property\" href=\"https://drafts.csswg.org/css-fonts-4/#propdef-font-size\" id=\"ref-for-propdef-font-size③\">font-size</a>,\nso if the <a class=\"property css\" data-link-type=\"property\" href=\"https://drafts.csswg.org/css-fonts-4/#propdef-font-size\" id=\"ref-for-propdef-font-size④\">font-size</a> is <span class=\"css\">20px</span>,\nthe <a data-link-type=\"dfn\" href=\"https://drafts.csswg.org/css-cascade-5/#actual-value\" id=\"ref-for-actual-value\">actual value</a> for the line height is <span class=\"css\">28px</span>. \n    <p>However, the <a data-link-type=\"dfn\" href=\"https://drafts.csswg.org/css-cascade-5/#computed-value\" id=\"ref-for-computed-value②\">computed value</a> in this case is the <a class=\"production css\" data-link-type=\"type\" href=\"https://drafts.csswg.org/css-values-4/#number-value\" id=\"ref-for-number-value①\">&lt;number></a> <span class=\"css\">1.4</span>,\nnot the <a class=\"production css\" data-link-type=\"type\" href=\"https://drafts.csswg.org/css-values-4/#length-value\" id=\"ref-for-length-value\" title=\"Expands to: advance measure | cap | ch | cm | dvb | dvh | dvi | dvmax | dvmin | dvw | em | ex | ic | in | lh | lvb | lvh | lvi | lvmax | lvmin | lvw | mm | pc | pt | px | q | rcap | rch | rem | rex | ric | rlh | svb | svh | svi | svmax | svmin | svw | vb | vh | vi | vmax | vmin | vw\">&lt;length></a> <span class=\"css\">28px</span>.\n(The <a data-link-type=\"dfn\" href=\"https://drafts.csswg.org/css-cascade-5/#used-value\" id=\"ref-for-used-value①\">used value</a> is <span class=\"css\">28px</span>.)</p>\n    <p>The <a class=\"property css\" data-link-type=\"property\" href=\"https://drafts.csswg.org/css2/#propdef-line-height\" id=\"ref-for-propdef-line-height②\">line-height</a> property can be inherited\ninto elements that have a different <a class=\"property css\" data-link-type=\"property\" href=\"https://drafts.csswg.org/css-fonts-4/#propdef-font-size\" id=\"ref-for-propdef-font-size⑤\">font-size</a>,\nand any property on those elements which depends on <a class=\"property css\" data-link-type=\"property\" href=\"https://drafts.csswg.org/css2/#propdef-line-height\" id=\"ref-for-propdef-line-height③\">line-height</a> must take the relevant <a class=\"property css\" data-link-type=\"property\" href=\"https://drafts.csswg.org/css-fonts-4/#propdef-font-size\" id=\"ref-for-propdef-font-size⑥\">font-size</a> into account,\nrather than the <a class=\"property css\" data-link-type=\"property\" href=\"https://drafts.csswg.org/css-fonts-4/#propdef-font-size\" id=\"ref-for-propdef-font-size⑦\">font-size</a> for the element from which\nthe <a class=\"property css\" data-link-type=\"property\" href=\"https://drafts.csswg.org/css2/#propdef-line-height\" id=\"ref-for-propdef-line-height④\">line-height</a> value was inherited.</p>\n<pre class=\"highlight\"><c- p>&lt;</c-><c- f>body</c-> <c- e>style</c-><c- o>=</c-><c- s>\"font-size: 20px; line-height: 1.4\"</c-><c- p>></c->\n\n  <c- p>&lt;</c-><c- f>p</c-><c- p>></c->This body text has a line height of 28px.<c- p>&lt;/</c-><c- f>p</c-><c- p>></c->\n\n  <c- p>&lt;</c-><c- f>h2</c-> <c- e>style</c-><c- o>=</c-><c- s>\"font-size: 200%\"</c-><c- p>></c->\n    This heading has a line-height of 56px,\n    not 28px, even though the line-height was declared on the body.\n    This means that the 40px font won’t overflow the line height.\n  <c- p>&lt;/</c-><c- f>h2</c-><c- p>></c->\n<c- p>&lt;/</c-><c- f>body</c-><c- p>></c->\n</pre>\n    <p>These number values are generally the preferred values to use for <a class=\"property css\" data-link-type=\"property\" href=\"https://drafts.csswg.org/css2/#propdef-line-height\" id=\"ref-for-propdef-line-height⑤\">line-height</a> because they inherit better than length values.</p>\n   </div>\n   <p>See also:</p>\n   <ul>\n    <li data-md>\n     <p><a href=\"https://wiki.csswg.org/spec/computed-values\">Computed Values Patterns</a></p>\n   </ul>\n   <h3 class=\"heading settled\" data-level=\"4.4\" id=\"css-naming\"><span class=\"secno\">4.4. </span><span class=\"content\">Naming of CSS properties and values</span><a class=\"self-link\" href=\"#css-naming\"></a></h3>\n   <p>The names of CSS properties are usually nouns,\nand the names of their values are usually adjectives (although sometimes nouns).</p>\n   <p>Words in properties and values are separated by hyphens.\nAbbreviations are generally avoided.</p>\n   <p>Use the root form of words when possible\nrather than a form with a grammatical prefix or suffix\n(for example, \"size\" rather than \"sizing\").</p>\n   <p>The list of values of a property should generally be chosen\nso that new values can be added.\nAvoid values like <span class=\"css\">yes</span>, <span class=\"css\">no</span>, <a class=\"css\" data-link-type=\"maybe\" href=\"https://drafts.csswg.org/mediaqueries-5/#valdef-custom-media-true\" id=\"ref-for-valdef-custom-media-true\">true</a>, <a class=\"css\" data-link-type=\"maybe\" href=\"https://drafts.csswg.org/mediaqueries-5/#valdef-custom-media-false\" id=\"ref-for-valdef-custom-media-false\">false</a>,\nor things with more complex names that are basically equivalent to them.</p>\n   <p>Avoid words like \"mode\" or \"state\" in the names of properties,\nsince properties are generally setting a mode or state.</p>\n   <p>See <a href=\"#naming-is-hard\">§ 12 Naming principles</a> for general (cross-language) advice on naming.</p>\n   <h3 class=\"heading settled\" data-level=\"4.5\" id=\"css-content-should-be-visible\"><span class=\"secno\">4.5. </span><span class=\"content\">Content should be viewable and accessible by default</span><a class=\"self-link\" href=\"#css-content-should-be-visible\"></a></h3>\n   <p>Design CSS properties or CSS layout systems (which are typically values of the <code>display</code> property),\nto preserve the content as viewable, accessible and usable by default.</p>\n   <div class=\"example\" id=\"example-c09bf2e2\"><a class=\"self-link\" href=\"#example-c09bf2e2\"></a> For example, the default behavior of all layout systems in CSS will not lead to content being clipped,\ncontent overlapping other content, or content being unreachable by scrolling.\nThese things should only happen if CSS features are used that are more explicitly choosing\nsuch a behavior (for example, <code>overflow: hidden</code> or <code>left: -40em</code>). They should not happen by\ndefault as a result of something like <code>display: flex</code> or <code>position: relative</code>. </div>\n   <h2 class=\"heading settled\" data-level=\"5\" id=\"js\"><span class=\"secno\">5. </span><span class=\"content\">JavaScript Language</span><a class=\"self-link\" href=\"#js\"></a></h2>\n   <h3 class=\"heading settled\" data-level=\"5.1\" id=\"js-only\"><span class=\"secno\">5.1. </span><span class=\"content\">Web APIs are for JavaScript</span><a class=\"self-link\" href=\"#js-only\"></a></h3>\n   <p>When designing imperative APIs for the Web,\nuse JavaScript.\nIn particular,\nyou can freely rely upon language-specific semantics and conventions,\nwith no need to keep things generalized.</p>\n   <div class=\"example\" id=\"example-1f61e97b\">\n    <a class=\"self-link\" href=\"#example-1f61e97b\"></a> For example,\nthe <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/custom-elements.html#dom-customelementregistry-define\" id=\"ref-for-dom-customelementregistry-define\">CustomElementRegistry.define()</a></code> method takes a reference to\na <a href=\"https://tc39.es/ecma262/#sec-static-semantics-constructormethod\">Constructor Method</a>. \n    <p>This takes advantage of the relatively recent addition of classes to JavaScript,\nand the fact that method references are very easy to use in JavaScript.</p>\n   </div>\n   <div class=\"note\" role=\"note\"> JavaScript is standardized under the name <a data-link-type=\"biblio\" href=\"#biblio-ecmascript\">[ECMASCRIPT]</a>. </div>\n   <div class=\"note\" role=\"note\"> <a data-link-type=\"biblio\" href=\"#biblio-webidl\">[WEBIDL]</a> defines a separate \"ECMAScript binding\" section,\nbut this doesn’t imply that Web IDL is intended\nto have bindings in other programming languages. </div>\n   <h3 class=\"heading settled\" data-level=\"5.2\" id=\"js-rtc\"><span class=\"secno\">5.2. </span><span class=\"content\">Preserve run-to-completion semantics</span><a class=\"self-link\" href=\"#js-rtc\"></a></h3>\n   <p>Don’t modify data accessed via JavaScript APIs\nwhile a JavaScript <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/webappapis.html#event-loop\" id=\"ref-for-event-loop\">event loop</a> is running.</p>\n   <p>A JavaScript Web API is generally a wrapper around\na feature implemented in a lower-level language,\nsuch as C++ or Rust.\nUnlike those languages,\nwhen using JavaScript developers can expect\nthat once a piece of code begins executing,\nit will continue executing until it has completed.</p>\n   <p>Because of that, JavaScript authors take for granted\nthat the data available to a function won’t change unexpectedly\nwhile the function is running.</p>\n   <p>So if a JavaScript Web API exposes some piece of data,\nsuch as an object property,\nthe user agent must not update that data\nwhile a JavaScript task is running.\nInstead, if the underlying data changes, <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/webappapis.html#queue-a-task\" id=\"ref-for-queue-a-task\">queue a task</a> to modify the exposed version of the data.</p>\n   <div class=\"example\" id=\"example-3fb93c89\"><a class=\"self-link\" href=\"#example-3fb93c89\"></a> If a JavaScript task has accessed the <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/system-state.html#dom-navigator-online\" id=\"ref-for-dom-navigator-online\">navigator.onLine</a></code> property,\nand browser’s online status changes,\nthe property won’t be updated until the next task runs. </div>\n   <h3 class=\"heading settled\" data-level=\"5.3\" id=\"js-gc\"><span class=\"secno\">5.3. </span><span class=\"content\">Don’t expose garbage collection</span><a class=\"self-link\" href=\"#js-gc\"></a></h3>\n   <p>Ensure your JavaScript Web APIs don’t provide a way\nfor an author to know the timing of garbage collection.</p>\n   <p>The timing of garbage collection is different in different user agents,\nand may change over time as user agents work on improving performance.\nIf an API exposes the timing of garbage collection,\nit can cause programs to behave differently\nin different contexts.\nThis means that authors need to write extra code to handle these differences.\nIt may also make it more difficult for user agents\nto implement different garbage collection strategies,\nif there is enough code which depends on timing working a particular way.</p>\n   <p>This means that you shouldn’t expose any API that acts as a weak reference,\ne.g. with a property that becomes <code class=\"highlight\"><c- kc>null</c-></code> once garbage collection runs.\nObject and data lifetimes in JavaScript code should be predictable.</p>\n   <div class=\"example\" id=\"example-fecc1403\">\n    <a class=\"self-link\" href=\"#example-fecc1403\"></a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#dom-document-getelementsbytagname\" id=\"ref-for-dom-document-getelementsbytagname\">getElementsByTagName</a></code> returns an <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#htmlcollection\" id=\"ref-for-htmlcollection\">HTMLCollection</a></code> object,\nwhich may be re-used if the method is called twice on the same Document object,\nwith the same tag name.\nIn practice,\nthis means that the same object will be returned\nif and only if it has not been garbage collected.\nThis means that the behaviour is different depending on\nthe timing of garbage collection. \n    <p>If <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#dom-document-getelementsbytagname\" id=\"ref-for-dom-document-getelementsbytagname①\">getElementsByTagName</a></code> were designed today,\nthe advice to the designers would be\nto either reliably reuse the output,\nor to produce a new <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#htmlcollection\" id=\"ref-for-htmlcollection①\">HTMLCollection</a></code> each time it’s invoked.</p>\n   </div>\n   <p><code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#dom-document-getelementsbytagname\" id=\"ref-for-dom-document-getelementsbytagname②\">getElementsByTagName</a></code> gives no sign that\nit may depend on the timing of garbage collection.\nIn contrast, APIs which are explicitly designed\nto depend on garbage collection,\nlike <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-weak-ref-objects\" id=\"ref-for-sec-weak-ref-objects\">WeakRef</a></code> or <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-finalization-registry-objects\" id=\"ref-for-sec-finalization-registry-objects\">FinalizationRegistry</a></code>,\nset accurate author expectations about\nthe interaction with garbage collection.</p>\n   <h2 class=\"heading settled\" data-level=\"6\" id=\"api-surface\"><span class=\"secno\">6. </span><span class=\"content\">JavaScript API Surface Concerns</span><a class=\"self-link\" href=\"#api-surface\"></a></h2>\n   <h3 class=\"heading settled\" data-level=\"6.1\" id=\"attributes-like-data\"><span class=\"secno\">6.1. </span><span class=\"content\">Attributes should behave like data properties</span><a class=\"self-link\" href=\"#attributes-like-data\"></a></h3>\n   <p><a data-link-type=\"biblio\" href=\"#biblio-webidl\">[WEBIDL]</a> attributes should act like simple JavaScript object properties.</p>\n   <p>In reality, IDL attributes are implemented as accessor properties\nwith separate getter and setter methods.\nTo make them act like JavaScript object properties:</p>\n   <ul>\n    <li data-md>\n     <p>Getters must not have any observable side effects.</p>\n    <li data-md>\n     <p>Getters should not perform any complex operations.</p>\n    <li data-md>\n     <p>Ensure that <code class=\"highlight\">obj<c- p>.</c->attribute <c- o>===</c-> obj<c- p>.</c->attribute</code> is always true.\nDon’t create a new value each time the getter is called.</p>\n    <li data-md>\n     <p>If possible, ensure that given <code class=\"highlight\">obj<c- p>.</c->attribute <c- o>=</c-> x</code>, <code class=\"highlight\">obj<c- p>.</c->attribute <c- o>===</c-> x</code> is true.\n(This may not be possible if some kind of conversion is necessary for <code>x</code>.)</p>\n   </ul>\n   <p>If you were thinking about using an attribute,\nbut it doesn’t behave this way,\nyou should probably use a method instead.</p>\n   <div class=\"example\" id=\"example-92914693\"><a class=\"self-link\" href=\"#example-92914693\"></a> For example, <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://drafts.csswg.org/cssom-view-1/#dom-htmlelement-offsettop\" id=\"ref-for-dom-htmlelement-offsettop\">offsetTop</a></code> performs layout,\nwhich can be complex and time-consuming.\nIt would have been better if this had been a method like <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://drafts.csswg.org/cssom-view-1/#dom-element-getboundingclientrect\" id=\"ref-for-dom-element-getboundingclientrect\">getBoundingClientRect()</a></code>. </div>\n   <h3 class=\"heading settled\" data-level=\"6.2\" id=\"live-vs-static\"><span class=\"secno\">6.2. </span><span class=\"content\">Consider whether objects should be live or static</span><a class=\"self-link\" href=\"#live-vs-static\"></a></h3>\n   <p>If an API gives access to an object\nrepresenting some internal state,\ndecide whether that object should continue to be updated as the state changes.</p>\n   <p>An object which represents the current state at all times\nis a <dfn data-dfn-type=\"dfn\" data-export id=\"live-object\">live object<a class=\"self-link\" href=\"#live-object\"></a></dfn>,\nwhile an object which represents the state at the time it was created\nis a <dfn data-dfn-type=\"dfn\" data-export id=\"static-object\">static object<a class=\"self-link\" href=\"#static-object\"></a></dfn>.</p>\n   <h4 class=\"no-num no-toc heading settled\" id=\"live-objects\"><span class=\"content\">Live objects</span><a class=\"self-link\" href=\"#live-objects\"></a></h4>\n   <p>If an object allows the author to change the internal state,\nthat object should be live.\nFor example, DOM <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#node\" id=\"ref-for-node\">Node</a></code>s are live objects,\nto allow the author to make changes to the document\nwith an understanding of the current state.</p>\n   <p>Properties of live objects may be computed as they are accessed,\ninstead of when the object is created.\nThis makes live objects sometimes a better choice\nif the data needed is complex to compute,\nsince there is no need to compute all the data before the object is returned.</p>\n   <p>A live object may also use less memory,\nsince there is no need to copy data to a static version.</p>\n   <h4 class=\"no-num no-toc heading settled\" id=\"static-objects\"><span class=\"content\">Static objects</span><a class=\"self-link\" href=\"#static-objects\"></a></h4>\n   <p>If an object represents a list that might change,\nmost often the object should be static.\nThis is so that code iterating over the list\ndoesn’t need to handle the possibility of the list changing in the middle.</p>\n   <div class=\"example\" id=\"example-05004f68\">\n    <a class=\"self-link\" href=\"#example-05004f68\"></a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#dom-document-getelementsbytagname\" id=\"ref-for-dom-document-getelementsbytagname③\">getElementsByTagName</a></code> returns a live object which represents a list,\nmeaning that authors need to take care when iterating over its items: \n<pre class=\"language-js highlight\"><c- a>let</c-> list <c- o>=</c-> document<c- p>.</c->getElementsByTagName<c- p>(</c-><c- u>\"td\"</c-><c- p>);</c->\n\n<c- k>for</c-> <c- p>(</c-><c- a>let</c-> i <c- o>=</c-> <c- mf>0</c-><c- p>;</c-> i <c- o>&lt;</c-> list<c- p>.</c->length<c- p>;</c-> i<c- o>++</c-><c- p>)</c-> <c- p>{</c->\n    <c- a>let</c-> td <c- o>=</c-> list<c- p>[</c->i<c- p>];</c->\n    <c- a>let</c-> tr <c- o>=</c-> document<c- p>.</c->createElement<c- p>(</c-><c- u>\"tr\"</c-><c- p>);</c->\n    tr<c- p>.</c->innerHTML <c- o>=</c-> td<c- p>.</c->outerHTML<c- p>;</c->\n\n    <c- c1>// This has the side-effect of removing td from the list,</c->\n    <c- c1>// causing the iteration to become unpredictable.</c->\n    td<c- p>.</c->parentNode<c- p>.</c->replaceChild<c- p>(</c->tr<c- p>,</c-> td<c- p>);</c->\n<c- p>}</c->\n</pre>\n    <p>The choice to have <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#dom-parentnode-queryselectorall\" id=\"ref-for-dom-parentnode-queryselectorall\">querySelectorAll()</a></code> return static objects\nwas made after spec authors noticed that <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#dom-document-getelementsbytagname\" id=\"ref-for-dom-document-getelementsbytagname④\">getElementsByTagName</a></code> was causing problems.</p>\n    <p><code class=\"idl\"><a data-link-type=\"idl\" href=\"https://url.spec.whatwg.org/#urlsearchparams\" id=\"ref-for-urlsearchparams\">URLSearchParams</a></code> isn’t static,\neven though it represents a list,\nbecause it’s the way for authors to change the query string of a URL.</p>\n   </div>\n   <p class=\"note\" role=\"note\"><span>Note:</span> For <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-maplike\" id=\"ref-for-dfn-maplike\">maplike</a> and <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-setlike\" id=\"ref-for-dfn-setlike\">setlike</a> types,\nthis advice may not apply,\nsince these types were designed to behave well\nwhen they change while being iterated.</p>\n   <p>If it would not be possible to compute properties\nat the time they are accessed,\na static object avoids having to keep the object updated\nuntil it’s garbage collected,\neven if it isn’t being used.</p>\n   <p>If a static object represents some state which may change frequently,\nit should be returned from a method,\nrather than available as an attribute.</p>\n   <p>See also:</p>\n   <ul>\n    <li data-md>\n     <p><a href=\"#attributes-like-data\">§ 6.1 Attributes should behave like data properties</a></p>\n   </ul>\n   <h3 class=\"heading settled\" data-level=\"6.3\" id=\"attributes-vs-methods\"><span class=\"secno\">6.3. </span><span class=\"content\">Use attributes or methods appropriately</span><a class=\"self-link\" href=\"#attributes-vs-methods\"></a></h3>\n   <p>Sometimes it is unclear\nwhether to use an attribute or a method.</p>\n   <ul>\n    <li data-md>\n     <p>Attribute getters must not have any (observable) side effects.\nIf you have expected side effects, use a method.</p>\n    <li data-md>\n     <p>Attribute getters should not perform any blocking operations.\nIf a getter requires performing a blocking operation,\nit should be a method.</p>\n    <li data-md>\n     <p>If the underlying object has not changed,\nattribute getters should return\nthe same object each time it is called.\nThis means <code>obj.attribute === obj.attribute</code> must always hold.\nReturning a new value from an attribute getter\neach time is not allowed.\nIf this does not hold, the getter should be a method.</p>\n   </ul>\n   <p class=\"note\" role=\"note\"><span>Note:</span> An antipattern example of a blocking operation is with getters like offsetTop performing layout.</p>\n   <p>For attributes, whenever possible,\npreserve values given to the setter\nfor return from the getter.\nThat is, given <code>obj.attribute = x</code>,\na subsequent <code>obj.attribute === x</code> should be true.\n(This will not always be the case,\ne.g., if a normalization or type conversion step is necessary,\nbut should be held as a goal for normal code paths.)</p>\n   <p>The object you want to return may be <a href=\"#js-rtc\">live or static</a>.\nThis means:</p>\n   <ul>\n    <li data-md>\n     <p>If live, then return the same object each time,\nuntil a state change requires a different object to be returned.\nThis can be returned from either an attribute or a method.</p>\n    <li data-md>\n     <p>If static, then return a new object each time.\nIn which case, this should be be a method.</p>\n   </ul>\n   <h3 class=\"heading settled\" data-level=\"6.4\" id=\"prefer-dict-to-bool\"><span class=\"secno\">6.4. </span><span class=\"content\">Prefer dictionary arguments over primitive arguments</span><a class=\"self-link\" href=\"#prefer-dict-to-bool\"></a></h3>\n   <p>API methods should generally use dictionary arguments\ninstead of a series of optional primitive arguments.</p>\n   <p>This makes the code that calls the method much more readable.\nIt also makes the API more extensible in the future,\nparticularly if multiple arguments with the same type are needed.</p>\n   <div class=\"example\" id=\"example-148797d6\">\n    <a class=\"self-link\" href=\"#example-148797d6\"></a> For example, \n<pre class=\"highlight\"><c- k>new</c-> Event<c- p>(</c-><c- u>\"example\"</c-><c- p>,</c->\n          <c- p>{</c-> bubbles<c- o>:</c-> <c- kc>true</c-><c- p>,</c->\n            cancelable<c- o>:</c-> <c- kc>false</c-><c- p>})</c->\n</pre>\n    <p>is much more readable than</p>\n<pre class=\"highlight\"><c- k>new</c-> Event<c- p>(</c-><c- u>\"example\"</c-><c- p>,</c-> <c- kc>true</c-><c- p>,</c-> <c- kc>false</c-><c- p>)</c->\n</pre>\n    <p>Also,</p>\n<pre class=\"highlight\">window<c- p>.</c->scrollBy<c- p>({</c-> left<c- o>:</c-> <c- mf>50</c-><c- p>,</c-> top<c- o>:</c-> <c- mf>0</c-> <c- p>})</c->\n</pre>\n    <p>is more readable than</p>\n<pre class=\"highlight\">window<c- p>.</c->scrollBy<c- p>(</c-><c- mf>50</c-><c- p>,</c-> <c- mf>0</c-><c- p>)</c->\n</pre>\n   </div>\n   <p>The dictionary itself should be an optional argument,\nso that if the author is happy with all of the default options,\nthey can avoid passing an extra argument.</p>\n   <div class=\"example\" id=\"example-c7e8a584\">\n    <a class=\"self-link\" href=\"#example-c7e8a584\"></a> For example, \n<pre class=\"highlight\">element<c- p>.</c->scrollIntoView<c- p>(</c-><c- kc>false</c-><c- p>,</c-> <c- p>{});</c->\n</pre>\n    <p>is equivalent to</p>\n<pre class=\"highlight\">element<c- p>.</c->scrollIntoView<c- p>(</c-><c- kc>false</c-><c- p>);</c->\n</pre>\n   </div>\n   <p>See also:</p>\n   <ul>\n    <li data-md>\n     <p><a href=\"https://ariya.io/2011/08/hall-of-api-shame-boolean-trap\">Hall of API Shame: Boolean Trap</a>.</p>\n    <li data-md>\n     <p><a href=\"https://lists.w3.org/Archives/Public/public-script-coord/2013OctDec/0302.html\">APIs that have boolean arguments defaulting to true</a></p>\n    <li data-md>\n     <p><a href=\"#optional-parameters\">§ 6.5 Make method arguments optional if possible</a></p>\n    <li data-md>\n     <p><a href=\"#naming-optional-parameters\">§ 6.6 Naming optional arguments</a></p>\n   </ul>\n   <h3 class=\"heading settled\" data-level=\"6.5\" id=\"optional-parameters\"><span class=\"secno\">6.5. </span><span class=\"content\">Make method arguments optional if possible</span><a class=\"self-link\" href=\"#optional-parameters\"></a></h3>\n   <p>If an argument for an API method has a reasonable default value,\nmake that argument optional and specify the default value.</p>\n   <div class=\"example\" id=\"example-b823d8cb\"><a class=\"self-link\" href=\"#example-b823d8cb\"></a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#dom-eventtarget-addeventlistener\" id=\"ref-for-dom-eventtarget-addeventlistener\">addEventListener()</a></code> takes an optional boolean <code>useCapture</code> argument.\nThie defaults to <code>false</code>, meaning that\nthe event should be dispatched to the listener in the bubbling phase by default. </div>\n   <p class=\"note\" role=\"note\"><span>Note:</span> Exceptions have been made for legacy interoperability reasons\n(such as <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://xhr.spec.whatwg.org/#xmlhttprequest\" id=\"ref-for-xmlhttprequest\">XMLHttpRequest</a></code>),\nbut this should be considered a design mistake rather than recommended practice.</p>\n   <p>The API must be designed so that if an argument is left out,\nthe default value used is the same as\nconverting <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-undefined\" id=\"ref-for-idl-undefined\">undefined</a></code> to the type of the argument.\nFor example, if a boolean argument isn’t set,\nit must default to false.</p>\n   <p>When deciding between different list data types for your API,\nunless otherwise required, use the following list types:</p>\n   <ul>\n    <li data-md>\n     <p>Method list arguments should be of type <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#sequence-type\" id=\"ref-for-sequence-type\">sequence&lt;T></a></p>\n    <li data-md>\n     <p>Method return values should be of type <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#sequence-type\" id=\"ref-for-sequence-type①\">sequence&lt;T></a></p>\n    <li data-md>\n     <p>Attributes should be of type <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-observable-array-type\" id=\"ref-for-dfn-observable-array-type\">ObservableArray&lt;T></a></p>\n   </ul>\n   <p>See also:</p>\n   <ul>\n    <li data-md>\n     <p><a href=\"#prefer-dict-to-bool\">§ 6.4 Prefer dictionary arguments over primitive arguments</a></p>\n   </ul>\n   <h3 class=\"heading settled\" data-level=\"6.6\" id=\"naming-optional-parameters\"><span class=\"secno\">6.6. </span><span class=\"content\">Naming optional arguments</span><a class=\"self-link\" href=\"#naming-optional-parameters\"></a></h3>\n   <p>Name optional arguments to make the default behavior obvious\nwithout being named negatively.</p>\n   <p>This applies whether they are provided in a <a href=\"#prefer-dict-to-bool\">dictionary</a> or as <a href=\"#optional-parameters\">single arguments</a>.</p>\n   <div class=\"example\" id=\"example-cc7dcba0\">\n    <a class=\"self-link\" href=\"#example-cc7dcba0\"></a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#dom-eventtarget-addeventlistener\" id=\"ref-for-dom-eventtarget-addeventlistener①\">addEventListener()</a></code> takes an <code>options</code> object\nwhich includes an option named <code>once</code>.\nThis indicates that the listener should <strong>not</strong> be invoked repeatedly. \n    <p>This option could have been named <code>repeat</code>,\nbut that would require the <a href=\"#optional-parameters\">default</a> to be <code>true</code>.\nInstead of naming it <code>noRepeat</code>,\nthe API authors named it <code>once</code>,\nto reflect the default behaviour without using a negative.</p>\n    <p>Other examples:</p>\n    <ul>\n     <li data-md>\n      <p><code>passive</code> rather than <code>active</code>, or</p>\n     <li data-md>\n      <p><code>isolate</code> rather than <code>connect</code>, or</p>\n     <li data-md>\n      <p><code>private</code> rather than <code>public</code></p>\n    </ul>\n   </div>\n   <p>See also:</p>\n   <ul>\n    <li data-md>\n     <p><a href=\"#naming-is-hard\">§ 12 Naming principles</a></p>\n   </ul>\n   <h3 class=\"heading settled\" data-level=\"6.7\" id=\"constructors\"><span class=\"secno\">6.7. </span><span class=\"content\">Classes should have constructors when possible</span><a class=\"self-link\" href=\"#constructors\"></a></h3>\n   <p>Make sure that any class that’s part of your API has a constructor,\nif appropriate.</p>\n   <p>By default, <a data-link-type=\"biblio\" href=\"#biblio-webidl\">[WEBIDL]</a> interfaces generate \"non-constructible\" classes:\ntrying to create instances of them using <code>new X()</code> will throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#exceptiondef-typeerror\" id=\"ref-for-exceptiondef-typeerror\">TypeError</a></code>.\nTo make them constructible,\nyou can add appropriate <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#idl-constructors\" id=\"ref-for-idl-constructors\">constructor operation</a> to your interface,\nand defining the algorithm for creating new instances of your class.</p>\n   <p>This allows JavaScript developers\nto create instances of the class\nfor purposes such as testing, mocking,\nor interfacing with third-party libraries which accept instances of that class.\nIt also gives authors the ability to create a subclass of the class,\nwhich is otherwise prevented,\nbecause of the way JavaScript handles subclasses.</p>\n   <p>This won’t be appropriate in all cases.\nFor example:</p>\n   <ul>\n    <li data-md>\n     <p>Some objects represent access to privileged resources,\nso they need to be constructed by factory methods\nwhich can access those resources.</p>\n    <li data-md>\n     <p>Some objects have very carefully controlled lifecycles,\nso they need to be created and accessed through specific methods.</p>\n    <li data-md>\n     <p>Some objects represent an abstract base class,\nwhich shouldn’t be constructed,\nand which authors should not be able to define subclasses for.</p>\n   </ul>\n   <p class=\"example\" id=\"example-b036c85f\"><a class=\"self-link\" href=\"#example-b036c85f\"></a> The <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#event\" id=\"ref-for-event\">Event</a></code> class, and all its derived interfaces, are constructible.\nThis is useful when testing code which handles events:\nan author can construct an <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#event\" id=\"ref-for-event①\">Event</a></code> to pass to a method\nwhich handles that type of event. </p>\n   <p class=\"example\" id=\"example-efe51367\"><a class=\"self-link\" href=\"#example-efe51367\"></a> The <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/window-object.html#window\" id=\"ref-for-window\">Window</a></code> class isn’t constructible,\nbecause creating a new window is a privileged operation\nwith significant side effects.\nInstead, the <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/window-object.html#dom-open\" id=\"ref-for-dom-open\">window.open()</a></code> method\nis used to create new windows. </p>\n   <p class=\"example\" id=\"example-c23596fe\"><a class=\"self-link\" href=\"#example-c23596fe\"></a> The <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/imagebitmap-and-animations.html#imagebitmap\" id=\"ref-for-imagebitmap\">ImageBitmap</a></code> class isn’t constructible,\nas it represents an immutable, ready-to-paint bitmap image,\nand the process of getting it ready to paint must be done asynchronously.\nInstead, the <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/imagebitmap-and-animations.html#dom-createimagebitmap\" id=\"ref-for-dom-createimagebitmap\">createImageBitmap()</a></code> factory method is used to create it. </p>\n   <p class=\"example\" id=\"example-97798904\"><a class=\"self-link\" href=\"#example-97798904\"></a> The <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#domtokenlist\" id=\"ref-for-domtokenlist\">DOMTokenList</a></code> class is, sadly, <a href=\"https://www.w3.org/Bugs/Public/show_bug.cgi?id=27114\">not constructible</a>.\nThis prevents the creation of <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/custom-elements.html#custom-element\" id=\"ref-for-custom-element\">custom elements</a> that expose their token list attributes as <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#domtokenlist\" id=\"ref-for-domtokenlist①\">DOMTokenList</a></code>s. </p>\n   <div class=\"example\" id=\"example-ebdfca9b\">\n    <a class=\"self-link\" href=\"#example-ebdfca9b\"></a> Several non-constructible classes,\nlike <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/system-state.html#navigator\" id=\"ref-for-navigator\">Navigator</a></code>, <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/history.html#history-3\" id=\"ref-for-history-3\">History</a></code>, or <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://w3c.github.io/webcrypto/#dfn-Crypto\" id=\"ref-for-dfn-Crypto\">Crypto</a></code>,\nare non-constructible because they are singletons\nrepresenting access to per-window information.\nIn these cases, something like the Web IDL <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-namespace\" id=\"ref-for-dfn-namespace\">namespace</a> feature\nmight have been a better fit,\nbut these features were designed before namespaces,\nand go beyond what is currently possible with namespaces. \n    <p>If your API requires this type of singleton,\nconsider using a <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-namespace\" id=\"ref-for-dfn-namespace①\">namespace</a>,\nand <a href=\"https://github.com/heycam/webidl/issues/new\">File an issue on Web IDL</a> if there is some problem with using them.</p>\n   </div>\n   <p>Factory methods can complement constructors, but generally should not be used <em>instead</em> of them.\nIt may still be valuable to include factory methods\nin addition to constructors, when they provide additional benefits.\nA common such case is when an API includes base classes\nand multiple specialized subclasses,\nwith a factory method\nfor creating the appropriate subclass based on the parameters passed.\nOften the factory method is a static method on the\nclosest common base subclass of the returned result.</p>\n   <div class=\"example\" id=\"example-071fec19\"><a class=\"self-link\" href=\"#example-071fec19\"></a> The <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#dom-document-createelement\" id=\"ref-for-dom-document-createelement\">createElement</a></code> method is an example of a\nfactory method that could not have been implemented as a constructor,\nas its result can be any of a number of subclasses of <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#element\" id=\"ref-for-element\">Element</a></code>. </div>\n   <div class=\"example\" id=\"example-3119992e\"><a class=\"self-link\" href=\"#example-3119992e\"></a> The <code class=\"idl\"><a data-link-type=\"idl\">initMouseEvent</a></code> factory method only creates <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/uievents/#mouseevent\" id=\"ref-for-mouseevent\">MouseEvent</a></code> objects,\nwhich were originally not constructible,\neven though there was no technical reason against that.\nEventually it was deprecated, and the <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/uievents/#mouseevent\" id=\"ref-for-mouseevent①\">MouseEvent</a></code> object was simply made constructible. </div>\n   <h3 class=\"heading settled\" data-level=\"6.8\" id=\"synchronous\"><span class=\"secno\">6.8. </span><span class=\"content\">Use synchronous when appropriate</span><a class=\"self-link\" href=\"#synchronous\"></a></h3>\n   <p>Where possible, prefer synchronous APIs when designing a new API.\nSynchronous APIs are simpler to use,\nand need less infrastructure set-up (such as making functions <code>async</code>).</p>\n   <p>An API should generally be synchronous if the following rules of thumb apply:</p>\n   <ul>\n    <li data-md>\n     <p>The API is not expected to ever be gated behind a permission prompt, or another dialog such as a device selector.</p>\n    <li data-md>\n     <p>The API implementation will not be blocked by a lock, filesystem or network access, for example, inter-process communication.</p>\n    <li data-md>\n     <p>The execution time is short and deterministic.</p>\n   </ul>\n   <h3 class=\"heading settled\" data-level=\"6.9\" id=\"promises\"><span class=\"secno\">6.9. </span><span class=\"content\">Design asynchronous APIs using Promises</span><a class=\"self-link\" href=\"#promises\"></a></h3>\n   <p>If an API method needs to be asynchronous, use Promises,\nnot callback functions.</p>\n   <p>Using Promises consistently across the web platform\nmeans that APIs are easier to use together,\nsuch as by chaining promises.\nPromise-using code also tends to be easier to understand\nthan code using callback functions.</p>\n   <p>An API might need to be asynchronous if:</p>\n   <ul>\n    <li data-md>\n     <p>the user agent needs to prompt the user for <a href=\"#consent\">permission</a>,</p>\n    <li data-md>\n     <p>some information might need to be read from disk,\nor requested from the network,</p>\n    <li data-md>\n     <p>the user agent may need to do a significant amount of work on another thread,\nor in another process, before returning the result.</p>\n   </ul>\n   <p>See also:</p>\n   <ul>\n    <li data-md>\n     <p><a href=\"https://www.w3.org/2001/tag/doc/promises-guide\">Writing Promise-Using Specifications</a></p>\n   </ul>\n   <h3 class=\"heading settled\" data-level=\"6.10\" id=\"aborting\"><span class=\"secno\">6.10. </span><span class=\"content\">Cancel asynchronous APIs/operations using AbortSignal</span><a class=\"self-link\" href=\"#aborting\"></a></h3>\n   <p>If an asynchronous method can be cancelled,\nallow authors to pass in an <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#abortsignal\" id=\"ref-for-abortsignal\">AbortSignal</a></code> as part of an options dictionary.</p>\n   <div class=\"example\" id=\"example-52de31d9\">\n    <a class=\"self-link\" href=\"#example-52de31d9\"></a> \n<pre class=\"language-js highlight\"><c- a>const</c-> controller <c- o>=</c-> <c- k>new</c-> AbortController<c- p>();</c->\n<c- a>const</c-> signal <c- o>=</c-> controller<c- p>.</c->signal<c- p>;</c->\ngeolocation<c- p>.</c->read<c- p>({</c-> signal <c- p>});</c->\n</pre>\n   </div>\n   <p>Using <code>AbortSignal</code> consistently\nas the way to cancel an asychronous operation\nmeans that authors can write less complex code.</p>\n   <p>For example, there’s a pattern of using a single <code>AbortSignal</code> for several ongoing operations,\nand then using the corresponding <code>AbortController</code> to cancel all of the operations at once if necessary\n(such as if the user presses \"cancel\",\nor a single-page app navigation occurs.)</p>\n   <p>Even if cancellation can’t be guaranteed,\nyou can still use an <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#abortcontroller\" id=\"ref-for-abortcontroller\">AbortController</a></code>,\nbecause a call to <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#dom-abortcontroller-abort\" id=\"ref-for-dom-abortcontroller-abort\">abort()</a></code> on <code>AbortController</code> is a request, rather than a guarantee.</p>\n   <h3 class=\"heading settled\" data-level=\"6.11\" id=\"string-constants\"><span class=\"secno\">6.11. </span><span class=\"content\">Use strings for constants and enums</span><a class=\"self-link\" href=\"#string-constants\"></a></h3>\n   <p>If your API needs a constant, or a set of enumerated values,\nuse string values.</p>\n   <p>Strings are easier for developers to inspect,\nand in JavaScript engines there is no performance benefit\nfrom using integers instead of strings.</p>\n   <p>If you need to express a state which is a combination of properties,\nwhich might be expressed as a bitmask in another language,\nuse a dictionary object instead.\nThis object can be passed around as easily as a single bitmask value.</p>\n   <h3 class=\"heading settled\" data-level=\"6.12\" id=\"properties-vs-methods\"><span class=\"secno\">6.12. </span><span class=\"content\">Properties vs. Methods</span><a class=\"self-link\" href=\"#properties-vs-methods\"></a></h3>\n   <p>Sometimes it is unclear whether to use a property or a method.</p>\n   <ul>\n    <li data-md>\n     <p>Property getters must not have any (observable) side effects.\nIf you have expected side effects, use a method.</p>\n    <li data-md>\n     <p>Property getters are expected to represent the state of a given object.\nThis means a getter should be able to efficiently return a value using the existing state.\nIf a getter does not satisfy this, it should be a method.\n(A notable failure of the platform in this regard is getters like offsetTop performing layout; do not repeat this mistake.)</p>\n    <li data-md>\n     <p>If the underlying object has not changed, property getters should return the same object each time it is called.\nThis means <code>obj.property === obj.property</code> must always hold.\nReturning a new value from a property getter each time is not allowed.\nIf this does not hold, the getter should be a method.</p>\n   </ul>\n   <p>For properties, whenever possible, preserve values given to the setter for return from the getter. That is,\ngiven <code>obj.property = x</code>, a subsequent <code>obj.property === x</code> should be true. (This will not always be the case, e.g., if a normalization or type conversion step is necessary, but should be held as a goal for normal code paths.)</p>\n   <p>The object you want to return may be <a href=\"#live-vs-static\">live or static</a>. This means:</p>\n   <ul>\n    <li data-md>\n     <p>If live, then return the same object each time, until a state change requires a different object to be returned.\nThis can be returned from either an property or a method.</p>\n    <li data-md>\n     <p>If static, then return a new object each time.\nIn which case, this should be be a method.</p>\n   </ul>\n   <h2 class=\"heading settled\" data-level=\"7\" id=\"event-design\"><span class=\"secno\">7. </span><span class=\"content\">Event Design</span><a class=\"self-link\" href=\"#event-design\"></a></h2>\n   <h3 class=\"heading settled\" data-level=\"7.1\" id=\"one-time-events\"><span class=\"secno\">7.1. </span><span class=\"content\">Use promises for one time events</span><a class=\"self-link\" href=\"#one-time-events\"></a></h3>\n   <p>Follow the <a href=\"https://www.w3.org/2001/tag/doc/promises-guide#one-time-events\">advice</a> in the <strong><a href=\"https://www.w3.org/2001/tag/doc/promises-guide\">Writing\nPromise-Using Specifications</a></strong> guideline.</p>\n   <h3 class=\"heading settled\" data-level=\"7.2\" id=\"promises-and-events\"><span class=\"secno\">7.2. </span><span class=\"content\">Events should fire before Promises resolve</span><a class=\"self-link\" href=\"#promises-and-events\"></a></h3>\n   <p>If a Promise-based asynchronous algorithm dispatches events,\nit should dispatch them before the Promise resolves,\nrather than after.</p>\n   <p>This guarantees that once the Promise resolves,\nall effects of the algorithm have been applied.\nFor example, if an author changes some state\nin reaction to an event which the Promise dispatches,\nthey can be sure that all of the state is consistent if the Promise is resolved.</p>\n   <h3 class=\"heading settled\" data-level=\"7.3\" id=\"dont-invent-event-like\"><span class=\"secno\">7.3. </span><span class=\"content\">Don’t invent your own event listener-like infrastructure</span><a class=\"self-link\" href=\"#dont-invent-event-like\"></a></h3>\n   <p>When creating an API which allows authors to start and stop a process which generates notifications,\nuse the existing event infrastructure to allow listening for the notifications.\nCreate separate API controls to start/stop the underlying process.</p>\n   <div class=\"example\" id=\"example-7b5eb345\">\n    <a class=\"self-link\" href=\"#example-7b5eb345\"></a> For example, the Web Bluetooth API provides a <code>startNotifications()</code> method\non the <code>BluetoothRemoteGATTCharacteristic</code> global object,\nwhich adds the object to the \"active notification context set\". \n    <p>When the User Agent receives a notification from the Bluetooth device,\nit fires an event at the <code>BluetoothRemoteGATTCharacteristic</code> objects\nin the active notification context set.</p>\n   </div>\n   <p>See:</p>\n   <ul>\n    <li data-md>\n     <p><a href=\"#events-are-for-notification\">§ 7.5 Events are for notification</a></p>\n    <li data-md>\n     <p><a href=\"#events-vs-observers\">§ 7.8 How to decide between Events and Observers</a></p>\n    <li data-md>\n     <p><a href=\"#state-and-subclassing\">§ 7.7 State and Event subclasses</a></p>\n   </ul>\n   <h3 class=\"heading settled\" data-level=\"7.4\" id=\"always-add-event-handlers\"><span class=\"secno\">7.4. </span><span class=\"content\">Always add event handler attributes</span><a class=\"self-link\" href=\"#always-add-event-handlers\"></a></h3>\n   <p>If your API adds a new event type,\nadd a corresponding <code>on<em>yourevent</em></code> <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/webappapis.html#event-handler-idl-attributes\" id=\"ref-for-event-handler-idl-attributes\">event handler IDL attribute</a> to the interface of any <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/webappapis.html#eventhandler\" id=\"ref-for-eventhandler\">EventHandler</a></code> which may handle the new event.</p>\n   <p>it’s important to continue to define event handler IDL attributes because:</p>\n   <ul>\n    <li data-md>\n     <p>they preserve consistency in the platform</p>\n    <li data-md>\n     <p>they enable feature-detection for the supported events (see <a href=\"#feature-detect\">§ 2.5 New features should be detectable</a>)</p>\n   </ul>\n   <p class=\"note\" role=\"note\"> For consistency, if the event needs to be handled by HTML and SVG elements,\nadd the <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/webappapis.html#event-handler-idl-attributes\" id=\"ref-for-event-handler-idl-attributes①\">event handler IDL attributes</a> on the <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/webappapis.html#globaleventhandlers\" id=\"ref-for-globaleventhandlers\">GlobalEventHandlers</a></code> interface mixin,\ninstead of directly on the relevant element interface(s).\nSimilarly, add <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/webappapis.html#event-handler-idl-attributes\" id=\"ref-for-event-handler-idl-attributes②\">event handler IDL attributes</a> to <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/webappapis.html#windoweventhandlers\" id=\"ref-for-windoweventhandlers\">WindowEventHandlers</a></code> rather than <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/window-object.html#window\" id=\"ref-for-window①\">Window</a></code>. </p>\n   <h3 class=\"heading settled\" data-level=\"7.5\" id=\"events-are-for-notification\"><span class=\"secno\">7.5. </span><span class=\"content\">Events are for notification</span><a class=\"self-link\" href=\"#events-are-for-notification\"></a></h3>\n   <p>Events shouldn’t be used to trigger changes,\nonly to deliver a notification that a change has already finished happening.</p>\n   <div class=\"example\" id=\"example-a13474fb\">\n    <a class=\"self-link\" href=\"#example-a13474fb\"></a> When a window is resized,\nan event named <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/media.html#event-media-resize\" id=\"ref-for-event-media-resize\">resize</a></code> is fired at the <code>Window</code> object. \n    <p>It’s not possible to stop the resize from happening by intercepting the event.\nNor is it possible to fire a constructed <code>resize</code> event\nto cause the window to change size.\nThe event can only notify the author that the resize has already happened.</p>\n   </div>\n   <h3 class=\"heading settled\" data-level=\"7.6\" id=\"guard-against-recursion\"><span class=\"secno\">7.6. </span><span class=\"content\">Guard against potential recursion</span><a class=\"self-link\" href=\"#guard-against-recursion\"></a></h3>\n   <p>If your API includes a long-running or complicated algorithm,\nprevent calling into the algorithm if it’s already running.</p>\n   <p>If an API method causes a long-running algorithm to begin,\nyou should use <a href=\"#events-are-for-notification\">events</a> to notify user code of the progress of the algorithm.\nHowever, the user code which handles the event may call the same API method,\ncausing the complex algorithm to run recursively.\nThe same event may be fired again,\ncausing the same event handler to be fired, and so on.</p>\n   <p>To prevent this, make sure that any \"recursive\" call into the API method\nsimply returns immediately. This technique is \"guarding\" the algorithm.</p>\n   <div class=\"example\" id=\"example-32d23c03\">\n    <a class=\"self-link\" href=\"#example-32d23c03\"></a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#abortsignal\" id=\"ref-for-abortsignal①\">AbortSignal</a></code>'s <a data-link-type=\"dfn\" href=\"https://dom.spec.whatwg.org/#abortsignal-add\" id=\"ref-for-abortsignal-add\">add</a>, <a data-link-type=\"dfn\" href=\"https://dom.spec.whatwg.org/#abortsignal-remove\" id=\"ref-for-abortsignal-remove\">remove</a> and <a data-link-type=\"dfn\" href=\"https://dom.spec.whatwg.org/#abortsignal-signal-abort\" id=\"ref-for-abortsignal-signal-abort\">signal abort</a> each begin with a check\nof the signal’s <a data-link-type=\"dfn\">aborted flag</a>.\nIf the flag is set, the rest of the algorithm doesn’t run. \n    <p>In this case, a lot of the important complexity is\nin the algorithms run during the <a data-link-type=\"dfn\" href=\"https://dom.spec.whatwg.org/#abortsignal-signal-abort\" id=\"ref-for-abortsignal-signal-abort①\">signal abort</a> steps.\nThese steps iterate through a collection of algorithms\nwhich are managed by the <a data-link-type=\"dfn\" href=\"https://dom.spec.whatwg.org/#abortsignal-add\" id=\"ref-for-abortsignal-add①\">add</a> and <a data-link-type=\"dfn\" href=\"https://dom.spec.whatwg.org/#abortsignal-remove\" id=\"ref-for-abortsignal-remove①\">remove</a> methods.</p>\n    <p>For example, the <a href=\"https://streams.spec.whatwg.org/#readable-stream-pipe-to\">ReadableStreamPipeTo</a> definition <a data-link-type=\"dfn\" href=\"https://dom.spec.whatwg.org/#abortsignal-add\" id=\"ref-for-abortsignal-add②\">add</a>s an algorithm\ninto the <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#abortsignal\" id=\"ref-for-abortsignal②\">AbortSignal</a></code>'s set of algorithms to be run\nwhen the <a data-link-type=\"dfn\" href=\"https://dom.spec.whatwg.org/#abortsignal-signal-abort\" id=\"ref-for-abortsignal-signal-abort②\">signal abort</a> steps are triggered,\nby calling <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#dom-abortcontroller-abort\" id=\"ref-for-dom-abortcontroller-abort①\">abort()</a></code> on the <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#abortcontroller\" id=\"ref-for-abortcontroller①\">AbortController</a></code> associated with the signal.</p>\n    <p>This algorithm is likely to resolve promises causing code to run,\nwhich may include attempting to call any of the methods on <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#abortsignal\" id=\"ref-for-abortsignal③\">AbortSignal</a></code>.\nSince <a data-link-type=\"dfn\" href=\"https://dom.spec.whatwg.org/#abortsignal-signal-abort\" id=\"ref-for-abortsignal-signal-abort③\">signal abort</a> involves iterating through the collection of algorithms,\nit should not be possible to modify that collection while it’s running.</p>\n    <p>And since <a data-link-type=\"dfn\" href=\"https://dom.spec.whatwg.org/#abortsignal-signal-abort\" id=\"ref-for-abortsignal-signal-abort④\">signal abort</a> would have triggered the code which caused\nthe recursive call back in to <a data-link-type=\"dfn\" href=\"https://dom.spec.whatwg.org/#abortsignal-signal-abort\" id=\"ref-for-abortsignal-signal-abort⑤\">signal abort</a>,\nit’s important to avoid running these steps again\nif the signal is already in the process of the <a data-link-type=\"dfn\" href=\"https://dom.spec.whatwg.org/#abortsignal-signal-abort\" id=\"ref-for-abortsignal-signal-abort⑥\">signal abort</a> steps,\nto avoid recursion.</p>\n   </div>\n   <p class=\"note\" role=\"note\"><span>Note:</span> A caution about early termination:\nif the algorithm being terminated\nwould go on to ensure some critical state consistency,\nbe sure to also make the relevant adjustments in state\nbefore early termination of the algorithm.\nNot doing so can lead to inconsistent state\nand end-user-visible bugs when implemented as-specified.</p>\n   <p class=\"note\" role=\"note\"><span>Note:</span> Be cautious about throwing exceptions in early termination.\nKeep in mind the scenario in which developers will be invoking the algorithm,\nand whether they would reasonably expect to handle an exception\nin this [perhaps rare] case.\nFor example, will this be the only exception in the algorithm?</p>\n   <p>You won’t always be able to \"guard\" in this way.\nFor example, an algorithm may have too many entry-points to reliably check all of them.\nIf that’s the case,\nanother option is to defer calling the author code\nto a later task or microtask.\nThis avoids a stack of recursion,\nbut can’t avoid the risk of an endless loop of follow-up tasks.</p>\n   <p>Deferring an event is often specified as \"<a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/webappapis.html#queue-a-task\" id=\"ref-for-queue-a-task①\">queue a task</a> to <a data-link-type=\"dfn\" href=\"https://dom.spec.whatwg.org/#concept-event-fire\" id=\"ref-for-concept-event-fire\">fire an event</a>...\".</p>\n   <p>You should always defer events\nif the algorithm that triggers the event could be running\non a different thread or process.\nIn this case, deferral ensures the events\ncan be processed on the correct task in the <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/webappapis.html#task-queue\" id=\"ref-for-task-queue\">task queue</a>.</p>\n   <p>Both the \"guarding\" and the \"deferring\" approach have trade-offs.</p>\n   <p>\"Guarding\" an algorithm guarantees:</p>\n   <ul>\n    <li data-md>\n     <p>at the time events are fired,\nthere is no chance that the state may have changed\nbetween the guarded algorithm ending and the event firing.</p>\n    <li data-md>\n     <p>events fired during the algorithm,\nsuch as events to notify user code of a state change made as part of the algorithm,\ncan be fired immediately,\nnotifying code of the change without needing to wait for the next task.</p>\n    <li data-md>\n     <p>user code running in the event handler can observe relevant state directly\non the instance object they were fired on,\nrather than needing to be given a copy of the relevant state with the event.</p>\n   </ul>\n   <p>If the events are deferred instead:</p>\n   <ul>\n    <li data-md>\n     <p>there is no guarantee that they will be first in the <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/webappapis.html#task-queue\" id=\"ref-for-task-queue①\">task queue</a> once the algorithm completes.</p>\n    <li data-md>\n     <p>any other task may change the object’s state\nyou should include any state relevant to the event with the deferred event.</p>\n     <ul>\n      <li data-md>\n       <p><span class=\"informative\">This usually involves a new subclass of <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#event\" id=\"ref-for-event②\">Event</a></code>,\nwith new attributes to hold the state.</span></p>\n       <p>For example, the <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://xhr.spec.whatwg.org/#progressevent\" id=\"ref-for-progressevent\">ProgressEvent</a></code> adds <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://xhr.spec.whatwg.org/#dom-progressevent-loaded\" id=\"ref-for-dom-progressevent-loaded\">loaded</a></code>, <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://xhr.spec.whatwg.org/#dom-progressevent-total\" id=\"ref-for-dom-progressevent-total\">total</a></code>, etc. attributes to hold the state.</p>\n     </ul>\n    <li data-md>\n     <p>if different parts of an algorithm need to coordinate,\nyou may need to define an explicit state machine (well-defined state transitions)\nto ensure that when a deferred event fires,\nthe behavior of inspecting or changing state is well-defined.</p>\n     <p><span class=\"informative\">For example, in <a data-link-type=\"biblio\" href=\"#biblio-payment-request\">[payment-request]</a>,\nthe <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/payment-request/#dom-paymentrequest\" id=\"ref-for-dom-paymentrequest\">PaymentRequest</a></code>'s <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/payment-request/#dfn-state\" id=\"ref-for-dfn-state\">[[state]]</a> internal slot\nexplicitly tracks the object’s state\nthrough its well-defined transitions.</span></p>\n     <ul>\n      <li data-md>\n       <p>These state transitions often use the guarding technique themselves,\n to ensure the state transitions happen appropriately.</p>\n       <p>For example, in <a data-link-type=\"biblio\" href=\"#biblio-payment-request\">[payment-request]</a> note the guards used around the <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/payment-request/#dfn-state\" id=\"ref-for-dfn-state①\">[[state]]</a> internal slot,\n such as in the <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/payment-request/#dom-paymentrequest-show\" id=\"ref-for-dom-paymentrequest-show\">show()</a></code> algorithm.</p>\n     </ul>\n    <li data-md>\n     <p>if the deferred event doesn’t need extra state,\nor a state machine,\nthis probably means that the event is just signalling the completion of the algorithm.\nIf this is true, the API should probably return a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-promise\" id=\"ref-for-idl-promise\">Promise</a></code> instead of firint the event.\nSee <a href=\"#one-time-events\">§ 7.1 Use promises for one time events</a>.</p>\n   </ul>\n   <p class=\"note\" role=\"note\"><span>Note:</span> events that expose the possibility of recursion as described in this section\nwere sometimes called \"synchronous events\".\nThis terminology is discouraged\nas it implies that it’s possible to dispatch an event asynchronously.\nAll events are dispatched synchronously.\nWhat is more often implied by \"asynchronous event\" is to defer firing an event.</p>\n   <h3 class=\"heading settled\" data-level=\"7.7\" id=\"state-and-subclassing\"><span class=\"secno\">7.7. </span><span class=\"content\">State and <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#event\" id=\"ref-for-event③\">Event</a></code> subclasses</span><a class=\"self-link\" href=\"#state-and-subclassing\"></a></h3>\n   <p>Where possible, use a plain <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#event\" id=\"ref-for-event④\">Event</a></code> with a specified <code>type</code>,\nand capture any state information in the <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#dom-event-target\" id=\"ref-for-dom-event-target\">target</a></code> object.</p>\n   <p>It’s usually not necessary to create new subclasses of <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#event\" id=\"ref-for-event⑤\">Event</a></code>.</p>\n   <h3 class=\"heading settled\" data-level=\"7.8\" id=\"events-vs-observers\"><span class=\"secno\">7.8. </span><span class=\"content\">How to decide between Events and Observers</span><a class=\"self-link\" href=\"#events-vs-observers\"></a></h3>\n   <p>In general, use <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#eventtarget\" id=\"ref-for-eventtarget\">EventTarget</a></code> and notification <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#event\" id=\"ref-for-event⑥\">Event</a></code>s,\nrather than an Observer pattern,\nunless an <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#eventtarget\" id=\"ref-for-eventtarget①\">EventTarget</a></code> can’t work well for your feature.</p>\n   <p>Using an <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#eventtarget\" id=\"ref-for-eventtarget②\">EventTarget</a></code> ensures your feature benefits from\nimprovements to the shared base class,\nsuch as the addition of the <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#dom-addeventlisteneroptions-once\" id=\"ref-for-dom-addeventlisteneroptions-once\">once</a></code>.</p>\n   <p>If using events causes problems,\nsuch as unavoidable <a href=\"#guard-against-recursion\">recursion</a>,\nconsider using an Observer pattern instead.</p>\n   <p><code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#mutationobserver\" id=\"ref-for-mutationobserver\">MutationObserver</a></code>, <a href=\"https://w3c.github.io/IntersectionObserver\">Intersection Observer</a>, <a href=\"https://drafts.csswg.org/resize-observer/#resize-observer-interface\">Resize Observers</a>,\nand <a href=\"https://github.com/WICG/indexed-db-observers\">IndexedDB Observers</a> are all examples of an Observer pattern.</p>\n   <div class=\"example\" id=\"example-5d14c000\">\n    <a class=\"self-link\" href=\"#example-5d14c000\"></a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#mutationobserver\" id=\"ref-for-mutationobserver①\">MutationObserver</a></code> replaced the deprecated <a href=\"https://www.w3.org/TR/DOM-Level-3-Events/#legacy-mutationevent-events\">DOM Mutation Events</a> after developers <a href=\"https://lists.w3.org/Archives/Public/public-webapps/2011JulSep/0779.html\">noticed</a> that DOM Mutation Events \n    <ul>\n     <li data-md>\n      <p>fire too often</p>\n     <li data-md>\n      <p>don’t benefit from event propagation, which makes them too slow to be useful</p>\n     <li data-md>\n      <p>cause <a href=\"#guard-against-recursion\">recursion</a> which is too difficult to guard against.</p>\n    </ul>\n    <p>Mutation Observers:</p>\n    <ul>\n     <li data-md>\n      <p>can batch up mutations to be sent to observers\nafter mutations have finished being applied;</p>\n     <li data-md>\n      <p>don’t need to go through event capture and bubbling phases;</p>\n     <li data-md>\n      <p>provide a richer API for expressing what mutations have occurred.</p>\n    </ul>\n    <p class=\"note\" role=\"note\"><span>Note:</span> Events can also batch up notifications,\nbut DOM Mutation Events were not designed to do this.\nEvents don’t always need to participate in event propagation,\nbut events on DOM Nodes usually do.</p>\n   </div>\n   <p>The Observer pattern works like this:</p>\n   <ul>\n    <li data-md>\n     <p>Each instance of the Observer class\nis constructed with a callback,\nand optionally with some options to customize what should be observed.</p>\n    <li data-md>\n     <p>Instances begin observing specific targets,\nusing a method named <code>observe()</code>,\nwhich takes a reference to the target to be observed.\nThe options to customize what should be observed\nmay be provided here instead of to the constructor.\nThe callback provided in the constructor is invoked\nwhen something interesting happens to those targets.</p>\n    <li data-md>\n     <p>Callbacks receive <em>change records</em> as arguments.\nThese records contain the details\nabout the interesting thing that happened.\nMultiple records can be delivered at once.</p>\n    <li data-md>\n     <p>The author may stop observing by calling a method called <code>unobserve()</code> or <code>disconnect()</code> on the Observer instance.</p>\n    <li data-md>\n     <p>Optionally, a method may be provided to immediately return records\nfor all observed-but-not-yet-delivered occurrences.</p>\n   </ul>\n   <div class=\"example\" id=\"example-f8835767\">\n    <a class=\"self-link\" href=\"#example-f8835767\"></a> <a href=\"https://w3c.github.io/IntersectionObserver\"><code>IntersectionObserver</code></a> may be used like this: \n<pre class=\"highlight\"><c- a>function</c-> checkElementStillVisible<c- p>(</c->element<c- p>,</c-> observer<c- p>)</c-> <c- p>{</c->\n    <c- k>delete</c-> element<c- p>.</c->visibleTimeout<c- p>;</c->\n\n    <c- c1>// Process any observations which may still be on the task queue</c->\n    processChanges<c- p>(</c->observer<c- p>.</c->takeRecords<c- p>());</c->\n\n    <c- k>if</c-> <c- p>(</c-><c- t>'isVisible'</c-> <c- k>in</c-> element<c- p>)</c-> <c- p>{</c->\n        <c- k>delete</c-> element<c- p>.</c->isVisible<c- p>;</c->\n        logAdImpressionToServer<c- p>();</c->\n\n        <c- c1>// Stop observing this element</c->\n        observer<c- p>.</c->unobserve<c- p>(</c->element<c- p>);</c->\n    <c- p>}</c->\n<c- p>}</c->\n\n<c- a>function</c-> processChanges<c- p>(</c->changes<c- p>)</c-> <c- p>{</c->\n    changes<c- p>.</c->forEach<c- p>(</c-><c- a>function</c-><c- p>(</c->changeRecord<c- p>)</c-> <c- p>{</c->\n        <c- a>var</c-> element <c- o>=</c-> changeRecord<c- p>.</c->target<c- p>;</c->\n        element<c- p>.</c->isVisible <c- o>=</c-> isVisible<c- p>(</c->changeRecord<c- p>.</c->boundingClientRect<c- p>,</c->\n                                      changeRecord<c- p>.</c->intersectionRect<c- p>);</c->\n        <c- k>if</c-> <c- p>(</c-><c- t>'isVisible'</c-> <c- k>in</c-> element<c- p>)</c-> <c- p>{</c->\n            <c- c1>// Element became visible</c->\n            element<c- p>.</c->visibleTimeout <c- o>=</c-> setTimeout<c- p>(()</c-> <c- p>=></c-> <c- p>{</c->\n                checkElementStillVisible<c- p>(</c->element<c- p>,</c-> observer<c- p>);</c->\n            <c- p>},</c-> <c- mf>1000</c-><c- p>);</c->\n        <c- p>}</c-> <c- k>else</c-> <c- p>{</c->\n            <c- c1>// Element became hidden</c->\n            <c- k>if</c-> <c- p>(</c-><c- t>'visibleTimeout'</c-> <c- k>in</c-> element<c- p>)</c-> <c- p>{</c->\n                clearTimeout<c- p>(</c->element<c- p>.</c->visibleTimeout<c- p>);</c->\n                <c- k>delete</c-> element<c- p>.</c->visibleTimeout<c- p>;</c->\n            <c- p>}</c->\n        <c- p>}</c->\n    <c- p>});</c->\n<c- p>}</c->\n\n<c- c1>// Create IntersectionObserver with callback and options</c->\n<c- a>var</c-> observer <c- o>=</c-> <c- k>new</c-> IntersectionObserver<c- p>(</c->processChanges<c- p>,</c->\n                                        <c- p>{</c-> threshold<c- o>:</c-> <c- p>[</c-><c- mf>0.5</c-><c- p>]</c-> <c- p>});</c->\n\n<c- c1>// Begin observing \"ad\" element</c->\n<c- a>var</c-> ad <c- o>=</c-> document<c- p>.</c->querySelector<c- p>(</c-><c- t>'#ad'</c-><c- p>);</c->\nobserver<c- p>.</c->observe<c- p>(</c->ad<c- p>);</c->\n</pre>\n    <p>(Example code adapted from <a href=\"https://github.com/w3c/IntersectionObserver/blob/master/explainer.md\">the <code>IntersectionObserver</code> explainer</a>.)</p>\n   </div>\n   <p>To use the Observer pattern, you need to define:</p>\n   <ol>\n    <li data-md>\n     <p>the new Observer object type,</p>\n    <li data-md>\n     <p>an object type for observation options, and</p>\n    <li data-md>\n     <p>an object type for the records to be observed.</p>\n   </ol>\n   <p>The trade-off for this extra work is the following advantages:</p>\n   <ul>\n    <li data-md>\n     <p>Instances can be customized at observation time, or at creation time.\nThe constructor for an <code>Observer</code>,\nor its <code>observe()</code> method,\ncan take options allowing authors to customize what is observed for each callback.\nThis isn’t possible with <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#dom-eventtarget-addeventlistener\" id=\"ref-for-dom-eventtarget-addeventlistener②\">addEventListener()</a></code>.</p>\n    <li data-md>\n     <p>It’s easy to stop listening on multiple callbacks using the <code>disconnect()</code> or <code>unobserve()</code> method on the <code>Observer</code> object.</p>\n    <li data-md>\n     <p>You have the option to provide a method like <code>takeRecords()</code>,\nwhich immediately fetches the relevant data,\ninstead of waiting for an event to fire.</p>\n    <li data-md>\n     <p>Because Observers are single-purpose, you don’t need to specify an event type.</p>\n   </ul>\n   <p><code>Observer</code>s and <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#eventtarget\" id=\"ref-for-eventtarget③\">EventTarget</a></code>s have these things in common:</p>\n   <ul>\n    <li data-md>\n     <p>Both can be customized at creation time.</p>\n    <li data-md>\n     <p>Both can batch occurrences and deliver them at any time. <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#eventtarget\" id=\"ref-for-eventtarget④\">EventTarget</a></code>s don’t need to be synchronous;\nthey can use microtask timing, idle timing, animation-frame timing, etc.\nYou don’t need an <code>Observer</code> to get special timing or batching.</p>\n    <li data-md>\n     <p>Neither <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#eventtarget\" id=\"ref-for-eventtarget⑤\">EventTarget</a></code>s nor <code>Observer</code>s need to participate in a DOM tree\n(bubbling/capture and cancellation).\nMost prominent <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#eventtarget\" id=\"ref-for-eventtarget⑥\">EventTarget</a></code>s are <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#node\" id=\"ref-for-node①\">Node</a></code>s in the DOM tree,\nbut many other events are standalone;\nfor example, <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://w3c.github.io/IndexedDB/#idbdatabase\" id=\"ref-for-idbdatabase\">IDBDatabase</a></code> and <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://xhr.spec.whatwg.org/#xmlhttprequesteventtarget\" id=\"ref-for-xmlhttprequesteventtarget\">XMLHttpRequestEventTarget</a></code>.\nEven when using <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#node\" id=\"ref-for-node②\">Node</a></code>s,\nyour events may be designed to be non-bubbling and non-cancelable.</p>\n   </ul>\n   <div class=\"example\" id=\"example-211011c7\">\n    <a class=\"self-link\" href=\"#example-211011c7\"></a> Here is an example of using a hypothetical version of <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://w3c.github.io/IntersectionObserver/#intersectionobserver\" id=\"ref-for-intersectionobserver\">IntersectionObserver</a></code> that’s an <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#eventtarget\" id=\"ref-for-eventtarget⑦\">EventTarget</a></code> subclass: \n<pre class=\"highlight\"><c- a>const</c-> io <c- o>=</c-> <c- k>new</c-> ETIntersectionObserver<c- p>(</c->element<c- p>,</c-> <c- p>{</c-> root<c- p>,</c-> rootMargin<c- p>,</c-> threshold <c- p>});</c->\n\n<c- a>function</c-> listener<c- p>(</c->e<c- p>)</c-> <c- p>{</c->\n    <c- k>for</c-> <c- p>(</c-><c- a>const</c-> change <c- k>of</c-> e<c- p>.</c->changes<c- p>)</c-> <c- p>{</c->\n        <c- c1>// ...</c->\n    <c- p>}</c->\n<c- p>}</c->\n\nio<c- p>.</c->addEventListener<c- p>(</c-><c- u>\"intersect\"</c-><c- p>,</c-> listener<c- p>);</c->\nio<c- p>.</c->removeEventListener<c- p>(</c-><c- u>\"intersect\"</c-><c- p>,</c-> listener<c- p>);</c->\n</pre>\n    <p>Compared to the <code>Observer</code> version:</p>\n    <ul>\n     <li data-md>\n      <p>it’s more difficult to observe multiple elements with the same options;</p>\n     <li data-md>\n      <p>there is no way to request data immediately;</p>\n     <li data-md>\n      <p>it’s more work to remove multiple event listeners for the same event;</p>\n     <li data-md>\n      <p>the author has to provide a redundant <code>\"intersect\"</code> event type.</p>\n    </ul>\n    <p>In common with the <code>Observer</code> version:</p>\n    <ul>\n     <li data-md>\n      <p>it can still do batching;</p>\n     <li data-md>\n      <p>it has the same timing (based on the JavaScript event queue);</p>\n     <li data-md>\n      <p>authors can still customize what to listen for; and</p>\n     <li data-md>\n      <p>events don’t go through capture or bubbling.</p>\n    </ul>\n    <p>These aspects can be achieved with either design.</p>\n   </div>\n   <p>See also:</p>\n   <ul>\n    <li data-md>\n     <p><a href=\"#events-are-for-notification\">§ 7.5 Events are for notification</a></p>\n    <li data-md>\n     <p><a href=\"#state-and-subclassing\">§ 7.7 State and Event subclasses</a></p>\n   </ul>\n   <h2 class=\"heading settled\" data-level=\"8\" id=\"types-and-units\"><span class=\"secno\">8. </span><span class=\"content\">Web IDL, Types, and Units</span><a class=\"self-link\" href=\"#types-and-units\"></a></h2>\n   <h3 class=\"heading settled\" data-level=\"8.1\" id=\"numeric-types\"><span class=\"secno\">8.1. </span><span class=\"content\">Use numeric types appropriately</span><a class=\"self-link\" href=\"#numeric-types\"></a></h3>\n   <p>If an API you’re designing uses numbers,\nuse one of the following <a data-link-type=\"biblio\" href=\"#biblio-webidl\">[WEBIDL]</a> numeric types,\nunless there is a specific reason not to:</p>\n   <dl>\n    <dt data-md><code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-unrestricted-double\" id=\"ref-for-idl-unrestricted-double\">unrestricted double</a></code>\n    <dd data-md>\n     <p>Any JavaScript number, including infinities and NaN</p>\n    <dt data-md><code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-double\" id=\"ref-for-idl-double\">double</a></code>\n    <dd data-md>\n     <p>Any JavaScript number, excluding infinities and NaN</p>\n    <dt data-md>[<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#EnforceRange\" id=\"ref-for-EnforceRange\">EnforceRange</a></code>] <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-long-long\" id=\"ref-for-idl-long-long\">long long</a></code>\n    <dd data-md>\n     <p>Any JavaScript number from -2<sup>63</sup> to 2<sup>63</sup>,\n rounded to the nearest integer.\n If a number outside this range is given,\n the generated bindings will throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#exceptiondef-typeerror\" id=\"ref-for-exceptiondef-typeerror①\">TypeError</a></code>.</p>\n    <dt data-md>[<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#EnforceRange\" id=\"ref-for-EnforceRange①\">EnforceRange</a></code>] <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-unsigned-long-long\" id=\"ref-for-idl-unsigned-long-long\">unsigned long long</a></code>\n    <dd data-md>\n     <p>Any JavaScript number from 0 to 2<sup>64</sup>,\n rounded to the nearest integer.\n If a number outside this range is given,\n the generated bindings will throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#exceptiondef-typeerror\" id=\"ref-for-exceptiondef-typeerror②\">TypeError</a></code>.</p>\n   </dl>\n   <p>JavaScript has only one numeric type, <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-number-objects\" id=\"ref-for-sec-number-objects\">Number</a></code>:\nIEEE 754 double-precision floating point, including ±0, ±Infinity, and NaN. <a data-link-type=\"biblio\" href=\"#biblio-webidl\">[WEBIDL]</a> numeric types represent\nrules for modifying any JavaScript number\nto belong to a subset with particular properties.\nThese rules are run when a number is passed to the interface defined in IDL,\nwhether a method or a property setter.</p>\n   <p>If you have extra rules which need to be applied to the number,\nyou can specify those in your algorithm.</p>\n   <div class=\"note\" role=\"note\">\n     The <a href=\"https://heycam.github.io/webidl/#es-integer-types\">WEBIDL rules</a> for converting a JavaScript number to a number with fewer bits,\nsuch as an <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-octet\" id=\"ref-for-idl-octet\">octet</a></code> (8 bits, in the range [0, 255]),\ninvolves taking the modulo of the JavaScript number.\nFor example, to convert a JavaScript number value of 300\nto an <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-octet\" id=\"ref-for-idl-octet①\">octet</a></code>,\nthe bindings will first compute 300 modulo 255,\nso the resulting number will be 45,\nwhich might be surprising. \n    <p>Instead, you can use\n[<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#EnforceRange\" id=\"ref-for-EnforceRange②\">EnforceRange</a></code>] <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-octet\" id=\"ref-for-idl-octet②\">octet</a></code> to throw a <code>TypeError</code> for values outside of the <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-octet\" id=\"ref-for-idl-octet③\">octet</a></code> range,\nor [<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#Clamp\" id=\"ref-for-Clamp\">Clamp</a></code>] <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-octet\" id=\"ref-for-idl-octet④\">octet</a></code> to clamp values to the octet range (for example, converting 300 to 255).</p>\n    <p>This also works for the other shorter types, such as <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-short\" id=\"ref-for-idl-short\">short</a></code> or <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-long\" id=\"ref-for-idl-long\">long</a></code>.</p>\n   </div>\n   <p><code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-bigint\" id=\"ref-for-idl-bigint\">bigint</a></code> should be used only when values greater than 2<sup>53</sup> or less than -2<sup>53</sup> are expected.</p>\n   <p>An API should not support both <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-bigint-objects\" id=\"ref-for-sec-bigint-objects\">BigInt</a></code> and <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-number-objects\" id=\"ref-for-sec-number-objects①\">Number</a></code> simultaneously,\neither by supporting both types via polymorphism,\nor by adding separate, otherwise identical APIs which take <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-bigint-objects\" id=\"ref-for-sec-bigint-objects①\">BigInt</a></code> and <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-number-objects\" id=\"ref-for-sec-number-objects②\">Number</a></code>.\nThis risks losing precision through implicit conversions,\nwhich defeats the purpose of <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-bigint-objects\" id=\"ref-for-sec-bigint-objects②\">BigInt</a></code>.</p>\n   <h3 class=\"heading settled\" data-level=\"8.2\" id=\"idl-string-types\"><span class=\"secno\">8.2. </span><span class=\"content\">Represent strings appropriately</span><a class=\"self-link\" href=\"#idl-string-types\"></a></h3>\n   <p>When designing a web platform feature which operates on <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#string\" id=\"ref-for-string\">strings</a>,\nuse <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-DOMString\" id=\"ref-for-idl-DOMString\">DOMString</a></code> unless you have a specific reason not to.</p>\n   <p>Most string operations don’t need\nto interpret the <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#code-unit\" id=\"ref-for-code-unit\">code units</a> inside of the string,\nso <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-DOMString\" id=\"ref-for-idl-DOMString①\">DOMString</a></code> is the best choice.\nIn the specific cases explained below, it might be appropriate to use either <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-USVString\" id=\"ref-for-idl-USVString\">USVString</a></code> or <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-ByteString\" id=\"ref-for-idl-ByteString\">ByteString</a></code> instead. <a data-link-type=\"biblio\" href=\"#biblio-infra\">[INFRA]</a> <a data-link-type=\"biblio\" href=\"#biblio-webidl\">[WEBIDL]</a></p>\n   <p><code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-USVString\" id=\"ref-for-idl-USVString①\">USVString</a></code> is the Web IDL type that represents <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#scalar-value-string\" id=\"ref-for-scalar-value-string\">scalar value strings</a>.\nFor strings whose most common algorithms operate on <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#scalar-value\" id=\"ref-for-scalar-value\">scalar values</a> (such as <a data-link-type=\"abstract-op\" href=\"https://url.spec.whatwg.org/#percent-encode\" id=\"ref-for-percent-encode\">percent-encoding</a>),\nor for operations which can’t handle <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#surrogate\" id=\"ref-for-surrogate\">surrogates</a> in input\n(such as APIs that pass strings through to native platform APIs), <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-USVString\" id=\"ref-for-idl-USVString②\">USVString</a></code> should be used.</p>\n   <p class=\"example\" id=\"example-fe96b598\"><a class=\"self-link\" href=\"#example-fe96b598\"></a> <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/common-dom-interfaces.html#reflect\" id=\"ref-for-reflect\">Reflecting IDL attributes</a> whose content attribute is defined to contain a <a data-link-type=\"dfn\" href=\"https://url.spec.whatwg.org/#concept-url\" id=\"ref-for-concept-url\">URL</a> (such as <code><a data-link-type=\"element-sub\" href=\"https://html.spec.whatwg.org/multipage/links.html#attr-hyperlink-href\" id=\"ref-for-attr-hyperlink-href\">href</a></code>)\nshould use <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-USVString\" id=\"ref-for-idl-USVString③\">USVString</a></code>. <a data-link-type=\"biblio\" href=\"#biblio-html\">[HTML]</a> </p>\n   <p><code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-ByteString\" id=\"ref-for-idl-ByteString①\">ByteString</a></code> should only be used for representing\ndata from protocols like HTTP\nwhich don’t distinguish between bytes and strings.\nIt isn’t a general-purpose string type.\nIf you need to represent a <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#sequence-type\" id=\"ref-for-sequence-type②\">sequence</a> of <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-byte\" id=\"ref-for-idl-byte\">bytes</a></code>,\nuse <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-Uint8Array\" id=\"ref-for-idl-Uint8Array\">Uint8Array</a></code>.</p>\n   <h3 class=\"heading settled\" data-level=\"8.3\" id=\"milliseconds\"><span class=\"secno\">8.3. </span><span class=\"content\">Use milliseconds for time measurement</span><a class=\"self-link\" href=\"#milliseconds\"></a></h3>\n   <p>If you are designing an API that accepts a time measurement,\nexpress the time measurement in milliseconds.</p>\n   <p>Even if seconds (or some other time unit) are more natural in the domain of an API,\nsticking with milliseconds ensures that APIs\nare interoperable with one another.\nThis means that authors don’t need to convert values used in one API\nto be used in another API,\nor keep track of which time unit is needed where.</p>\n   <p>This convention began with <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout\" id=\"ref-for-dom-settimeout\">setTimeout()</a></code> and the <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-date-objects\" id=\"ref-for-sec-date-objects\">Date</a></code> API,\nand has been used since then.</p>\n   <p class=\"note\" role=\"note\"><span>Note:</span> high-resolution time is usually represented as fractional milliseconds\nusing a floating point value,\nnot as an integer value of a smaller time unit like nanoseconds.</p>\n   <h3 class=\"heading settled\" data-level=\"8.4\" id=\"times-and-dates\"><span class=\"secno\">8.4. </span><span class=\"content\">Use the appropriate type to represent times and dates</span><a class=\"self-link\" href=\"#times-and-dates\"></a></h3>\n   <p>When representing date-times on the platform, use the <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/hr-time-2/#dom-domhighrestimestamp\" id=\"ref-for-dom-domhighrestimestamp\">DOMHighResTimeStamp</a></code> type. <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/hr-time-2/#dom-domhighrestimestamp\" id=\"ref-for-dom-domhighrestimestamp①\">DOMHighResTimeStamp</a></code> allows comparison of timestamps,\nregardless of the user’s time settings.</p>\n   <p><code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/hr-time-2/#dom-domhighrestimestamp\" id=\"ref-for-dom-domhighrestimestamp②\">DOMHighResTimeStamp</a></code> values represent\na time value in milliseconds.\nSee <a data-link-type=\"biblio\" href=\"#biblio-highres-time\">[HIGHRES-TIME]</a> for more details.</p>\n   <p>Don’t use the JavaScript <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-date-objects\" id=\"ref-for-sec-date-objects①\">Date</a></code> class for representing\nspecific date-time values. <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-date-objects\" id=\"ref-for-sec-date-objects②\">Date</a></code> objects are mutable (may have their value changed),\nand there is no way to make them immutable.</p>\n   <div class=\"note\" role=\"note\">\n     For more background on why <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-date-objects\" id=\"ref-for-sec-date-objects③\">Date</a></code> must not be used,\n    see the following: \n    <ul>\n     <li data-md>\n      <p><a href=\"https://esdiscuss.org/topic/frozen-date-objects\">Frozen date objects?</a> on\nes-discuss</p>\n     <li data-md>\n      <p><a href=\"https://www.w3.org/Bugs/Public/show_bug.cgi?id=22824\">Remove Date from Web IDL</a> on the Web IDL Bugzilla</p>\n    </ul>\n   </div>\n   <h3 class=\"heading settled\" data-level=\"8.5\" id=\"error-types\"><span class=\"secno\">8.5. </span><span class=\"content\">Use Error or DOMException for errors</span><a class=\"self-link\" href=\"#error-types\"></a></h3>\n   <p>Represent errors in web APIs as ECMAScript error objects (e.g., <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-error-objects\" id=\"ref-for-sec-error-objects\">Error</a></code>)\nor as <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-DOMException\" id=\"ref-for-idl-DOMException\">DOMException</a></code>.\nwhether they are exceptions, promise rejection values, or properties.</p>\n   <h2 class=\"heading settled\" data-level=\"9\" id=\"device-apis\"><span class=\"secno\">9. </span><span class=\"content\">OS and Device Wrapper APIs</span><a class=\"self-link\" href=\"#device-apis\"></a></h2>\n   <p>New APIs are now being developed in the web platform for interacting with devices.\nFor example, authors wish to be able to use the web to connect with their <a href=\"https://www.w3.org/TR/mediacapture-streams/\">microphones and cameras</a>, <a href=\"https://www.w3.org/TR/generic-sensor/\">generic sensors</a> (such as gyroscope and\naccelerometer), <a href=\"https://www.w3.org/community/web-bluetooth/\">Bluetooth</a> and <a href=\"https://wicg.github.io/webusb/\">USB</a>-connected peripherals, <a href=\"https://www.w3.org/community/autowebplatform/\">automobiles</a>, etc.</p>\n   <p>These can be functionality provided by the underlying operating system,\nor provided by a native third-party library\nto interact with a device.\nThese are an abstraction which \"wrap\" the native functionality\nwithout introducing significant complexity,\nwhile securing the API surface to the browser.\nSo, these are called wrapper APIs.</p>\n   <p>This section contains principles for consideration when designing APIs for devices.</p>\n   <h3 class=\"heading settled\" data-level=\"9.1\" id=\"device-ids\"><span class=\"secno\">9.1. </span><span class=\"content\">Use care when exposing identifying information about devices</span><a class=\"self-link\" href=\"#device-ids\"></a></h3>\n   <p>If you need to give web sites access to information about a device,\nuse the guidelines below to decide what information to expose.</p>\n   <p>Firstly, think carefully about whether it is really necessary\nto expose identifying information about the device at all.\nConsider whether your <a href=\"#priority-of-constituencies\">user needs</a> could be satisfied\nby a less powerful API.</p>\n   <p>Exposing the presence of a device,\nadditional information about a device,\nor device identifiers,\neach increase the risk of harming the user’s privacy.</p>\n   <p>One risk is that as more specific information is shared,\nthe set of <a href=\"https://www.w3.org/TR/fingerprinting-guidance/\">fingerprinting data</a> available to sites gets larger.\nThere are also <a href=\"https://w3cping.github.io/privacy-threat-model/\">other potential risks</a> to user privacy.</p>\n   <p class=\"issue\" id=\"issue-70c97a29\"><a class=\"self-link\" href=\"#issue-70c97a29\"></a> Privacy Threat Model is not ready for prime time.</p>\n   <p>If there is no way to design a less powerful API,\nuse these guidelines when exposing device information:</p>\n   <dl>\n    <dt data-md>Limit information in the id\n    <dd data-md>\n     <p>Include as little identifiable information as possible\nin device ids exposed to the web plaform.\nIdentifiable information includes\nbranding, make and model numbers, etc\nYou can usually use a random number\nor a unique id instead.\nMake sure that your ids aren’t guessable,\nand aren’t re-used.</p>\n    <dt data-md>Keep the user in control\n    <dd data-md>\n     <p>When the user chooses to clear browsing data,\nmake sure any stored device ids are cleared.</p>\n    <dt data-md>Hide sensitive ids behind a user permission\n    <dd data-md>\n     <p>If you can’t create a device id in an anonymous way,\nlimit access to it.\nMake sure the user can provide <a href=\"#consent\">meaningful consent</a> to a Web page accessing this information.</p>\n    <dt data-md>Tie ids to the same-origin model\n    <dd data-md>\n     <p>Create distinct unique ids for the same physical device\nfor each origin that has has access to it.</p>\n    <dd data-md>\n     <p>If the same device is requested more than once\nby the same origin, return the same id for it\n(unless the user has cleared their browsing data).\nThis allows authors to avoid having\nseveral copies of the same device.</p>\n    <dt data-md>Persistable when necessary\n    <dd data-md>\n     <p>If a device id is time consuming to obtain,\nmake sure authors can store an id generated in one session\nfor use in a later session.\nYou can do this by making sure that\nthe procedure to generate the id\nconsistently produces the same id\nfor the same device,\nfor each origin.</p>\n   </dl>\n   <p>See also:</p>\n   <ul>\n    <li data-md>\n     <p><a data-link-type=\"biblio\" href=\"#biblio-least-power\">[LEAST-POWER]</a></p>\n    <li data-md>\n     <p><a data-link-type=\"biblio\" href=\"#biblio-fingerprinting-guidance\">[FINGERPRINTING-GUIDANCE]</a></p>\n    <li data-md>\n     <p><a data-link-type=\"biblio\" href=\"#biblio-unsanctioned-tracking\">[UNSANCTIONED-TRACKING]</a></p>\n   </ul>\n   <h3 class=\"heading settled\" data-level=\"9.2\" id=\"device-enumeration\"><span class=\"secno\">9.2. </span><span class=\"content\">Use care when exposing APIs for selecting or enumerating devices</span><a class=\"self-link\" href=\"#device-enumeration\"></a></h3>\n   <p>Look for ways to avoid enumerating devices.\nIf you can’t avoid it, expose the least information possible.</p>\n   <p>If an API exposes the the existence, capabilities, or identifiers of more than one device,\nall of the risks in <a href=\"#device-ids\">§ 9.1 Use care when exposing identifying information about devices</a> are multiplied by the number of devices.\nFor the same reasons,\nconsider whether your <a href=\"#priority-of-constituencies\">user needs</a> could be satisfied\nby a less powerful API. <a data-link-type=\"biblio\" href=\"#biblio-least-power\">[LEAST-POWER]</a></p>\n   <p>If the purpose of the API\nis to enable the user <strong>to select a device</strong> from the set of available devices of a particular kind,\nyou may not need to expose a list to script at all.\nAn API which invokes a User-Agent-provided device picker could suffice.\nSuch an API:</p>\n   <ul>\n    <li data-md>\n     <p>keeps the user in control,</p>\n    <li data-md>\n     <p>doesn’t expose any device information without the user’s <a href=\"#consent\">consent</a>,</p>\n    <li data-md>\n     <p>doesn’t expose any fingerprinting data about the user’s environment by default, and</p>\n    <li data-md>\n     <p>only exposes information about one device at a time.</p>\n   </ul>\n   <p>When designing API which allows users to select a device,\nit may be necessary to also expose\nthe fact that there are devices are available to be picked.\nThis does expose one bit of fingerprinting data about the user’s environment\nto websites,\nso it isn’t quite as safe as an API which doesn’t have such a feature.</p>\n   <div class=\"example\" id=\"example-e2381236\">\n    <a class=\"self-link\" href=\"#example-e2381236\"></a> The <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://w3c.github.io/remote-playback/#remoteplayback-interface\" id=\"ref-for-remoteplayback-interface\">RemotePlayback</a></code> interface\ndoesn’t expose a list of available <a data-link-type=\"dfn\" href=\"https://w3c.github.io/remote-playback/#dfn-remote-playback-devices\" id=\"ref-for-dfn-remote-playback-devices\">remote playback devices</a>.\nInstead, it allows the user to choose one device\nfrom a device picker provided by the User Agent. \n    <p>It does enable websites to detect whether or not\nany <a data-link-type=\"dfn\" href=\"https://w3c.github.io/remote-playback/#dfn-remote-playback-devices\" id=\"ref-for-dfn-remote-playback-devices①\">remote playback device</a> is available,\nso the website can show or hide a control\nthe user can use to show the device picker.</p>\n    <p>The trade-off is that by allowing websites\nthis extra bit of information,\nthe API lets authors make their user interface less confusing.\nThey can choose to show a button to trigger the picker\nonly if at least one device is available.</p>\n   </div>\n   <p>If you must expose a list of devices,\ntry to <strong>expose the smallest subset</strong> that satisfies your user needs.</p>\n   <p>For example, an API which allows the website\nto request <strong>a filtered or constrained list</strong> of devices\nis one option to keep the number of devices smaller.\nHowever, if authors are allowed to make multiple requests with different constraints,\nthey may still be able to access the full list.</p>\n   <p>Finally, if you must expose the full list of devices of a particular kind,\nplease rigorously <strong>define the order</strong> in which devices will be listed.\nThis can reduce interoperability issues,\nand helps to mitigate fingerprinting.\n(Sort order could reveal other information:\nsee <a href=\"https://w3c.github.io/fingerprinting-guidance/#a_standardized_profile\"><cite>Fingerprinting Guidance</cite> § 5.2 Standardization</a> for more.)</p>\n   <p class=\"note\" role=\"note\"><span>Note:</span> While APIs should not\nexpose a full list of devices in an <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#implementation-defined\" id=\"ref-for-implementation-defined\">implementation-defined</a> order,\nthey may need to for web compatibility reasons.</p>\n   <h3 class=\"heading settled\" data-level=\"9.3\" id=\"usecase-oriented-apis\"><span class=\"secno\">9.3. </span><span class=\"content\">Design based on user needs, not the underlying API or hardware</span><a class=\"self-link\" href=\"#usecase-oriented-apis\"></a></h3>\n   <p>Design new native capabilities being brought to the web based on user needs.</p>\n   <p>Avoid directly translating an existing native API to the web.</p>\n   <p>Instead, consider the functionality available from the native API,\nand the user needs it addresses,\nand design an API that meets those user needs,\neven if the implementation depends on the existing native API.</p>\n   <p>Be particularly careful about exposing\nthe exact lifecycle and data structures of the underlying native APIs.\nWhen possible, consider flexibility for new hardware.</p>\n   <p>This means newly proposed APIs should be designed\nwith careful consideration on how they are intended to be used\nrather than how the underlying hardware, device, or native API\navailable today.</p>\n   <h3 class=\"heading settled\" data-level=\"9.4\" id=\"hardware-is-scary\"><span class=\"secno\">9.4. </span><span class=\"content\">Be proactive about safety</span><a class=\"self-link\" href=\"#hardware-is-scary\"></a></h3>\n   <p>When bringing native capabilities to the web platform,\ntry to design defensively.</p>\n   <p>Bringing a native capability to the web platform\ncomes with many implications.\nUsers may not want websites to know that their computers\nhave specific capabilities. Therefore, access to anything\noutside of the logical origin boundary should be permission gated.</p>\n   <p>For example, if a device can store state,\nand that state is readable at the same time by multiple origins,\na set of APIs that lets you read and write that state\nis effectively a side-channel that undermines the origin model of the web.</p>\n   <p>For these reasons, even if the device allows non-exclusive access,\nyou may want to consider enforcing exclusive access per-origin,\nor even restricting it further to only the current active tab.</p>\n   <p>Additionally, APIs should be designed so that the applications\ncan gracefully handle physical disruption, such as a device being unplugged.</p>\n   <h3 class=\"heading settled\" data-level=\"9.5\" id=\"wrapper-apis\"><span class=\"secno\">9.5. </span><span class=\"content\">Native APIs don’t typically translate well to the web</span><a class=\"self-link\" href=\"#wrapper-apis\"></a></h3>\n   <p>When adapting native operating system APIs for the web,\nmake sure the new web APIs are designed with web platform principles in mind.</p>\n   <dl>\n    <dt data-md>Make sure the web API can be implemented on more than one platform\n    <dd data-md>\n     <p>When designing a wrapper API,\nconsider how different platforms provide its functionality.</p>\n     <p>Ideally, all implementations should work exactly the same,\nbut in some cases you may have a reason to expose options\nwhich only work on some platforms.\nIf this happens, be sure to explain\nhow authors should write code which works on all platforms.\nSee <a href=\"#feature-detect\">§ 2.5 New features should be detectable</a>.</p>\n    <dt data-md>Underlying protocols should be open\n    <dd data-md>\n     <p>APIs which require exchange with external hardware or services\nshould not depend on closed or proprietary protocols.\nDepending on non-open protocols undermines the open nature of the web.</p>\n    <dt data-md>Design APIs to handle the user being off-line\n    <dd data-md>\n     <p>If an API depends on some service which is provided by a remote server,\nmake sure that the API functions well when the user can’t access the remote server\nfor any reason.</p>\n    <dt data-md>Avoid additional fingerprinting surfaces\n    <dd data-md>\n     <p>Wrapper APIs can unintentionally expose the user to\na wider fingerprinting surface.\nPlease read the TAG’s finding on <a href=\"http://www.w3.org/2001/tag/doc/unsanctioned-tracking/\">unsanctioned tracking</a> for additional details.</p>\n   </dl>\n   <h2 class=\"heading settled\" data-level=\"10\" id=\"other-considerations\"><span class=\"secno\">10. </span><span class=\"content\">Other API Design Considerations</span><a class=\"self-link\" href=\"#other-considerations\"></a></h2>\n   <h3 class=\"heading settled\" data-level=\"10.1\" id=\"polyfills\"><span class=\"secno\">10.1. </span><span class=\"content\">Polyfills</span><a class=\"self-link\" href=\"#polyfills\"></a></h3>\n   <p>Polyfills can be hugely beneficial\nin helping to roll out new features to the web platform.\nThe Technical Architecture Group <a href=\"https://www.w3.org/2001/tag/doc/polyfills/\">finding on Polyfills and the Evolution of the Web</a> offers guidance that should be considered in the development of new features, notably:</p>\n   <ul>\n    <li data-md>\n     <p>Being \"polyfillable\" isn’t essential but <strong>is</strong> beneficial</p>\n    <li data-md>\n     <p><a href=\"#feature-detect\">§ 2.5 New features should be detectable</a></p>\n    <li data-md>\n     <p>Polyfill development should be encouraged</p>\n   </ul>\n   <h3 class=\"heading settled\" data-level=\"10.2\" id=\"consider-dedicatedworker-support\"><span class=\"secno\">10.2. </span><span class=\"content\">Where possible APIs should be made available in DedicatedWorker</span><a class=\"self-link\" href=\"#consider-dedicatedworker-support\"></a></h3>\n   <p>When exposing a feature, please consider whether it makes sense to expose the feature\nto DedicatedWorker as well.</p>\n   <p>Many features could work out of the box on a DedicatedWorker and not enabling the feature\nthere could limit the ability for users to run their code in a non blocking manner.</p>\n   <p>Certain challenges can exist when trying to enable a feature on DedicatedWorker,\nespecially if the feature requires user input by asking for permission,\nor showing a picker or selector.\nEven though this might discourage spec authors to support workers,\nwe still recommend designing the feature with DedicatedWorker support in mind,\nin order to not add assumptions that will later make it unnecessarily hard to expose\nthese APIs to DedicatedWorker.</p>\n   <h3 class=\"heading settled\" data-level=\"10.3\" id=\"new-data-formats\"><span class=\"secno\">10.3. </span><span class=\"content\">New Data Formats</span><a class=\"self-link\" href=\"#new-data-formats\"></a></h3>\n   <p>Always define a corresponding MIME type and extend existing APIs to support this type\nfor any new data format.</p>\n   <p>There are cases when a new capability on the web involves adding a new data format.\nThis can be an image, video, audio, or any other type of data that a browser is expected\nto ingest. New formats should have a standardized MIME type, which is strictly validated.</p>\n   <p>While legacy media formats do not always have strict enforcement for MIME types (and\nsometimes rely on peeking at headers, to workaround this), this is mostly for legacy\ncompatibility reasons and should not be expected or implemented for new formats.</p>\n   <p>It is expected that spec authors also integrate the new format to existing APIs, so that\nthey are safelisted in both ingress (e.g. decoding from a ReadableStream) and egress\n(e.g. encoding to a WriteableStream) points from a browser’s perspective.</p>\n   <p>For example. if you are to add an image format to the web platform, first add a new MIME\ntype for the format. After this, you would naturally add a decoder (and presumably an\nencoder) for said image format to support decoding in HTMLImageElements. On top of this,\nyou are also expected to add support to egress points such as HTMLCanvasElement.toBlob()\nand HTMLCanvasElement.toDataURL().</p>\n   <p>For legacy reasons browsers support MIME type sniffing, but we do not recommend extending\nthe <a href=\"https://mimesniff.spec.whatwg.org/#image-type-pattern-matching-algorithm\">pattern matching algorithm</a>,\ndue to security implications, and instead recommend enforcing strict MIME types for newer formats.</p>\n   <p>New MIME types should have a specification and should be registered with the Internet Assigned Numbers Authority (IANA).</p>\n   <h3 class=\"heading settled\" data-level=\"10.4\" id=\"new-http-header-syntax\"><span class=\"secno\">10.4. </span><span class=\"content\">New HTTP Headers</span><a class=\"self-link\" href=\"#new-http-header-syntax\"></a></h3>\n   <p>If you are defining a new HTTP header,\nits syntax mustn’t go against <a href=\"https://tools.ietf.org/html/rfc7230#section-3.2\">the HTTP specification</a>.</p>\n   <p>If the new header must convey structured data,\nsuch as lists, dictionaries, or typed values\nlike decimals, strings, or booleans,\nthen the header should use the syntax\ndefined in <a href=\"https://tools.ietf.org/html/rfc8941\">Structured Field Values for HTTP</a>.\nThis avoids consumers of the header\nhaving to write and maintain specific micro-parsers,\nor even worse,\nsomething that would break those existing parsers.\nIf the new header requires data\nthat can’t be represented by Structured Field Values,\nthen either engage with IETF about\nextending the Structured Field Values syntax,\nor re-consider if an HTTP header is a right place\nto expose the data before inventing a new syntax. <a data-link-type=\"biblio\" href=\"#biblio-rfc8941\">[RFC8941]</a></p>\n   <h3 class=\"heading settled\" data-level=\"10.5\" id=\"extend-manifests\"><span class=\"secno\">10.5. </span><span class=\"content\">Extend existing manifest files rather than creating new ones</span><a class=\"self-link\" href=\"#extend-manifests\"></a></h3>\n   <p>If your feature requires a manifest,\ninvestigate whether you can extend an existing manifest schema.</p>\n   <p>New web features should be self-contained and self-describing and ideally should not require an additional manifest file.\nSome of the existing manifest files include</p>\n   <ul>\n    <li data-md>\n     <p><a href=\"https://www.w3.org/TR/appmanifest/\">Web App Manifest</a> which contains features related to web applications.</p>\n    <li data-md>\n     <p><a href=\"https://www.w3.org/TR/payment-method-manifest/\">Payment Method Manifest</a> which is used for payment methods in the context of the web payment API</p>\n    <li data-md>\n     <p><a href=\"https://www.w3.org/TR/pub-manifest/\">Publication Manifest</a> which is used by some web publications working group standards</p>\n    <li data-md>\n     <p><a href=\"https://wicg.github.io/origin-policy/\">Origin Policy</a> which is used to set security policies.</p>\n   </ul>\n   <p>We encourage people to extend existing manifest files.\nAlways try to get the changes into the original spec,\nor at least discuss the extension with the spec editors.\nHaving this discussion is more likely to result in a better design\nand lead to something that better integrates with the platform.</p>\n   <p>When designing new keys and values for a manifest, make sure they are needed (that is, they enable well-thought-out use-cases).\nAlso, please check if a similar key exists. If an existing key/value pair does more or less what is needed,\nwork with the existing spec to extend it to your use-case if possible.</p>\n   <div class=\"note\" role=\"note\">\n     There are certain times the original spec authors might not want\nto integrate changes to their manifest format immediately.\nThis may be due to process (like going to CR),\nor due to the addition having a different scope,\nlike extensions to Web App Manifest only affecting store or payment use-cases.\nIn that case, it is acceptable to monkey-patch\nas long as that is agreed with the original spec editors. \n    <p class=\"issue\" id=\"issue-05c58ddf\"><a class=\"self-link\" href=\"#issue-05c58ddf\"></a> when we write up a principle on monkey patching,\nbe sure to take this nuance into account. <a href=\"https://github.com/w3ctag/design-principles/issues/184\">[Issue #184]</a></p>\n    <p>An example of something that was done as a monkey patch\nthat is scheduled to be integrated into the web app manifest in a future level (post-CR):</p>\n    <ul>\n     <li data-md>\n      <p>https://wicg.github.io/web-share-target/#extension-to-the-web-app-manifest</p>\n    </ul>\n   </div>\n   <p>However, if your feature requires a complex set of metadata specific to a functional domain,\nthe creation of a new manifest may be justified.</p>\n   <p>You may need to make a new manifest file if the domain of the manifest file is different from the existing manifest files.\nFor example, if the fetch timing is different, or if the complexity of the manifest warrants it.  Application metadata should be added\nto the Web App Manifest or be an extension of it.\nManifests designated to be used for specific applications or which require interoperability with non-browsers may need to take a different approach.\nPayment Method Manifest, Publication Manifest, and Origin Policy are examples of these cases.</p>\n   <p>For example, if you have a single piece of metadata, even if the fetch timing is different than an existing manifest,\nit is probably best to use an existing manifest (or ideally design the feature in such a way that a manifest is not required).\nHowever, if your feature requires a complex set of metadata specific to a functional domain, the creation of a new manifest may be justified.</p>\n   <p>Note that in all cases, the naming conventions should be harmonized (see <a href=\"#naming-is-hard\">§ 12 Naming principles</a>).</p>\n   <p class=\"note\" role=\"note\"><span>Note:</span> By principle, existing manifests use lowercase, underscore-delimited names.\nThere have been times where it was useful to re-use dictionaries from a manifest in DOM APIs as well,\nwhich meant converting the names to camel-cased version.\nOne such example is the <a href=\"https://w3c.github.io/image-resource/\">image resource</a>.\nFor this reason, if a key can clearly be expressed as a single word, that is recommended.</p>\n   <h3 class=\"heading settled\" data-level=\"10.6\" id=\"debuggability\"><span class=\"secno\">10.6. </span><span class=\"content\">Features should be developer-friendly</span><a class=\"self-link\" href=\"#debuggability\"></a></h3>\n   <p>Any new feature should be developer-friendly.\nWhile it is hard to quantify friendliness, at least consider the following points.</p>\n   <p>While error text in exceptions should be generic,\ndeveloper-oriented error messages (such as those from a developer console) must be meaningful.\nWhen a developer encounters an error,\nthe message should be specific to that error case,\nand not overly generic.</p>\n   <p>Ideally, developer-oriented error messages should have enough information\nto guide the developer in pinpointing where the problem is.</p>\n   <p>Declarative features such as CSS,\nmay require extra work in the implementation for debuggability.\nDefining this in the specification not only makes the feature more developer-friendly,\nit also ensures a consistent development experience for the users.</p>\n   <p>A good example where debuggability was defined as\npart of the specification is <a href=\"https://www.w3.org/TR/web-animations-1/#use-cases\">Web Animations</a>.</p>\n   <h3 class=\"heading settled\" data-level=\"10.7\" id=\"crypto\"><span class=\"secno\">10.7. </span><span class=\"content\">Use the best crypto, and expect it to evolve</span><a class=\"self-link\" href=\"#crypto\"></a></h3>\n   <p>Use only cryptographic algorithms\nthat have been impartially reviewed by security experts,\nand make sure your choice of algorithm is proven, and up-to-date.\nNot only do they become obsolete or insecure,\ncryptographic protocols and algorithms also evolve quickly.</p>\n   <h2 class=\"heading settled\" data-level=\"11\" id=\"spec-writing\"><span class=\"secno\">11. </span><span class=\"content\">Writing good specifications</span><a class=\"self-link\" href=\"#spec-writing\"></a></h2>\n   <p>This document mostly covers API design for the Web,\nbut those who design APIs are hopefully also writing specifications\nfor the APIs that they design.</p>\n   <h3 class=\"heading settled\" data-level=\"11.1\" id=\"requirements-on-authors-and-implementers\"><span class=\"secno\">11.1. </span><span class=\"content\">Identify the audience of each requirement in your specification</span><a class=\"self-link\" href=\"#requirements-on-authors-and-implementers\"></a></h3>\n   <p>Document both how authors should write good code using your API,\nand how implementers of your API should handle poorly-written code.</p>\n   <p>The web, especially in comparison to other platforms,  is\ndesigned to be robust in accepting poorly-formed markup.\nThis means that web pages which use older versions of web standards\ncan still be viewed in newer user agents,\nand also that authors have a shallower learning curve.</p>\n   <p>To support this,\nweb specification writers need to describe how to interpret\npoorly-formed markup,\nas well as well-formed markup.</p>\n   <p>Implementers need to be able to understand the \"supported language\",\nwhich is more complex than the \"conforming language\"\nwhich authors should be aiming to use.</p>\n   <div class=\"example\" id=\"example-52a8e009\"><a class=\"self-link\" href=\"#example-52a8e009\"></a> For example,\nthe <a href=\"https://html.spec.whatwg.org/multipage/tables.html#table-processing-model\">Processing model</a> for the <code>&lt;table></code> element\nexplains how to process the contents of a <code>&lt;table></code> element,\nincluding cases where the contents do not conform\nto the <a href=\"https://html.spec.whatwg.org/multipage/tables.html#the-table-element:concept-element-content-model\">Content model</a>. </div>\n   <h3 class=\"heading settled\" data-level=\"11.2\" id=\"avoid-ambiguity\"><span class=\"secno\">11.2. </span><span class=\"content\">Specify completely and avoid ambiguity</span><a class=\"self-link\" href=\"#avoid-ambiguity\"></a></h3>\n   <p>When specifying how a feature should work,\nmake sure that there is enough information\nso that authors don’t have to\nwrite different code to work with different implementations.</p>\n   <p>If a specification isn’t specific enough,\nimplementers might make different choices\nwhich force authors to write extra code to handle the differences.</p>\n   <p>Implementers shouldn’t need to check details of other implementations\nto avoid this situation.\nInstead, the specification should be complete and clear enough\non its own.</p>\n   <p class=\"note\" role=\"note\"><span>Note:</span> This doesn’t mean that implementations can’t render things differently,\nor show different user interfaces for things like permission prompts.</p>\n   <p class=\"note\" role=\"note\"><span>Note:</span> Implementers should file bugs against specifications\nwhich don’t give them clear enough information to write the implementation.</p>\n   <h4 class=\"heading settled\" data-level=\"11.2.1\" id=\"algorithms\"><span class=\"secno\">11.2.1. </span><span class=\"content\">Defining algorithms in specifications</span><a class=\"self-link\" href=\"#algorithms\"></a></h4>\n   <p>Write algorithms in a way that is clear and concise.</p>\n   <p>The most common way to write algorithms\nis to write an explicit sequence of steps.\nThis often looks like pseudo-code.</p>\n   <div class=\"example\" id=\"example-5e6a38a5\"><a class=\"self-link\" href=\"#example-5e6a38a5\"></a> The <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/interactive-elements.html#dom-dialog-showmodal\" id=\"ref-for-dom-dialog-showmodal\">showModal()</a></code> method is described as a numbered sequence of steps\nwhich clearly explains when to throw exceptions\nand when to run algorithms defined in other parts of the HTML spec. </div>\n   <p>When writing a sequence of steps,\nimagine that it is a piece of functional code.</p>\n   <ul>\n    <li data-md>\n     <p>Clearly specify the inputs and outputs,\nname the algorithm and the variables it uses well,\nand explicitly note the points in the algorithm where the algorithm may\nreturn a result or error.</p>\n    <li data-md>\n     <p>As much as possible, avoid writing algorithms which have side effects.</p>\n   </ul>\n   <p>Summarize the purpose of the algorithm before going into detail,\nso that readers can decide whether to read the steps or skip over them.\nFor example take the following steps, which ensure that there is at most one pending X\ncallback per top-level browsing context.</p>\n   <p>A plain sequence of steps is not always the best way to write an algorithm.\nFor example, it might make sense to define\nor re-use a formal syntax or grammar\nto avoid repetition,\nor define specific states to be used in a state machine.\nWhen using extra constructs like these,\nthe earlier advice still applies.</p>\n   <p>As much as possible,\ndescribe algorithms as closely as possible to how they would be implemented.\nThis may make the spec harder to write,\nbut it means that implementations don’t need to figure out\nhow to translate what’s written in the specification\nto how it should actually be implemented.\nIn particular, that may mean that different implementations\nmake different decisions\nthat may lead to later features being feasible in one implementation\nbut not another.</p>\n   <p class=\"example\" id=\"example-e379a9a7\"><a class=\"self-link\" href=\"#example-e379a9a7\"></a> CSS selectors are read and understood from left to right,\nbut in practice are matched from right to left in implementations.\nThis allows the most specific term to be matched or not matched\nquickly, avoiding unnecessary work.\nThe CSS selector matching algorithm is written this way,\ninstead of a hypothetical algorithm which would more closely match\nhow CSS selectors are often read by CSS authors. </p>\n   <p>See also:</p>\n   <ul>\n    <li data-md>\n     <p><a href=\"https://infra.spec.whatwg.org/#algorithms\">some useful definitions\nand terminology</a> from <a data-link-type=\"biblio\" href=\"#biblio-infra\">[INFRA]</a></p>\n   </ul>\n   <h4 class=\"heading settled\" data-level=\"11.2.2\" id=\"use-flags-for-states\"><span class=\"secno\">11.2.2. </span><span class=\"content\">Use explicit flags for state</span><a class=\"self-link\" href=\"#use-flags-for-states\"></a></h4>\n   <p>Instead of describing state with words,\nuse explicit flags for state when writing algorithms.</p>\n   <p>Using explicit flags makes it clear\nwhether or not the state changes in different error conditions,\nand makes it clear when the state described by the flags is reset.</p>\n   <h2 class=\"heading settled\" data-level=\"12\" id=\"naming-is-hard\"><span class=\"secno\">12. </span><span class=\"content\">Naming principles</span><a class=\"self-link\" href=\"#naming-is-hard\"></a></h2>\n   <p>Names take meaning from:</p>\n   <ul>\n    <li data-md>\n     <p>signposting (the name itself)</p>\n    <li data-md>\n     <p>use (how people come to understand the name over time)</p>\n    <li data-md>\n     <p>context (the object on the left-hand side, for example)</p>\n   </ul>\n   <h3 class=\"heading settled\" data-level=\"12.1\" id=\"naming-common-words\"><span class=\"secno\">12.1. </span><span class=\"content\">Use common words</span><a class=\"self-link\" href=\"#naming-common-words\"></a></h3>\n   <p>API naming <em>must</em> be done in easily readable US English.\nKeep in mind that most web developers aren’t native English speakers.\nWhenever possible, names should be chosen that use common vocabulary\na majority of English speakers are likely to understand when first encountering the name.</p>\n   <div class=\"example\" id=\"example-d0367763\">\n    <a class=\"self-link\" href=\"#example-d0367763\"></a> \n    <p>For example <code>setSize</code> is\na more English-readable name\nthan <code>cardinality</code>.</p>\n   </div>\n   <p>Value readability over brevity.\nKeep in mind, however, that sometimes\nthe shorter name is the clearer one.\nFor instance,\nit may be appropriate to use technical language or well-known terms of art\nin the specification where the API is defined.</p>\n   <div class=\"example\" id=\"example-3cd78f17\">\n    <a class=\"self-link\" href=\"#example-3cd78f17\"></a> \n    <p>For example,\nthe Fetch API’s <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://fetch.spec.whatwg.org/#body\" id=\"ref-for-body\">Body</a></code> mixin’s <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://fetch.spec.whatwg.org/#dom-body-json\" id=\"ref-for-dom-body-json\">json()</a></code> method\nis named for the kind of object it returns.\nJSON is a well-known term of art\namong web developers likely to use the Fetch API.\nIt would harm comprehension\nto name this API less directly connected to its return type. <a data-link-type=\"biblio\" href=\"#biblio-fetch\">[FETCH]</a></p>\n   </div>\n   <h3 class=\"heading settled\" data-level=\"12.2\" id=\"naming-charset\"><span class=\"secno\">12.2. </span><span class=\"content\">Use ASCII names</span><a class=\"self-link\" href=\"#naming-charset\"></a></h3>\n   <p>Names must adhere to the local language restrictions, for example CSS ident rules etc.\nand <em>should</em> be in the <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#ascii-code-point\" id=\"ref-for-ascii-code-point\">ASCII range</a>.</p>\n   <h3 class=\"heading settled\" data-level=\"12.3\" id=\"naming-consultation\"><span class=\"secno\">12.3. </span><span class=\"content\">Consultation</span><a class=\"self-link\" href=\"#naming-consultation\"></a></h3>\n   <p>Please consult widely on names in your APIs.</p>\n   <p>You may find good names or inspiration in surprising places.</p>\n   <ul>\n    <li data-md>\n     <p>What are similar APIs named on other platforms,\nor in popular libraries in various programming languages?</p>\n    <li data-md>\n     <p>Ask end users and developers what they call\nthings that your API works with or manipulates.</p>\n    <li data-md>\n     <p>Look at other web platform specifications,\nand seek advice from others working in related areas of the platform.</p>\n    <li data-md>\n     <p>Also, consult if the names used are inclusive.</p>\n   </ul>\n   <p>Pay particular attention to advice you receive\nwith clearly-stated rationale based on underlying principles.</p>\n   <div class=\"example\" id=\"example-1f37c106\">\n    <a class=\"self-link\" href=\"#example-1f37c106\"></a> \n    <p>Tantek Çelik <a href=\"https://tantek.com/2011/238/b1/many-ways-slice-url-name-pieces\">extensively researched</a> how to name the various pieces of a URL.\nThe editors of the <a href=\"https://url.spec.whatwg.org\">URL spec</a> have relied on this research\nwhen editing that document. <a data-link-type=\"biblio\" href=\"#biblio-url\">[URL]</a></p>\n   </div>\n   <h4 class=\"no-num no-toc heading settled\" id=\"naming-web-consistency\"><span class=\"content\">Use Web consistent names</span><a class=\"self-link\" href=\"#naming-web-consistency\"></a></h4>\n    When choosing a name for feature or API that has exposure in other technology stacks,\nthe preference should be towards the Web ecosystem naming convention rather than other\ncommunities. \n   <div class=\"example\" id=\"example-2ef86e6f\">\n    <a class=\"self-link\" href=\"#example-2ef86e6f\"></a> \n    <p>The NFC standard uses the term <code>media</code> to refer to what the Web calls <a href=\"https://mimesniff.spec.whatwg.org/#mime-type-representation\">MIME type</a>.\nIn such cases, the naming of features or API for the purposes of Web NFC must prefer\nnaming consistent with <code>MIME type</code>.</p>\n   </div>\n   <h4 class=\"no-num no-toc heading settled\" id=\"naming-inclusive\"><span class=\"content\">Use Inclusive Language</span><a class=\"self-link\" href=\"#naming-inclusive\"></a></h4>\n   <p>Use inclusive language whenever possible.</p>\n   <p>For example,\nyou should use blocklist and allowlist\ninstead of blacklist and whitelist,\nand source and replica\ninstead of master and slave.</p>\n   <p>If you need to refer to a generic persona,\nsuch as an author or user,\nuse the generic pronoun \"they\", \"their\", etc.\nFor example, \"A user may wish to adjust their preferences\".</p>\n   <h3 class=\"heading settled\" data-level=\"12.4\" id=\"naming-future-proofing\"><span class=\"secno\">12.4. </span><span class=\"content\">Future-proofing</span><a class=\"self-link\" href=\"#naming-future-proofing\"></a></h3>\n   <p>Naming should be generic and future-proof whenever possible.</p>\n   <p>The name should not be directly associated with a brand or specific revision of\nthe underlying technology whenever possible; technology becomes obsolete, and\nremoving APIs from the web is difficult.</p>\n   <div class=\"example\" id=\"example-fd8a196a\">\n    <a class=\"self-link\" href=\"#example-fd8a196a\"></a> \n    <p>The Remote Playback API was not named\nafter one of the pre-existing, proprietary systems it was inspired by\n(such as Chromecast or AirPlay).\nInstead, general terms that describe what the API does were chosen. <a data-link-type=\"biblio\" href=\"#biblio-remote-playback\">[REMOTE-PLAYBACK]</a></p>\n   </div>\n   <div class=\"example\" id=\"example-c1204afc\">\n    <a class=\"self-link\" href=\"#example-c1204afc\"></a> \n    <p>The <code>keydown</code> and <code>keyup</code> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/uievents/#keyboardevent\" id=\"ref-for-keyboardevent\">KeyboardEvent</a></code>s were not named\nfor the specific hardware bus that keyboards used at the time.\nInstead, generic names were chosen\nthat are as applicable to today’s Bluetooth and USB keyboards\nas they were to PS/2 and ADB keyboards back then. <a data-link-type=\"biblio\" href=\"#biblio-uievents\">[UIEVENTS]</a></p>\n   </div>\n   <h3 class=\"heading settled\" data-level=\"12.5\" id=\"naming-consistency\"><span class=\"secno\">12.5. </span><span class=\"content\">Consistency</span><a class=\"self-link\" href=\"#naming-consistency\"></a></h3>\n    Naming schemes should aim for consistency, to avoid confusion. \n   <p>Sets of related names should agree with each other in:</p>\n   <ul>\n    <li data-md>\n     <p>part of speech  - noun, verb, etc.</p>\n    <li data-md>\n     <p>negation, for example all of the names in a set should either describe what is allowed\nor they should all describe what is denied</p>\n   </ul>\n   <h4 class=\"no-num no-toc heading settled\" id=\"naming-booleans\"><span class=\"content\">Boolean properties vs.\n  boolean-returning methods</span><a class=\"self-link\" href=\"#naming-booleans\"></a></h4>\n   <p>Boolean properties, options, or API arguments which are asking a question about\ntheir argument <em>should not</em> be prefixed with <code>is</code>, while methods\nthat serve the same purpose, given that it has no side effects, <em>should</em> be\nprefixed with <code>is</code> to be consistent with the rest of the platform.</p>\n   <h4 class=\"no-num no-toc heading settled\" id=\"casing-rules\"><span class=\"content\">Use casing rules consistent with existing APIs</span><a class=\"self-link\" href=\"#casing-rules\"></a></h4>\n   <p>Although they haven’t always been uniformly followed, through the history of web platform API\ndesign, the following rules have emerged:</p>\n   <table class=\"data complex informative\">\n    <thead>\n     <tr>\n      <th>\n      <th>Casing rule\n      <th>Examples\n    <tbody>\n     <tr>\n      <th>Methods and properties<br>(Web IDL attributes, operations, and dictionary keys)\n      <td>Camel case\n      <td><code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#dom-document-createattribute\" id=\"ref-for-dom-document-createattribute\">createAttribute()</a></code><br> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#dom-document-compatmode\" id=\"ref-for-dom-document-compatmode\">compatMode</a></code>\n     <tr>\n      <th>Classes and mixins<br>(Web IDL interfaces)\n      <td>Pascal case\n      <td><code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#namednodemap\" id=\"ref-for-namednodemap\">NamedNodeMap</a></code><br> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#nonelementparentnode\" id=\"ref-for-nonelementparentnode\">NonElementParentNode</a></code>\n     <tr>\n      <th>Initialisms in APIs\n      <td>All caps, except when the first word in a method or property\n      <td><code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#htmlcollection\" id=\"ref-for-htmlcollection②\">HTMLCollection</a></code><br> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://w3c.github.io/DOM-Parsing/#dom-innerhtml-innerhtml\" id=\"ref-for-dom-innerhtml-innerhtml\">innerHTML</a></code><br> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/obsolete.html#dom-document-bgcolor\" id=\"ref-for-dom-document-bgcolor\">bgColor</a></code>\n     <tr>\n      <th>Repeated initialisms in APIs\n      <td>Follow the same rule\n      <td><code class=\"idl\"><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/grouping-content.html#htmlhrelement\" id=\"ref-for-htmlhrelement\">HTMLHRElement</a></code><br> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/webrtc/#dom-rtcdtmfsender\" id=\"ref-for-dom-rtcdtmfsender\">RTCDTMFSender</a></code><br> \n     <tr>\n      <th>The abbreviation of \"identity\"\n      <td><code>Id</code>, except when the first word in a method or property\n      <td><code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#dom-nonelementparentnode-getelementbyid\" id=\"ref-for-dom-nonelementparentnode-getelementbyid\">getElementById()</a></code><br> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/pointerevents3/#dom-pointerevent-pointerid\" id=\"ref-for-dom-pointerevent-pointerid\">pointerId</a></code><br> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://w3c.github.io/webappsec-credential-management/#dom-credential-id\" id=\"ref-for-dom-credential-id\">id</a></code>\n     <tr>\n      <th>Enumeration values\n      <td>Lowercase, dash-delimited\n      <td><code class=\"idl\"><a data-link-type=\"idl\" href=\"https://w3c.github.io/webappsec-referrer-policy/#dom-referrerpolicy-no-referrer-when-downgrade\" id=\"ref-for-dom-referrerpolicy-no-referrer-when-downgrade\">\"no-referrer-when-downgrade\"</a></code>\n     <tr>\n      <th>Events\n      <td>Lowercase, concatenated\n      <td><code><code class=\"idl\"><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/media.html#event-media-canplaythrough\" id=\"ref-for-event-media-canplaythrough\">canplaythrough</a></code><br> <code><code class=\"idl\"><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/indices.html#event-languagechange\" id=\"ref-for-event-languagechange\">languagechange</a></code></code></code>\n     <tr>\n      <th>HTML elements and attributes\n      <td>Lowercase, concatenated\n      <td><code><a data-link-type=\"element\" href=\"https://html.spec.whatwg.org/multipage/grouping-content.html#the-figcaption-element\" id=\"ref-for-the-figcaption-element\">figcaption</a></code><br> <a href=\"https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#attr-fe-maxlength\">maxlength</a>\n     <tr>\n      <th>JSON keys\n      <td>Lowercase, underscore-delimited\n      <td><a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/appmanifest/#dfn-short_name\" id=\"ref-for-dfn-short_name\">short_name</a>\n   </table>\n   <div class=\"non-normative\">\n     Note that in particular, when a HTML attribute is <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/common-dom-interfaces.html#reflect\" id=\"ref-for-reflect①\">reflected</a> as a property, the attribute\nand property’s casings won’t necessarily match. For example, the HTML attribute <code><a data-link-type=\"element-sub\" href=\"https://html.spec.whatwg.org/multipage/embedded-content.html#attr-img-ismap\" id=\"ref-for-attr-img-ismap\">ismap</a></code> on <code><a data-link-type=\"element\" href=\"https://html.spec.whatwg.org/multipage/embedded-content.html#the-img-element\" id=\"ref-for-the-img-element\">img</a></code> elements is <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/common-dom-interfaces.html#reflect\" id=\"ref-for-reflect②\">reflected</a> as the <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/embedded-content.html#dom-img-ismap\" id=\"ref-for-dom-img-ismap\">isMap</a></code> property on <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/embedded-content.html#htmlimageelement\" id=\"ref-for-htmlimageelement\">HTMLImageElement</a></code>. \n    <p>The rules for JSON keys are meant to apply to specific JSON file formats sent over HTTP\nor stored on disk, and don’t apply to the general notion of JavaScript object keys.</p>\n    <p>Repeated initialisms are particularly non-uniform throughout the platform. Infamous historical\nexamples that violate the above rules are <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://xhr.spec.whatwg.org/#xmlhttprequest\" id=\"ref-for-xmlhttprequest①\">XMLHttpRequest</a></code> and <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/semantics.html#htmlhtmlelement\" id=\"ref-for-htmlhtmlelement\">HTMLHtmlElement</a></code>. Don’t follow their example; instead always capitalize your\ninitialisms, even if they are repeated.</p>\n   </div>\n   <h3 class=\"heading settled\" data-level=\"12.6\" id=\"naming-unsafe\"><span class=\"secno\">12.6. </span><span class=\"content\">Warning about dangerous features</span><a class=\"self-link\" href=\"#naming-unsafe\"></a></h3>\n   <p>Where possible, mark features that weaken\nthe guarantees provided to developers\nby making their names start with \"unsafe\" so that this is more noticeable.</p>\n   <p>For example, <a href=\"https://w3c.github.io/webappsec-csp/\">Content Security Policy (CSP)</a> provides protection against certain types of content injection vulnerabilities.\nCSP also provides features that weaken this guarantee,\nsuch as the <code>unsafe-inline</code> keyword,\nwhich reduces CSP’s own protections by allowing inline scripts.</p>\n   <h3 class=\"heading settled\" data-level=\"12.7\" id=\"writing-resources\"><span class=\"secno\">12.7. </span><span class=\"content\">Other resources</span><a class=\"self-link\" href=\"#writing-resources\"></a></h3>\n   <p>Some useful advice on how to write specifications is available elsewhere:</p>\n   <ul>\n    <li data-md>\n     <p><a href=\"https://ln.hixie.ch/?start=1140242962&amp;count=1\">Writing\nspecifications: Kinds of statements</a> (Ian Hickson, 2006)</p>\n    <li data-md>\n     <p><a href=\"https://www.w3.org/TR/qaframe-spec/\">QA Framework:\nSpecification Guidelines</a> (W3C QA Working Group, 2005)</p>\n    <li data-md>\n     <p><a href=\"https://w3c.github.io/privacy-considerations/\">Privacy Considerations for Web Protocols</a></p>\n    <li data-md>\n     <p><a href=\"https://www.w3.org/TR/security-privacy-questionnaire/\">Self-Review Questionnaire: Security and Privacy</a></p>\n    <li data-md>\n     <p><a href=\"https://w3c.github.io/apa/fast/\">Web Technology Accessibility Guidelines</a></p>\n    <li data-md>\n     <p><a href=\"https://w3c.github.io/bp-i18n-specdev/\">Internationalization Best Practices for Spec Developers</a></p>\n   </ul>\n   <h2 class=\"no-num heading settled\" id=\"acks\"><span class=\"content\">Acknowledgments</span><a class=\"self-link\" href=\"#acks\"></a></h2>\n   <p>This document consists of\nprinciples which have been collected\nby TAG members past and present\nduring TAG <a href=\"https://github.com/w3ctag/design-reviews/\">design reviews</a>.\nWe are indebted to everyone who has requested a design review from us.</p>\n   <p>The TAG would like to thank\nAdrian Hope-Bailie,\nAlan Stearns,\nAleksandar Totic,\nAlex Russell,\nAndreas Stöckel,\nAndrew Betts,\nAnne van Kesteren,\nBenjamin C. Wiley Sittler,\nBoris Zbarsky,\nBrian Kardell,\nCharles McCathieNevile,\nChris Wilson,\nDan Connolly,\nDaniel Ehrenberg,\nDaniel Murphy,\nDomenic Denicola,\nEiji Kitamura,\nEric Shepherd,\nEthan Resnick,\nfantasai,\nFrançois Daoust,\nHenri Sivonen,\nHE Shi-Jun,\nIan Hickson,\nIrene Knapp,\nJake Archibald,\nJeffrey Yasskin,\nJeremy Roman,\nJirka Kosek,\nKevin Marks,\nLachlan Hunt,\nLéonie Watson,\nL. Le Meur,\nLukasz Olejnik,\nMaciej Stachowiak,\nMarcos Cáceres,\nMark Nottingham,\nMartin Thomson,\nMatt Giuca,\nMatt Wolenetz,\nMichael[tm] Smith,\nMike West,\nNick Doty,\nNigel Megitt,\nNik Thierry,\nOjan Vafai,\nOlli Pettay,\nPete Snyder,\nPhilip Jägenstedt,\nPhilip Taylor,\nReilly Grant,\nRichard Ishida,\nRick Byers,\nRyan Sleevi,\nSergey Konstantinov,\nStefan Zager,\nStephen Stewart,\nSteven Faulkner,\nSurma,\nTab Atkins-Bittner,\nTantek Çelik,\nTobie Langel,\nTravis Leithead,\nand\nYoav Weiss\nfor their contributions to this &amp; the <a href=\"https://www.w3.org/TR/html-design-principles/\">HTML Design Principles</a> document which preceded it.</p>\n   <p>Special thanks to\nAnne van Kesteren\nand\nMaciej Stachowiak,\nwho edited the <a href=\"https://www.w3.org/TR/html-design-principles/\">HTML Design Principles</a> document.</p>\n   <p>If you contributed to this document\nbut your name is not listed above,\nplease let the editors know\nso they can correct this omission.</p>\n  </main>\n  <div data-fill-with=\"conformance\">\n   <h2 class=\"no-ref no-num heading settled\" id=\"w3c-conformance\"><span class=\"content\">Conformance</span><a class=\"self-link\" href=\"#w3c-conformance\"></a></h2>\n   <h3 class=\"no-ref no-num heading settled\" id=\"w3c-conventions\"><span class=\"content\">Document conventions</span><a class=\"self-link\" href=\"#w3c-conventions\"></a></h3>\n   <p>Conformance requirements are expressed\n    with a combination of descriptive assertions\n    and RFC 2119 terminology.\n    The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL”\n    in the normative parts of this document\n    are to be interpreted as described in RFC 2119.\n    However, for readability,\n    these words do not appear in all uppercase letters in this specification. </p>\n   <p>All of the text of this specification is normative\n    except sections explicitly marked as non-normative, examples, and notes. <a data-link-type=\"biblio\" href=\"#biblio-rfc2119\">[RFC2119]</a> </p>\n   <p>Examples in this specification are introduced with the words “for example”\n    or are set apart from the normative text\n    with <code>class=\"example\"</code>,\n    like this: </p>\n   <div class=\"example\" id=\"w3c-example\">\n    <a class=\"self-link\" href=\"#w3c-example\"></a> \n    <p>This is an example of an informative example. </p>\n   </div>\n   <p>Informative notes begin with the word “Note”\n    and are set apart from the normative text\n    with <code>class=\"note\"</code>,\n    like this: </p>\n   <p class=\"note\" role=\"note\">Note, this is an informative note. </p>\n   <h3 class=\"no-ref no-num heading settled\" id=\"w3c-conformant-algorithms\"><span class=\"content\">Conformant Algorithms</span><a class=\"self-link\" href=\"#w3c-conformant-algorithms\"></a></h3>\n   <p>Requirements phrased in the imperative as part of algorithms\n    (such as \"strip any leading space characters\"\n    or \"return false and abort these steps\")\n    are to be interpreted with the meaning of the key word\n    (\"must\", \"should\", \"may\", etc)\n    used in introducing the algorithm. </p>\n   <p>Conformance requirements phrased as algorithms or specific steps\n    can be implemented in any manner,\n    so long as the end result is equivalent.\n    In particular, the algorithms defined in this specification\n    are intended to be easy to understand\n    and are not intended to be performant.\n    Implementers are encouraged to optimize. </p>\n  </div>\n<script src=\"https://www.w3.org/scripts/TR/2021/fixup.js\"></script>\n  <h2 class=\"no-num no-ref heading settled\" id=\"index\"><span class=\"content\">Index</span><a class=\"self-link\" href=\"#index\"></a></h2>\n  <h3 class=\"no-num no-ref heading settled\" id=\"index-defined-here\"><span class=\"content\">Terms defined by this specification</span><a class=\"self-link\" href=\"#index-defined-here\"></a></h3>\n  <ul class=\"index\">\n   <li><a href=\"#live-object\">live object</a><span>, in § 6.2</span>\n   <li><a href=\"#static-object\">static object</a><span>, in § 6.2</span>\n  </ul>\n  <aside class=\"dfn-panel\" data-for=\"term-for-dfn-short_name\">\n   <a href=\"https://www.w3.org/TR/appmanifest/#dfn-short_name\">https://www.w3.org/TR/appmanifest/#dfn-short_name</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-dfn-short_name\">Use casing rules consistent with existing APIs</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-dom-credential-id\">\n   <a href=\"https://w3c.github.io/webappsec-credential-management/#dom-credential-id\">https://w3c.github.io/webappsec-credential-management/#dom-credential-id</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-dom-credential-id\">Use casing rules consistent with existing APIs</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-propdef-background-image\">\n   <a href=\"https://drafts.csswg.org/css-backgrounds-3/#propdef-background-image\">https://drafts.csswg.org/css-backgrounds-3/#propdef-background-image</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-propdef-background-image\">4.2. Make appropriate choices for whether CSS properties are inherited</a> <a href=\"#ref-for-propdef-background-image①\">(2)</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-actual-value\">\n   <a href=\"https://drafts.csswg.org/css-cascade-5/#actual-value\">https://drafts.csswg.org/css-cascade-5/#actual-value</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-actual-value\">4.3. Choose the computed value type based on how the property should inherit</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-computed-value\">\n   <a href=\"https://drafts.csswg.org/css-cascade-5/#computed-value\">https://drafts.csswg.org/css-cascade-5/#computed-value</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-computed-value\">4.3. Choose the computed value type based on how the property should inherit</a> <a href=\"#ref-for-computed-value①\">(2)</a> <a href=\"#ref-for-computed-value②\">(3)</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-inheritance\">\n   <a href=\"https://drafts.csswg.org/css-cascade-5/#inheritance\">https://drafts.csswg.org/css-cascade-5/#inheritance</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-inheritance\">4.3. Choose the computed value type based on how the property should inherit</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-used-value\">\n   <a href=\"https://drafts.csswg.org/css-cascade-5/#used-value\">https://drafts.csswg.org/css-cascade-5/#used-value</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-used-value\">4.3. Choose the computed value type based on how the property should inherit</a> <a href=\"#ref-for-used-value①\">(2)</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-at-ruledef-supports\">\n   <a href=\"https://drafts.csswg.org/css-conditional-3/#at-ruledef-supports\">https://drafts.csswg.org/css-conditional-3/#at-ruledef-supports</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-at-ruledef-supports\">2.5. New features should be detectable</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-propdef-font-size\">\n   <a href=\"https://drafts.csswg.org/css-fonts-4/#propdef-font-size\">https://drafts.csswg.org/css-fonts-4/#propdef-font-size</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-propdef-font-size\">4.2. Make appropriate choices for whether CSS properties are inherited</a> <a href=\"#ref-for-propdef-font-size①\">(2)</a> <a href=\"#ref-for-propdef-font-size②\">(3)</a>\n    <li><a href=\"#ref-for-propdef-font-size③\">4.3. Choose the computed value type based on how the property should inherit</a> <a href=\"#ref-for-propdef-font-size④\">(2)</a> <a href=\"#ref-for-propdef-font-size⑤\">(3)</a> <a href=\"#ref-for-propdef-font-size⑥\">(4)</a> <a href=\"#ref-for-propdef-font-size⑦\">(5)</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-propdef-initial-letter\">\n   <a href=\"https://drafts.csswg.org/css-inline-3/#propdef-initial-letter\">https://drafts.csswg.org/css-inline-3/#propdef-initial-letter</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-propdef-initial-letter\">4.1. Separate CSS properties based on what should cascade separately</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-propdef-initial-letter-align\">\n   <a href=\"https://drafts.csswg.org/css-inline-3/#propdef-initial-letter-align\">https://drafts.csswg.org/css-inline-3/#propdef-initial-letter-align</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-propdef-initial-letter-align\">4.1. Separate CSS properties based on what should cascade separately</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-length-value\">\n   <a href=\"https://drafts.csswg.org/css-values-4/#length-value\">https://drafts.csswg.org/css-values-4/#length-value</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-length-value\">4.3. Choose the computed value type based on how the property should inherit</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-number-value\">\n   <a href=\"https://drafts.csswg.org/css-values-4/#number-value\">https://drafts.csswg.org/css-values-4/#number-value</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-number-value\">4.3. Choose the computed value type based on how the property should inherit</a> <a href=\"#ref-for-number-value①\">(2)</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-propdef-line-height\">\n   <a href=\"https://drafts.csswg.org/css2/#propdef-line-height\">https://drafts.csswg.org/css2/#propdef-line-height</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-propdef-line-height\">4.3. Choose the computed value type based on how the property should inherit</a> <a href=\"#ref-for-propdef-line-height①\">(2)</a> <a href=\"#ref-for-propdef-line-height②\">(3)</a> <a href=\"#ref-for-propdef-line-height③\">(4)</a> <a href=\"#ref-for-propdef-line-height④\">(5)</a> <a href=\"#ref-for-propdef-line-height⑤\">(6)</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-dom-window-getcomputedstyle\">\n   <a href=\"https://drafts.csswg.org/cssom-1/#dom-window-getcomputedstyle\">https://drafts.csswg.org/cssom-1/#dom-window-getcomputedstyle</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-dom-window-getcomputedstyle\">4.3. Choose the computed value type based on how the property should inherit</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-resolved-value\">\n   <a href=\"https://drafts.csswg.org/cssom-1/#resolved-value\">https://drafts.csswg.org/cssom-1/#resolved-value</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-resolved-value\">4.3. Choose the computed value type based on how the property should inherit</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-dom-element-getboundingclientrect\">\n   <a href=\"https://drafts.csswg.org/cssom-view-1/#dom-element-getboundingclientrect\">https://drafts.csswg.org/cssom-view-1/#dom-element-getboundingclientrect</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-dom-element-getboundingclientrect\">6.1. Attributes should behave like data properties</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-dom-htmlelement-offsettop\">\n   <a href=\"https://drafts.csswg.org/cssom-view-1/#dom-htmlelement-offsettop\">https://drafts.csswg.org/cssom-view-1/#dom-htmlelement-offsettop</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-dom-htmlelement-offsettop\">6.1. Attributes should behave like data properties</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-abortcontroller\">\n   <a href=\"https://dom.spec.whatwg.org/#abortcontroller\">https://dom.spec.whatwg.org/#abortcontroller</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-abortcontroller\">6.10. Cancel asynchronous APIs/operations using AbortSignal</a>\n    <li><a href=\"#ref-for-abortcontroller①\">7.6. Guard against potential recursion</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-abortsignal\">\n   <a href=\"https://dom.spec.whatwg.org/#abortsignal\">https://dom.spec.whatwg.org/#abortsignal</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-abortsignal\">6.10. Cancel asynchronous APIs/operations using AbortSignal</a>\n    <li><a href=\"#ref-for-abortsignal①\">7.6. Guard against potential recursion</a> <a href=\"#ref-for-abortsignal②\">(2)</a> <a href=\"#ref-for-abortsignal③\">(3)</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-domtokenlist\">\n   <a href=\"https://dom.spec.whatwg.org/#domtokenlist\">https://dom.spec.whatwg.org/#domtokenlist</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-domtokenlist\">6.7. Classes should have constructors when possible</a> <a href=\"#ref-for-domtokenlist①\">(2)</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-element\">\n   <a href=\"https://dom.spec.whatwg.org/#element\">https://dom.spec.whatwg.org/#element</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-element\">6.7. Classes should have constructors when possible</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-event\">\n   <a href=\"https://dom.spec.whatwg.org/#event\">https://dom.spec.whatwg.org/#event</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-event\">6.7. Classes should have constructors when possible</a> <a href=\"#ref-for-event①\">(2)</a>\n    <li><a href=\"#ref-for-event②\">7.6. Guard against potential recursion</a>\n    <li><a href=\"#ref-for-event③\">7.7. State and Event subclasses</a> <a href=\"#ref-for-event④\">(2)</a> <a href=\"#ref-for-event⑤\">(3)</a>\n    <li><a href=\"#ref-for-event⑥\">7.8. How to decide between Events and Observers</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-eventtarget\">\n   <a href=\"https://dom.spec.whatwg.org/#eventtarget\">https://dom.spec.whatwg.org/#eventtarget</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-eventtarget\">7.8. How to decide between Events and Observers</a> <a href=\"#ref-for-eventtarget①\">(2)</a> <a href=\"#ref-for-eventtarget②\">(3)</a> <a href=\"#ref-for-eventtarget③\">(4)</a> <a href=\"#ref-for-eventtarget④\">(5)</a> <a href=\"#ref-for-eventtarget⑤\">(6)</a> <a href=\"#ref-for-eventtarget⑥\">(7)</a> <a href=\"#ref-for-eventtarget⑦\">(8)</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-htmlcollection\">\n   <a href=\"https://dom.spec.whatwg.org/#htmlcollection\">https://dom.spec.whatwg.org/#htmlcollection</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-htmlcollection\">5.3. Don’t expose garbage collection</a> <a href=\"#ref-for-htmlcollection①\">(2)</a>\n    <li><a href=\"#ref-for-htmlcollection②\">Use casing rules consistent with existing APIs</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-mutationobserver\">\n   <a href=\"https://dom.spec.whatwg.org/#mutationobserver\">https://dom.spec.whatwg.org/#mutationobserver</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-mutationobserver\">7.8. How to decide between Events and Observers</a> <a href=\"#ref-for-mutationobserver①\">(2)</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-namednodemap\">\n   <a href=\"https://dom.spec.whatwg.org/#namednodemap\">https://dom.spec.whatwg.org/#namednodemap</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-namednodemap\">Use casing rules consistent with existing APIs</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-node\">\n   <a href=\"https://dom.spec.whatwg.org/#node\">https://dom.spec.whatwg.org/#node</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-node\">Live objects</a>\n    <li><a href=\"#ref-for-node①\">7.8. How to decide between Events and Observers</a> <a href=\"#ref-for-node②\">(2)</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-nonelementparentnode\">\n   <a href=\"https://dom.spec.whatwg.org/#nonelementparentnode\">https://dom.spec.whatwg.org/#nonelementparentnode</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-nonelementparentnode\">Use casing rules consistent with existing APIs</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-dom-abortcontroller-abort\">\n   <a href=\"https://dom.spec.whatwg.org/#dom-abortcontroller-abort\">https://dom.spec.whatwg.org/#dom-abortcontroller-abort</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-dom-abortcontroller-abort\">6.10. Cancel asynchronous APIs/operations using AbortSignal</a>\n    <li><a href=\"#ref-for-dom-abortcontroller-abort①\">7.6. Guard against potential recursion</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-abortsignal-add\">\n   <a href=\"https://dom.spec.whatwg.org/#abortsignal-add\">https://dom.spec.whatwg.org/#abortsignal-add</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-abortsignal-add\">7.6. Guard against potential recursion</a> <a href=\"#ref-for-abortsignal-add①\">(2)</a> <a href=\"#ref-for-abortsignal-add②\">(3)</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-dom-eventtarget-addeventlistener\">\n   <a href=\"https://dom.spec.whatwg.org/#dom-eventtarget-addeventlistener\">https://dom.spec.whatwg.org/#dom-eventtarget-addeventlistener</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-dom-eventtarget-addeventlistener\">6.5. Make method arguments optional if possible</a>\n    <li><a href=\"#ref-for-dom-eventtarget-addeventlistener①\">6.6. Naming optional arguments</a>\n    <li><a href=\"#ref-for-dom-eventtarget-addeventlistener②\">7.8. How to decide between Events and Observers</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-dom-document-compatmode\">\n   <a href=\"https://dom.spec.whatwg.org/#dom-document-compatmode\">https://dom.spec.whatwg.org/#dom-document-compatmode</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-dom-document-compatmode\">Use casing rules consistent with existing APIs</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-dom-document-createattribute\">\n   <a href=\"https://dom.spec.whatwg.org/#dom-document-createattribute\">https://dom.spec.whatwg.org/#dom-document-createattribute</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-dom-document-createattribute\">Use casing rules consistent with existing APIs</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-dom-document-createelement\">\n   <a href=\"https://dom.spec.whatwg.org/#dom-document-createelement\">https://dom.spec.whatwg.org/#dom-document-createelement</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-dom-document-createelement\">6.7. Classes should have constructors when possible</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-concept-event-fire\">\n   <a href=\"https://dom.spec.whatwg.org/#concept-event-fire\">https://dom.spec.whatwg.org/#concept-event-fire</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-concept-event-fire\">7.6. Guard against potential recursion</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-dom-nonelementparentnode-getelementbyid\">\n   <a href=\"https://dom.spec.whatwg.org/#dom-nonelementparentnode-getelementbyid\">https://dom.spec.whatwg.org/#dom-nonelementparentnode-getelementbyid</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-dom-nonelementparentnode-getelementbyid\">Use casing rules consistent with existing APIs</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-dom-document-getelementsbytagname\">\n   <a href=\"https://dom.spec.whatwg.org/#dom-document-getelementsbytagname\">https://dom.spec.whatwg.org/#dom-document-getelementsbytagname</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-dom-document-getelementsbytagname\">5.3. Don’t expose garbage collection</a> <a href=\"#ref-for-dom-document-getelementsbytagname①\">(2)</a> <a href=\"#ref-for-dom-document-getelementsbytagname②\">(3)</a>\n    <li><a href=\"#ref-for-dom-document-getelementsbytagname③\">Static objects</a> <a href=\"#ref-for-dom-document-getelementsbytagname④\">(2)</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-dom-addeventlisteneroptions-once\">\n   <a href=\"https://dom.spec.whatwg.org/#dom-addeventlisteneroptions-once\">https://dom.spec.whatwg.org/#dom-addeventlisteneroptions-once</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-dom-addeventlisteneroptions-once\">7.8. How to decide between Events and Observers</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-dom-parentnode-queryselectorall\">\n   <a href=\"https://dom.spec.whatwg.org/#dom-parentnode-queryselectorall\">https://dom.spec.whatwg.org/#dom-parentnode-queryselectorall</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-dom-parentnode-queryselectorall\">Static objects</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-abortsignal-remove\">\n   <a href=\"https://dom.spec.whatwg.org/#abortsignal-remove\">https://dom.spec.whatwg.org/#abortsignal-remove</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-abortsignal-remove\">7.6. Guard against potential recursion</a> <a href=\"#ref-for-abortsignal-remove①\">(2)</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-abortsignal-signal-abort\">\n   <a href=\"https://dom.spec.whatwg.org/#abortsignal-signal-abort\">https://dom.spec.whatwg.org/#abortsignal-signal-abort</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-abortsignal-signal-abort\">7.6. Guard against potential recursion</a> <a href=\"#ref-for-abortsignal-signal-abort①\">(2)</a> <a href=\"#ref-for-abortsignal-signal-abort②\">(3)</a> <a href=\"#ref-for-abortsignal-signal-abort③\">(4)</a> <a href=\"#ref-for-abortsignal-signal-abort④\">(5)</a> <a href=\"#ref-for-abortsignal-signal-abort⑤\">(6)</a> <a href=\"#ref-for-abortsignal-signal-abort⑥\">(7)</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-dom-event-target\">\n   <a href=\"https://dom.spec.whatwg.org/#dom-event-target\">https://dom.spec.whatwg.org/#dom-event-target</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-dom-event-target\">7.7. State and Event subclasses</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-dom-innerhtml-innerhtml\">\n   <a href=\"https://w3c.github.io/DOM-Parsing/#dom-innerhtml-innerhtml\">https://w3c.github.io/DOM-Parsing/#dom-innerhtml-innerhtml</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-dom-innerhtml-innerhtml\">Use casing rules consistent with existing APIs</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-sec-bigint-objects\">\n   <a href=\"https://tc39.github.io/ecma262/#sec-bigint-objects\">https://tc39.github.io/ecma262/#sec-bigint-objects</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-sec-bigint-objects\">8.1. Use numeric types appropriately</a> <a href=\"#ref-for-sec-bigint-objects①\">(2)</a> <a href=\"#ref-for-sec-bigint-objects②\">(3)</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-sec-date-objects\">\n   <a href=\"https://tc39.github.io/ecma262/#sec-date-objects\">https://tc39.github.io/ecma262/#sec-date-objects</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-sec-date-objects\">8.3. Use milliseconds for time measurement</a>\n    <li><a href=\"#ref-for-sec-date-objects①\">8.4. Use the appropriate type to represent times and dates</a> <a href=\"#ref-for-sec-date-objects②\">(2)</a> <a href=\"#ref-for-sec-date-objects③\">(3)</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-sec-error-objects\">\n   <a href=\"https://tc39.github.io/ecma262/#sec-error-objects\">https://tc39.github.io/ecma262/#sec-error-objects</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-sec-error-objects\">8.5. Use Error or DOMException for errors</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-sec-finalization-registry-objects\">\n   <a href=\"https://tc39.github.io/ecma262/#sec-finalization-registry-objects\">https://tc39.github.io/ecma262/#sec-finalization-registry-objects</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-sec-finalization-registry-objects\">5.3. Don’t expose garbage collection</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-sec-number-objects\">\n   <a href=\"https://tc39.github.io/ecma262/#sec-number-objects\">https://tc39.github.io/ecma262/#sec-number-objects</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-sec-number-objects\">8.1. Use numeric types appropriately</a> <a href=\"#ref-for-sec-number-objects①\">(2)</a> <a href=\"#ref-for-sec-number-objects②\">(3)</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-sec-weak-ref-objects\">\n   <a href=\"https://tc39.github.io/ecma262/#sec-weak-ref-objects\">https://tc39.github.io/ecma262/#sec-weak-ref-objects</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-sec-weak-ref-objects\">5.3. Don’t expose garbage collection</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-body\">\n   <a href=\"https://fetch.spec.whatwg.org/#body\">https://fetch.spec.whatwg.org/#body</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-body\">12.1. Use common words</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-dom-body-json\">\n   <a href=\"https://fetch.spec.whatwg.org/#dom-body-json\">https://fetch.spec.whatwg.org/#dom-body-json</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-dom-body-json\">12.1. Use common words</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-dom-domhighrestimestamp\">\n   <a href=\"https://www.w3.org/TR/hr-time-2/#dom-domhighrestimestamp\">https://www.w3.org/TR/hr-time-2/#dom-domhighrestimestamp</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-dom-domhighrestimestamp\">8.4. Use the appropriate type to represent times and dates</a> <a href=\"#ref-for-dom-domhighrestimestamp①\">(2)</a> <a href=\"#ref-for-dom-domhighrestimestamp②\">(3)</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-broadcastchannel\">\n   <a href=\"https://html.spec.whatwg.org/multipage/web-messaging.html#broadcastchannel\">https://html.spec.whatwg.org/multipage/web-messaging.html#broadcastchannel</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-broadcastchannel\">2.10.3. Omit non-fully active documents from APIs that span multiple documents</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-eventhandler\">\n   <a href=\"https://html.spec.whatwg.org/multipage/webappapis.html#eventhandler\">https://html.spec.whatwg.org/multipage/webappapis.html#eventhandler</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-eventhandler\">7.4. Always add event handler attributes</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-globaleventhandlers\">\n   <a href=\"https://html.spec.whatwg.org/multipage/webappapis.html#globaleventhandlers\">https://html.spec.whatwg.org/multipage/webappapis.html#globaleventhandlers</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-globaleventhandlers\">7.4. Always add event handler attributes</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-htmlhrelement\">\n   <a href=\"https://html.spec.whatwg.org/multipage/grouping-content.html#htmlhrelement\">https://html.spec.whatwg.org/multipage/grouping-content.html#htmlhrelement</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-htmlhrelement\">Use casing rules consistent with existing APIs</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-htmlhtmlelement\">\n   <a href=\"https://html.spec.whatwg.org/multipage/semantics.html#htmlhtmlelement\">https://html.spec.whatwg.org/multipage/semantics.html#htmlhtmlelement</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-htmlhtmlelement\">Use casing rules consistent with existing APIs</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-htmlimageelement\">\n   <a href=\"https://html.spec.whatwg.org/multipage/embedded-content.html#htmlimageelement\">https://html.spec.whatwg.org/multipage/embedded-content.html#htmlimageelement</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-htmlimageelement\">Use casing rules consistent with existing APIs</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-history-3\">\n   <a href=\"https://html.spec.whatwg.org/multipage/history.html#history-3\">https://html.spec.whatwg.org/multipage/history.html#history-3</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-history-3\">6.7. Classes should have constructors when possible</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-imagebitmap\">\n   <a href=\"https://html.spec.whatwg.org/multipage/imagebitmap-and-animations.html#imagebitmap\">https://html.spec.whatwg.org/multipage/imagebitmap-and-animations.html#imagebitmap</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-imagebitmap\">6.7. Classes should have constructors when possible</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-navigator\">\n   <a href=\"https://html.spec.whatwg.org/multipage/system-state.html#navigator\">https://html.spec.whatwg.org/multipage/system-state.html#navigator</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-navigator\">6.7. Classes should have constructors when possible</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-window\">\n   <a href=\"https://html.spec.whatwg.org/multipage/window-object.html#window\">https://html.spec.whatwg.org/multipage/window-object.html#window</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#termref-for-window\">2.8. Consider how your API should behave in private browsing mode</a>\n    <li><a href=\"#ref-for-window\">6.7. Classes should have constructors when possible</a>\n    <li><a href=\"#ref-for-window①\">7.4. Always add event handler attributes</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-windoweventhandlers\">\n   <a href=\"https://html.spec.whatwg.org/multipage/webappapis.html#windoweventhandlers\">https://html.spec.whatwg.org/multipage/webappapis.html#windoweventhandlers</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-windoweventhandlers\">7.4. Always add event handler attributes</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-dom-alert-noargs\">\n   <a href=\"https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-alert-noargs\">https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-alert-noargs</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-dom-alert-noargs\">1.3. Trusted user interface should be trustworthy</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-dom-document-bgcolor\">\n   <a href=\"https://html.spec.whatwg.org/multipage/obsolete.html#dom-document-bgcolor\">https://html.spec.whatwg.org/multipage/obsolete.html#dom-document-bgcolor</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-dom-document-bgcolor\">Use casing rules consistent with existing APIs</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-the-button-element\">\n   <a href=\"https://html.spec.whatwg.org/multipage/form-elements.html#the-button-element\">https://html.spec.whatwg.org/multipage/form-elements.html#the-button-element</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-the-button-element\">3.1. Re-use attribute names (only) for similar functionality</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-event-media-canplaythrough\">\n   <a href=\"https://html.spec.whatwg.org/multipage/media.html#event-media-canplaythrough\">https://html.spec.whatwg.org/multipage/media.html#event-media-canplaythrough</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-event-media-canplaythrough\">Use casing rules consistent with existing APIs</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-dom-createimagebitmap\">\n   <a href=\"https://html.spec.whatwg.org/multipage/imagebitmap-and-animations.html#dom-createimagebitmap\">https://html.spec.whatwg.org/multipage/imagebitmap-and-animations.html#dom-createimagebitmap</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-dom-createimagebitmap\">6.7. Classes should have constructors when possible</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-custom-element\">\n   <a href=\"https://html.spec.whatwg.org/multipage/custom-elements.html#custom-element\">https://html.spec.whatwg.org/multipage/custom-elements.html#custom-element</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-custom-element\">6.7. Classes should have constructors when possible</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-dom-customelementregistry-define\">\n   <a href=\"https://html.spec.whatwg.org/multipage/custom-elements.html#dom-customelementregistry-define\">https://html.spec.whatwg.org/multipage/custom-elements.html#dom-customelementregistry-define</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-dom-customelementregistry-define\">5.1. Web APIs are for JavaScript</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-the-details-element\">\n   <a href=\"https://html.spec.whatwg.org/multipage/interactive-elements.html#the-details-element\">https://html.spec.whatwg.org/multipage/interactive-elements.html#the-details-element</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-the-details-element\">3.1. Re-use attribute names (only) for similar functionality</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-the-dialog-element\">\n   <a href=\"https://html.spec.whatwg.org/multipage/interactive-elements.html#the-dialog-element\">https://html.spec.whatwg.org/multipage/interactive-elements.html#the-dialog-element</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-the-dialog-element\">3.1. Re-use attribute names (only) for similar functionality</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-discard-a-document\">\n   <a href=\"https://html.spec.whatwg.org/multipage/window-object.html#discard-a-document\">https://html.spec.whatwg.org/multipage/window-object.html#discard-a-document</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-discard-a-document\">2.10.4. Discard non-fully active documents for situations that can’t be supported</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-event-handler-idl-attributes\">\n   <a href=\"https://html.spec.whatwg.org/multipage/webappapis.html#event-handler-idl-attributes\">https://html.spec.whatwg.org/multipage/webappapis.html#event-handler-idl-attributes</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-event-handler-idl-attributes\">7.4. Always add event handler attributes</a> <a href=\"#ref-for-event-handler-idl-attributes①\">(2)</a> <a href=\"#ref-for-event-handler-idl-attributes②\">(3)</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-event-loop\">\n   <a href=\"https://html.spec.whatwg.org/multipage/webappapis.html#event-loop\">https://html.spec.whatwg.org/multipage/webappapis.html#event-loop</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-event-loop\">5.2. Preserve run-to-completion semantics</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-the-figcaption-element\">\n   <a href=\"https://html.spec.whatwg.org/multipage/grouping-content.html#the-figcaption-element\">https://html.spec.whatwg.org/multipage/grouping-content.html#the-figcaption-element</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-the-figcaption-element\">Use casing rules consistent with existing APIs</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-attr-label-for\">\n   <a href=\"https://html.spec.whatwg.org/multipage/forms.html#attr-label-for\">https://html.spec.whatwg.org/multipage/forms.html#attr-label-for</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-attr-label-for\">3.1. Re-use attribute names (only) for similar functionality</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-fully-active\">\n   <a href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\">https://html.spec.whatwg.org/multipage/browsers.html#fully-active</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-fully-active\">2.10. Support non-\"fully active\" documents</a> <a href=\"#ref-for-fully-active①\">(2)</a> <a href=\"#ref-for-fully-active②\">(3)</a> <a href=\"#ref-for-fully-active③\">(4)</a> <a href=\"#ref-for-fully-active④\">(5)</a>\n    <li><a href=\"#ref-for-fully-active⑤\">2.10.1. Gate actions with fully active checks</a> <a href=\"#ref-for-fully-active⑥\">(2)</a> <a href=\"#ref-for-fully-active⑦\">(3)</a> <a href=\"#ref-for-fully-active⑧\">(4)</a> <a href=\"#ref-for-fully-active⑨\">(5)</a> <a href=\"#ref-for-fully-active①⓪\">(6)</a> <a href=\"#ref-for-fully-active①①\">(7)</a>\n    <li><a href=\"#ref-for-fully-active①②\">2.10.2. Listen for changes to fully active status</a> <a href=\"#ref-for-fully-active①③\">(2)</a> <a href=\"#ref-for-fully-active①④\">(3)</a> <a href=\"#ref-for-fully-active①⑤\">(4)</a> <a href=\"#ref-for-fully-active①⑥\">(5)</a> <a href=\"#ref-for-fully-active①⑦\">(6)</a> <a href=\"#ref-for-fully-active①⑧\">(7)</a> <a href=\"#ref-for-fully-active①⑨\">(8)</a> <a href=\"#ref-for-fully-active②⓪\">(9)</a> <a href=\"#ref-for-fully-active②①\">(10)</a> <a href=\"#ref-for-fully-active②②\">(11)</a> <a href=\"#ref-for-fully-active②③\">(12)</a> <a href=\"#ref-for-fully-active②④\">(13)</a> <a href=\"#ref-for-fully-active②⑤\">(14)</a> <a href=\"#ref-for-fully-active②⑥\">(15)</a> <a href=\"#ref-for-fully-active②⑦\">(16)</a> <a href=\"#ref-for-fully-active②⑧\">(17)</a> <a href=\"#ref-for-fully-active②⑨\">(18)</a>\n    <li><a href=\"#ref-for-fully-active③⓪\">2.10.3. Omit non-fully active documents from APIs that span multiple documents</a> <a href=\"#ref-for-fully-active③①\">(2)</a> <a href=\"#ref-for-fully-active③②\">(3)</a> <a href=\"#ref-for-fully-active③③\">(4)</a> <a href=\"#ref-for-fully-active③④\">(5)</a> <a href=\"#ref-for-fully-active③⑤\">(6)</a>\n    <li><a href=\"#ref-for-fully-active③⑥\">2.10.4. Discard non-fully active documents for situations that can’t be supported</a> <a href=\"#ref-for-fully-active③⑦\">(2)</a> <a href=\"#ref-for-fully-active③⑧\">(3)</a> <a href=\"#ref-for-fully-active③⑨\">(4)</a>\n    <li><a href=\"#ref-for-fully-active④⓪\">2.10.5. Be aware that per-document state/data might persist after navigation</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-attr-hyperlink-href\">\n   <a href=\"https://html.spec.whatwg.org/multipage/links.html#attr-hyperlink-href\">https://html.spec.whatwg.org/multipage/links.html#attr-hyperlink-href</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-attr-hyperlink-href\">8.2. Represent strings appropriately</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-the-img-element\">\n   <a href=\"https://html.spec.whatwg.org/multipage/embedded-content.html#the-img-element\">https://html.spec.whatwg.org/multipage/embedded-content.html#the-img-element</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-the-img-element\">Use casing rules consistent with existing APIs</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-the-input-element\">\n   <a href=\"https://html.spec.whatwg.org/multipage/input.html#the-input-element\">https://html.spec.whatwg.org/multipage/input.html#the-input-element</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-the-input-element\">3.1. Re-use attribute names (only) for similar functionality</a> <a href=\"#ref-for-the-input-element①\">(2)</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-dom-img-ismap\">\n   <a href=\"https://html.spec.whatwg.org/multipage/embedded-content.html#dom-img-ismap\">https://html.spec.whatwg.org/multipage/embedded-content.html#dom-img-ismap</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-dom-img-ismap\">Use casing rules consistent with existing APIs</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-attr-img-ismap\">\n   <a href=\"https://html.spec.whatwg.org/multipage/embedded-content.html#attr-img-ismap\">https://html.spec.whatwg.org/multipage/embedded-content.html#attr-img-ismap</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-attr-img-ismap\">Use casing rules consistent with existing APIs</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-the-label-element\">\n   <a href=\"https://html.spec.whatwg.org/multipage/forms.html#the-label-element\">https://html.spec.whatwg.org/multipage/forms.html#the-label-element</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-the-label-element\">3.1. Re-use attribute names (only) for similar functionality</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-event-languagechange\">\n   <a href=\"https://html.spec.whatwg.org/multipage/indices.html#event-languagechange\">https://html.spec.whatwg.org/multipage/indices.html#event-languagechange</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-event-languagechange\">Use casing rules consistent with existing APIs</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-the-link-element\">\n   <a href=\"https://html.spec.whatwg.org/multipage/semantics.html#the-link-element\">https://html.spec.whatwg.org/multipage/semantics.html#the-link-element</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-the-link-element\">3.1. Re-use attribute names (only) for similar functionality</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-attr-select-multiple\">\n   <a href=\"https://html.spec.whatwg.org/multipage/form-elements.html#attr-select-multiple\">https://html.spec.whatwg.org/multipage/form-elements.html#attr-select-multiple</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-attr-select-multiple\">3.1. Re-use attribute names (only) for similar functionality</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-dom-navigator-online\">\n   <a href=\"https://html.spec.whatwg.org/multipage/system-state.html#dom-navigator-online\">https://html.spec.whatwg.org/multipage/system-state.html#dom-navigator-online</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-dom-navigator-online\">5.2. Preserve run-to-completion semantics</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-attr-details-open\">\n   <a href=\"https://html.spec.whatwg.org/multipage/interactive-elements.html#attr-details-open\">https://html.spec.whatwg.org/multipage/interactive-elements.html#attr-details-open</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-attr-details-open\">3.1. Re-use attribute names (only) for similar functionality</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-dom-open\">\n   <a href=\"https://html.spec.whatwg.org/multipage/window-object.html#dom-open\">https://html.spec.whatwg.org/multipage/window-object.html#dom-open</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-dom-open\">6.7. Classes should have constructors when possible</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-dom-opener\">\n   <a href=\"https://html.spec.whatwg.org/multipage/browsers.html#dom-opener\">https://html.spec.whatwg.org/multipage/browsers.html#dom-opener</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-dom-opener\">2.10.3. Omit non-fully active documents from APIs that span multiple documents</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-the-output-element\">\n   <a href=\"https://html.spec.whatwg.org/multipage/form-elements.html#the-output-element\">https://html.spec.whatwg.org/multipage/form-elements.html#the-output-element</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-the-output-element\">3.1. Re-use attribute names (only) for similar functionality</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-event-pagehide\">\n   <a href=\"https://html.spec.whatwg.org/multipage/indices.html#event-pagehide\">https://html.spec.whatwg.org/multipage/indices.html#event-pagehide</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-event-pagehide\">2.10.2. Listen for changes to fully active status</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-event-pageshow\">\n   <a href=\"https://html.spec.whatwg.org/multipage/indices.html#event-pageshow\">https://html.spec.whatwg.org/multipage/indices.html#event-pageshow</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-event-pageshow\">2.10.2. Listen for changes to fully active status</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-queue-a-task\">\n   <a href=\"https://html.spec.whatwg.org/multipage/webappapis.html#queue-a-task\">https://html.spec.whatwg.org/multipage/webappapis.html#queue-a-task</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-queue-a-task\">5.2. Preserve run-to-completion semantics</a>\n    <li><a href=\"#ref-for-queue-a-task①\">7.6. Guard against potential recursion</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-reflect\">\n   <a href=\"https://html.spec.whatwg.org/multipage/common-dom-interfaces.html#reflect\">https://html.spec.whatwg.org/multipage/common-dom-interfaces.html#reflect</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-reflect\">8.2. Represent strings appropriately</a>\n    <li><a href=\"#ref-for-reflect①\">Use casing rules consistent with existing APIs</a> <a href=\"#ref-for-reflect②\">(2)</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-event-media-resize\">\n   <a href=\"https://html.spec.whatwg.org/multipage/media.html#event-media-resize\">https://html.spec.whatwg.org/multipage/media.html#event-media-resize</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-event-media-resize\">7.5. Events are for notification</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-script\">\n   <a href=\"https://html.spec.whatwg.org/multipage/scripting.html#script\">https://html.spec.whatwg.org/multipage/scripting.html#script</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-script\">3.1. Re-use attribute names (only) for similar functionality</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-the-select-element\">\n   <a href=\"https://html.spec.whatwg.org/multipage/form-elements.html#the-select-element\">https://html.spec.whatwg.org/multipage/form-elements.html#the-select-element</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-the-select-element\">3.1. Re-use attribute names (only) for similar functionality</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-dom-settimeout\">\n   <a href=\"https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout\">https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-dom-settimeout\">8.3. Use milliseconds for time measurement</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-dom-dialog-showmodal\">\n   <a href=\"https://html.spec.whatwg.org/multipage/interactive-elements.html#dom-dialog-showmodal\">https://html.spec.whatwg.org/multipage/interactive-elements.html#dom-dialog-showmodal</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-dom-dialog-showmodal\">11.2.1. Defining algorithms in specifications</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-sticky-activation\">\n   <a href=\"https://html.spec.whatwg.org/multipage/interaction.html#sticky-activation\">https://html.spec.whatwg.org/multipage/interaction.html#sticky-activation</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-sticky-activation\">2.10.5. Be aware that per-document state/data might persist after navigation</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-the-style-element\">\n   <a href=\"https://html.spec.whatwg.org/multipage/semantics.html#the-style-element\">https://html.spec.whatwg.org/multipage/semantics.html#the-style-element</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-the-style-element\">3.1. Re-use attribute names (only) for similar functionality</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-task-queue\">\n   <a href=\"https://html.spec.whatwg.org/multipage/webappapis.html#task-queue\">https://html.spec.whatwg.org/multipage/webappapis.html#task-queue</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-task-queue\">7.6. Guard against potential recursion</a> <a href=\"#ref-for-task-queue①\">(2)</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-idbdatabase\">\n   <a href=\"https://w3c.github.io/IndexedDB/#idbdatabase\">https://w3c.github.io/IndexedDB/#idbdatabase</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-idbdatabase\">7.8. How to decide between Events and Observers</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-ascii-code-point\">\n   <a href=\"https://infra.spec.whatwg.org/#ascii-code-point\">https://infra.spec.whatwg.org/#ascii-code-point</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-ascii-code-point\">12.2. Use ASCII names</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-code-unit\">\n   <a href=\"https://infra.spec.whatwg.org/#code-unit\">https://infra.spec.whatwg.org/#code-unit</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-code-unit\">8.2. Represent strings appropriately</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-implementation-defined\">\n   <a href=\"https://infra.spec.whatwg.org/#implementation-defined\">https://infra.spec.whatwg.org/#implementation-defined</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-implementation-defined\">9.2. Use care when exposing APIs for selecting or enumerating devices</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-scalar-value\">\n   <a href=\"https://infra.spec.whatwg.org/#scalar-value\">https://infra.spec.whatwg.org/#scalar-value</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-scalar-value\">8.2. Represent strings appropriately</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-scalar-value-string\">\n   <a href=\"https://infra.spec.whatwg.org/#scalar-value-string\">https://infra.spec.whatwg.org/#scalar-value-string</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-scalar-value-string\">8.2. Represent strings appropriately</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-string\">\n   <a href=\"https://infra.spec.whatwg.org/#string\">https://infra.spec.whatwg.org/#string</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-string\">8.2. Represent strings appropriately</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-surrogate\">\n   <a href=\"https://infra.spec.whatwg.org/#surrogate\">https://infra.spec.whatwg.org/#surrogate</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-surrogate\">8.2. Represent strings appropriately</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-intersectionobserver\">\n   <a href=\"https://w3c.github.io/IntersectionObserver/#intersectionobserver\">https://w3c.github.io/IntersectionObserver/#intersectionobserver</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-intersectionobserver\">7.8. How to decide between Events and Observers</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-valdef-custom-media-false\">\n   <a href=\"https://drafts.csswg.org/mediaqueries-5/#valdef-custom-media-false\">https://drafts.csswg.org/mediaqueries-5/#valdef-custom-media-false</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-valdef-custom-media-false\">4.4. Naming of CSS properties and values</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-valdef-custom-media-true\">\n   <a href=\"https://drafts.csswg.org/mediaqueries-5/#valdef-custom-media-true\">https://drafts.csswg.org/mediaqueries-5/#valdef-custom-media-true</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-valdef-custom-media-true\">4.4. Naming of CSS properties and values</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-dom-paymentrequest\">\n   <a href=\"https://www.w3.org/TR/payment-request/#dom-paymentrequest\">https://www.w3.org/TR/payment-request/#dom-paymentrequest</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-dom-paymentrequest\">7.6. Guard against potential recursion</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-dfn-state\">\n   <a href=\"https://www.w3.org/TR/payment-request/#dfn-state\">https://www.w3.org/TR/payment-request/#dfn-state</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-dfn-state\">7.6. Guard against potential recursion</a> <a href=\"#ref-for-dfn-state①\">(2)</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-dom-paymentrequest-show\">\n   <a href=\"https://www.w3.org/TR/payment-request/#dom-paymentrequest-show\">https://www.w3.org/TR/payment-request/#dom-paymentrequest-show</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-dom-paymentrequest-show\">7.6. Guard against potential recursion</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-dom-pointerevent-pointerid\">\n   <a href=\"https://www.w3.org/TR/pointerevents3/#dom-pointerevent-pointerid\">https://www.w3.org/TR/pointerevents3/#dom-pointerevent-pointerid</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-dom-pointerevent-pointerid\">Use casing rules consistent with existing APIs</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-dom-referrerpolicy-no-referrer-when-downgrade\">\n   <a href=\"https://w3c.github.io/webappsec-referrer-policy/#dom-referrerpolicy-no-referrer-when-downgrade\">https://w3c.github.io/webappsec-referrer-policy/#dom-referrerpolicy-no-referrer-when-downgrade</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-dom-referrerpolicy-no-referrer-when-downgrade\">Use casing rules consistent with existing APIs</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-remoteplayback-interface\">\n   <a href=\"https://w3c.github.io/remote-playback/#remoteplayback-interface\">https://w3c.github.io/remote-playback/#remoteplayback-interface</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-remoteplayback-interface\">9.2. Use care when exposing APIs for selecting or enumerating devices</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-dfn-remote-playback-devices\">\n   <a href=\"https://w3c.github.io/remote-playback/#dfn-remote-playback-devices\">https://w3c.github.io/remote-playback/#dfn-remote-playback-devices</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-dfn-remote-playback-devices\">9.2. Use care when exposing APIs for selecting or enumerating devices</a> <a href=\"#ref-for-dfn-remote-playback-devices①\">(2)</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-dom-clients-claim\">\n   <a href=\"https://w3c.github.io/ServiceWorker/#dom-clients-claim\">https://w3c.github.io/ServiceWorker/#dom-clients-claim</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-dom-clients-claim\">2.10.4. Discard non-fully active documents for situations that can’t be supported</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-dom-clients-matchall\">\n   <a href=\"https://w3c.github.io/ServiceWorker/#dom-clients-matchall\">https://w3c.github.io/ServiceWorker/#dom-clients-matchall</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-dom-clients-matchall\">2.10.3. Omit non-fully active documents from APIs that span multiple documents</a> <a href=\"#ref-for-dom-clients-matchall①\">(2)</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-keyboardevent\">\n   <a href=\"https://www.w3.org/TR/uievents/#keyboardevent\">https://www.w3.org/TR/uievents/#keyboardevent</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-keyboardevent\">12.4. Future-proofing</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-mouseevent\">\n   <a href=\"https://www.w3.org/TR/uievents/#mouseevent\">https://www.w3.org/TR/uievents/#mouseevent</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-mouseevent\">6.7. Classes should have constructors when possible</a> <a href=\"#ref-for-mouseevent①\">(2)</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-urlsearchparams\">\n   <a href=\"https://url.spec.whatwg.org/#urlsearchparams\">https://url.spec.whatwg.org/#urlsearchparams</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-urlsearchparams\">Static objects</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-percent-encode\">\n   <a href=\"https://url.spec.whatwg.org/#percent-encode\">https://url.spec.whatwg.org/#percent-encode</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-percent-encode\">8.2. Represent strings appropriately</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-concept-url\">\n   <a href=\"https://url.spec.whatwg.org/#concept-url\">https://url.spec.whatwg.org/#concept-url</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-concept-url\">8.2. Represent strings appropriately</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-dfn-Crypto\">\n   <a href=\"https://w3c.github.io/webcrypto/#dfn-Crypto\">https://w3c.github.io/webcrypto/#dfn-Crypto</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-dfn-Crypto\">6.7. Classes should have constructors when possible</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-idl-ByteString\">\n   <a href=\"https://webidl.spec.whatwg.org/#idl-ByteString\">https://webidl.spec.whatwg.org/#idl-ByteString</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-idl-ByteString\">8.2. Represent strings appropriately</a> <a href=\"#ref-for-idl-ByteString①\">(2)</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-Clamp\">\n   <a href=\"https://webidl.spec.whatwg.org/#Clamp\">https://webidl.spec.whatwg.org/#Clamp</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-Clamp\">8.1. Use numeric types appropriately</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-idl-DOMException\">\n   <a href=\"https://webidl.spec.whatwg.org/#idl-DOMException\">https://webidl.spec.whatwg.org/#idl-DOMException</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-idl-DOMException\">8.5. Use Error or DOMException for errors</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-idl-DOMString\">\n   <a href=\"https://webidl.spec.whatwg.org/#idl-DOMString\">https://webidl.spec.whatwg.org/#idl-DOMString</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-idl-DOMString\">8.2. Represent strings appropriately</a> <a href=\"#ref-for-idl-DOMString①\">(2)</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-EnforceRange\">\n   <a href=\"https://webidl.spec.whatwg.org/#EnforceRange\">https://webidl.spec.whatwg.org/#EnforceRange</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-EnforceRange\">8.1. Use numeric types appropriately</a> <a href=\"#ref-for-EnforceRange①\">(2)</a> <a href=\"#ref-for-EnforceRange②\">(3)</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-idl-promise\">\n   <a href=\"https://webidl.spec.whatwg.org/#idl-promise\">https://webidl.spec.whatwg.org/#idl-promise</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-idl-promise\">7.6. Guard against potential recursion</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-SecureContext\">\n   <a href=\"https://webidl.spec.whatwg.org/#SecureContext\">https://webidl.spec.whatwg.org/#SecureContext</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-SecureContext\">2.6. Consider limiting new features to secure contexts</a> <a href=\"#ref-for-SecureContext①\">(2)</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-exceptiondef-typeerror\">\n   <a href=\"https://webidl.spec.whatwg.org/#exceptiondef-typeerror\">https://webidl.spec.whatwg.org/#exceptiondef-typeerror</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-exceptiondef-typeerror\">6.7. Classes should have constructors when possible</a>\n    <li><a href=\"#ref-for-exceptiondef-typeerror①\">8.1. Use numeric types appropriately</a> <a href=\"#ref-for-exceptiondef-typeerror②\">(2)</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-idl-USVString\">\n   <a href=\"https://webidl.spec.whatwg.org/#idl-USVString\">https://webidl.spec.whatwg.org/#idl-USVString</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-idl-USVString\">8.2. Represent strings appropriately</a> <a href=\"#ref-for-idl-USVString①\">(2)</a> <a href=\"#ref-for-idl-USVString②\">(3)</a> <a href=\"#ref-for-idl-USVString③\">(4)</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-idl-Uint8Array\">\n   <a href=\"https://webidl.spec.whatwg.org/#idl-Uint8Array\">https://webidl.spec.whatwg.org/#idl-Uint8Array</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-idl-Uint8Array\">8.2. Represent strings appropriately</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-idl-bigint\">\n   <a href=\"https://webidl.spec.whatwg.org/#idl-bigint\">https://webidl.spec.whatwg.org/#idl-bigint</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-idl-bigint\">8.1. Use numeric types appropriately</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-idl-byte\">\n   <a href=\"https://webidl.spec.whatwg.org/#idl-byte\">https://webidl.spec.whatwg.org/#idl-byte</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-idl-byte\">8.2. Represent strings appropriately</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-idl-constructors\">\n   <a href=\"https://webidl.spec.whatwg.org/#idl-constructors\">https://webidl.spec.whatwg.org/#idl-constructors</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-idl-constructors\">6.7. Classes should have constructors when possible</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-idl-double\">\n   <a href=\"https://webidl.spec.whatwg.org/#idl-double\">https://webidl.spec.whatwg.org/#idl-double</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-idl-double\">8.1. Use numeric types appropriately</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-idl-long\">\n   <a href=\"https://webidl.spec.whatwg.org/#idl-long\">https://webidl.spec.whatwg.org/#idl-long</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-idl-long\">8.1. Use numeric types appropriately</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-idl-long-long\">\n   <a href=\"https://webidl.spec.whatwg.org/#idl-long-long\">https://webidl.spec.whatwg.org/#idl-long-long</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-idl-long-long\">8.1. Use numeric types appropriately</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-dfn-maplike\">\n   <a href=\"https://webidl.spec.whatwg.org/#dfn-maplike\">https://webidl.spec.whatwg.org/#dfn-maplike</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-dfn-maplike\">Static objects</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-dfn-namespace\">\n   <a href=\"https://webidl.spec.whatwg.org/#dfn-namespace\">https://webidl.spec.whatwg.org/#dfn-namespace</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-dfn-namespace\">6.7. Classes should have constructors when possible</a> <a href=\"#ref-for-dfn-namespace①\">(2)</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-dfn-observable-array-type\">\n   <a href=\"https://webidl.spec.whatwg.org/#dfn-observable-array-type\">https://webidl.spec.whatwg.org/#dfn-observable-array-type</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-dfn-observable-array-type\">6.5. Make method arguments optional if possible</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-idl-octet\">\n   <a href=\"https://webidl.spec.whatwg.org/#idl-octet\">https://webidl.spec.whatwg.org/#idl-octet</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-idl-octet\">8.1. Use numeric types appropriately</a> <a href=\"#ref-for-idl-octet①\">(2)</a> <a href=\"#ref-for-idl-octet②\">(3)</a> <a href=\"#ref-for-idl-octet③\">(4)</a> <a href=\"#ref-for-idl-octet④\">(5)</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-sequence-type\">\n   <a href=\"https://webidl.spec.whatwg.org/#sequence-type\">https://webidl.spec.whatwg.org/#sequence-type</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-sequence-type\">6.5. Make method arguments optional if possible</a> <a href=\"#ref-for-sequence-type①\">(2)</a>\n    <li><a href=\"#ref-for-sequence-type②\">8.2. Represent strings appropriately</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-dfn-setlike\">\n   <a href=\"https://webidl.spec.whatwg.org/#dfn-setlike\">https://webidl.spec.whatwg.org/#dfn-setlike</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-dfn-setlike\">Static objects</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-idl-short\">\n   <a href=\"https://webidl.spec.whatwg.org/#idl-short\">https://webidl.spec.whatwg.org/#idl-short</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-idl-short\">8.1. Use numeric types appropriately</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-idl-undefined\">\n   <a href=\"https://webidl.spec.whatwg.org/#idl-undefined\">https://webidl.spec.whatwg.org/#idl-undefined</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-idl-undefined\">6.5. Make method arguments optional if possible</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-idl-unrestricted-double\">\n   <a href=\"https://webidl.spec.whatwg.org/#idl-unrestricted-double\">https://webidl.spec.whatwg.org/#idl-unrestricted-double</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-idl-unrestricted-double\">8.1. Use numeric types appropriately</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-idl-unsigned-long-long\">\n   <a href=\"https://webidl.spec.whatwg.org/#idl-unsigned-long-long\">https://webidl.spec.whatwg.org/#idl-unsigned-long-long</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-idl-unsigned-long-long\">8.1. Use numeric types appropriately</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-dom-rtcdtmfsender\">\n   <a href=\"https://www.w3.org/TR/webrtc/#dom-rtcdtmfsender\">https://www.w3.org/TR/webrtc/#dom-rtcdtmfsender</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-dom-rtcdtmfsender\">Use casing rules consistent with existing APIs</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-progressevent\">\n   <a href=\"https://xhr.spec.whatwg.org/#progressevent\">https://xhr.spec.whatwg.org/#progressevent</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-progressevent\">7.6. Guard against potential recursion</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-xmlhttprequest\">\n   <a href=\"https://xhr.spec.whatwg.org/#xmlhttprequest\">https://xhr.spec.whatwg.org/#xmlhttprequest</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-xmlhttprequest\">6.5. Make method arguments optional if possible</a>\n    <li><a href=\"#ref-for-xmlhttprequest①\">Use casing rules consistent with existing APIs</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-xmlhttprequesteventtarget\">\n   <a href=\"https://xhr.spec.whatwg.org/#xmlhttprequesteventtarget\">https://xhr.spec.whatwg.org/#xmlhttprequesteventtarget</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-xmlhttprequesteventtarget\">7.8. How to decide between Events and Observers</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-dom-progressevent-loaded\">\n   <a href=\"https://xhr.spec.whatwg.org/#dom-progressevent-loaded\">https://xhr.spec.whatwg.org/#dom-progressevent-loaded</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-dom-progressevent-loaded\">7.6. Guard against potential recursion</a>\n   </ul>\n  </aside>\n  <aside class=\"dfn-panel\" data-for=\"term-for-dom-progressevent-total\">\n   <a href=\"https://xhr.spec.whatwg.org/#dom-progressevent-total\">https://xhr.spec.whatwg.org/#dom-progressevent-total</a><b>Referenced in:</b>\n   <ul>\n    <li><a href=\"#ref-for-dom-progressevent-total\">7.6. Guard against potential recursion</a>\n   </ul>\n  </aside>\n  <h3 class=\"no-num no-ref heading settled\" id=\"index-defined-elsewhere\"><span class=\"content\">Terms defined by reference</span><a class=\"self-link\" href=\"#index-defined-elsewhere\"></a></h3>\n  <ul class=\"index\">\n   <li>\n    <a data-link-type=\"biblio\">[appmanifest]</a> defines the following terms:\n    <ul>\n     <li><span class=\"dfn-paneled\" id=\"term-for-dfn-short_name\">short_name</span>\n    </ul>\n   <li>\n    <a data-link-type=\"biblio\">[credential-management-1]</a> defines the following terms:\n    <ul>\n     <li><span class=\"dfn-paneled\" id=\"term-for-dom-credential-id\">id</span>\n    </ul>\n   <li>\n    <a data-link-type=\"biblio\">[css-backgrounds-3]</a> defines the following terms:\n    <ul>\n     <li><span class=\"dfn-paneled\" id=\"term-for-propdef-background-image\">background-image</span>\n    </ul>\n   <li>\n    <a data-link-type=\"biblio\">[css-cascade-5]</a> defines the following terms:\n    <ul>\n     <li><span class=\"dfn-paneled\" id=\"term-for-actual-value\">actual value</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-computed-value\">computed value</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-inheritance\">inherit</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-used-value\">used value</span>\n    </ul>\n   <li>\n    <a data-link-type=\"biblio\">[css-conditional-3]</a> defines the following terms:\n    <ul>\n     <li><span class=\"dfn-paneled\" id=\"term-for-at-ruledef-supports\">@supports</span>\n    </ul>\n   <li>\n    <a data-link-type=\"biblio\">[css-fonts-4]</a> defines the following terms:\n    <ul>\n     <li><span class=\"dfn-paneled\" id=\"term-for-propdef-font-size\">font-size</span>\n    </ul>\n   <li>\n    <a data-link-type=\"biblio\">[css-inline-3]</a> defines the following terms:\n    <ul>\n     <li><span class=\"dfn-paneled\" id=\"term-for-propdef-initial-letter\">initial-letter</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-propdef-initial-letter-align\">initial-letter-align</span>\n    </ul>\n   <li>\n    <a data-link-type=\"biblio\">[css-values-4]</a> defines the following terms:\n    <ul>\n     <li><span class=\"dfn-paneled\" id=\"term-for-length-value\">&lt;length></span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-number-value\">&lt;number></span>\n    </ul>\n   <li>\n    <a data-link-type=\"biblio\">[CSS21]</a> defines the following terms:\n    <ul>\n     <li><span class=\"dfn-paneled\" id=\"term-for-propdef-line-height\">line-height</span>\n    </ul>\n   <li>\n    <a data-link-type=\"biblio\">[cssom-1]</a> defines the following terms:\n    <ul>\n     <li><span class=\"dfn-paneled\" id=\"term-for-dom-window-getcomputedstyle\">getComputedStyle(elt)</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-resolved-value\">resolved value</span>\n    </ul>\n   <li>\n    <a data-link-type=\"biblio\">[cssom-view-1]</a> defines the following terms:\n    <ul>\n     <li><span class=\"dfn-paneled\" id=\"term-for-dom-element-getboundingclientrect\">getBoundingClientRect()</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-dom-htmlelement-offsettop\">offsetTop</span>\n    </ul>\n   <li>\n    <a data-link-type=\"biblio\">[DOM]</a> defines the following terms:\n    <ul>\n     <li><span class=\"dfn-paneled\" id=\"term-for-abortcontroller\">AbortController</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-abortsignal\">AbortSignal</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-domtokenlist\">DOMTokenList</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-element\">Element</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-event\">Event</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-eventtarget\">EventTarget</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-htmlcollection\">HTMLCollection</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-mutationobserver\">MutationObserver</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-namednodemap\">NamedNodeMap</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-node\">Node</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-nonelementparentnode\">NonElementParentNode</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-dom-abortcontroller-abort\">abort()</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-abortsignal-add\">add</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-dom-eventtarget-addeventlistener\">addEventListener(type, callback)</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-dom-document-compatmode\">compatMode</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-dom-document-createattribute\">createAttribute(localName)</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-dom-document-createelement\">createElement</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-concept-event-fire\">fire an event</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-dom-nonelementparentnode-getelementbyid\">getElementById(elementId)</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-dom-document-getelementsbytagname\">getElementsByTagName</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-dom-addeventlisteneroptions-once\">once</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-dom-parentnode-queryselectorall\">querySelectorAll(selectors)</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-abortsignal-remove\">remove</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-abortsignal-signal-abort\">signal abort</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-dom-event-target\">target</span>\n    </ul>\n   <li>\n    <a data-link-type=\"biblio\">[DOM-Parsing]</a> defines the following terms:\n    <ul>\n     <li><span class=\"dfn-paneled\" id=\"term-for-dom-innerhtml-innerhtml\">innerHTML</span>\n    </ul>\n   <li>\n    <a data-link-type=\"biblio\">[ecma262]</a> defines the following terms:\n    <ul>\n     <li><span class=\"dfn-paneled\" id=\"term-for-sec-bigint-objects\">BigInt</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-sec-date-objects\">Date</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-sec-error-objects\">Error</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-sec-finalization-registry-objects\">FinalizationRegistry</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-sec-number-objects\">Number</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-sec-weak-ref-objects\">WeakRef</span>\n    </ul>\n   <li>\n    <a data-link-type=\"biblio\">[FETCH]</a> defines the following terms:\n    <ul>\n     <li><span class=\"dfn-paneled\" id=\"term-for-body\">Body</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-dom-body-json\">json()</span>\n    </ul>\n   <li>\n    <a data-link-type=\"biblio\">[hr-time-2]</a> defines the following terms:\n    <ul>\n     <li><span class=\"dfn-paneled\" id=\"term-for-dom-domhighrestimestamp\">DOMHighResTimeStamp</span>\n    </ul>\n   <li>\n    <a data-link-type=\"biblio\">[HTML]</a> defines the following terms:\n    <ul>\n     <li><span class=\"dfn-paneled\" id=\"term-for-broadcastchannel\">BroadcastChannel</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-eventhandler\">EventHandler</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-globaleventhandlers\">GlobalEventHandlers</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-htmlhrelement\">HTMLHRElement</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-htmlhtmlelement\">HTMLHtmlElement</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-htmlimageelement\">HTMLImageElement</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-history-3\">History</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-imagebitmap\">ImageBitmap</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-navigator\">Navigator</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-window\">Window</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-windoweventhandlers\">WindowEventHandlers</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-dom-alert-noargs\">alert()</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-dom-document-bgcolor\">bgColor</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-the-button-element\">button</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-event-media-canplaythrough\">canplaythrough</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-dom-createimagebitmap\">createImageBitmap(image)</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-custom-element\">custom element</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-dom-customelementregistry-define\">define(name, constructor)</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-the-details-element\">details</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-the-dialog-element\">dialog</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-discard-a-document\">discard a document</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-event-handler-idl-attributes\">event handler idl attribute</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-event-loop\">event loop</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-the-figcaption-element\">figcaption</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-attr-label-for\">for</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-fully-active\">fully active</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-attr-hyperlink-href\">href</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-the-img-element\">img</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-the-input-element\">input</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-dom-img-ismap\">isMap</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-attr-img-ismap\">ismap</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-the-label-element\">label</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-event-languagechange\">languagechange</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-the-link-element\">link</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-attr-select-multiple\">multiple</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-dom-navigator-online\">onLine</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-attr-details-open\">open</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-dom-open\">open(url, target, features)</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-dom-opener\">opener</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-the-output-element\">output</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-event-pagehide\">pagehide</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-event-pageshow\">pageshow</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-queue-a-task\">queue a task</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-reflect\">reflect</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-event-media-resize\">resize</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-script\">script</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-the-select-element\">select</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-dom-settimeout\">setTimeout(handler, timeout, ...arguments)</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-dom-dialog-showmodal\">showModal()</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-sticky-activation\">sticky activation</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-the-style-element\">style</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-task-queue\">task queues</span>\n    </ul>\n   <li>\n    <a data-link-type=\"biblio\">[IndexedDB-2]</a> defines the following terms:\n    <ul>\n     <li><span class=\"dfn-paneled\" id=\"term-for-idbdatabase\">IDBDatabase</span>\n    </ul>\n   <li>\n    <a data-link-type=\"biblio\">[INFRA]</a> defines the following terms:\n    <ul>\n     <li><span class=\"dfn-paneled\" id=\"term-for-ascii-code-point\">ascii code point</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-code-unit\">code unit</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-implementation-defined\">implementation-defined</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-scalar-value\">scalar value</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-scalar-value-string\">scalar value string</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-string\">string</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-surrogate\">surrogate</span>\n    </ul>\n   <li>\n    <a data-link-type=\"biblio\">[intersection-observer]</a> defines the following terms:\n    <ul>\n     <li><span class=\"dfn-paneled\" id=\"term-for-intersectionobserver\">IntersectionObserver</span>\n    </ul>\n   <li>\n    <a data-link-type=\"biblio\">[mediaqueries-5]</a> defines the following terms:\n    <ul>\n     <li><span class=\"dfn-paneled\" id=\"term-for-valdef-custom-media-false\">false</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-valdef-custom-media-true\">true</span>\n    </ul>\n   <li>\n    <a data-link-type=\"biblio\">[payment-request]</a> defines the following terms:\n    <ul>\n     <li><span class=\"dfn-paneled\" id=\"term-for-dom-paymentrequest\">PaymentRequest</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-dfn-state\">[[state]]</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-dom-paymentrequest-show\">show()</span>\n    </ul>\n   <li>\n    <a data-link-type=\"biblio\">[pointerevents3]</a> defines the following terms:\n    <ul>\n     <li><span class=\"dfn-paneled\" id=\"term-for-dom-pointerevent-pointerid\">pointerId</span>\n    </ul>\n   <li>\n    <a data-link-type=\"biblio\">[referrer-policy]</a> defines the following terms:\n    <ul>\n     <li><span class=\"dfn-paneled\" id=\"term-for-dom-referrerpolicy-no-referrer-when-downgrade\">\"no-referrer-when-downgrade\"</span>\n    </ul>\n   <li>\n    <a data-link-type=\"biblio\">[REMOTE-PLAYBACK]</a> defines the following terms:\n    <ul>\n     <li><span class=\"dfn-paneled\" id=\"term-for-remoteplayback-interface\">RemotePlayback</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-dfn-remote-playback-devices\">remote playback device</span>\n    </ul>\n   <li>\n    <a data-link-type=\"biblio\">[service-workers-1]</a> defines the following terms:\n    <ul>\n     <li><span class=\"dfn-paneled\" id=\"term-for-dom-clients-claim\">claim()</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-dom-clients-matchall\">matchAll()</span>\n    </ul>\n   <li>\n    <a data-link-type=\"biblio\">[UIEVENTS]</a> defines the following terms:\n    <ul>\n     <li><span class=\"dfn-paneled\" id=\"term-for-keyboardevent\">KeyboardEvent</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-mouseevent\">MouseEvent</span>\n    </ul>\n   <li>\n    <a data-link-type=\"biblio\">[URL]</a> defines the following terms:\n    <ul>\n     <li><span class=\"dfn-paneled\" id=\"term-for-urlsearchparams\">URLSearchParams</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-percent-encode\">percent-encode</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-concept-url\">url</span>\n    </ul>\n   <li>\n    <a data-link-type=\"biblio\">[WebCryptoAPI]</a> defines the following terms:\n    <ul>\n     <li><span class=\"dfn-paneled\" id=\"term-for-dfn-Crypto\">Crypto</span>\n    </ul>\n   <li>\n    <a data-link-type=\"biblio\">[WEBIDL]</a> defines the following terms:\n    <ul>\n     <li><span class=\"dfn-paneled\" id=\"term-for-idl-ByteString\">ByteString</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-Clamp\">Clamp</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-idl-DOMException\">DOMException</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-idl-DOMString\">DOMString</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-EnforceRange\">EnforceRange</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-idl-promise\">Promise</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-SecureContext\">SecureContext</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-exceptiondef-typeerror\">TypeError</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-idl-USVString\">USVString</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-idl-Uint8Array\">Uint8Array</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-idl-bigint\">bigint</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-idl-byte\">byte</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-idl-constructors\">constructor operations</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-idl-double\">double</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-idl-long\">long</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-idl-long-long\">long long</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-dfn-maplike\">maplike</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-dfn-namespace\">namespace</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-dfn-observable-array-type\">observable array type</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-idl-octet\">octet</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-sequence-type\">sequence type</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-dfn-setlike\">setlike</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-idl-short\">short</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-idl-undefined\">undefined</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-idl-unrestricted-double\">unrestricted double</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-idl-unsigned-long-long\">unsigned long long</span>\n    </ul>\n   <li>\n    <a data-link-type=\"biblio\">[webrtc-1]</a> defines the following terms:\n    <ul>\n     <li><span class=\"dfn-paneled\" id=\"term-for-dom-rtcdtmfsender\">RTCDTMFSender</span>\n    </ul>\n   <li>\n    <a data-link-type=\"biblio\">[XHR]</a> defines the following terms:\n    <ul>\n     <li><span class=\"dfn-paneled\" id=\"term-for-progressevent\">ProgressEvent</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-xmlhttprequest\">XMLHttpRequest</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-xmlhttprequesteventtarget\">XMLHttpRequestEventTarget</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-dom-progressevent-loaded\">loaded</span>\n     <li><span class=\"dfn-paneled\" id=\"term-for-dom-progressevent-total\">total</span>\n    </ul>\n  </ul>\n  <h2 class=\"no-num no-ref heading settled\" id=\"references\"><span class=\"content\">References</span><a class=\"self-link\" href=\"#references\"></a></h2>\n  <h3 class=\"no-num no-ref heading settled\" id=\"normative\"><span class=\"content\">Normative References</span><a class=\"self-link\" href=\"#normative\"></a></h3>\n  <dl>\n   <dt id=\"biblio-css-cascade-5\">[CSS-CASCADE-5]\n   <dd>Elika Etemad; Miriam Suzanne; Tab Atkins Jr.. <a href=\"https://drafts.csswg.org/css-cascade-5/\"><cite>CSS Cascading and Inheritance Level 5</cite></a>. URL: <a href=\"https://drafts.csswg.org/css-cascade-5/\">https://drafts.csswg.org/css-cascade-5/</a>\n   <dt id=\"biblio-css-conditional-3\">[CSS-CONDITIONAL-3]\n   <dd>David Baron; Elika Etemad; Chris Lilley. <a href=\"https://drafts.csswg.org/css-conditional-3/\"><cite>CSS Conditional Rules Module Level 3</cite></a>. URL: <a href=\"https://drafts.csswg.org/css-conditional-3/\">https://drafts.csswg.org/css-conditional-3/</a>\n   <dt id=\"biblio-dom\">[DOM]\n   <dd>Anne van Kesteren. <a href=\"https://dom.spec.whatwg.org/\"><cite>DOM Standard</cite></a>. Living Standard. URL: <a href=\"https://dom.spec.whatwg.org/\">https://dom.spec.whatwg.org/</a>\n   <dt id=\"biblio-ecmascript\">[ECMASCRIPT]\n   <dd><a href=\"https://tc39.es/ecma262/multipage/\"><cite>ECMAScript Language Specification</cite></a>. URL: <a href=\"https://tc39.es/ecma262/multipage/\">https://tc39.es/ecma262/multipage/</a>\n   <dt id=\"biblio-highres-time\">[HIGHRES-TIME]\n   <dd>Yoav Weiss. <a href=\"https://w3c.github.io/hr-time/\"><cite>High Resolution Time</cite></a>. URL: <a href=\"https://w3c.github.io/hr-time/\">https://w3c.github.io/hr-time/</a>\n   <dt id=\"biblio-hr-time-2\">[HR-TIME-2]\n   <dd>Ilya Grigorik. <a href=\"https://w3c.github.io/hr-time/\"><cite>High Resolution Time Level 2</cite></a>. URL: <a href=\"https://w3c.github.io/hr-time/\">https://w3c.github.io/hr-time/</a>\n   <dt id=\"biblio-html\">[HTML]\n   <dd>Anne van Kesteren; et al. <a href=\"https://html.spec.whatwg.org/multipage/\"><cite>HTML Standard</cite></a>. Living Standard. URL: <a href=\"https://html.spec.whatwg.org/multipage/\">https://html.spec.whatwg.org/multipage/</a>\n   <dt id=\"biblio-indexeddb-2\">[IndexedDB-2]\n   <dd>Ali Alabbas; Joshua Bell. <a href=\"https://w3c.github.io/IndexedDB/\"><cite>Indexed Database API 2.0</cite></a>. URL: <a href=\"https://w3c.github.io/IndexedDB/\">https://w3c.github.io/IndexedDB/</a>\n   <dt id=\"biblio-infra\">[INFRA]\n   <dd>Anne van Kesteren; Domenic Denicola. <a href=\"https://infra.spec.whatwg.org/\"><cite>Infra Standard</cite></a>. Living Standard. URL: <a href=\"https://infra.spec.whatwg.org/\">https://infra.spec.whatwg.org/</a>\n   <dt id=\"biblio-mediaqueries-5\">[MEDIAQUERIES-5]\n   <dd>Dean Jackson; et al. <a href=\"https://drafts.csswg.org/mediaqueries-5/\"><cite>Media Queries Level 5</cite></a>. URL: <a href=\"https://drafts.csswg.org/mediaqueries-5/\">https://drafts.csswg.org/mediaqueries-5/</a>\n   <dt id=\"biblio-payment-request\">[PAYMENT-REQUEST]\n   <dd>Marcos Caceres; Rouslan Solomakhin; Ian Jacobs. <a href=\"https://w3c.github.io/payment-request/\"><cite>Payment Request API</cite></a>. URL: <a href=\"https://w3c.github.io/payment-request/\">https://w3c.github.io/payment-request/</a>\n   <dt id=\"biblio-rfc2119\">[RFC2119]\n   <dd>S. Bradner. <a href=\"https://datatracker.ietf.org/doc/html/rfc2119\"><cite>Key words for use in RFCs to Indicate Requirement Levels</cite></a>. March 1997. Best Current Practice. URL: <a href=\"https://datatracker.ietf.org/doc/html/rfc2119\">https://datatracker.ietf.org/doc/html/rfc2119</a>\n   <dt id=\"biblio-service-workers-1\">[SERVICE-WORKERS-1]\n   <dd>Alex Russell; et al. <a href=\"https://w3c.github.io/ServiceWorker/\"><cite>Service Workers 1</cite></a>. URL: <a href=\"https://w3c.github.io/ServiceWorker/\">https://w3c.github.io/ServiceWorker/</a>\n   <dt id=\"biblio-url\">[URL]\n   <dd>Anne van Kesteren. <a href=\"https://url.spec.whatwg.org/\"><cite>URL Standard</cite></a>. Living Standard. URL: <a href=\"https://url.spec.whatwg.org/\">https://url.spec.whatwg.org/</a>\n   <dt id=\"biblio-webidl\">[WEBIDL]\n   <dd>Edgar Chen; Timothy Gu. <a href=\"https://webidl.spec.whatwg.org/\"><cite>Web IDL Standard</cite></a>. Living Standard. URL: <a href=\"https://webidl.spec.whatwg.org/\">https://webidl.spec.whatwg.org/</a>\n   <dt id=\"biblio-xhr\">[XHR]\n   <dd>Anne van Kesteren. <a href=\"https://xhr.spec.whatwg.org/\"><cite>XMLHttpRequest Standard</cite></a>. Living Standard. URL: <a href=\"https://xhr.spec.whatwg.org/\">https://xhr.spec.whatwg.org/</a>\n  </dl>\n  <h3 class=\"no-num no-ref heading settled\" id=\"informative\"><span class=\"content\">Informative References</span><a class=\"self-link\" href=\"#informative\"></a></h3>\n  <dl>\n   <dt id=\"biblio-appmanifest\">[APPMANIFEST]\n   <dd>Marcos Caceres; et al. <a href=\"https://w3c.github.io/manifest/\"><cite>Web Application Manifest</cite></a>. URL: <a href=\"https://w3c.github.io/manifest/\">https://w3c.github.io/manifest/</a>\n   <dt id=\"biblio-credential-management-1\">[CREDENTIAL-MANAGEMENT-1]\n   <dd>Mike West. <a href=\"https://w3c.github.io/webappsec-credential-management/\"><cite>Credential Management Level 1</cite></a>. URL: <a href=\"https://w3c.github.io/webappsec-credential-management/\">https://w3c.github.io/webappsec-credential-management/</a>\n   <dt id=\"biblio-css-backgrounds-3\">[CSS-BACKGROUNDS-3]\n   <dd>Bert Bos; Elika Etemad; Brad Kemper. <a href=\"https://drafts.csswg.org/css-backgrounds/\"><cite>CSS Backgrounds and Borders Module Level 3</cite></a>. URL: <a href=\"https://drafts.csswg.org/css-backgrounds/\">https://drafts.csswg.org/css-backgrounds/</a>\n   <dt id=\"biblio-css-fonts-4\">[CSS-FONTS-4]\n   <dd>John Daggett; Myles Maxfield; Chris Lilley. <a href=\"https://drafts.csswg.org/css-fonts-4/\"><cite>CSS Fonts Module Level 4</cite></a>. URL: <a href=\"https://drafts.csswg.org/css-fonts-4/\">https://drafts.csswg.org/css-fonts-4/</a>\n   <dt id=\"biblio-css-grid-1\">[CSS-GRID-1]\n   <dd>Tab Atkins Jr.; et al. <a href=\"https://drafts.csswg.org/css-grid/\"><cite>CSS Grid Layout Module Level 1</cite></a>. URL: <a href=\"https://drafts.csswg.org/css-grid/\">https://drafts.csswg.org/css-grid/</a>\n   <dt id=\"biblio-css-inline-3\">[CSS-INLINE-3]\n   <dd>Dave Cramer; Elika Etemad; Steve Zilles. <a href=\"https://drafts.csswg.org/css-inline-3/\"><cite>CSS Inline Layout Module Level 3</cite></a>. URL: <a href=\"https://drafts.csswg.org/css-inline-3/\">https://drafts.csswg.org/css-inline-3/</a>\n   <dt id=\"biblio-css-values-4\">[CSS-VALUES-4]\n   <dd>Tab Atkins Jr.; Elika Etemad. <a href=\"https://drafts.csswg.org/css-values-4/\"><cite>CSS Values and Units Module Level 4</cite></a>. URL: <a href=\"https://drafts.csswg.org/css-values-4/\">https://drafts.csswg.org/css-values-4/</a>\n   <dt id=\"biblio-css21\">[CSS21]\n   <dd>Bert Bos; et al. <a href=\"https://drafts.csswg.org/css2/\"><cite>Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification</cite></a>. URL: <a href=\"https://drafts.csswg.org/css2/\">https://drafts.csswg.org/css2/</a>\n   <dt id=\"biblio-cssom-1\">[CSSOM-1]\n   <dd>Daniel Glazman; Emilio Cobos Álvarez. <a href=\"https://drafts.csswg.org/cssom/\"><cite>CSS Object Model (CSSOM)</cite></a>. URL: <a href=\"https://drafts.csswg.org/cssom/\">https://drafts.csswg.org/cssom/</a>\n   <dt id=\"biblio-cssom-view-1\">[CSSOM-VIEW-1]\n   <dd>Simon Pieters. <a href=\"https://drafts.csswg.org/cssom-view/\"><cite>CSSOM View Module</cite></a>. URL: <a href=\"https://drafts.csswg.org/cssom-view/\">https://drafts.csswg.org/cssom-view/</a>\n   <dt id=\"biblio-dom-parsing\">[DOM-Parsing]\n   <dd>Travis Leithead. <a href=\"https://w3c.github.io/DOM-Parsing/\"><cite>DOM Parsing and Serialization</cite></a>. URL: <a href=\"https://w3c.github.io/DOM-Parsing/\">https://w3c.github.io/DOM-Parsing/</a>\n   <dt id=\"biblio-ethical-web\">[ETHICAL-WEB]\n   <dd>Daniel Appelquist; Hadley Beeman. <a href=\"https://www.w3.org/2001/tag/doc/ethical-web-principles/\"><cite>W3C TAG Ethical Web Principles</cite></a>. 27 October 2020. TAG Finding. URL: <a href=\"https://www.w3.org/2001/tag/doc/ethical-web-principles/\">https://www.w3.org/2001/tag/doc/ethical-web-principles/</a>\n   <dt id=\"biblio-fetch\">[FETCH]\n   <dd>Anne van Kesteren. <a href=\"https://fetch.spec.whatwg.org/\"><cite>Fetch Standard</cite></a>. Living Standard. URL: <a href=\"https://fetch.spec.whatwg.org/\">https://fetch.spec.whatwg.org/</a>\n   <dt id=\"biblio-fingerprinting-guidance\">[FINGERPRINTING-GUIDANCE]\n   <dd>Nick Doty. <a href=\"https://w3c.github.io/fingerprinting-guidance/\"><cite>Mitigating Browser Fingerprinting in Web Specifications</cite></a>. URL: <a href=\"https://w3c.github.io/fingerprinting-guidance/\">https://w3c.github.io/fingerprinting-guidance/</a>\n   <dt id=\"biblio-intersection-observer\">[INTERSECTION-OBSERVER]\n   <dd>Stefan Zager; Emilio Cobos Álvarez; Michael Blain. <a href=\"https://w3c.github.io/IntersectionObserver/\"><cite>Intersection Observer</cite></a>. URL: <a href=\"https://w3c.github.io/IntersectionObserver/\">https://w3c.github.io/IntersectionObserver/</a>\n   <dt id=\"biblio-least-power\">[LEAST-POWER]\n   <dd>Tim Berners-Lee; Noah Mendelsohn. <a href=\"https://www.w3.org/2001/tag/doc/leastPower\"><cite>The Rule of Least Power</cite></a>. 23 February 2006. TAG Finding. URL: <a href=\"https://www.w3.org/2001/tag/doc/leastPower\">https://www.w3.org/2001/tag/doc/leastPower</a>\n   <dt id=\"biblio-pointerevents3\">[POINTEREVENTS3]\n   <dd>Patrick Lauke; Navid Zolghadr. <a href=\"https://w3c.github.io/pointerevents/\"><cite>Pointer Events</cite></a>. URL: <a href=\"https://w3c.github.io/pointerevents/\">https://w3c.github.io/pointerevents/</a>\n   <dt id=\"biblio-referrer-policy\">[REFERRER-POLICY]\n   <dd>Jochen Eisinger; Emily Stark. <a href=\"https://w3c.github.io/webappsec-referrer-policy/\"><cite>Referrer Policy</cite></a>. URL: <a href=\"https://w3c.github.io/webappsec-referrer-policy/\">https://w3c.github.io/webappsec-referrer-policy/</a>\n   <dt id=\"biblio-remote-playback\">[REMOTE-PLAYBACK]\n   <dd>Mounir Lamouri; Anton Vayvod. <a href=\"https://w3c.github.io/remote-playback/\"><cite>Remote Playback API</cite></a>. URL: <a href=\"https://w3c.github.io/remote-playback/\">https://w3c.github.io/remote-playback/</a>\n   <dt id=\"biblio-rfc8890\">[RFC8890]\n   <dd>M. Nottingham. <a href=\"https://www.rfc-editor.org/rfc/rfc8890\"><cite>The Internet is for End Users</cite></a>. August 2020. Informational. URL: <a href=\"https://www.rfc-editor.org/rfc/rfc8890\">https://www.rfc-editor.org/rfc/rfc8890</a>\n   <dt id=\"biblio-rfc8941\">[RFC8941]\n   <dd>M. Nottingham; P-H. Kamp. <a href=\"https://www.rfc-editor.org/rfc/rfc8941\"><cite>Structured Field Values for HTTP</cite></a>. February 2021. Proposed Standard. URL: <a href=\"https://www.rfc-editor.org/rfc/rfc8941\">https://www.rfc-editor.org/rfc/rfc8941</a>\n   <dt id=\"biblio-uievents\">[UIEVENTS]\n   <dd>Gary Kacmarcik; Travis Leithead. <a href=\"https://w3c.github.io/uievents/\"><cite>UI Events</cite></a>. URL: <a href=\"https://w3c.github.io/uievents/\">https://w3c.github.io/uievents/</a>\n   <dt id=\"biblio-unsanctioned-tracking\">[UNSANCTIONED-TRACKING]\n   <dd>Mark Nottingham. <a href=\"http://www.w3.org/2001/tag/doc/unsanctioned-tracking/\"><cite>Unsanctioned Web Tracking</cite></a>. 17 July 2015. TAG Finding. URL: <a href=\"http://www.w3.org/2001/tag/doc/unsanctioned-tracking/\">http://www.w3.org/2001/tag/doc/unsanctioned-tracking/</a>\n   <dt id=\"biblio-webcryptoapi\">[WebCryptoAPI]\n   <dd>Mark Watson. <a href=\"https://w3c.github.io/webcrypto/\"><cite>Web Cryptography API</cite></a>. URL: <a href=\"https://w3c.github.io/webcrypto/\">https://w3c.github.io/webcrypto/</a>\n   <dt id=\"biblio-webrtc-1\">[WEBRTC-1]\n   <dd>WebRTC 1.0: Real-time Communication Between Browsers URL: <a href=\"https://www.w3.org/TR/webrtc/\">https://www.w3.org/TR/webrtc/</a>\n  </dl>\n  <h2 class=\"no-num no-ref heading settled\" id=\"issues-index\"><span class=\"content\">Issues Index</span><a class=\"self-link\" href=\"#issues-index\"></a></h2>\n  <div style=\"counter-reset:issue\">\n   <div class=\"issue\"> Privacy Threat Model is not ready for prime time. <a class=\"issue-return\" href=\"#issue-70c97a29\" title=\"Jump to section\">↵</a></div>\n   <div class=\"issue\"> when we write up a principle on monkey patching,\nbe sure to take this nuance into account. <a href=\"https://github.com/w3ctag/design-principles/issues/184\">[Issue #184]</a> <a class=\"issue-return\" href=\"#issue-05c58ddf\" title=\"Jump to section\">↵</a></div>\n  </div>\n<script>/* script-dfn-panel */\n\ndocument.body.addEventListener(\"click\", function(e) {\n    var queryAll = function(sel) { return [].slice.call(document.querySelectorAll(sel)); }\n    // Find the dfn element or panel, if any, that was clicked on.\n    var el = e.target;\n    var target;\n    var hitALink = false;\n    while(el.parentElement) {\n        if(el.tagName == \"A\") {\n            // Clicking on a link in a <dfn> shouldn't summon the panel\n            hitALink = true;\n        }\n        if(el.classList.contains(\"dfn-paneled\")) {\n            target = \"dfn\";\n            break;\n        }\n        if(el.classList.contains(\"dfn-panel\")) {\n            target = \"dfn-panel\";\n            break;\n        }\n        el = el.parentElement;\n    }\n    if(target != \"dfn-panel\") {\n        // Turn off any currently \"on\" or \"activated\" panels.\n        queryAll(\".dfn-panel.on, .dfn-panel.activated\").forEach(function(el){\n            el.classList.remove(\"on\");\n            el.classList.remove(\"activated\");\n        });\n    }\n    if(target == \"dfn\" && !hitALink) {\n        // open the panel\n        var dfnPanel = document.querySelector(\".dfn-panel[data-for='\" + el.id + \"']\");\n        if(dfnPanel) {\n            dfnPanel.classList.add(\"on\");\n            var rect = el.getBoundingClientRect();\n            dfnPanel.style.left = window.scrollX + rect.right + 5 + \"px\";\n            dfnPanel.style.top = window.scrollY + rect.top + \"px\";\n            var panelRect = dfnPanel.getBoundingClientRect();\n            var panelWidth = panelRect.right - panelRect.left;\n            if(panelRect.right > document.body.scrollWidth && (rect.left - (panelWidth + 5)) > 0) {\n                // Reposition, because the panel is overflowing\n                dfnPanel.style.left = window.scrollX + rect.left - (panelWidth + 5) + \"px\";\n            }\n        } else {\n            console.log(\"Couldn't find .dfn-panel[data-for='\" + el.id + \"']\");\n        }\n    } else if(target == \"dfn-panel\") {\n        // Switch it to \"activated\" state, which pins it.\n        el.classList.add(\"activated\");\n        el.style.left = null;\n        el.style.top = null;\n    }\n\n});\n</script>","oembed":false,"readabilityObject":{"title":"Web Platform Design Principles","content":"<div id=\"readability-page-1\" class=\"page\"><div>\n   <h2 data-level=\"1\" id=\"basic-principles\"><span>1. </span><span>Principles behind design of Web APIs</span><a href=\"#basic-principles\"></a></h2>\n   <p>The Design Principles are directly informed by the ethical framework\nset out in the Ethical Web Principles <a data-link-type=\"biblio\" href=\"#biblio-ethical-web\">[ETHICAL-WEB]</a>.\nThese principles provide concrete practical advice\nin response to the higher level ethical responsibilities\nthat come with developing the web platform.</p>\n   <h3 data-level=\"1.1\" id=\"priority-of-constituencies\"><span>1.1. </span><span>Put user needs first (Priority of Constituencies)</span><a href=\"#priority-of-constituencies\"></a></h3>\n   <p>If a trade-off needs to be made,\nalways put user needs above all.</p>\n   <p>Similarly, when beginning to design an API,\nbe sure to understand and document the user need that the API aims to address.</p>\n   <p><a href=\"https://tools.ietf.org/html/rfc8890\">The internet is for end users</a>:\nany change made to the web platform has the potential to <a href=\"https://www.w3.org/2001/tag/doc/ethical-web-principles/#allpeople\">affect vast numbers of people</a>,\nand may have a profound impact on any person’s life. <a data-link-type=\"biblio\" href=\"#biblio-rfc8890\">[RFC8890]</a></p>\n   <p>User needs come before the needs of web page authors,\nwhich come before than the needs of user agent implementors,\nwhich come before than the needs of specification writers,\nwhich come before theoretical purity.</p>\n   <p>Like all principles,\nthis isn’t absolute.\nEase of authoring affects how content reaches users.\nUser agents have to prioritize finite engineering resources,\nwhich affects how features reach authors.\nSpecification writers also have finite resources,\nand theoretical concerns reflect underlying needs of all of these groups.</p>\n   <p>See also:</p>\n   <ul>\n    <li data-md=\"\">\n     <p><a href=\"https://www.w3.org/2001/tag/doc/ethical-web-principles/#noharm\">The web should not cause harm to society</a></p>\n    </li><li data-md=\"\">\n     <p><a href=\"https://www.w3.org/2001/tag/doc/ethical-web-principles/#control\">The web must enhance individuals' control and power</a></p>\n    </li><li data-md=\"\">\n     <p><a data-link-type=\"biblio\" href=\"#biblio-rfc8890\">[RFC8890]</a></p>\n   </li></ul>\n   <h3 data-level=\"1.2\" id=\"safe-to-browse\"><span>1.2. </span><span>It should be safe to visit a web page</span><a href=\"#safe-to-browse\"></a></h3>\n   <p>When adding new features,\ndesign them to preserve the user expectation\nthat visiting a web page is generally safe.</p>\n   <p>The Web is named for its hyperlinked structure.\nIn order for the web to remain vibrant,\nusers need to be able to expect that merely visiting any given link\nwon’t have implications for the security of their computer,\nor for any essential aspects of their <a href=\"https://www.w3.org/2001/tag/doc/ethical-web-principles/#privacy\">privacy</a>.</p>\n   <p>For example, an API which allows any website to <a href=\"#do-not-expose-use-of-assistive-tech\">detect the use of assistive technologies</a> may make users of these technologies feel unsafe visiting unknown web pages,\nsince any web page may detect this private information.</p>\n   <p>If users have a realistic expectation of safety,\nthey can make informed decisions\nbetween Web-based technologies and other technologies.\nFor example, users may choose to use a web-based food ordering page,\nrather than installing an app,\nsince installing a native app is riskier than visiting a web page.</p>\n   <p>To work towards making sure the reality of safety on the web matches users' expectations,\nwe can take complementary approaches when adding new features:</p>\n   <ul>\n    <li data-md=\"\">\n     <p>We can improve the user interfaces through which the Web is used\nto make it clearer what users of the Web should (and should not) expect;</p>\n    </li><li data-md=\"\">\n     <p>We can change the technical foundations of the Web\nso that they match user expectations of privacy;</p>\n    </li><li data-md=\"\">\n     <p>We can consider the cases where users would be better off\nif expectations were higher,\nand in those cases\ntry to change both technical foundations and expectations.</p>\n   </li></ul>\n   <p>A new feature which introduces safety risks may still improve user safety overall,\nif it allows users to perform a task more safely on a web page\nthan it would be for them to install a native app to do the same thing.\nHowever, this benefit needs to be weighed against the common goal\nof users having a reasonable expectation of safety on web pages.</p>\n   <p>See also:</p>\n   <ul>\n    <li data-md=\"\">\n     <p><a href=\"https://www.w3.org/TR/security-privacy-questionnaire/\">Security and Privacy Self-Review</a></p>\n   </li></ul>\n   <h3 data-level=\"1.3\" id=\"trusted-ui\"><span>1.3. </span><span>Trusted user interface should be trustworthy</span><a href=\"#trusted-ui\"></a></h3>\n   <p>Consider whether new features impact trusted user interfaces.</p>\n   <p>Users depend on trusted user interfaces\nsuch as the address bar, security indicators and permission prompts,\nto understand who they are interacting with and how.\nThese trusted user interfaces must be able to be designed in a way\nthat enables users to trust <a href=\"https://www.w3.org/2001/tag/doc/ethical-web-principles/#verify\">and verify</a> that the information they provide is genuine,\nand hasn’t been spoofed or hijacked by the website.</p>\n   <p>If a new feature allows untrusted user interfaces\nto resemble trusted user interfaces,\nthis makes it more difficult for users to understand what information is trustworthy.</p>\n   <p id=\"example-59575e9e\"><a href=\"#example-59575e9e\"></a> For example, JavaScript <code><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-alert-noargs\" id=\"ref-for-dom-alert-noargs\">alert()</a></code> allows a page to show a modal dialog which looks like part of the browser.\nThis is often used to attempt to trick users into visiting scam websites.\nIf this feature was proposed today, it would probably not proceed. </p>\n   <h3 data-level=\"1.4\" id=\"consent\"><span>1.4. </span><span>Ask users for meaningful consent when appropriate</span><a href=\"#consent\"></a></h3>\n   <p>If a useful feature has the potential to cause harm to users,\nmake sure that the user can give <a href=\"https://www.w3.org/2001/tag/doc/ethical-web-principles/#control\">*meaningful consent*</a> for that feature to be used,\nand that they can refuse consent effectively.</p>\n   <p>In order to give <em>meaningful consent</em>, the user must:</p>\n   <ul>\n    <li data-md=\"\">\n     <p><strong>understand</strong> what permission they may choose whether to grant the web page</p>\n    </li><li data-md=\"\">\n     <p>be able to choose to give or refuse that permission <strong>effectively</strong>.</p>\n   </li></ul>\n   <p>If a feature is powerful enough to require a user consent,\nbut it’s impossible to explain to a typical user what they are consenting to,\nthat’s a signal that you may need to reconsider the design of the feature.</p>\n   <p>If a permission prompt is shown,\nand the user doesn’t grant permission,\nthe Web page should not be able to do anything\nthat the user believes they have refused consent for.</p>\n   <p>By asking for consent,\nwe can inform the user of what capabilities the web page does or doesn’t have,\nreinforcing their confidence that <a href=\"#safe-to-browse\">the web is safe</a>.\nHowever, the <a href=\"#priority-of-constituencies\">user benefit</a> of a new feature must justify the additional burden on users\nto decide whether to grant permission for each feature\nwhenever it’s requested by a Web page.</p>\n   <p id=\"example-07793d34\"><a href=\"#example-07793d34\"></a> For example,\nthe <a href=\"https://www.w3.org/TR/geolocation-API/\">Geolocation API</a> grants access to a user’s location.\nThis can help users in some contexts,\nlike a mapping application,\nbut may be dangerous to some users in other contexts -\nespecially if used without the user’s knowledge.\nSo that the user may decide whether their location may be used by a Web page,\na permission prompt should be shown to the user asking whether to grant location access.\nIf the user refuses permission,\nno location information is available to the Web page. </p>\n   <p>See also:</p>\n   <ul>\n    <li data-md=\"\">\n     <p><a href=\"https://www.w3.org/2001/tag/doc/ethical-web-principles/#privacy\">Security and privacy are essential</a></p>\n   </li></ul>\n   <h3 data-level=\"1.5\" id=\"devices-platforms\"><span>1.5. </span><span>Support the full range of devices and platforms (Media Independence)</span><a href=\"#devices-platforms\"></a></h3>\n   <p>As much as possible,\nensure that features on the web work across different input and output [devices,\nscreen sizes, interaction modes, platforms, and media]\n(https://www.w3.org/2001/tag/doc/ethical-web-principles/#multi).</p>\n   <p>One of the main values of the Web is that it’s extremely flexible:\na Web page may be viewed on virtually any consumer computing device\nat a very wide range of screen sizes,\nmay be used to generate printed media,\nand may be interacted with in a large number of different ways.\nNew features should match the <a href=\"https://www.w3.org/2001/tag/doc/ethical-web-principles/#render\">existing flexibility</a> of the web platform.</p>\n   <div role=\"note\"><p>\n     This doesn’t imply that features which don’t work in <em>every</em> possible context should be excluded.\nFor example, hyperlinks can’t be visited when printed on paper,\nand the <span>click</span> event doesn’t translate perfectly to touch input devices\nwhere positioning and clicking the pointer occur in the same gesture (a \"tap\"). \n    </p><p>These features still work across a wide variety of contexts,\nand can be adapted to devices that don’t support their original intent -\nfor example, a tap on a mobile device will fire a <span>click</span> event as a fallback.</p>\n   </div>\n   <p>Features should also be designed so that the easiest way to use them\nmaintains flexibility.</p>\n   <p><a href=\"#example-f162158a\"></a> The 'display: block',\n'display: flex',\nand 'display: grid' layout models in CSS\nall default to placing content within the available space and without overlap,\nso that it works across screen sizes,\nand allows users to choose their own font and font size without causing text to overflow. </p>\n   <h2 data-level=\"2\" id=\"api-across-languages\"><span>2. </span><span>API Design Across Languages</span><a href=\"#api-across-languages\"></a></h2>\n   <h3 data-level=\"2.1\" id=\"simplicity\"><span>2.1. </span><span>Prefer simple solutions</span><a href=\"#simplicity\"></a></h3>\n   <p>Look hard for simple solutions to the <a href=\"#priority-of-constituencies\">user needs</a> you intend to address.</p>\n   <p>Simple solutions are generally better than complex solutions,\nalthough they may be harder to find.\nSimpler features are easier for user agents to implement and test,\nmore likely to be interoperable,\nand easier for authors to understand.\nIt is especially important to design your feature so that \nthe most common use cases are easy to accomplish.</p>\n   <p>Make sure that your <a href=\"#priority-of-constituencies\">user needs</a> are well-defined.\nThis allows you to avoid scope creep,\nand make sure that your API does actually meet the needs of all users.\nOf course,\ncomplex or rare use cases are also worth solving,\nthough their solutions may be more complicated to use.\nAs Alan Kay said,\n\"simple things should be simple, complex things should be possible.\"</p>\n   <p>Do note however that while common cases are often simple,\ncommonality and complexity are not always correlated.</p>\n   <p><a href=\"#example-b89cef20\"></a> Sanitizing HTML to prevent XSS attacks is a complex process\nthat requires extensive security knowledge,\nhowever the <a href=\"https://wicg.github.io/sanitizer-api/\">Sanitizer API</a> provides a shortcut for this common use case. \nIt also permits simpler types of filtering, but with more configuration. </p>\n   <p>See also:</p>\n   <ul>\n    <li data-md=\"\">\n     <p><a data-link-type=\"biblio\" href=\"#biblio-least-power\">[LEAST-POWER]</a></p>\n   </li></ul>\n   <h3 data-level=\"2.2\" id=\"high-level-low-level\"><span>2.2. </span><span>Resolving tension between high level and low level APIs</span><a href=\"#high-level-low-level\"></a></h3>\n   <p>High-level APIs allow user agents more ability to\nintervene in various ways <a href=\"#priority-of-constituencies\">on behalf of the user</a>,\nsuch as to ensure accessibility, privacy, or usability.</p>\n   <div id=\"font-enumeration\">\n    <p>A font picker (high level API) <a href=\"https://github.com/w3ctag/design-reviews/issues/399\">was recommended by the TAG</a> over a Font Enumeration API (low level API)\nas it addresses the bulk of use cases,\nwhile preserving user privacy,\nas it is free from the the fingerprinting concerns that accompany\na general Font Enumeration API.\nA native font picker also comes with accessibility built-in,\nand provides consistency for end users.</p>\n   </div>\n   <p>Low-level APIs afford authors room for experimentation\nso that high level APIs can organically emerge\nfrom usage patterns over time.\nThey also provide an escape hatch when the higher-level API\nis not adequate for the use case at hand.</p>\n   <p>Lower level building blocks cannot always be exposed as Web APIs.\nA few possible reasons for this are\nto preserve the user’s security and privacy,\nor to avoid tying Web APIs to specific hardware implementations.\nHowever, high level APIs should be designed in terms of\nbuilding blocks over lower level APIs\nwhenever possible.\nThis may guide decisions on how high level the API needs to be.</p>\n   <p>A well-layered solution should ensure continuity\nof the ease-of-use vs power tradeoff curve\nand avoid sharp cliffs\nwhere a small amount of incremental use case complexity\nresults in a large increase of code complexity.</p>\n   <h3 data-level=\"2.3\" id=\"name-thoughtfully\"><span>2.3. </span><span>Name things thoughtfully</span><a href=\"#name-thoughtfully\"></a></h3>\n   <p>Name APIs with care.\nNaming APIs well makes it much easier for authors to use them correctly.</p>\n   <p>See the more detailed <a href=\"#naming-is-hard\">Naming principles</a> section\nfor specific guidance on naming.</p>\n   <h3 data-level=\"2.4\" id=\"consistency\"><span>2.4. </span><span>Consistency</span><a href=\"#consistency\"></a></h3>\n   <p>It is good practice to consider precedent in the design of your API\nand to try to be consistent with it.</p>\n   <p>There is often a tension between API ergonomics and consistency,\nwhen existing precedent is of poor usability.\nIn some cases it makes sense to break consistency to improve usability,\nbut the improvement should be very significant to justify this.</p>\n   <p>Since the web platform has gradually evolved over time,\nthere are often multiple conflicting precedents\nwhich are mutually exclusive.\nYou can weigh which precdent to follow by taking into account\nprevalence (all else being equal, follow the more popular precedent),\nAPI ergonomics (all else being equal, follow the more usable precedent),\nand API age (all else being equal, follow the newer precedent).</p>\n   <p>There is often a tension between internal and external consistency. <em>Internal consistency</em> is consistency with the rest of the system,\nwhereas <em>external consistency</em> is consistency with the rest of the world.\nIn the web platform, that might materialize in three layers:\nconsistency within the technology the API belongs to (e.g. CSS),\nconsistency with the rest of the web platform,\nand in some cases external precedent,\nwhen the API relates to a particular specialized outside domain.\nIn those cases, it is useful to consider what the majority of users will be.\nSince for most APIs the target user is someone who is familiar with the\ntechnology they are defined in,\nerr on the side of favoring consistency with that.</p>\n   <p><a href=\"#example-10a5f89c\"></a> One example is <a href=\"https://www.w3.org/TR/css-color-4/#funcdef-lab\">Lab colors</a>:\nIt would be more consistent with the rest of CSS to use percentages for L (0%-100%),\nbut more consistent with the rest of Color Science to use a unitless number (0-100).\nThere was a lot of heated debate,\nwhich resolved in favor of percentages,\ni.e. consistency within CSS. </p>\n   <p>There is also a separate section on <a href=\"#naming-consistency\">naming consistency</a>.</p>\n   <h3 data-level=\"2.5\" id=\"feature-detect\"><span>2.5. </span><span>New features should be detectable</span><a href=\"#feature-detect\"></a></h3>\n   <p>Provide a way for authors to programmatically detect\nwhether your feature is available,\nso that web content may gracefully handle the feature not being present.</p>\n   <p>An existing feature may not be available on a page for a number of reasons.\nTwo of the more common reasons are\nbecause it hasn’t been implemented yet, or\nbecause it’s only available in <a href=\"#secure-context\">secure contexts</a>.</p>\n   <p>Authors shouldn’t need to write different code to handle each scenario.\nThat way, even if an author only knows or cares about one scenario,\nthe code will handle all of them.</p>\n   <p role=\"note\"> When a feature is available but isn’t feasible to use\nbecause a required device isn’t present,\nit’s better to expose that the feature is available\nand have a separate way to detect that the device isn’t.\nThis allows authors to handle a device not being available differently\nfrom the feature not being available,\nfor example by suggesting the user connect or enable the device. </p>\n   <p>See <a href=\"#device-enumeration\">§ 9.2 Use care when exposing APIs for selecting or enumerating devices</a>.</p>\n   \n   <p>Authors should always be able to detect a feature from JavaScript,\nand in some cases the feature should also be detectable\nin the language where it’s used\n(such as <a data-link-type=\"maybe\" href=\"https://drafts.csswg.org/css-conditional-3/#at-ruledef-supports\" id=\"ref-for-at-ruledef-supports\">@supports</a> in CSS).</p>\n   <p>In some cases, it may <strong>not</strong> be appropriate to allow feature detection.\nWhether the feature should be detectable or not\nshould be based on the <a href=\"#priority-of-constituencies\">user need</a> for the feature:\nif there is a user need or design principle which would fail\nif feature detection were available for the feature,\nthen you should not support feature detection.</p>\n   <p>Also, if a feature is generally not exposed to developers,\nit is not appropriate to support feature detection.\nFor example, private browsing mode is a concept\nwhich is recognised in web specifications,\nbut not exposed to authors.\nFor private browsing mode to support the user’s needs,\nit must not be feature detected.</p>\n   <p>See also:</p>\n   <ul>\n    <li data-md=\"\">\n     <p><a href=\"#do-not-expose-use-of-private-browsing-mode\">§ 2.7 Don’t reveal that private browsing mode is engaged</a></p>\n    </li><li data-md=\"\">\n     <p><a href=\"#do-not-expose-use-of-assistive-tech\">§ 2.9 Don’t reveal that assistive technologies are being used</a></p>\n    </li><li data-md=\"\">\n     <p><a href=\"#secure-context\">§ 2.6 Consider limiting new features to secure contexts</a></p>\n   </li></ul>\n   <h3 data-level=\"2.6\" id=\"secure-context\"><span>2.6. </span><span>Consider limiting new features to secure contexts</span><a href=\"#secure-context\"></a></h3>\n   <p>Always limit your feature to secure contexts\nif it would pose a risk to the user\nwithout the authentication, integrity, or confidentiality\nthat’s present only in secure contexts.</p>\n   <p><a href=\"#example-ba6f372c\"></a> One example of a feature that should be limited to secure contexts\nis <a href=\"https://www.w3.org/TR/geolocation-API/\">Geolocation</a>,\nsince it would be a risk to users' privacy to transmit their location in an insecure way. </p>\n   <p>For other features, TAG members past and present\nhaven’t reached consensus on general advice.\nSome believe that all new features\n(other than features which are additions to existing features)\nshould be limited to secure contexts.\nThis would help encourage the use of HTTPS,\nhelping users be more secure in general.</p>\n   <p>Others believe that features should only be limited to secure contexts\nif they have a known security or privacy impact.\nThis lowers the barrier to entry for creating web pages\nthat take advantage of new features which don’t impact user security or privacy.</p>\n   <div role=\"note\"><p>\n     Specification authors can limit most features defined in <a href=\"https://heycam.github.io/webidl/\">Web IDL</a>,\nto secure contexts\nby using the\n[<code><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#SecureContext\" id=\"ref-for-SecureContext\">SecureContext</a></code>] extended attribute\non interfaces, namespaces, or their members (such as methods and attributes). \n    </p><p>However, for some types of API (e.g., dispatching an event),\nlimitation to secure contexts should just\nbe defined in normative prose in the specification.\nIf this is the case,\nconsider whether there might be scope for adding a similar mechanism\nto [<code><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#SecureContext\" id=\"ref-for-SecureContext①\">SecureContext</a></code>]\nto make this process easier for future API developers.</p>\n   </div>\n   <div role=\"note\"><p>\n     As described in <a href=\"#feature-detect\">§ 2.5 New features should be detectable</a>,\nyou should provide a way to programmatically detect whether a feature is available,\nincluding cases where the feature is unavailable because the context isn’t secure. \n    </p><p>However, if, for some reason\nthere is no way for code to gracefully handle the feature not being present,\nlimiting the feature to secure contexts might cause problems\nfor code (such as libraries) that may be used in either secure or non-secure contexts.</p>\n   </div>\n   <h3 data-level=\"2.7\" id=\"do-not-expose-use-of-private-browsing-mode\"><span>2.7. </span><span>Don’t reveal that private browsing mode is engaged</span><a href=\"#do-not-expose-use-of-private-browsing-mode\"></a></h3>\n   <p>Make sure that your feature doesn’t give authors a way to detect private browsing mode.</p>\n   <p>Some people use <a href=\"https://www.w3.org/2001/tag/doc/private-browsing-modes/\">private browsing mode</a> to protect their own personal safety.\nBecause of this, the fact that someone is using private browsing mode\nmay be <a href=\"https://www.w3.org/TR/security-privacy-questionnaire/#sensitive-data\">sensitive information</a> about them.\nThis information may <a href=\"https://www.w3.org/2001/tag/doc/ethical-web-principles/#noharm\">harm</a> people\nif it is revealed to a web site controlled by others who have power over them\n(such as employers, parents, partners,\nor <a href=\"https://www.w3.org/2001/tag/doc/ethical-web-principles/#expression\">state actors</a>).</p>\n   <p>Given such dangers,\nwebsites should not be able to detect that private browsing mode is engaged.</p>\n   <p><a href=\"#example-52cad010\"></a> User Agents which support <a href=\"https://www.w3.org/TR/IndexedDB/\">IndexedDB</a> should not disable it in private browsing mode,\nbecause that would reveal that private browsing mode is engaged </p>\n   \n   <p>See also:</p>\n   <ul>\n    <li data-md=\"\">\n     <p><a href=\"https://www.w3.org/2001/tag/doc/ethical-web-principles/#privacy\">Security and privacy are essential</a></p>\n    </li><li data-md=\"\">\n     <p><a href=\"https://www.w3.org/TR/security-privacy-questionnaire/#underlying-platform-data\">What data does this specification expose to an origin?</a></p>\n    </li><li data-md=\"\">\n     <p><a href=\"#private-browsing-mode\">§ 2.8 Consider how your API should behave in private browsing mode</a></p>\n   </li></ul>\n   <h3 data-level=\"2.8\" id=\"private-browsing-mode\"><span>2.8. </span><span>Consider how your API should behave in private browsing mode</span><a href=\"#private-browsing-mode\"></a></h3>\n   <p>If necessary, specify how your API should behave differently\nin private browsing mode.</p>\n   <p>For example, if your API would reveal information\nthat would allow someone to correlate\na single user’s activity\nboth in and out of private browsing mode,\nconsider possible <a href=\"https://www.w3.org/TR/security-privacy-questionnaire/#mitigations\">mitigations</a> such as introducing noise,\nor using permission prompts to give the user extra information\nto help them meaningfully consent to this tracking (see <a href=\"#consent\">§ 1.4 Ask users for meaningful consent when appropriate</a>).</p>\n   <p>Private browsing modes enable users to browse the web\nwithout leaving any trace of their private browsing on their device.\nTherefore, APIs which provide client-side storage\nshould not persist data stored\nwhile private browsing mode is engaged\nafter it’s disengaged.\nThis can and should be done\nwithout revealing any detectable API differences to the site.</p>\n   <div id=\"example-fb11a26c\">\n    <p><a href=\"#example-fb11a26c\"></a> User Agents which support <a href=\"https://html.spec.whatwg.org/multipage/webstorage.html#dom-localstorage\">localStorage</a> should not persist storage area changes\nmade while private browsing mode is engaged. \n    </p><p>If the User Agent has two simultaneous sessions with a site,\none in private browsing mode and one not,\nstorage area changes made in the private browsing mode session\nshould not be revealed to the other browsing session,\nand vice versa.\n(The <a href=\"https://html.spec.whatwg.org/multipage/indices.html#event-storage\">storage event</a> should not be fired\nat the other session’s <a href=\"https://html.spec.whatwg.org/multipage/window-object.html#window\" id=\"termref-for-window\">window object</a>.)</p>\n   </div>\n   <p>See also:</p>\n   <ul>\n    <li data-md=\"\">\n     <p><a href=\"#do-not-expose-use-of-private-browsing-mode\">§ 2.7 Don’t reveal that private browsing mode is engaged</a></p>\n    </li><li data-md=\"\">\n     <p><a href=\"https://www.w3.org/TR/security-privacy-questionnaire/#persistent-origin-specific-state\">Does this specification introduce new state for an origin that persists across browsing sessions?</a></p>\n    </li><li data-md=\"\">\n     <p><a href=\"https://www.w3.org/TR/security-privacy-questionnaire/#private-browsing\">Security and privacy self review: Private Browsing</a></p>\n   </li></ul>\n   <h3 data-level=\"2.9\" id=\"do-not-expose-use-of-assistive-tech\"><span>2.9. </span><span>Don’t reveal that assistive technologies are being used</span><a href=\"#do-not-expose-use-of-assistive-tech\"></a></h3>\n   <p>Make sure that your API doesn’t provide a way\nfor authors to detect that a user is using assistive technology\nwithout the user’s consent.</p>\n   <p><a href=\"https://www.w3.org/2001/tag/doc/ethical-web-principles/#allpeople\">The web platform must be accessible to people with disabilities.</a> If a site can detect that a user is using an assistive technology,\nthat site can deny or restrict the user’s access to the services it provides.</p>\n   <p>People who make use of assistive technologies\nare often <a href=\"https://www.w3.org/2001/tag/doc/ethical-web-principles/#noharm\">vulnerable members of society</a>;\ntheir use of assistive technologies is <a href=\"https://www.w3.org/TR/security-privacy-questionnaire/#sensitive-data\">sensitive information</a> about them.\nIf an API provides access to this information\nwithout the user’s <a href=\"#consent\">consent</a>,\nthis sensitive information may be revealed to others\n(including <a href=\"https://www.w3.org/2001/tag/doc/ethical-web-principles/#expression\">state actors</a>)\nwho may wish them harm.</p>\n   <p>Sometimes people propose features which aim to improve the user experience\nfor users of assistive technology,\nbut which would reveal the user’s use of assistive technology as a side effect.\nWhile these are well intentioned,\nthey violate <a href=\"#safe-to-browse\">§ 1.2 It should be safe to visit a web page</a>,\nso alternative solutions must be found.</p>\n   \n   <p>See also:</p>\n   <ul>\n    <li data-md=\"\">\n     <p><a href=\"https://w3c.github.io/apa/fast/\">Web Technology Accessibility Guidelines</a></p>\n    </li><li data-md=\"\">\n     <p><a href=\"https://www.w3.org/2001/tag/doc/ethical-web-principles/#privacy\">Security and privacy are essential</a></p>\n    </li><li data-md=\"\">\n     <p><a href=\"https://www.w3.org/TR/security-privacy-questionnaire/#underlying-platform-data\">What data does this specification expose to an origin?</a></p>\n   </li></ul>\n   <h3 data-level=\"2.10\" id=\"support-non-fully-active\"><span>2.10. </span><span>Support non-\"fully active\" documents</span><a href=\"#support-non-fully-active\"></a></h3>\n   <p>After a user navigated away from a document,\nthe document might be cached in a non-<a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active\">fully active</a> state,\nand might be reused when the user navigates back to the entry holding the document, which makes navigation fast for users.\nIn browsers, this is known as the back/forward cache, or \"<abbr title=\"back/forward cache\">BFCache</abbr>\" for short.\nIn the past, many APIs have missed specifying support for non-<a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active①\">fully active</a> documents,\nmaking them hard to support in various user agents to cache pages in the BFCache, effectively making the user experience of navigating back and forth less optimal.</p>\n   <p>To avoid this happening with your API,\nyou should specify support for non-<a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active②\">fully active</a> documents by following these guidelines:</p>\n   <p role=\"note\"><span>Note:</span> It is possible for a document to not become <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active③\">fully active</a> for other reasons not related to\ncaching, such as when the iframe holding the document gets detached.\nSome advices below might not be relevant for those cases,\nsince the document will never return to <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active④\">fully active</a> again.</p>\n   <h4 data-level=\"2.10.1\" id=\"gate-fully-active\"><span>2.10.1. </span><span>Gate actions with <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active⑤\">fully active</a> checks</span><a href=\"#gate-fully-active\"></a></h4>\n   <p>When performing actions that might update the state of a document,\nbe aware that the document might not be <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active⑥\">fully active</a> and is considered as \"non-existent\" from the user’s perspective.\nThis means they should not receive updates or perform actions.</p>\n   <p role=\"note\"><span>Note:</span> It is possible for a <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active⑦\">fully active</a> document to be perceived as \"non-existent\" by users,\nsuch as when the document is <a href=\"https://jeremyroman.github.io/alternate-loading-modes/\">displaying prerendered content</a>.\nThese documents might behave differently than non-<a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active⑧\">fully active</a> documents,\nand the guidelines here might not be applicable to them,\nas it is written only for handling non-<a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active⑨\">fully active</a> documents.</p>\n   <p>In many cases,\nanything that happens while the document is not <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active①⓪\">fully active</a> should be treated as if it never happened.\nIf it makes more sense to \"update\" a document to ensure it does not hold  stale information\nafter it becomes <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active①①\">fully active</a> again, consider the <a href=\"#listen-fully-active\">§ 2.10.2 Listen for changes to fully active status</a> pattern below.</p>\n   <p><a href=\"#example-86baec91\"></a> APIs that periodically send information updates,\n  such as Geolocation API’s <code><a data-link-type=\"idl\">watchPosition()</a></code> should not send updates if the document is no longer fully active.\n  They also should not queue those updates to arrive later,\n  and only resume sending updates when the document becomes active again,\n  possibly sending one update with the latest information then. </p>\n   <h4 data-level=\"2.10.2\" id=\"listen-fully-active\"><span>2.10.2. </span><span>Listen for changes to <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active①②\">fully active</a> status</span><a href=\"#listen-fully-active\"></a></h4>\n   <p>When a document goes from <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active①③\">fully active</a> to non-<a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active①④\">fully active</a>,\nit should be treated similarly to the way discarded documents are treated.\nThe document must not retain exclusive access to shared resources\nand must ensure that no new requests are issued\nand that connections that allow for new incoming requests are terminated.\nWhen a document goes from non-<a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active①⑤\">fully active</a> to <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active①⑥\">fully active</a> again,\nit can restore connections if appropriate.</p>\n   <p>While web authors can manually do cleanup (e.g. release the resources, sever connections)\nfrom within the <code><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/indices.html#event-pagehide\" id=\"ref-for-event-pagehide\">pagehide</a></code> event and restore them from the <code><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/indices.html#event-pageshow\" id=\"ref-for-event-pageshow\">pageshow</a></code> event themselves,\ndoing this automatically from the API design allows the document to be kept alive after navigation by default,\nand is more likely to lead to well-functioning web applications.</p>\n   <p><a href=\"#example-76ebae04\"></a> APIs that create live connections can pause/close the connection and possibly resume/reopen it later.\n  It’s also possible to let the connection stay open to complete existing ongoing requests,\n  and later update the document with the result when it gets restored, if appropriate (e.g.\n  resource loads). </p>\n   <p><a href=\"#example-1dfbe459\"></a> APIs that hold non-exclusive resources\n  may be able to release the resource when the document becomes not fully active,\n  and re-acquire them when it becomes <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active①⑦\">fully active</a> again\n  (Screen Wake Lock API is already <a href=\"https://w3c.github.io/screen-wake-lock/#handling-document-loss-of-full-activity\">doing</a> the first part). </p>\n   <p role=\"note\"><span>Note:</span> this might not be appropriate for all types of resources,\ne.g. if an exclusive lock is held,\nwe cannot just release it and reacquire when <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active①⑧\">fully active</a> since another page could then take that lock.\nIf there is an API to signal to the page that this has happened,\nit may be acceptable but beware that if the only time this happens is with BFCache,\nthen it’s likely many pages are not prepared for it. If it is not possible to support BFCache,\nfollow the <a href=\"#discard\">§ 2.10.4 Discard non-fully active documents for situations that can’t be supported</a> pattern described below.</p>\n   <p>Additionally, when a document becomes <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active①⑨\">fully active</a> again,\nit can be useful to update it with the current state of the world,\nif anything has changed while it is in the non-<a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active②⓪\">fully active</a> state.\nHowever, care needs to be taken with events that occurred while in the BFCache.\nWhen not <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active②①\">fully active</a>, for some cases, all events should be dropped,\nin some the latest state should be delivered in a single event,\nin others it may be appropriate to queue events or deliver a combined event.\nThe correct approach is case by case and should consider privacy,\ncorrectness, performance and ergonomics.</p>\n   <p role=\"note\"><span>Note:</span> Making sure the latest state is sent to a document that becomes <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active②②\">fully active</a> again is especially important when retrofitting existing APIs.\nThis is because current users of these APIs expect to always have the latest information.\nDropping state updates can leave the document with stale information,\nwhich can lead to unexpected and hard-to-detect breakage of existing sites.</p>\n   <p><a href=\"#example-32a4ab83\"></a> The <code><a data-link-type=\"idl\">gamepadconnected</a></code> event\n  can be sent to a document that becomes <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active②③\">fully active</a> again\n  if a gamepad is connected while the document is not <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active②④\">fully active</a>.\n  If the gamepad was repeatedly connected and disconnected,\n  only the final connected event should be delivered.\n  (This is not specified yet, see <a href=\"https://github.com/w3c/gamepad/issues/149\">issue</a>) </p>\n   <p><a href=\"#example-46b7099c\"></a> For geolocation or other physical sensors,\n  no information about what happened while not <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active②⑤\">fully active</a> should be delivered.\n  The events should simply resume from when the document became <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active②⑥\">fully active</a>.\n  However, these APIs should check the state when the document becomes <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active②⑦\">fully active</a> again,\n  to determine if a status update should be sent (e.g. is the current location far away from the\n  location when the document becomes not fully active?), to ensure the document has the latest\n  information, as guaranteed by the API normally. </p>\n   <p><a href=\"#example-3f8cc6e6\"></a> For network connections or streams,\n  the data received while not <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active②⑧\">fully active</a> should be delivered only\n  when the document becomes <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active②⑨\">fully active</a> again,\n  but whereas a stream might have created many events with a small amount of data each,\n  it could be delivered as smaller number of events with more data in each. </p>\n   <h4 data-level=\"2.10.3\" id=\"omit-non-fully-active\"><span>2.10.3. </span><span>Omit non-<a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active③⓪\">fully active</a> documents from APIs that span multiple documents</span><a href=\"#omit-non-fully-active\"></a></h4>\n    Non-<a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active③①\">fully active</a> documents should not be observable,\nso APIs should treat them as if they no longer exist.\nThey should not be visible to the \"outside world\" through document-spanning APIs\n(e.g. <code><a data-link-type=\"idl\" href=\"https://w3c.github.io/ServiceWorker/#dom-clients-matchall\" id=\"ref-for-dom-clients-matchall\">clients.matchAll()</a></code>, <code><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#dom-opener\" id=\"ref-for-dom-opener\">window.opener</a></code>). \n   <p role=\"note\"><span>Note:</span> This should be rare since cross-document-spanning APIs are themselves relatively rare.</p>\n   \n   \n   <h4 data-level=\"2.10.4\" id=\"discard\"><span>2.10.4. </span><span>Discard non-<a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active③⑥\">fully active</a> documents for situations that can’t be supported</span><a href=\"#discard\"></a></h4>\n    If supporting non-<a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active③⑦\">fully active</a> documents is not possible for certain cases,\nexplicitly specify it by <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/window-object.html#discard-a-document\" id=\"ref-for-discard-a-document\">discarding the document|</a> if the situation happens after the user navigated away,\nor setting the document’s <a href=\"https://html.spec.whatwg.org/multipage/browsing-the-web.html#concept-document-salvageable\">salvageable</a> bit to false if the situation happens before or during the navigation away from the document,\nto cause it to be automatically discarded after navigation. \n   <p role=\"note\"><span>Note:</span> this should be rare and probably should only be used when retrofitting old APIs,\nas new APIs should always strive to work well with BFCache.</p>\n   \n   <p><a href=\"#example-47c778e3\"></a> Calling <code><a data-link-type=\"idl\" href=\"https://w3c.github.io/ServiceWorker/#dom-clients-claim\" id=\"ref-for-dom-clients-claim\">clients.claim()</a></code> should not wait for non-<a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active③⑧\">fully active</a> clients,\n  instead it should cause the non-<a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active③⑨\">fully active</a> client documents to be discarded.\n  (This is currently not specified, see <a href=\"https://github.com/w3c/ServiceWorker/issues/1594\">issue</a>) </p>\n   <h4 data-level=\"2.10.5\" id=\"per-document-state\"><span>2.10.5. </span><span>Be aware that per-document state/data might persist after navigation</span><a href=\"#per-document-state\"></a></h4>\n    As a document might be reused even after navigation,\nbe aware that tying something to a document’s lifetime\nalso means reusing it after navigations.\nIf this is not desirable,\nconsider listening to changes to the <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#fully-active\" id=\"ref-for-fully-active④⓪\">fully active</a> state\nand doing cleanup as necessary (see above). \n   <p><a href=\"#example-9be02aaf\"></a> <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/interaction.html#sticky-activation\" id=\"ref-for-sticky-activation\">Sticky activation</a> is determined by the \"last activation timestamp\",\n  which is tied to a document.\n  This means after a user triggers activation once on a document,\n  the document will have sticky activation forever,\n  even after the user navigated away and back to it again.\n  Whether this should actually be reset when full activity is lost or not\n  is still <a href=\"https://github.com/whatwg/html/issues/6588\">under discussion</a>. </p>\n   <h3 data-level=\"2.11\" id=\"third-party-tools\"><span>2.11. </span><span>Prioritize usability over compatibility with third-party tools</span><a href=\"#third-party-tools\"></a></h3>\n   <p>Design new features with usability as the primary goal, and compatibility with third-party tooling as a secondary goal.</p>\n   <p>The web platform benefits from a wide ecosystem of tooling\nto facilitate easier and faster development.\nA lot of the time, the syntax of an upcoming web platform feature\nmay conflict with that of a third-party tool causing breakage.\nThis is especially common as third-party tools are often used to prototype\nnew web platform features.</p>\n   <p>In general, web platform features last a lot longer than most third-party tools,\nand thus giving them the optimal syntax and functionality should be of high priority.</p>\n   <p>In some cases, the conflict will introduce problems across a large number of\nweb sites, necessitating the feature’s syntax to be redesigned to avoid clashes.</p>\n   <p><a href=\"#example-1e284310\"></a> <code>Array.prototype.contains()</code> had to be renamed to <code>Array.prototype.includes()</code> to avoid clashes with\n    the identically named but incompatible method from PrototypeJS,\n    a library that was in use in millions of websites. </p>\n   <p>However, these cases should be exceptions.</p>\n   <p>When deciding whether to break third party tools with new syntax, there are several factors to consider,\nsuch as severity of the breakage,\npopularity of the third party tool,\nand many more.</p>\n   <p>Possibly the most important factor is how severely would the usability of the web platform feature be compromised\nif its syntax was changed to avoid breaking the third party tool?\nIf several alternatives of similar usability are being considered,\nit is usually preferable to prioritize the ones that inconvenience third party tools the least.</p>\n   <p><a href=\"#example-4a031163\"></a> When the CSS WG was designing <a data-link-type=\"biblio\" href=\"#biblio-css-grid-1\">CSS Grid Layout</a>,\nsquare brackets were chosen instead of parentheses for naming grid tracks\nto avoid breaking Sass, a popular preprocessor. </p>\n   <p>However, if avoiding breaking the third party tool would lead to\na <em>significant</em> negative impact on of the feature’s usability,\nthat is rarely an acceptable tradeoff,\nunless it causes significant breakage of live websites.</p>\n   <p>Languages should also provide mechanisms for extensibility\nthat authors can use to extend the language\nwithout breaking future native functionality,\nto reduce such dilemmas in the future.</p>\n   <h2 data-level=\"3\" id=\"html\"><span>3. </span><span>HTML</span><a href=\"#html\"></a></h2>\n   <p>This section details design principles for features which are exposed via HTML.</p>\n   <h3 data-level=\"3.1\" id=\"attribute-reuse\"><span>3.1. </span><span>Re-use attribute names (only) for similar functionality</span><a href=\"#attribute-reuse\"></a></h3>\n   <p>If you are adding a feature that is specified through an HTML attribute,\ncheck if there is an existing attribute name on another element\nthat specifies similar functionality.\nRe-using an existing attribute name means authors can utilize existing knowledge,\nmaintains <a href=\"#consistency\">consistency</a> across the language,\nand keeps its vocabulary small.</p>\n   <p><a href=\"#example-c1977603\"></a> The same attribute name, <code><a data-link-type=\"element-sub\" href=\"https://html.spec.whatwg.org/multipage/form-elements.html#attr-select-multiple\" id=\"ref-for-attr-select-multiple\">multiple</a></code>,\n\tis used on both <code><a data-link-type=\"element\" href=\"https://html.spec.whatwg.org/multipage/form-elements.html#the-select-element\" id=\"ref-for-the-select-element\">select</a></code> to allow selection of multiple values,\n\tas well as on <code><a data-link-type=\"element\" href=\"https://html.spec.whatwg.org/multipage/input.html#the-input-element\" id=\"ref-for-the-input-element\">input</a></code> to allow entry of multiple values. </p>\n   <p><a href=\"#example-628fe6cf\"></a> The <code><a data-link-type=\"element-sub\" href=\"https://html.spec.whatwg.org/multipage/interactive-elements.html#attr-details-open\" id=\"ref-for-attr-details-open\">open</a></code> attribute was introduced on the <code><a data-link-type=\"element\" href=\"https://html.spec.whatwg.org/multipage/interactive-elements.html#the-details-element\" id=\"ref-for-the-details-element\">details</a></code> element,\n\tand then re-used by <code><a data-link-type=\"element\" href=\"https://html.spec.whatwg.org/multipage/interactive-elements.html#the-dialog-element\" id=\"ref-for-the-dialog-element\">dialog</a></code>. </p>\n   <p>If you do re-use an existing attribute,\ntry to keep its syntax as close as possible to the syntax of the existing attribute.</p>\n   <p><a href=\"#example-0e853da5\"></a> The <code><a data-link-type=\"element-sub\" href=\"https://html.spec.whatwg.org/multipage/forms.html#attr-label-for\" id=\"ref-for-attr-label-for\">for</a></code> attribute was introduced on the <code><a data-link-type=\"element\" href=\"https://html.spec.whatwg.org/multipage/forms.html#the-label-element\" id=\"ref-for-the-label-element\">label</a></code> element,\n\tfor specifying which form element it should be associated with.\n\tIt was later re-used by <code><a data-link-type=\"element\" href=\"https://html.spec.whatwg.org/multipage/form-elements.html#the-output-element\" id=\"ref-for-the-output-element\">output</a></code>,\n\tfor specifying which elements contributed\n\tinput values to or otherwise affected the calculation.\n\tThe syntax of the latter is broader:\n\tit accepts a space-separated list of ids,\n\twhereas the former only accepts one id.\n\tHowever, they both still conform to the same syntax,\n\twhereas e.g. if one of them accepted a list of ids,\n\tand the other one a selector, that would be an antipattern. </p>\n   <p>The inverse also applies:\ndo <strong>not</strong> re-use an existing attribute name if\nthe functionality you are adding is <strong>not</strong> similar to that of the existing attribute.</p>\n   <p><a href=\"#example-9866c588\"></a> The <code>type</code> attribute is used on the <code><a data-link-type=\"element\" href=\"https://html.spec.whatwg.org/multipage/input.html#the-input-element\" id=\"ref-for-the-input-element①\">input</a></code> and <code><a data-link-type=\"element\" href=\"https://html.spec.whatwg.org/multipage/form-elements.html#the-button-element\" id=\"ref-for-the-button-element\">button</a></code> elements\n    to further specialize the element type,\n    whereas on every other element (e.g. <code><a data-link-type=\"element\" href=\"https://html.spec.whatwg.org/multipage/semantics.html#the-link-element\" id=\"ref-for-the-link-element\">link</a></code>, <code><a data-link-type=\"element\" href=\"https://html.spec.whatwg.org/multipage/scripting.html#script\" id=\"ref-for-script\">script</a></code>, <code><a data-link-type=\"element\" href=\"https://html.spec.whatwg.org/multipage/semantics.html#the-style-element\" id=\"ref-for-the-style-element\">style</a></code>)\n    it specifies MIME type.\n    This is an antipattern; one of these groups of attributes should have had a different name. </p>\n   <h3 data-level=\"3.2\" id=\"avoid-html-parser-blocking\"><span>3.2. </span><span> Do not pause the HTML parser</span><a href=\"#avoid-html-parser-blocking\"></a></h3>\n   <p>Ensure that your design does not require HTML parser to pause to handle external resources.</p>\n   <p>As a page parses,\nthe browser discovers assets that the page needs,\nand figures out a priority in which they should be loaded in parallel.\nSuch parsing can be disrupted by a resource which blocks the discovery of subsequent resources.\nAt worst, it means the browser downloads items in series rather than parallel.\nAt best, it means the browser queues downloads based on speculative parsing,\nwhich may turn out to be incorrect.</p>\n   <p>Features that block the parser generally do so\nbecause they want to feed additional content into the parser\nbefore subsequent content.\nThis is the case of legacy <code>&lt;script src=\"…\"&gt;</code> elements,\nwhich can inject into the parser using <code>document.write(…)</code>.\nDue to the performance issues above, new features must not do this.</p>\n   <h3 data-level=\"3.3\" id=\"avoid-render-blocking\"><span>3.3. </span><span> Avoid features that block rendering</span><a href=\"#avoid-render-blocking\"></a></h3>\n   <p>Features that require resource loading or other operations before rendering the page,\noften result in blank page (or the previous page). The result is a poor user experience.</p>\n   <p>Consider adding such features only in cases when the overall user experience is improved.\nA canonical example of this is blocking rendering in order to download and process a stylesheet. \nThe alternative user experience is a flash of unstyled content, which is undesirable.</p>\n   <h2 data-level=\"4\" id=\"css\"><span>4. </span><span>Cascading Style Sheets (CSS)</span><a href=\"#css\"></a></h2>\n   <p>This section details design principles for features which are exposed via CSS.</p>\n   <h3 data-level=\"4.1\" id=\"css-property-separation\"><span>4.1. </span><span>Separate CSS properties based on what should cascade separately</span><a href=\"#css-property-separation\"></a></h3>\n   <p>Decide which values should be grouped together as CSS properties\nand which should be separate properties\nbased on what makes sense to set independently.</p>\n   <p><a href=\"https://www.w3.org/TR/2011/REC-CSS2-20110607/cascade.html#cascade\">CSS cascading</a> allows <a href=\"https://www.w3.org/TR/2011/REC-CSS2-20110607/syndata.html#declaration\">declarations</a> from different rules or different style sheets\nto override one another.\nA set of values that should all be overridden together\nshould be grouped together in a single property so that they cascade together.\nLikewise, values that should be able to be overridden independently\nshould be separate properties.</p>\n   <div id=\"example-e15a5479\">\n    <p><a href=\"#example-e15a5479\"></a>For example, the \"size\" and \"sink\" aspects of the <a data-link-type=\"property\" href=\"https://drafts.csswg.org/css-inline-3/#propdef-initial-letter\" id=\"ref-for-propdef-initial-letter\">initial-letter</a> property\nbelong in a single property\nbecause they are part of a single initial letter effect\n(e.g., a drop cap, sunken cap, or raised cap). \n    </p><p>However, the <a data-link-type=\"property\" href=\"https://drafts.csswg.org/css-inline-3/#propdef-initial-letter-align\" id=\"ref-for-propdef-initial-letter-align\">initial-letter-align</a> property should be separate because it\nsets an alignment policy for all of these effects across the document\nwhich is a general stylistic choice\nand a function of the script (e.g., Latin, Cyrillic, Arabic) used in the document.</p>\n   </div>\n   <h3 data-level=\"4.2\" id=\"css-inherited-or-not\"><span>4.2. </span><span>Make appropriate choices for whether CSS properties are inherited</span><a href=\"#css-inherited-or-not\"></a></h3>\n   <p>Decide whether a property should be <a href=\"https://drafts.csswg.org/css-cascade-3/#inherited-property\">inherited</a> based on whether the effect of the property should be overridden or added to\nif set on an ancestor as well as a descendant.</p>\n   <p>If setting the property on a descendant element needs to override (rather than add to)\nthe effect of setting it on an ancestor,\nthen the property should probably be inherited.</p>\n   <p>If setting the property on a descendant element is a separate effect\nthat adds to setting it on an ancestor,\nthen the property should probably <strong>not</strong> be inherited.</p>\n   <p>A specification of an non-inherited property requiring that the handling of an element\nlook at the value of that property on its ancestors (which may also be slow)\nis a \"code smell\" that suggests that the property likely should have been inherited.\nA specification of an inherited property requiring that the handling of an element\nignore the value of a property if it’s the same as the value on the parent element\nis a \"code smell\" that suggests that the property likely should not have been inherited.</p>\n   <p> If a property has an effect on text,\nthen it’s almost always true that\na descendant element needs to override (rather than add to)\nthe effect of setting it on an ancestor,\nand the property should be inherited.\nThis is also needed to maintain the design principle that\ninserting an unstyled inline element around a piece of text\ndoesn’t change the appearance of that text. </p>\n   <div id=\"example-58897411\">\n    <p><a href=\"#example-58897411\"></a> For example, the <a data-link-type=\"property\" href=\"https://drafts.csswg.org/css-backgrounds-3/#propdef-background-image\" id=\"ref-for-propdef-background-image\">background-image</a> property is <strong>not</strong> inherited. \n    </p><p>If the <a data-link-type=\"property\" href=\"https://drafts.csswg.org/css-backgrounds-3/#propdef-background-image\" id=\"ref-for-propdef-background-image①\">background-image</a> property had been inherited,\nthen the specification would have had to create a good bit of complexity\nto avoid a partially-transparent image\nbeing visibly repeated for each descendant element.\nThis complexity probably would have involved\nbehaving differently if the property had the same value on the parent element,\nwhich is the \"code smell\" mentioned above that suggests\nthat a property likely should not have been inherited.</p>\n   </div>\n   <div id=\"example-51dea7ed\">\n    <p><a href=\"#example-51dea7ed\"></a> Another example is the <a data-link-type=\"property\" href=\"https://drafts.csswg.org/css-fonts-4/#propdef-font-size\" id=\"ref-for-propdef-font-size\">font-size</a> property, which <strong>is</strong> inherited.\nIt sets the size of the font used for the text in the element,\nand continues to apply to any descendants that don’t\nhave a declaration setting <a data-link-type=\"property\" href=\"https://drafts.csswg.org/css-fonts-4/#propdef-font-size\" id=\"ref-for-propdef-font-size①\">font-size</a> to a different value. \n    </p><p>If the <a data-link-type=\"property\" href=\"https://drafts.csswg.org/css-fonts-4/#propdef-font-size\" id=\"ref-for-propdef-font-size②\">font-size</a> property were not inherited,\nthen it would probably have to have an initial value\nthat requires walking up the ancestor chain to find the nearest ancestor\nthat doesn’t have that value.\nThis is the \"code smell\" mentioned above that suggests\nthat a property likely should have been inherited.</p>\n   </div>\n   <h3 data-level=\"4.3\" id=\"css-computed-value\"><span>4.3. </span><span>Choose the computed value type based on how the property should inherit</span><a href=\"#css-computed-value\"></a></h3>\n   <p>Choose the <a data-link-type=\"dfn\" href=\"https://drafts.csswg.org/css-cascade-5/#computed-value\" id=\"ref-for-computed-value\">computed value</a> of a CSS property\nbased on how it will <a data-link-type=\"dfn\" href=\"https://drafts.csswg.org/css-cascade-5/#inheritance\" id=\"ref-for-inheritance\">inherit</a>,\nincluding how values where it depends on other properties should inherit.</p>\n   <p>Inheritance means that\nan element gets the same computed value for a property that its parent has.\nThis means that processing steps that happen before reaching the computed value\naffect the value that is inherited,\nand those that happen after (such as for the <a data-link-type=\"dfn\" href=\"https://drafts.csswg.org/css-cascade-5/#used-value\" id=\"ref-for-used-value\">used value</a>) do not.</p>\n   \n   <div id=\"example-bdfc8e34\">\n    <p><a href=\"#example-bdfc8e34\"></a> For example, the <a data-link-type=\"property\" href=\"https://drafts.csswg.org/css2/#propdef-line-height\" id=\"ref-for-propdef-line-height\">line-height</a> property may accept a <a data-link-type=\"type\" href=\"https://drafts.csswg.org/css-values-4/#number-value\" id=\"ref-for-number-value\">&lt;number&gt;</a> value,\nsuch as <a data-link-type=\"propdesc\" href=\"https://drafts.csswg.org/css2/#propdef-line-height\" id=\"ref-for-propdef-line-height①\">line-height: 1.4</a>.\nThis value represents a multiple of the <a data-link-type=\"property\" href=\"https://drafts.csswg.org/css-fonts-4/#propdef-font-size\" id=\"ref-for-propdef-font-size③\">font-size</a>,\nso if the <a data-link-type=\"property\" href=\"https://drafts.csswg.org/css-fonts-4/#propdef-font-size\" id=\"ref-for-propdef-font-size④\">font-size</a> is <span>20px</span>,\nthe <a data-link-type=\"dfn\" href=\"https://drafts.csswg.org/css-cascade-5/#actual-value\" id=\"ref-for-actual-value\">actual value</a> for the line height is <span>28px</span>. \n    </p><p>However, the <a data-link-type=\"dfn\" href=\"https://drafts.csswg.org/css-cascade-5/#computed-value\" id=\"ref-for-computed-value②\">computed value</a> in this case is the <a data-link-type=\"type\" href=\"https://drafts.csswg.org/css-values-4/#number-value\" id=\"ref-for-number-value①\">&lt;number&gt;</a> <span>1.4</span>,\nnot the <a data-link-type=\"type\" href=\"https://drafts.csswg.org/css-values-4/#length-value\" id=\"ref-for-length-value\" title=\"Expands to: advance measure | cap | ch | cm | dvb | dvh | dvi | dvmax | dvmin | dvw | em | ex | ic | in | lh | lvb | lvh | lvi | lvmax | lvmin | lvw | mm | pc | pt | px | q | rcap | rch | rem | rex | ric | rlh | svb | svh | svi | svmax | svmin | svw | vb | vh | vi | vmax | vmin | vw\">&lt;length&gt;</a> <span>28px</span>.\n(The <a data-link-type=\"dfn\" href=\"https://drafts.csswg.org/css-cascade-5/#used-value\" id=\"ref-for-used-value①\">used value</a> is <span>28px</span>.)</p>\n    <p>The <a data-link-type=\"property\" href=\"https://drafts.csswg.org/css2/#propdef-line-height\" id=\"ref-for-propdef-line-height②\">line-height</a> property can be inherited\ninto elements that have a different <a data-link-type=\"property\" href=\"https://drafts.csswg.org/css-fonts-4/#propdef-font-size\" id=\"ref-for-propdef-font-size⑤\">font-size</a>,\nand any property on those elements which depends on <a data-link-type=\"property\" href=\"https://drafts.csswg.org/css2/#propdef-line-height\" id=\"ref-for-propdef-line-height③\">line-height</a> must take the relevant <a data-link-type=\"property\" href=\"https://drafts.csswg.org/css-fonts-4/#propdef-font-size\" id=\"ref-for-propdef-font-size⑥\">font-size</a> into account,\nrather than the <a data-link-type=\"property\" href=\"https://drafts.csswg.org/css-fonts-4/#propdef-font-size\" id=\"ref-for-propdef-font-size⑦\">font-size</a> for the element from which\nthe <a data-link-type=\"property\" href=\"https://drafts.csswg.org/css2/#propdef-line-height\" id=\"ref-for-propdef-line-height④\">line-height</a> value was inherited.</p>\n<pre><c- p=\"\">&lt;</c-><c- f=\"\">body</c-> <c- e=\"\">style</c-><c- o=\"\">=</c-><c- s=\"\">\"font-size: 20px; line-height: 1.4\"</c-><c- p=\"\">&gt;</c->\n\n  <c- p=\"\">&lt;</c-><c- f=\"\">p</c-><c- p=\"\">&gt;</c->This body text has a line height of 28px.<c- p=\"\">&lt;/</c-><c- f=\"\">p</c-><c- p=\"\">&gt;</c->\n\n  <c- p=\"\">&lt;</c-><c- f=\"\">h2</c-> <c- e=\"\">style</c-><c- o=\"\">=</c-><c- s=\"\">\"font-size: 200%\"</c-><c- p=\"\">&gt;</c->\n    This heading has a line-height of 56px,\n    not 28px, even though the line-height was declared on the body.\n    This means that the 40px font won’t overflow the line height.\n  <c- p=\"\">&lt;/</c-><c- f=\"\">h2</c-><c- p=\"\">&gt;</c->\n<c- p=\"\">&lt;/</c-><c- f=\"\">body</c-><c- p=\"\">&gt;</c->\n</pre>\n    <p>These number values are generally the preferred values to use for <a data-link-type=\"property\" href=\"https://drafts.csswg.org/css2/#propdef-line-height\" id=\"ref-for-propdef-line-height⑤\">line-height</a> because they inherit better than length values.</p>\n   </div>\n   <p>See also:</p>\n   <ul>\n    <li data-md=\"\">\n     <p><a href=\"https://wiki.csswg.org/spec/computed-values\">Computed Values Patterns</a></p>\n   </li></ul>\n   <h3 data-level=\"4.4\" id=\"css-naming\"><span>4.4. </span><span>Naming of CSS properties and values</span><a href=\"#css-naming\"></a></h3>\n   <p>The names of CSS properties are usually nouns,\nand the names of their values are usually adjectives (although sometimes nouns).</p>\n   <p>Words in properties and values are separated by hyphens.\nAbbreviations are generally avoided.</p>\n   <p>Use the root form of words when possible\nrather than a form with a grammatical prefix or suffix\n(for example, \"size\" rather than \"sizing\").</p>\n   <p>The list of values of a property should generally be chosen\nso that new values can be added.\nAvoid values like <span>yes</span>, <span>no</span>, <a data-link-type=\"maybe\" href=\"https://drafts.csswg.org/mediaqueries-5/#valdef-custom-media-true\" id=\"ref-for-valdef-custom-media-true\">true</a>, <a data-link-type=\"maybe\" href=\"https://drafts.csswg.org/mediaqueries-5/#valdef-custom-media-false\" id=\"ref-for-valdef-custom-media-false\">false</a>,\nor things with more complex names that are basically equivalent to them.</p>\n   <p>Avoid words like \"mode\" or \"state\" in the names of properties,\nsince properties are generally setting a mode or state.</p>\n   <p>See <a href=\"#naming-is-hard\">§ 12 Naming principles</a> for general (cross-language) advice on naming.</p>\n   <h3 data-level=\"4.5\" id=\"css-content-should-be-visible\"><span>4.5. </span><span>Content should be viewable and accessible by default</span><a href=\"#css-content-should-be-visible\"></a></h3>\n   <p>Design CSS properties or CSS layout systems (which are typically values of the <code>display</code> property),\nto preserve the content as viewable, accessible and usable by default.</p>\n   <p><a href=\"#example-c09bf2e2\"></a> For example, the default behavior of all layout systems in CSS will not lead to content being clipped,\ncontent overlapping other content, or content being unreachable by scrolling.\nThese things should only happen if CSS features are used that are more explicitly choosing\nsuch a behavior (for example, <code>overflow: hidden</code> or <code>left: -40em</code>). They should not happen by\ndefault as a result of something like <code>display: flex</code> or <code>position: relative</code>. </p>\n   <h2 data-level=\"5\" id=\"js\"><span>5. </span><span>JavaScript Language</span><a href=\"#js\"></a></h2>\n   <h3 data-level=\"5.1\" id=\"js-only\"><span>5.1. </span><span>Web APIs are for JavaScript</span><a href=\"#js-only\"></a></h3>\n   <p>When designing imperative APIs for the Web,\nuse JavaScript.\nIn particular,\nyou can freely rely upon language-specific semantics and conventions,\nwith no need to keep things generalized.</p>\n   <div id=\"example-1f61e97b\">\n    <p><a href=\"#example-1f61e97b\"></a> For example,\nthe <code><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/custom-elements.html#dom-customelementregistry-define\" id=\"ref-for-dom-customelementregistry-define\">CustomElementRegistry.define()</a></code> method takes a reference to\na <a href=\"https://tc39.es/ecma262/#sec-static-semantics-constructormethod\">Constructor Method</a>. \n    </p><p>This takes advantage of the relatively recent addition of classes to JavaScript,\nand the fact that method references are very easy to use in JavaScript.</p>\n   </div>\n   <p> JavaScript is standardized under the name <a data-link-type=\"biblio\" href=\"#biblio-ecmascript\">[ECMASCRIPT]</a>. </p>\n   <p><a data-link-type=\"biblio\" href=\"#biblio-webidl\">[WEBIDL]</a> defines a separate \"ECMAScript binding\" section,\nbut this doesn’t imply that Web IDL is intended\nto have bindings in other programming languages. </p>\n   <h3 data-level=\"5.2\" id=\"js-rtc\"><span>5.2. </span><span>Preserve run-to-completion semantics</span><a href=\"#js-rtc\"></a></h3>\n   <p>Don’t modify data accessed via JavaScript APIs\nwhile a JavaScript <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/webappapis.html#event-loop\" id=\"ref-for-event-loop\">event loop</a> is running.</p>\n   <p>A JavaScript Web API is generally a wrapper around\na feature implemented in a lower-level language,\nsuch as C++ or Rust.\nUnlike those languages,\nwhen using JavaScript developers can expect\nthat once a piece of code begins executing,\nit will continue executing until it has completed.</p>\n   <p>Because of that, JavaScript authors take for granted\nthat the data available to a function won’t change unexpectedly\nwhile the function is running.</p>\n   <p>So if a JavaScript Web API exposes some piece of data,\nsuch as an object property,\nthe user agent must not update that data\nwhile a JavaScript task is running.\nInstead, if the underlying data changes, <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/webappapis.html#queue-a-task\" id=\"ref-for-queue-a-task\">queue a task</a> to modify the exposed version of the data.</p>\n   <p><a href=\"#example-3fb93c89\"></a> If a JavaScript task has accessed the <code><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/system-state.html#dom-navigator-online\" id=\"ref-for-dom-navigator-online\">navigator.onLine</a></code> property,\nand browser’s online status changes,\nthe property won’t be updated until the next task runs. </p>\n   <h3 data-level=\"5.3\" id=\"js-gc\"><span>5.3. </span><span>Don’t expose garbage collection</span><a href=\"#js-gc\"></a></h3>\n   <p>Ensure your JavaScript Web APIs don’t provide a way\nfor an author to know the timing of garbage collection.</p>\n   <p>The timing of garbage collection is different in different user agents,\nand may change over time as user agents work on improving performance.\nIf an API exposes the timing of garbage collection,\nit can cause programs to behave differently\nin different contexts.\nThis means that authors need to write extra code to handle these differences.\nIt may also make it more difficult for user agents\nto implement different garbage collection strategies,\nif there is enough code which depends on timing working a particular way.</p>\n   <p>This means that you shouldn’t expose any API that acts as a weak reference,\ne.g. with a property that becomes <code><c- kc=\"\">null</c-></code> once garbage collection runs.\nObject and data lifetimes in JavaScript code should be predictable.</p>\n   <div id=\"example-fecc1403\">\n    <p><a href=\"#example-fecc1403\"></a> <code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#dom-document-getelementsbytagname\" id=\"ref-for-dom-document-getelementsbytagname\">getElementsByTagName</a></code> returns an <code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#htmlcollection\" id=\"ref-for-htmlcollection\">HTMLCollection</a></code> object,\nwhich may be re-used if the method is called twice on the same Document object,\nwith the same tag name.\nIn practice,\nthis means that the same object will be returned\nif and only if it has not been garbage collected.\nThis means that the behaviour is different depending on\nthe timing of garbage collection. \n    </p><p>If <code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#dom-document-getelementsbytagname\" id=\"ref-for-dom-document-getelementsbytagname①\">getElementsByTagName</a></code> were designed today,\nthe advice to the designers would be\nto either reliably reuse the output,\nor to produce a new <code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#htmlcollection\" id=\"ref-for-htmlcollection①\">HTMLCollection</a></code> each time it’s invoked.</p>\n   </div>\n   <p><code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#dom-document-getelementsbytagname\" id=\"ref-for-dom-document-getelementsbytagname②\">getElementsByTagName</a></code> gives no sign that\nit may depend on the timing of garbage collection.\nIn contrast, APIs which are explicitly designed\nto depend on garbage collection,\nlike <code><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-weak-ref-objects\" id=\"ref-for-sec-weak-ref-objects\">WeakRef</a></code> or <code><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-finalization-registry-objects\" id=\"ref-for-sec-finalization-registry-objects\">FinalizationRegistry</a></code>,\nset accurate author expectations about\nthe interaction with garbage collection.</p>\n   <h2 data-level=\"6\" id=\"api-surface\"><span>6. </span><span>JavaScript API Surface Concerns</span><a href=\"#api-surface\"></a></h2>\n   <h3 data-level=\"6.1\" id=\"attributes-like-data\"><span>6.1. </span><span>Attributes should behave like data properties</span><a href=\"#attributes-like-data\"></a></h3>\n   <p><a data-link-type=\"biblio\" href=\"#biblio-webidl\">[WEBIDL]</a> attributes should act like simple JavaScript object properties.</p>\n   <p>In reality, IDL attributes are implemented as accessor properties\nwith separate getter and setter methods.\nTo make them act like JavaScript object properties:</p>\n   <ul>\n    <li data-md=\"\">\n     <p>Getters must not have any observable side effects.</p>\n    </li><li data-md=\"\">\n     <p>Getters should not perform any complex operations.</p>\n    </li><li data-md=\"\">\n     <p>Ensure that <code>obj<c- p=\"\">.</c->attribute <c- o=\"\">===</c-> obj<c- p=\"\">.</c->attribute</code> is always true.\nDon’t create a new value each time the getter is called.</p>\n    </li><li data-md=\"\">\n     <p>If possible, ensure that given <code>obj<c- p=\"\">.</c->attribute <c- o=\"\">=</c-> x</code>, <code>obj<c- p=\"\">.</c->attribute <c- o=\"\">===</c-> x</code> is true.\n(This may not be possible if some kind of conversion is necessary for <code>x</code>.)</p>\n   </li></ul>\n   <p>If you were thinking about using an attribute,\nbut it doesn’t behave this way,\nyou should probably use a method instead.</p>\n   <p><a href=\"#example-92914693\"></a> For example, <code><a data-link-type=\"idl\" href=\"https://drafts.csswg.org/cssom-view-1/#dom-htmlelement-offsettop\" id=\"ref-for-dom-htmlelement-offsettop\">offsetTop</a></code> performs layout,\nwhich can be complex and time-consuming.\nIt would have been better if this had been a method like <code><a data-link-type=\"idl\" href=\"https://drafts.csswg.org/cssom-view-1/#dom-element-getboundingclientrect\" id=\"ref-for-dom-element-getboundingclientrect\">getBoundingClientRect()</a></code>. </p>\n   <h3 data-level=\"6.2\" id=\"live-vs-static\"><span>6.2. </span><span>Consider whether objects should be live or static</span><a href=\"#live-vs-static\"></a></h3>\n   <p>If an API gives access to an object\nrepresenting some internal state,\ndecide whether that object should continue to be updated as the state changes.</p>\n   <p>An object which represents the current state at all times\nis a <dfn data-dfn-type=\"dfn\" data-export=\"\" id=\"live-object\">live object<a href=\"#live-object\"></a></dfn>,\nwhile an object which represents the state at the time it was created\nis a <dfn data-dfn-type=\"dfn\" data-export=\"\" id=\"static-object\">static object<a href=\"#static-object\"></a></dfn>.</p>\n   <h4 id=\"live-objects\"><span>Live objects</span><a href=\"#live-objects\"></a></h4>\n   <p>If an object allows the author to change the internal state,\nthat object should be live.\nFor example, DOM <code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#node\" id=\"ref-for-node\">Node</a></code>s are live objects,\nto allow the author to make changes to the document\nwith an understanding of the current state.</p>\n   <p>Properties of live objects may be computed as they are accessed,\ninstead of when the object is created.\nThis makes live objects sometimes a better choice\nif the data needed is complex to compute,\nsince there is no need to compute all the data before the object is returned.</p>\n   <p>A live object may also use less memory,\nsince there is no need to copy data to a static version.</p>\n   <h4 id=\"static-objects\"><span>Static objects</span><a href=\"#static-objects\"></a></h4>\n   <p>If an object represents a list that might change,\nmost often the object should be static.\nThis is so that code iterating over the list\ndoesn’t need to handle the possibility of the list changing in the middle.</p>\n   <div id=\"example-05004f68\">\n    <p><a href=\"#example-05004f68\"></a> <code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#dom-document-getelementsbytagname\" id=\"ref-for-dom-document-getelementsbytagname③\">getElementsByTagName</a></code> returns a live object which represents a list,\nmeaning that authors need to take care when iterating over its items: \n</p><pre><c- a=\"\">let</c-> list <c- o=\"\">=</c-> document<c- p=\"\">.</c->getElementsByTagName<c- p=\"\">(</c-><c- u=\"\">\"td\"</c-><c- p=\"\">);</c->\n\n<c- k=\"\">for</c-> <c- p=\"\">(</c-><c- a=\"\">let</c-> i <c- o=\"\">=</c-> <c- mf=\"\">0</c-><c- p=\"\">;</c-> i <c- o=\"\">&lt;</c-> list<c- p=\"\">.</c->length<c- p=\"\">;</c-> i<c- o=\"\">++</c-><c- p=\"\">)</c-> <c- p=\"\">{</c->\n    <c- a=\"\">let</c-> td <c- o=\"\">=</c-> list<c- p=\"\">[</c->i<c- p=\"\">];</c->\n    <c- a=\"\">let</c-> tr <c- o=\"\">=</c-> document<c- p=\"\">.</c->createElement<c- p=\"\">(</c-><c- u=\"\">\"tr\"</c-><c- p=\"\">);</c->\n    tr<c- p=\"\">.</c->innerHTML <c- o=\"\">=</c-> td<c- p=\"\">.</c->outerHTML<c- p=\"\">;</c->\n\n    <c- c1=\"\">// This has the side-effect of removing td from the list,</c->\n    <c- c1=\"\">// causing the iteration to become unpredictable.</c->\n    td<c- p=\"\">.</c->parentNode<c- p=\"\">.</c->replaceChild<c- p=\"\">(</c->tr<c- p=\"\">,</c-> td<c- p=\"\">);</c->\n<c- p=\"\">}</c->\n</pre>\n    <p>The choice to have <code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#dom-parentnode-queryselectorall\" id=\"ref-for-dom-parentnode-queryselectorall\">querySelectorAll()</a></code> return static objects\nwas made after spec authors noticed that <code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#dom-document-getelementsbytagname\" id=\"ref-for-dom-document-getelementsbytagname④\">getElementsByTagName</a></code> was causing problems.</p>\n    <p><code><a data-link-type=\"idl\" href=\"https://url.spec.whatwg.org/#urlsearchparams\" id=\"ref-for-urlsearchparams\">URLSearchParams</a></code> isn’t static,\neven though it represents a list,\nbecause it’s the way for authors to change the query string of a URL.</p>\n   </div>\n   <p role=\"note\"><span>Note:</span> For <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-maplike\" id=\"ref-for-dfn-maplike\">maplike</a> and <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-setlike\" id=\"ref-for-dfn-setlike\">setlike</a> types,\nthis advice may not apply,\nsince these types were designed to behave well\nwhen they change while being iterated.</p>\n   <p>If it would not be possible to compute properties\nat the time they are accessed,\na static object avoids having to keep the object updated\nuntil it’s garbage collected,\neven if it isn’t being used.</p>\n   <p>If a static object represents some state which may change frequently,\nit should be returned from a method,\nrather than available as an attribute.</p>\n   <p>See also:</p>\n   <ul>\n    <li data-md=\"\">\n     <p><a href=\"#attributes-like-data\">§ 6.1 Attributes should behave like data properties</a></p>\n   </li></ul>\n   <h3 data-level=\"6.3\" id=\"attributes-vs-methods\"><span>6.3. </span><span>Use attributes or methods appropriately</span><a href=\"#attributes-vs-methods\"></a></h3>\n   <p>Sometimes it is unclear\nwhether to use an attribute or a method.</p>\n   <ul>\n    <li data-md=\"\">\n     <p>Attribute getters must not have any (observable) side effects.\nIf you have expected side effects, use a method.</p>\n    </li><li data-md=\"\">\n     <p>Attribute getters should not perform any blocking operations.\nIf a getter requires performing a blocking operation,\nit should be a method.</p>\n    </li><li data-md=\"\">\n     <p>If the underlying object has not changed,\nattribute getters should return\nthe same object each time it is called.\nThis means <code>obj.attribute === obj.attribute</code> must always hold.\nReturning a new value from an attribute getter\neach time is not allowed.\nIf this does not hold, the getter should be a method.</p>\n   </li></ul>\n   <p role=\"note\"><span>Note:</span> An antipattern example of a blocking operation is with getters like offsetTop performing layout.</p>\n   <p>For attributes, whenever possible,\npreserve values given to the setter\nfor return from the getter.\nThat is, given <code>obj.attribute = x</code>,\na subsequent <code>obj.attribute === x</code> should be true.\n(This will not always be the case,\ne.g., if a normalization or type conversion step is necessary,\nbut should be held as a goal for normal code paths.)</p>\n   <p>The object you want to return may be <a href=\"#js-rtc\">live or static</a>.\nThis means:</p>\n   <ul>\n    <li data-md=\"\">\n     <p>If live, then return the same object each time,\nuntil a state change requires a different object to be returned.\nThis can be returned from either an attribute or a method.</p>\n    </li><li data-md=\"\">\n     <p>If static, then return a new object each time.\nIn which case, this should be be a method.</p>\n   </li></ul>\n   <h3 data-level=\"6.4\" id=\"prefer-dict-to-bool\"><span>6.4. </span><span>Prefer dictionary arguments over primitive arguments</span><a href=\"#prefer-dict-to-bool\"></a></h3>\n   <p>API methods should generally use dictionary arguments\ninstead of a series of optional primitive arguments.</p>\n   <p>This makes the code that calls the method much more readable.\nIt also makes the API more extensible in the future,\nparticularly if multiple arguments with the same type are needed.</p>\n   <div id=\"example-148797d6\">\n    <p><a href=\"#example-148797d6\"></a> For example, \n</p><pre><c- k=\"\">new</c-> Event<c- p=\"\">(</c-><c- u=\"\">\"example\"</c-><c- p=\"\">,</c->\n          <c- p=\"\">{</c-> bubbles<c- o=\"\">:</c-> <c- kc=\"\">true</c-><c- p=\"\">,</c->\n            cancelable<c- o=\"\">:</c-> <c- kc=\"\">false</c-><c- p=\"\">})</c->\n</pre>\n    <p>is much more readable than</p>\n<pre><c- k=\"\">new</c-> Event<c- p=\"\">(</c-><c- u=\"\">\"example\"</c-><c- p=\"\">,</c-> <c- kc=\"\">true</c-><c- p=\"\">,</c-> <c- kc=\"\">false</c-><c- p=\"\">)</c->\n</pre>\n    <p>Also,</p>\n<pre>window<c- p=\"\">.</c->scrollBy<c- p=\"\">({</c-> left<c- o=\"\">:</c-> <c- mf=\"\">50</c-><c- p=\"\">,</c-> top<c- o=\"\">:</c-> <c- mf=\"\">0</c-> <c- p=\"\">})</c->\n</pre>\n    <p>is more readable than</p>\n<pre>window<c- p=\"\">.</c->scrollBy<c- p=\"\">(</c-><c- mf=\"\">50</c-><c- p=\"\">,</c-> <c- mf=\"\">0</c-><c- p=\"\">)</c->\n</pre>\n   </div>\n   <p>The dictionary itself should be an optional argument,\nso that if the author is happy with all of the default options,\nthey can avoid passing an extra argument.</p>\n   <div id=\"example-c7e8a584\">\n    <p><a href=\"#example-c7e8a584\"></a> For example, \n</p><pre>element<c- p=\"\">.</c->scrollIntoView<c- p=\"\">(</c-><c- kc=\"\">false</c-><c- p=\"\">,</c-> <c- p=\"\">{});</c->\n</pre>\n    <p>is equivalent to</p>\n<pre>element<c- p=\"\">.</c->scrollIntoView<c- p=\"\">(</c-><c- kc=\"\">false</c-><c- p=\"\">);</c->\n</pre>\n   </div>\n   <p>See also:</p>\n   <ul>\n    <li data-md=\"\">\n     <p><a href=\"https://ariya.io/2011/08/hall-of-api-shame-boolean-trap\">Hall of API Shame: Boolean Trap</a>.</p>\n    </li><li data-md=\"\">\n     <p><a href=\"https://lists.w3.org/Archives/Public/public-script-coord/2013OctDec/0302.html\">APIs that have boolean arguments defaulting to true</a></p>\n    </li><li data-md=\"\">\n     <p><a href=\"#optional-parameters\">§ 6.5 Make method arguments optional if possible</a></p>\n    </li><li data-md=\"\">\n     <p><a href=\"#naming-optional-parameters\">§ 6.6 Naming optional arguments</a></p>\n   </li></ul>\n   <h3 data-level=\"6.5\" id=\"optional-parameters\"><span>6.5. </span><span>Make method arguments optional if possible</span><a href=\"#optional-parameters\"></a></h3>\n   <p>If an argument for an API method has a reasonable default value,\nmake that argument optional and specify the default value.</p>\n   <p><a href=\"#example-b823d8cb\"></a> <code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#dom-eventtarget-addeventlistener\" id=\"ref-for-dom-eventtarget-addeventlistener\">addEventListener()</a></code> takes an optional boolean <code>useCapture</code> argument.\nThie defaults to <code>false</code>, meaning that\nthe event should be dispatched to the listener in the bubbling phase by default. </p>\n   <p role=\"note\"><span>Note:</span> Exceptions have been made for legacy interoperability reasons\n(such as <code><a data-link-type=\"idl\" href=\"https://xhr.spec.whatwg.org/#xmlhttprequest\" id=\"ref-for-xmlhttprequest\">XMLHttpRequest</a></code>),\nbut this should be considered a design mistake rather than recommended practice.</p>\n   <p>The API must be designed so that if an argument is left out,\nthe default value used is the same as\nconverting <code><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-undefined\" id=\"ref-for-idl-undefined\">undefined</a></code> to the type of the argument.\nFor example, if a boolean argument isn’t set,\nit must default to false.</p>\n   <p>When deciding between different list data types for your API,\nunless otherwise required, use the following list types:</p>\n   <ul>\n    <li data-md=\"\">\n     <p>Method list arguments should be of type <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#sequence-type\" id=\"ref-for-sequence-type\">sequence&lt;T&gt;</a></p>\n    </li><li data-md=\"\">\n     <p>Method return values should be of type <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#sequence-type\" id=\"ref-for-sequence-type①\">sequence&lt;T&gt;</a></p>\n    </li><li data-md=\"\">\n     <p>Attributes should be of type <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-observable-array-type\" id=\"ref-for-dfn-observable-array-type\">ObservableArray&lt;T&gt;</a></p>\n   </li></ul>\n   <p>See also:</p>\n   <ul>\n    <li data-md=\"\">\n     <p><a href=\"#prefer-dict-to-bool\">§ 6.4 Prefer dictionary arguments over primitive arguments</a></p>\n   </li></ul>\n   <h3 data-level=\"6.6\" id=\"naming-optional-parameters\"><span>6.6. </span><span>Naming optional arguments</span><a href=\"#naming-optional-parameters\"></a></h3>\n   <p>Name optional arguments to make the default behavior obvious\nwithout being named negatively.</p>\n   <p>This applies whether they are provided in a <a href=\"#prefer-dict-to-bool\">dictionary</a> or as <a href=\"#optional-parameters\">single arguments</a>.</p>\n   <div id=\"example-cc7dcba0\">\n    <p><a href=\"#example-cc7dcba0\"></a> <code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#dom-eventtarget-addeventlistener\" id=\"ref-for-dom-eventtarget-addeventlistener①\">addEventListener()</a></code> takes an <code>options</code> object\nwhich includes an option named <code>once</code>.\nThis indicates that the listener should <strong>not</strong> be invoked repeatedly. \n    </p><p>This option could have been named <code>repeat</code>,\nbut that would require the <a href=\"#optional-parameters\">default</a> to be <code>true</code>.\nInstead of naming it <code>noRepeat</code>,\nthe API authors named it <code>once</code>,\nto reflect the default behaviour without using a negative.</p>\n    <p>Other examples:</p>\n    <ul>\n     <li data-md=\"\">\n      <p><code>passive</code> rather than <code>active</code>, or</p>\n     </li><li data-md=\"\">\n      <p><code>isolate</code> rather than <code>connect</code>, or</p>\n     </li><li data-md=\"\">\n      <p><code>private</code> rather than <code>public</code></p>\n    </li></ul>\n   </div>\n   <p>See also:</p>\n   <ul>\n    <li data-md=\"\">\n     <p><a href=\"#naming-is-hard\">§ 12 Naming principles</a></p>\n   </li></ul>\n   <h3 data-level=\"6.7\" id=\"constructors\"><span>6.7. </span><span>Classes should have constructors when possible</span><a href=\"#constructors\"></a></h3>\n   <p>Make sure that any class that’s part of your API has a constructor,\nif appropriate.</p>\n   <p>By default, <a data-link-type=\"biblio\" href=\"#biblio-webidl\">[WEBIDL]</a> interfaces generate \"non-constructible\" classes:\ntrying to create instances of them using <code>new X()</code> will throw a <code><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#exceptiondef-typeerror\" id=\"ref-for-exceptiondef-typeerror\">TypeError</a></code>.\nTo make them constructible,\nyou can add appropriate <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#idl-constructors\" id=\"ref-for-idl-constructors\">constructor operation</a> to your interface,\nand defining the algorithm for creating new instances of your class.</p>\n   <p>This allows JavaScript developers\nto create instances of the class\nfor purposes such as testing, mocking,\nor interfacing with third-party libraries which accept instances of that class.\nIt also gives authors the ability to create a subclass of the class,\nwhich is otherwise prevented,\nbecause of the way JavaScript handles subclasses.</p>\n   <p>This won’t be appropriate in all cases.\nFor example:</p>\n   <ul>\n    <li data-md=\"\">\n     <p>Some objects represent access to privileged resources,\nso they need to be constructed by factory methods\nwhich can access those resources.</p>\n    </li><li data-md=\"\">\n     <p>Some objects have very carefully controlled lifecycles,\nso they need to be created and accessed through specific methods.</p>\n    </li><li data-md=\"\">\n     <p>Some objects represent an abstract base class,\nwhich shouldn’t be constructed,\nand which authors should not be able to define subclasses for.</p>\n   </li></ul>\n   <p id=\"example-b036c85f\"><a href=\"#example-b036c85f\"></a> The <code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#event\" id=\"ref-for-event\">Event</a></code> class, and all its derived interfaces, are constructible.\nThis is useful when testing code which handles events:\nan author can construct an <code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#event\" id=\"ref-for-event①\">Event</a></code> to pass to a method\nwhich handles that type of event. </p>\n   <p id=\"example-efe51367\"><a href=\"#example-efe51367\"></a> The <code><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/window-object.html#window\" id=\"ref-for-window\">Window</a></code> class isn’t constructible,\nbecause creating a new window is a privileged operation\nwith significant side effects.\nInstead, the <code><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/window-object.html#dom-open\" id=\"ref-for-dom-open\">window.open()</a></code> method\nis used to create new windows. </p>\n   <p id=\"example-c23596fe\"><a href=\"#example-c23596fe\"></a> The <code><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/imagebitmap-and-animations.html#imagebitmap\" id=\"ref-for-imagebitmap\">ImageBitmap</a></code> class isn’t constructible,\nas it represents an immutable, ready-to-paint bitmap image,\nand the process of getting it ready to paint must be done asynchronously.\nInstead, the <code><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/imagebitmap-and-animations.html#dom-createimagebitmap\" id=\"ref-for-dom-createimagebitmap\">createImageBitmap()</a></code> factory method is used to create it. </p>\n   <p id=\"example-97798904\"><a href=\"#example-97798904\"></a> The <code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#domtokenlist\" id=\"ref-for-domtokenlist\">DOMTokenList</a></code> class is, sadly, <a href=\"https://www.w3.org/Bugs/Public/show_bug.cgi?id=27114\">not constructible</a>.\nThis prevents the creation of <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/custom-elements.html#custom-element\" id=\"ref-for-custom-element\">custom elements</a> that expose their token list attributes as <code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#domtokenlist\" id=\"ref-for-domtokenlist①\">DOMTokenList</a></code>s. </p>\n   <div id=\"example-ebdfca9b\">\n    <p><a href=\"#example-ebdfca9b\"></a> Several non-constructible classes,\nlike <code><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/system-state.html#navigator\" id=\"ref-for-navigator\">Navigator</a></code>, <code><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/history.html#history-3\" id=\"ref-for-history-3\">History</a></code>, or <code><a data-link-type=\"idl\" href=\"https://w3c.github.io/webcrypto/#dfn-Crypto\" id=\"ref-for-dfn-Crypto\">Crypto</a></code>,\nare non-constructible because they are singletons\nrepresenting access to per-window information.\nIn these cases, something like the Web IDL <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-namespace\" id=\"ref-for-dfn-namespace\">namespace</a> feature\nmight have been a better fit,\nbut these features were designed before namespaces,\nand go beyond what is currently possible with namespaces. \n    </p><p>If your API requires this type of singleton,\nconsider using a <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-namespace\" id=\"ref-for-dfn-namespace①\">namespace</a>,\nand <a href=\"https://github.com/heycam/webidl/issues/new\">File an issue on Web IDL</a> if there is some problem with using them.</p>\n   </div>\n   <p>Factory methods can complement constructors, but generally should not be used <em>instead</em> of them.\nIt may still be valuable to include factory methods\nin addition to constructors, when they provide additional benefits.\nA common such case is when an API includes base classes\nand multiple specialized subclasses,\nwith a factory method\nfor creating the appropriate subclass based on the parameters passed.\nOften the factory method is a static method on the\nclosest common base subclass of the returned result.</p>\n   <p><a href=\"#example-071fec19\"></a> The <code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#dom-document-createelement\" id=\"ref-for-dom-document-createelement\">createElement</a></code> method is an example of a\nfactory method that could not have been implemented as a constructor,\nas its result can be any of a number of subclasses of <code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#element\" id=\"ref-for-element\">Element</a></code>. </p>\n   <p><a href=\"#example-3119992e\"></a> The <code><a data-link-type=\"idl\">initMouseEvent</a></code> factory method only creates <code><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/uievents/#mouseevent\" id=\"ref-for-mouseevent\">MouseEvent</a></code> objects,\nwhich were originally not constructible,\neven though there was no technical reason against that.\nEventually it was deprecated, and the <code><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/uievents/#mouseevent\" id=\"ref-for-mouseevent①\">MouseEvent</a></code> object was simply made constructible. </p>\n   <h3 data-level=\"6.8\" id=\"synchronous\"><span>6.8. </span><span>Use synchronous when appropriate</span><a href=\"#synchronous\"></a></h3>\n   <p>Where possible, prefer synchronous APIs when designing a new API.\nSynchronous APIs are simpler to use,\nand need less infrastructure set-up (such as making functions <code>async</code>).</p>\n   <p>An API should generally be synchronous if the following rules of thumb apply:</p>\n   <ul>\n    <li data-md=\"\">\n     <p>The API is not expected to ever be gated behind a permission prompt, or another dialog such as a device selector.</p>\n    </li><li data-md=\"\">\n     <p>The API implementation will not be blocked by a lock, filesystem or network access, for example, inter-process communication.</p>\n    </li><li data-md=\"\">\n     <p>The execution time is short and deterministic.</p>\n   </li></ul>\n   <h3 data-level=\"6.9\" id=\"promises\"><span>6.9. </span><span>Design asynchronous APIs using Promises</span><a href=\"#promises\"></a></h3>\n   <p>If an API method needs to be asynchronous, use Promises,\nnot callback functions.</p>\n   <p>Using Promises consistently across the web platform\nmeans that APIs are easier to use together,\nsuch as by chaining promises.\nPromise-using code also tends to be easier to understand\nthan code using callback functions.</p>\n   <p>An API might need to be asynchronous if:</p>\n   <ul>\n    <li data-md=\"\">\n     <p>the user agent needs to prompt the user for <a href=\"#consent\">permission</a>,</p>\n    </li><li data-md=\"\">\n     <p>some information might need to be read from disk,\nor requested from the network,</p>\n    </li><li data-md=\"\">\n     <p>the user agent may need to do a significant amount of work on another thread,\nor in another process, before returning the result.</p>\n   </li></ul>\n   <p>See also:</p>\n   <ul>\n    <li data-md=\"\">\n     <p><a href=\"https://www.w3.org/2001/tag/doc/promises-guide\">Writing Promise-Using Specifications</a></p>\n   </li></ul>\n   <h3 data-level=\"6.10\" id=\"aborting\"><span>6.10. </span><span>Cancel asynchronous APIs/operations using AbortSignal</span><a href=\"#aborting\"></a></h3>\n   <p>If an asynchronous method can be cancelled,\nallow authors to pass in an <code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#abortsignal\" id=\"ref-for-abortsignal\">AbortSignal</a></code> as part of an options dictionary.</p>\n   <div id=\"example-52de31d9\">\n    <pre><c- a=\"\">const</c-> controller <c- o=\"\">=</c-> <c- k=\"\">new</c-> AbortController<c- p=\"\">();</c->\n<c- a=\"\">const</c-> signal <c- o=\"\">=</c-> controller<c- p=\"\">.</c->signal<c- p=\"\">;</c->\ngeolocation<c- p=\"\">.</c->read<c- p=\"\">({</c-> signal <c- p=\"\">});</c->\n</pre>\n   </div>\n   <p>Using <code>AbortSignal</code> consistently\nas the way to cancel an asychronous operation\nmeans that authors can write less complex code.</p>\n   <p>For example, there’s a pattern of using a single <code>AbortSignal</code> for several ongoing operations,\nand then using the corresponding <code>AbortController</code> to cancel all of the operations at once if necessary\n(such as if the user presses \"cancel\",\nor a single-page app navigation occurs.)</p>\n   <p>Even if cancellation can’t be guaranteed,\nyou can still use an <code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#abortcontroller\" id=\"ref-for-abortcontroller\">AbortController</a></code>,\nbecause a call to <code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#dom-abortcontroller-abort\" id=\"ref-for-dom-abortcontroller-abort\">abort()</a></code> on <code>AbortController</code> is a request, rather than a guarantee.</p>\n   <h3 data-level=\"6.11\" id=\"string-constants\"><span>6.11. </span><span>Use strings for constants and enums</span><a href=\"#string-constants\"></a></h3>\n   <p>If your API needs a constant, or a set of enumerated values,\nuse string values.</p>\n   <p>Strings are easier for developers to inspect,\nand in JavaScript engines there is no performance benefit\nfrom using integers instead of strings.</p>\n   <p>If you need to express a state which is a combination of properties,\nwhich might be expressed as a bitmask in another language,\nuse a dictionary object instead.\nThis object can be passed around as easily as a single bitmask value.</p>\n   <h3 data-level=\"6.12\" id=\"properties-vs-methods\"><span>6.12. </span><span>Properties vs. Methods</span><a href=\"#properties-vs-methods\"></a></h3>\n   <p>Sometimes it is unclear whether to use a property or a method.</p>\n   <ul>\n    <li data-md=\"\">\n     <p>Property getters must not have any (observable) side effects.\nIf you have expected side effects, use a method.</p>\n    </li><li data-md=\"\">\n     <p>Property getters are expected to represent the state of a given object.\nThis means a getter should be able to efficiently return a value using the existing state.\nIf a getter does not satisfy this, it should be a method.\n(A notable failure of the platform in this regard is getters like offsetTop performing layout; do not repeat this mistake.)</p>\n    </li><li data-md=\"\">\n     <p>If the underlying object has not changed, property getters should return the same object each time it is called.\nThis means <code>obj.property === obj.property</code> must always hold.\nReturning a new value from a property getter each time is not allowed.\nIf this does not hold, the getter should be a method.</p>\n   </li></ul>\n   <p>For properties, whenever possible, preserve values given to the setter for return from the getter. That is,\ngiven <code>obj.property = x</code>, a subsequent <code>obj.property === x</code> should be true. (This will not always be the case, e.g., if a normalization or type conversion step is necessary, but should be held as a goal for normal code paths.)</p>\n   <p>The object you want to return may be <a href=\"#live-vs-static\">live or static</a>. This means:</p>\n   <ul>\n    <li data-md=\"\">\n     <p>If live, then return the same object each time, until a state change requires a different object to be returned.\nThis can be returned from either an property or a method.</p>\n    </li><li data-md=\"\">\n     <p>If static, then return a new object each time.\nIn which case, this should be be a method.</p>\n   </li></ul>\n   <h2 data-level=\"7\" id=\"event-design\"><span>7. </span><span>Event Design</span><a href=\"#event-design\"></a></h2>\n   <h3 data-level=\"7.1\" id=\"one-time-events\"><span>7.1. </span><span>Use promises for one time events</span><a href=\"#one-time-events\"></a></h3>\n   <p>Follow the <a href=\"https://www.w3.org/2001/tag/doc/promises-guide#one-time-events\">advice</a> in the <strong><a href=\"https://www.w3.org/2001/tag/doc/promises-guide\">Writing\nPromise-Using Specifications</a></strong> guideline.</p>\n   <h3 data-level=\"7.2\" id=\"promises-and-events\"><span>7.2. </span><span>Events should fire before Promises resolve</span><a href=\"#promises-and-events\"></a></h3>\n   <p>If a Promise-based asynchronous algorithm dispatches events,\nit should dispatch them before the Promise resolves,\nrather than after.</p>\n   <p>This guarantees that once the Promise resolves,\nall effects of the algorithm have been applied.\nFor example, if an author changes some state\nin reaction to an event which the Promise dispatches,\nthey can be sure that all of the state is consistent if the Promise is resolved.</p>\n   <h3 data-level=\"7.3\" id=\"dont-invent-event-like\"><span>7.3. </span><span>Don’t invent your own event listener-like infrastructure</span><a href=\"#dont-invent-event-like\"></a></h3>\n   <p>When creating an API which allows authors to start and stop a process which generates notifications,\nuse the existing event infrastructure to allow listening for the notifications.\nCreate separate API controls to start/stop the underlying process.</p>\n   <div id=\"example-7b5eb345\">\n    <p><a href=\"#example-7b5eb345\"></a> For example, the Web Bluetooth API provides a <code>startNotifications()</code> method\non the <code>BluetoothRemoteGATTCharacteristic</code> global object,\nwhich adds the object to the \"active notification context set\". \n    </p><p>When the User Agent receives a notification from the Bluetooth device,\nit fires an event at the <code>BluetoothRemoteGATTCharacteristic</code> objects\nin the active notification context set.</p>\n   </div>\n   <p>See:</p>\n   <ul>\n    <li data-md=\"\">\n     <p><a href=\"#events-are-for-notification\">§ 7.5 Events are for notification</a></p>\n    </li><li data-md=\"\">\n     <p><a href=\"#events-vs-observers\">§ 7.8 How to decide between Events and Observers</a></p>\n    </li><li data-md=\"\">\n     <p><a href=\"#state-and-subclassing\">§ 7.7 State and Event subclasses</a></p>\n   </li></ul>\n   <h3 data-level=\"7.4\" id=\"always-add-event-handlers\"><span>7.4. </span><span>Always add event handler attributes</span><a href=\"#always-add-event-handlers\"></a></h3>\n   <p>If your API adds a new event type,\nadd a corresponding <code>on<em>yourevent</em></code> <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/webappapis.html#event-handler-idl-attributes\" id=\"ref-for-event-handler-idl-attributes\">event handler IDL attribute</a> to the interface of any <code><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/webappapis.html#eventhandler\" id=\"ref-for-eventhandler\">EventHandler</a></code> which may handle the new event.</p>\n   <p>it’s important to continue to define event handler IDL attributes because:</p>\n   <ul>\n    <li data-md=\"\">\n     <p>they preserve consistency in the platform</p>\n    </li><li data-md=\"\">\n     <p>they enable feature-detection for the supported events (see <a href=\"#feature-detect\">§ 2.5 New features should be detectable</a>)</p>\n   </li></ul>\n   <p role=\"note\"> For consistency, if the event needs to be handled by HTML and SVG elements,\nadd the <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/webappapis.html#event-handler-idl-attributes\" id=\"ref-for-event-handler-idl-attributes①\">event handler IDL attributes</a> on the <code><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/webappapis.html#globaleventhandlers\" id=\"ref-for-globaleventhandlers\">GlobalEventHandlers</a></code> interface mixin,\ninstead of directly on the relevant element interface(s).\nSimilarly, add <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/webappapis.html#event-handler-idl-attributes\" id=\"ref-for-event-handler-idl-attributes②\">event handler IDL attributes</a> to <code><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/webappapis.html#windoweventhandlers\" id=\"ref-for-windoweventhandlers\">WindowEventHandlers</a></code> rather than <code><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/window-object.html#window\" id=\"ref-for-window①\">Window</a></code>. </p>\n   <h3 data-level=\"7.5\" id=\"events-are-for-notification\"><span>7.5. </span><span>Events are for notification</span><a href=\"#events-are-for-notification\"></a></h3>\n   <p>Events shouldn’t be used to trigger changes,\nonly to deliver a notification that a change has already finished happening.</p>\n   <div id=\"example-a13474fb\">\n    <p><a href=\"#example-a13474fb\"></a> When a window is resized,\nan event named <code><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/media.html#event-media-resize\" id=\"ref-for-event-media-resize\">resize</a></code> is fired at the <code>Window</code> object. \n    </p><p>It’s not possible to stop the resize from happening by intercepting the event.\nNor is it possible to fire a constructed <code>resize</code> event\nto cause the window to change size.\nThe event can only notify the author that the resize has already happened.</p>\n   </div>\n   <h3 data-level=\"7.6\" id=\"guard-against-recursion\"><span>7.6. </span><span>Guard against potential recursion</span><a href=\"#guard-against-recursion\"></a></h3>\n   <p>If your API includes a long-running or complicated algorithm,\nprevent calling into the algorithm if it’s already running.</p>\n   <p>If an API method causes a long-running algorithm to begin,\nyou should use <a href=\"#events-are-for-notification\">events</a> to notify user code of the progress of the algorithm.\nHowever, the user code which handles the event may call the same API method,\ncausing the complex algorithm to run recursively.\nThe same event may be fired again,\ncausing the same event handler to be fired, and so on.</p>\n   <p>To prevent this, make sure that any \"recursive\" call into the API method\nsimply returns immediately. This technique is \"guarding\" the algorithm.</p>\n   <div id=\"example-32d23c03\">\n    <p><a href=\"#example-32d23c03\"></a> <code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#abortsignal\" id=\"ref-for-abortsignal①\">AbortSignal</a></code>'s <a data-link-type=\"dfn\" href=\"https://dom.spec.whatwg.org/#abortsignal-add\" id=\"ref-for-abortsignal-add\">add</a>, <a data-link-type=\"dfn\" href=\"https://dom.spec.whatwg.org/#abortsignal-remove\" id=\"ref-for-abortsignal-remove\">remove</a> and <a data-link-type=\"dfn\" href=\"https://dom.spec.whatwg.org/#abortsignal-signal-abort\" id=\"ref-for-abortsignal-signal-abort\">signal abort</a> each begin with a check\nof the signal’s <a data-link-type=\"dfn\">aborted flag</a>.\nIf the flag is set, the rest of the algorithm doesn’t run. \n    </p><p>In this case, a lot of the important complexity is\nin the algorithms run during the <a data-link-type=\"dfn\" href=\"https://dom.spec.whatwg.org/#abortsignal-signal-abort\" id=\"ref-for-abortsignal-signal-abort①\">signal abort</a> steps.\nThese steps iterate through a collection of algorithms\nwhich are managed by the <a data-link-type=\"dfn\" href=\"https://dom.spec.whatwg.org/#abortsignal-add\" id=\"ref-for-abortsignal-add①\">add</a> and <a data-link-type=\"dfn\" href=\"https://dom.spec.whatwg.org/#abortsignal-remove\" id=\"ref-for-abortsignal-remove①\">remove</a> methods.</p>\n    <p>For example, the <a href=\"https://streams.spec.whatwg.org/#readable-stream-pipe-to\">ReadableStreamPipeTo</a> definition <a data-link-type=\"dfn\" href=\"https://dom.spec.whatwg.org/#abortsignal-add\" id=\"ref-for-abortsignal-add②\">add</a>s an algorithm\ninto the <code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#abortsignal\" id=\"ref-for-abortsignal②\">AbortSignal</a></code>'s set of algorithms to be run\nwhen the <a data-link-type=\"dfn\" href=\"https://dom.spec.whatwg.org/#abortsignal-signal-abort\" id=\"ref-for-abortsignal-signal-abort②\">signal abort</a> steps are triggered,\nby calling <code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#dom-abortcontroller-abort\" id=\"ref-for-dom-abortcontroller-abort①\">abort()</a></code> on the <code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#abortcontroller\" id=\"ref-for-abortcontroller①\">AbortController</a></code> associated with the signal.</p>\n    <p>This algorithm is likely to resolve promises causing code to run,\nwhich may include attempting to call any of the methods on <code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#abortsignal\" id=\"ref-for-abortsignal③\">AbortSignal</a></code>.\nSince <a data-link-type=\"dfn\" href=\"https://dom.spec.whatwg.org/#abortsignal-signal-abort\" id=\"ref-for-abortsignal-signal-abort③\">signal abort</a> involves iterating through the collection of algorithms,\nit should not be possible to modify that collection while it’s running.</p>\n    <p>And since <a data-link-type=\"dfn\" href=\"https://dom.spec.whatwg.org/#abortsignal-signal-abort\" id=\"ref-for-abortsignal-signal-abort④\">signal abort</a> would have triggered the code which caused\nthe recursive call back in to <a data-link-type=\"dfn\" href=\"https://dom.spec.whatwg.org/#abortsignal-signal-abort\" id=\"ref-for-abortsignal-signal-abort⑤\">signal abort</a>,\nit’s important to avoid running these steps again\nif the signal is already in the process of the <a data-link-type=\"dfn\" href=\"https://dom.spec.whatwg.org/#abortsignal-signal-abort\" id=\"ref-for-abortsignal-signal-abort⑥\">signal abort</a> steps,\nto avoid recursion.</p>\n   </div>\n   <p role=\"note\"><span>Note:</span> A caution about early termination:\nif the algorithm being terminated\nwould go on to ensure some critical state consistency,\nbe sure to also make the relevant adjustments in state\nbefore early termination of the algorithm.\nNot doing so can lead to inconsistent state\nand end-user-visible bugs when implemented as-specified.</p>\n   <p role=\"note\"><span>Note:</span> Be cautious about throwing exceptions in early termination.\nKeep in mind the scenario in which developers will be invoking the algorithm,\nand whether they would reasonably expect to handle an exception\nin this [perhaps rare] case.\nFor example, will this be the only exception in the algorithm?</p>\n   <p>You won’t always be able to \"guard\" in this way.\nFor example, an algorithm may have too many entry-points to reliably check all of them.\nIf that’s the case,\nanother option is to defer calling the author code\nto a later task or microtask.\nThis avoids a stack of recursion,\nbut can’t avoid the risk of an endless loop of follow-up tasks.</p>\n   <p>Deferring an event is often specified as \"<a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/webappapis.html#queue-a-task\" id=\"ref-for-queue-a-task①\">queue a task</a> to <a data-link-type=\"dfn\" href=\"https://dom.spec.whatwg.org/#concept-event-fire\" id=\"ref-for-concept-event-fire\">fire an event</a>...\".</p>\n   <p>You should always defer events\nif the algorithm that triggers the event could be running\non a different thread or process.\nIn this case, deferral ensures the events\ncan be processed on the correct task in the <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/webappapis.html#task-queue\" id=\"ref-for-task-queue\">task queue</a>.</p>\n   <p>Both the \"guarding\" and the \"deferring\" approach have trade-offs.</p>\n   <p>\"Guarding\" an algorithm guarantees:</p>\n   <ul>\n    <li data-md=\"\">\n     <p>at the time events are fired,\nthere is no chance that the state may have changed\nbetween the guarded algorithm ending and the event firing.</p>\n    </li><li data-md=\"\">\n     <p>events fired during the algorithm,\nsuch as events to notify user code of a state change made as part of the algorithm,\ncan be fired immediately,\nnotifying code of the change without needing to wait for the next task.</p>\n    </li><li data-md=\"\">\n     <p>user code running in the event handler can observe relevant state directly\non the instance object they were fired on,\nrather than needing to be given a copy of the relevant state with the event.</p>\n   </li></ul>\n   <p>If the events are deferred instead:</p>\n   <ul>\n    <li data-md=\"\">\n     <p>there is no guarantee that they will be first in the <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/webappapis.html#task-queue\" id=\"ref-for-task-queue①\">task queue</a> once the algorithm completes.</p>\n    </li><li data-md=\"\">\n     <p>any other task may change the object’s state\nyou should include any state relevant to the event with the deferred event.</p>\n     <ul>\n      <li data-md=\"\">\n       <p><span>This usually involves a new subclass of <code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#event\" id=\"ref-for-event②\">Event</a></code>,\nwith new attributes to hold the state.</span></p>\n       <p>For example, the <code><a data-link-type=\"idl\" href=\"https://xhr.spec.whatwg.org/#progressevent\" id=\"ref-for-progressevent\">ProgressEvent</a></code> adds <code><a data-link-type=\"idl\" href=\"https://xhr.spec.whatwg.org/#dom-progressevent-loaded\" id=\"ref-for-dom-progressevent-loaded\">loaded</a></code>, <code><a data-link-type=\"idl\" href=\"https://xhr.spec.whatwg.org/#dom-progressevent-total\" id=\"ref-for-dom-progressevent-total\">total</a></code>, etc. attributes to hold the state.</p>\n     </li></ul>\n    </li><li data-md=\"\">\n     <p>if different parts of an algorithm need to coordinate,\nyou may need to define an explicit state machine (well-defined state transitions)\nto ensure that when a deferred event fires,\nthe behavior of inspecting or changing state is well-defined.</p>\n     <p><span>For example, in <a data-link-type=\"biblio\" href=\"#biblio-payment-request\">[payment-request]</a>,\nthe <code><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/payment-request/#dom-paymentrequest\" id=\"ref-for-dom-paymentrequest\">PaymentRequest</a></code>'s <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/payment-request/#dfn-state\" id=\"ref-for-dfn-state\">[[state]]</a> internal slot\nexplicitly tracks the object’s state\nthrough its well-defined transitions.</span></p>\n     <ul>\n      <li data-md=\"\">\n       <p>These state transitions often use the guarding technique themselves,\n to ensure the state transitions happen appropriately.</p>\n       <p>For example, in <a data-link-type=\"biblio\" href=\"#biblio-payment-request\">[payment-request]</a> note the guards used around the <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/payment-request/#dfn-state\" id=\"ref-for-dfn-state①\">[[state]]</a> internal slot,\n such as in the <code><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/payment-request/#dom-paymentrequest-show\" id=\"ref-for-dom-paymentrequest-show\">show()</a></code> algorithm.</p>\n     </li></ul>\n    </li><li data-md=\"\">\n     <p>if the deferred event doesn’t need extra state,\nor a state machine,\nthis probably means that the event is just signalling the completion of the algorithm.\nIf this is true, the API should probably return a <code><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-promise\" id=\"ref-for-idl-promise\">Promise</a></code> instead of firint the event.\nSee <a href=\"#one-time-events\">§ 7.1 Use promises for one time events</a>.</p>\n   </li></ul>\n   <p role=\"note\"><span>Note:</span> events that expose the possibility of recursion as described in this section\nwere sometimes called \"synchronous events\".\nThis terminology is discouraged\nas it implies that it’s possible to dispatch an event asynchronously.\nAll events are dispatched synchronously.\nWhat is more often implied by \"asynchronous event\" is to defer firing an event.</p>\n   <h3 data-level=\"7.7\" id=\"state-and-subclassing\"><span>7.7. </span><span>State and <code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#event\" id=\"ref-for-event③\">Event</a></code> subclasses</span><a href=\"#state-and-subclassing\"></a></h3>\n   <p>Where possible, use a plain <code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#event\" id=\"ref-for-event④\">Event</a></code> with a specified <code>type</code>,\nand capture any state information in the <code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#dom-event-target\" id=\"ref-for-dom-event-target\">target</a></code> object.</p>\n   <p>It’s usually not necessary to create new subclasses of <code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#event\" id=\"ref-for-event⑤\">Event</a></code>.</p>\n   <h3 data-level=\"7.8\" id=\"events-vs-observers\"><span>7.8. </span><span>How to decide between Events and Observers</span><a href=\"#events-vs-observers\"></a></h3>\n   <p>In general, use <code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#eventtarget\" id=\"ref-for-eventtarget\">EventTarget</a></code> and notification <code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#event\" id=\"ref-for-event⑥\">Event</a></code>s,\nrather than an Observer pattern,\nunless an <code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#eventtarget\" id=\"ref-for-eventtarget①\">EventTarget</a></code> can’t work well for your feature.</p>\n   <p>Using an <code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#eventtarget\" id=\"ref-for-eventtarget②\">EventTarget</a></code> ensures your feature benefits from\nimprovements to the shared base class,\nsuch as the addition of the <code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#dom-addeventlisteneroptions-once\" id=\"ref-for-dom-addeventlisteneroptions-once\">once</a></code>.</p>\n   <p>If using events causes problems,\nsuch as unavoidable <a href=\"#guard-against-recursion\">recursion</a>,\nconsider using an Observer pattern instead.</p>\n   <p><code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#mutationobserver\" id=\"ref-for-mutationobserver\">MutationObserver</a></code>, <a href=\"https://w3c.github.io/IntersectionObserver\">Intersection Observer</a>, <a href=\"https://drafts.csswg.org/resize-observer/#resize-observer-interface\">Resize Observers</a>,\nand <a href=\"https://github.com/WICG/indexed-db-observers\">IndexedDB Observers</a> are all examples of an Observer pattern.</p>\n   <div id=\"example-5d14c000\">\n    <p><a href=\"#example-5d14c000\"></a> <code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#mutationobserver\" id=\"ref-for-mutationobserver①\">MutationObserver</a></code> replaced the deprecated <a href=\"https://www.w3.org/TR/DOM-Level-3-Events/#legacy-mutationevent-events\">DOM Mutation Events</a> after developers <a href=\"https://lists.w3.org/Archives/Public/public-webapps/2011JulSep/0779.html\">noticed</a> that DOM Mutation Events \n    </p><ul>\n     <li data-md=\"\">\n      <p>fire too often</p>\n     </li><li data-md=\"\">\n      <p>don’t benefit from event propagation, which makes them too slow to be useful</p>\n     </li><li data-md=\"\">\n      <p>cause <a href=\"#guard-against-recursion\">recursion</a> which is too difficult to guard against.</p>\n    </li></ul>\n    <p>Mutation Observers:</p>\n    <ul>\n     <li data-md=\"\">\n      <p>can batch up mutations to be sent to observers\nafter mutations have finished being applied;</p>\n     </li><li data-md=\"\">\n      <p>don’t need to go through event capture and bubbling phases;</p>\n     </li><li data-md=\"\">\n      <p>provide a richer API for expressing what mutations have occurred.</p>\n    </li></ul>\n    <p role=\"note\"><span>Note:</span> Events can also batch up notifications,\nbut DOM Mutation Events were not designed to do this.\nEvents don’t always need to participate in event propagation,\nbut events on DOM Nodes usually do.</p>\n   </div>\n   <p>The Observer pattern works like this:</p>\n   <ul>\n    <li data-md=\"\">\n     <p>Each instance of the Observer class\nis constructed with a callback,\nand optionally with some options to customize what should be observed.</p>\n    </li><li data-md=\"\">\n     <p>Instances begin observing specific targets,\nusing a method named <code>observe()</code>,\nwhich takes a reference to the target to be observed.\nThe options to customize what should be observed\nmay be provided here instead of to the constructor.\nThe callback provided in the constructor is invoked\nwhen something interesting happens to those targets.</p>\n    </li><li data-md=\"\">\n     <p>Callbacks receive <em>change records</em> as arguments.\nThese records contain the details\nabout the interesting thing that happened.\nMultiple records can be delivered at once.</p>\n    </li><li data-md=\"\">\n     <p>The author may stop observing by calling a method called <code>unobserve()</code> or <code>disconnect()</code> on the Observer instance.</p>\n    </li><li data-md=\"\">\n     <p>Optionally, a method may be provided to immediately return records\nfor all observed-but-not-yet-delivered occurrences.</p>\n   </li></ul>\n   <div id=\"example-f8835767\">\n    <p><a href=\"#example-f8835767\"></a> <a href=\"https://w3c.github.io/IntersectionObserver\"><code>IntersectionObserver</code></a> may be used like this: \n</p><pre><c- a=\"\">function</c-> checkElementStillVisible<c- p=\"\">(</c->element<c- p=\"\">,</c-> observer<c- p=\"\">)</c-> <c- p=\"\">{</c->\n    <c- k=\"\">delete</c-> element<c- p=\"\">.</c->visibleTimeout<c- p=\"\">;</c->\n\n    <c- c1=\"\">// Process any observations which may still be on the task queue</c->\n    processChanges<c- p=\"\">(</c->observer<c- p=\"\">.</c->takeRecords<c- p=\"\">());</c->\n\n    <c- k=\"\">if</c-> <c- p=\"\">(</c-><c- t=\"\">'isVisible'</c-> <c- k=\"\">in</c-> element<c- p=\"\">)</c-> <c- p=\"\">{</c->\n        <c- k=\"\">delete</c-> element<c- p=\"\">.</c->isVisible<c- p=\"\">;</c->\n        logAdImpressionToServer<c- p=\"\">();</c->\n\n        <c- c1=\"\">// Stop observing this element</c->\n        observer<c- p=\"\">.</c->unobserve<c- p=\"\">(</c->element<c- p=\"\">);</c->\n    <c- p=\"\">}</c->\n<c- p=\"\">}</c->\n\n<c- a=\"\">function</c-> processChanges<c- p=\"\">(</c->changes<c- p=\"\">)</c-> <c- p=\"\">{</c->\n    changes<c- p=\"\">.</c->forEach<c- p=\"\">(</c-><c- a=\"\">function</c-><c- p=\"\">(</c->changeRecord<c- p=\"\">)</c-> <c- p=\"\">{</c->\n        <c- a=\"\">var</c-> element <c- o=\"\">=</c-> changeRecord<c- p=\"\">.</c->target<c- p=\"\">;</c->\n        element<c- p=\"\">.</c->isVisible <c- o=\"\">=</c-> isVisible<c- p=\"\">(</c->changeRecord<c- p=\"\">.</c->boundingClientRect<c- p=\"\">,</c->\n                                      changeRecord<c- p=\"\">.</c->intersectionRect<c- p=\"\">);</c->\n        <c- k=\"\">if</c-> <c- p=\"\">(</c-><c- t=\"\">'isVisible'</c-> <c- k=\"\">in</c-> element<c- p=\"\">)</c-> <c- p=\"\">{</c->\n            <c- c1=\"\">// Element became visible</c->\n            element<c- p=\"\">.</c->visibleTimeout <c- o=\"\">=</c-> setTimeout<c- p=\"\">(()</c-> <c- p=\"\">=&gt;</c-> <c- p=\"\">{</c->\n                checkElementStillVisible<c- p=\"\">(</c->element<c- p=\"\">,</c-> observer<c- p=\"\">);</c->\n            <c- p=\"\">},</c-> <c- mf=\"\">1000</c-><c- p=\"\">);</c->\n        <c- p=\"\">}</c-> <c- k=\"\">else</c-> <c- p=\"\">{</c->\n            <c- c1=\"\">// Element became hidden</c->\n            <c- k=\"\">if</c-> <c- p=\"\">(</c-><c- t=\"\">'visibleTimeout'</c-> <c- k=\"\">in</c-> element<c- p=\"\">)</c-> <c- p=\"\">{</c->\n                clearTimeout<c- p=\"\">(</c->element<c- p=\"\">.</c->visibleTimeout<c- p=\"\">);</c->\n                <c- k=\"\">delete</c-> element<c- p=\"\">.</c->visibleTimeout<c- p=\"\">;</c->\n            <c- p=\"\">}</c->\n        <c- p=\"\">}</c->\n    <c- p=\"\">});</c->\n<c- p=\"\">}</c->\n\n<c- c1=\"\">// Create IntersectionObserver with callback and options</c->\n<c- a=\"\">var</c-> observer <c- o=\"\">=</c-> <c- k=\"\">new</c-> IntersectionObserver<c- p=\"\">(</c->processChanges<c- p=\"\">,</c->\n                                        <c- p=\"\">{</c-> threshold<c- o=\"\">:</c-> <c- p=\"\">[</c-><c- mf=\"\">0.5</c-><c- p=\"\">]</c-> <c- p=\"\">});</c->\n\n<c- c1=\"\">// Begin observing \"ad\" element</c->\n<c- a=\"\">var</c-> ad <c- o=\"\">=</c-> document<c- p=\"\">.</c->querySelector<c- p=\"\">(</c-><c- t=\"\">'#ad'</c-><c- p=\"\">);</c->\nobserver<c- p=\"\">.</c->observe<c- p=\"\">(</c->ad<c- p=\"\">);</c->\n</pre>\n    <p>(Example code adapted from <a href=\"https://github.com/w3c/IntersectionObserver/blob/master/explainer.md\">the <code>IntersectionObserver</code> explainer</a>.)</p>\n   </div>\n   <p>To use the Observer pattern, you need to define:</p>\n   <ol>\n    <li data-md=\"\">\n     <p>the new Observer object type,</p>\n    </li><li data-md=\"\">\n     <p>an object type for observation options, and</p>\n    </li><li data-md=\"\">\n     <p>an object type for the records to be observed.</p>\n   </li></ol>\n   <p>The trade-off for this extra work is the following advantages:</p>\n   <ul>\n    <li data-md=\"\">\n     <p>Instances can be customized at observation time, or at creation time.\nThe constructor for an <code>Observer</code>,\nor its <code>observe()</code> method,\ncan take options allowing authors to customize what is observed for each callback.\nThis isn’t possible with <code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#dom-eventtarget-addeventlistener\" id=\"ref-for-dom-eventtarget-addeventlistener②\">addEventListener()</a></code>.</p>\n    </li><li data-md=\"\">\n     <p>It’s easy to stop listening on multiple callbacks using the <code>disconnect()</code> or <code>unobserve()</code> method on the <code>Observer</code> object.</p>\n    </li><li data-md=\"\">\n     <p>You have the option to provide a method like <code>takeRecords()</code>,\nwhich immediately fetches the relevant data,\ninstead of waiting for an event to fire.</p>\n    </li><li data-md=\"\">\n     <p>Because Observers are single-purpose, you don’t need to specify an event type.</p>\n   </li></ul>\n   <p><code>Observer</code>s and <code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#eventtarget\" id=\"ref-for-eventtarget③\">EventTarget</a></code>s have these things in common:</p>\n   <ul>\n    <li data-md=\"\">\n     <p>Both can be customized at creation time.</p>\n    </li><li data-md=\"\">\n     <p>Both can batch occurrences and deliver them at any time. <code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#eventtarget\" id=\"ref-for-eventtarget④\">EventTarget</a></code>s don’t need to be synchronous;\nthey can use microtask timing, idle timing, animation-frame timing, etc.\nYou don’t need an <code>Observer</code> to get special timing or batching.</p>\n    </li><li data-md=\"\">\n     <p>Neither <code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#eventtarget\" id=\"ref-for-eventtarget⑤\">EventTarget</a></code>s nor <code>Observer</code>s need to participate in a DOM tree\n(bubbling/capture and cancellation).\nMost prominent <code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#eventtarget\" id=\"ref-for-eventtarget⑥\">EventTarget</a></code>s are <code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#node\" id=\"ref-for-node①\">Node</a></code>s in the DOM tree,\nbut many other events are standalone;\nfor example, <code><a data-link-type=\"idl\" href=\"https://w3c.github.io/IndexedDB/#idbdatabase\" id=\"ref-for-idbdatabase\">IDBDatabase</a></code> and <code><a data-link-type=\"idl\" href=\"https://xhr.spec.whatwg.org/#xmlhttprequesteventtarget\" id=\"ref-for-xmlhttprequesteventtarget\">XMLHttpRequestEventTarget</a></code>.\nEven when using <code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#node\" id=\"ref-for-node②\">Node</a></code>s,\nyour events may be designed to be non-bubbling and non-cancelable.</p>\n   </li></ul>\n   <div id=\"example-211011c7\">\n    <p><a href=\"#example-211011c7\"></a> Here is an example of using a hypothetical version of <code><a data-link-type=\"idl\" href=\"https://w3c.github.io/IntersectionObserver/#intersectionobserver\" id=\"ref-for-intersectionobserver\">IntersectionObserver</a></code> that’s an <code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#eventtarget\" id=\"ref-for-eventtarget⑦\">EventTarget</a></code> subclass: \n</p><pre><c- a=\"\">const</c-> io <c- o=\"\">=</c-> <c- k=\"\">new</c-> ETIntersectionObserver<c- p=\"\">(</c->element<c- p=\"\">,</c-> <c- p=\"\">{</c-> root<c- p=\"\">,</c-> rootMargin<c- p=\"\">,</c-> threshold <c- p=\"\">});</c->\n\n<c- a=\"\">function</c-> listener<c- p=\"\">(</c->e<c- p=\"\">)</c-> <c- p=\"\">{</c->\n    <c- k=\"\">for</c-> <c- p=\"\">(</c-><c- a=\"\">const</c-> change <c- k=\"\">of</c-> e<c- p=\"\">.</c->changes<c- p=\"\">)</c-> <c- p=\"\">{</c->\n        <c- c1=\"\">// ...</c->\n    <c- p=\"\">}</c->\n<c- p=\"\">}</c->\n\nio<c- p=\"\">.</c->addEventListener<c- p=\"\">(</c-><c- u=\"\">\"intersect\"</c-><c- p=\"\">,</c-> listener<c- p=\"\">);</c->\nio<c- p=\"\">.</c->removeEventListener<c- p=\"\">(</c-><c- u=\"\">\"intersect\"</c-><c- p=\"\">,</c-> listener<c- p=\"\">);</c->\n</pre>\n    <p>Compared to the <code>Observer</code> version:</p>\n    <ul>\n     <li data-md=\"\">\n      <p>it’s more difficult to observe multiple elements with the same options;</p>\n     </li><li data-md=\"\">\n      <p>there is no way to request data immediately;</p>\n     </li><li data-md=\"\">\n      <p>it’s more work to remove multiple event listeners for the same event;</p>\n     </li><li data-md=\"\">\n      <p>the author has to provide a redundant <code>\"intersect\"</code> event type.</p>\n    </li></ul>\n    <p>In common with the <code>Observer</code> version:</p>\n    <ul>\n     <li data-md=\"\">\n      <p>it can still do batching;</p>\n     </li><li data-md=\"\">\n      <p>it has the same timing (based on the JavaScript event queue);</p>\n     </li><li data-md=\"\">\n      <p>authors can still customize what to listen for; and</p>\n     </li><li data-md=\"\">\n      <p>events don’t go through capture or bubbling.</p>\n    </li></ul>\n    <p>These aspects can be achieved with either design.</p>\n   </div>\n   <p>See also:</p>\n   <ul>\n    <li data-md=\"\">\n     <p><a href=\"#events-are-for-notification\">§ 7.5 Events are for notification</a></p>\n    </li><li data-md=\"\">\n     <p><a href=\"#state-and-subclassing\">§ 7.7 State and Event subclasses</a></p>\n   </li></ul>\n   <h2 data-level=\"8\" id=\"types-and-units\"><span>8. </span><span>Web IDL, Types, and Units</span><a href=\"#types-and-units\"></a></h2>\n   <h3 data-level=\"8.1\" id=\"numeric-types\"><span>8.1. </span><span>Use numeric types appropriately</span><a href=\"#numeric-types\"></a></h3>\n   <p>If an API you’re designing uses numbers,\nuse one of the following <a data-link-type=\"biblio\" href=\"#biblio-webidl\">[WEBIDL]</a> numeric types,\nunless there is a specific reason not to:</p>\n   <dl>\n    <dt data-md=\"\"><code><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-unrestricted-double\" id=\"ref-for-idl-unrestricted-double\">unrestricted double</a></code>\n    </dt><dd data-md=\"\">\n     <p>Any JavaScript number, including infinities and NaN</p>\n    </dd><dt data-md=\"\"><code><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-double\" id=\"ref-for-idl-double\">double</a></code>\n    </dt><dd data-md=\"\">\n     <p>Any JavaScript number, excluding infinities and NaN</p>\n    </dd><dt data-md=\"\">[<code><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#EnforceRange\" id=\"ref-for-EnforceRange\">EnforceRange</a></code>] <code><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-long-long\" id=\"ref-for-idl-long-long\">long long</a></code>\n    </dt><dd data-md=\"\">\n     <p>Any JavaScript number from -2<sup>63</sup> to 2<sup>63</sup>,\n rounded to the nearest integer.\n If a number outside this range is given,\n the generated bindings will throw a <code><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#exceptiondef-typeerror\" id=\"ref-for-exceptiondef-typeerror①\">TypeError</a></code>.</p>\n    </dd><dt data-md=\"\">[<code><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#EnforceRange\" id=\"ref-for-EnforceRange①\">EnforceRange</a></code>] <code><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-unsigned-long-long\" id=\"ref-for-idl-unsigned-long-long\">unsigned long long</a></code>\n    </dt><dd data-md=\"\">\n     <p>Any JavaScript number from 0 to 2<sup>64</sup>,\n rounded to the nearest integer.\n If a number outside this range is given,\n the generated bindings will throw a <code><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#exceptiondef-typeerror\" id=\"ref-for-exceptiondef-typeerror②\">TypeError</a></code>.</p>\n   </dd></dl>\n   <p>JavaScript has only one numeric type, <code><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-number-objects\" id=\"ref-for-sec-number-objects\">Number</a></code>:\nIEEE 754 double-precision floating point, including ±0, ±Infinity, and NaN. <a data-link-type=\"biblio\" href=\"#biblio-webidl\">[WEBIDL]</a> numeric types represent\nrules for modifying any JavaScript number\nto belong to a subset with particular properties.\nThese rules are run when a number is passed to the interface defined in IDL,\nwhether a method or a property setter.</p>\n   <p>If you have extra rules which need to be applied to the number,\nyou can specify those in your algorithm.</p>\n   <div role=\"note\"><p>\n     The <a href=\"https://heycam.github.io/webidl/#es-integer-types\">WEBIDL rules</a> for converting a JavaScript number to a number with fewer bits,\nsuch as an <code><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-octet\" id=\"ref-for-idl-octet\">octet</a></code> (8 bits, in the range [0, 255]),\ninvolves taking the modulo of the JavaScript number.\nFor example, to convert a JavaScript number value of 300\nto an <code><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-octet\" id=\"ref-for-idl-octet①\">octet</a></code>,\nthe bindings will first compute 300 modulo 255,\nso the resulting number will be 45,\nwhich might be surprising. \n    </p><p>Instead, you can use\n[<code><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#EnforceRange\" id=\"ref-for-EnforceRange②\">EnforceRange</a></code>] <code><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-octet\" id=\"ref-for-idl-octet②\">octet</a></code> to throw a <code>TypeError</code> for values outside of the <code><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-octet\" id=\"ref-for-idl-octet③\">octet</a></code> range,\nor [<code><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#Clamp\" id=\"ref-for-Clamp\">Clamp</a></code>] <code><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-octet\" id=\"ref-for-idl-octet④\">octet</a></code> to clamp values to the octet range (for example, converting 300 to 255).</p>\n    <p>This also works for the other shorter types, such as <code><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-short\" id=\"ref-for-idl-short\">short</a></code> or <code><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-long\" id=\"ref-for-idl-long\">long</a></code>.</p>\n   </div>\n   <p><code><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-bigint\" id=\"ref-for-idl-bigint\">bigint</a></code> should be used only when values greater than 2<sup>53</sup> or less than -2<sup>53</sup> are expected.</p>\n   <p>An API should not support both <code><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-bigint-objects\" id=\"ref-for-sec-bigint-objects\">BigInt</a></code> and <code><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-number-objects\" id=\"ref-for-sec-number-objects①\">Number</a></code> simultaneously,\neither by supporting both types via polymorphism,\nor by adding separate, otherwise identical APIs which take <code><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-bigint-objects\" id=\"ref-for-sec-bigint-objects①\">BigInt</a></code> and <code><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-number-objects\" id=\"ref-for-sec-number-objects②\">Number</a></code>.\nThis risks losing precision through implicit conversions,\nwhich defeats the purpose of <code><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-bigint-objects\" id=\"ref-for-sec-bigint-objects②\">BigInt</a></code>.</p>\n   <h3 data-level=\"8.2\" id=\"idl-string-types\"><span>8.2. </span><span>Represent strings appropriately</span><a href=\"#idl-string-types\"></a></h3>\n   <p>When designing a web platform feature which operates on <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#string\" id=\"ref-for-string\">strings</a>,\nuse <code><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-DOMString\" id=\"ref-for-idl-DOMString\">DOMString</a></code> unless you have a specific reason not to.</p>\n   <p>Most string operations don’t need\nto interpret the <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#code-unit\" id=\"ref-for-code-unit\">code units</a> inside of the string,\nso <code><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-DOMString\" id=\"ref-for-idl-DOMString①\">DOMString</a></code> is the best choice.\nIn the specific cases explained below, it might be appropriate to use either <code><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-USVString\" id=\"ref-for-idl-USVString\">USVString</a></code> or <code><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-ByteString\" id=\"ref-for-idl-ByteString\">ByteString</a></code> instead. <a data-link-type=\"biblio\" href=\"#biblio-infra\">[INFRA]</a> <a data-link-type=\"biblio\" href=\"#biblio-webidl\">[WEBIDL]</a></p>\n   <p><code><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-USVString\" id=\"ref-for-idl-USVString①\">USVString</a></code> is the Web IDL type that represents <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#scalar-value-string\" id=\"ref-for-scalar-value-string\">scalar value strings</a>.\nFor strings whose most common algorithms operate on <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#scalar-value\" id=\"ref-for-scalar-value\">scalar values</a> (such as <a data-link-type=\"abstract-op\" href=\"https://url.spec.whatwg.org/#percent-encode\" id=\"ref-for-percent-encode\">percent-encoding</a>),\nor for operations which can’t handle <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#surrogate\" id=\"ref-for-surrogate\">surrogates</a> in input\n(such as APIs that pass strings through to native platform APIs), <code><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-USVString\" id=\"ref-for-idl-USVString②\">USVString</a></code> should be used.</p>\n   <p id=\"example-fe96b598\"><a href=\"#example-fe96b598\"></a> <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/common-dom-interfaces.html#reflect\" id=\"ref-for-reflect\">Reflecting IDL attributes</a> whose content attribute is defined to contain a <a data-link-type=\"dfn\" href=\"https://url.spec.whatwg.org/#concept-url\" id=\"ref-for-concept-url\">URL</a> (such as <code><a data-link-type=\"element-sub\" href=\"https://html.spec.whatwg.org/multipage/links.html#attr-hyperlink-href\" id=\"ref-for-attr-hyperlink-href\">href</a></code>)\nshould use <code><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-USVString\" id=\"ref-for-idl-USVString③\">USVString</a></code>. <a data-link-type=\"biblio\" href=\"#biblio-html\">[HTML]</a> </p>\n   <p><code><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-ByteString\" id=\"ref-for-idl-ByteString①\">ByteString</a></code> should only be used for representing\ndata from protocols like HTTP\nwhich don’t distinguish between bytes and strings.\nIt isn’t a general-purpose string type.\nIf you need to represent a <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#sequence-type\" id=\"ref-for-sequence-type②\">sequence</a> of <code><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-byte\" id=\"ref-for-idl-byte\">bytes</a></code>,\nuse <code><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-Uint8Array\" id=\"ref-for-idl-Uint8Array\">Uint8Array</a></code>.</p>\n   <h3 data-level=\"8.3\" id=\"milliseconds\"><span>8.3. </span><span>Use milliseconds for time measurement</span><a href=\"#milliseconds\"></a></h3>\n   <p>If you are designing an API that accepts a time measurement,\nexpress the time measurement in milliseconds.</p>\n   <p>Even if seconds (or some other time unit) are more natural in the domain of an API,\nsticking with milliseconds ensures that APIs\nare interoperable with one another.\nThis means that authors don’t need to convert values used in one API\nto be used in another API,\nor keep track of which time unit is needed where.</p>\n   <p>This convention began with <code><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout\" id=\"ref-for-dom-settimeout\">setTimeout()</a></code> and the <code><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-date-objects\" id=\"ref-for-sec-date-objects\">Date</a></code> API,\nand has been used since then.</p>\n   <p role=\"note\"><span>Note:</span> high-resolution time is usually represented as fractional milliseconds\nusing a floating point value,\nnot as an integer value of a smaller time unit like nanoseconds.</p>\n   <h3 data-level=\"8.4\" id=\"times-and-dates\"><span>8.4. </span><span>Use the appropriate type to represent times and dates</span><a href=\"#times-and-dates\"></a></h3>\n   <p>When representing date-times on the platform, use the <code><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/hr-time-2/#dom-domhighrestimestamp\" id=\"ref-for-dom-domhighrestimestamp\">DOMHighResTimeStamp</a></code> type. <code><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/hr-time-2/#dom-domhighrestimestamp\" id=\"ref-for-dom-domhighrestimestamp①\">DOMHighResTimeStamp</a></code> allows comparison of timestamps,\nregardless of the user’s time settings.</p>\n   <p><code><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/hr-time-2/#dom-domhighrestimestamp\" id=\"ref-for-dom-domhighrestimestamp②\">DOMHighResTimeStamp</a></code> values represent\na time value in milliseconds.\nSee <a data-link-type=\"biblio\" href=\"#biblio-highres-time\">[HIGHRES-TIME]</a> for more details.</p>\n   <p>Don’t use the JavaScript <code><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-date-objects\" id=\"ref-for-sec-date-objects①\">Date</a></code> class for representing\nspecific date-time values. <code><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-date-objects\" id=\"ref-for-sec-date-objects②\">Date</a></code> objects are mutable (may have their value changed),\nand there is no way to make them immutable.</p>\n   \n   <h3 data-level=\"8.5\" id=\"error-types\"><span>8.5. </span><span>Use Error or DOMException for errors</span><a href=\"#error-types\"></a></h3>\n   <p>Represent errors in web APIs as ECMAScript error objects (e.g., <code><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-error-objects\" id=\"ref-for-sec-error-objects\">Error</a></code>)\nor as <code><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-DOMException\" id=\"ref-for-idl-DOMException\">DOMException</a></code>.\nwhether they are exceptions, promise rejection values, or properties.</p>\n   <h2 data-level=\"9\" id=\"device-apis\"><span>9. </span><span>OS and Device Wrapper APIs</span><a href=\"#device-apis\"></a></h2>\n   <p>New APIs are now being developed in the web platform for interacting with devices.\nFor example, authors wish to be able to use the web to connect with their <a href=\"https://www.w3.org/TR/mediacapture-streams/\">microphones and cameras</a>, <a href=\"https://www.w3.org/TR/generic-sensor/\">generic sensors</a> (such as gyroscope and\naccelerometer), <a href=\"https://www.w3.org/community/web-bluetooth/\">Bluetooth</a> and <a href=\"https://wicg.github.io/webusb/\">USB</a>-connected peripherals, <a href=\"https://www.w3.org/community/autowebplatform/\">automobiles</a>, etc.</p>\n   <p>These can be functionality provided by the underlying operating system,\nor provided by a native third-party library\nto interact with a device.\nThese are an abstraction which \"wrap\" the native functionality\nwithout introducing significant complexity,\nwhile securing the API surface to the browser.\nSo, these are called wrapper APIs.</p>\n   <p>This section contains principles for consideration when designing APIs for devices.</p>\n   <h3 data-level=\"9.1\" id=\"device-ids\"><span>9.1. </span><span>Use care when exposing identifying information about devices</span><a href=\"#device-ids\"></a></h3>\n   <p>If you need to give web sites access to information about a device,\nuse the guidelines below to decide what information to expose.</p>\n   <p>Firstly, think carefully about whether it is really necessary\nto expose identifying information about the device at all.\nConsider whether your <a href=\"#priority-of-constituencies\">user needs</a> could be satisfied\nby a less powerful API.</p>\n   <p>Exposing the presence of a device,\nadditional information about a device,\nor device identifiers,\neach increase the risk of harming the user’s privacy.</p>\n   <p>One risk is that as more specific information is shared,\nthe set of <a href=\"https://www.w3.org/TR/fingerprinting-guidance/\">fingerprinting data</a> available to sites gets larger.\nThere are also <a href=\"https://w3cping.github.io/privacy-threat-model/\">other potential risks</a> to user privacy.</p>\n   <p id=\"issue-70c97a29\"><a href=\"#issue-70c97a29\"></a> Privacy Threat Model is not ready for prime time.</p>\n   <p>If there is no way to design a less powerful API,\nuse these guidelines when exposing device information:</p>\n   <dl>\n    <dt data-md=\"\">Limit information in the id\n    </dt><dd data-md=\"\">\n     <p>Include as little identifiable information as possible\nin device ids exposed to the web plaform.\nIdentifiable information includes\nbranding, make and model numbers, etc\nYou can usually use a random number\nor a unique id instead.\nMake sure that your ids aren’t guessable,\nand aren’t re-used.</p>\n    </dd><dt data-md=\"\">Keep the user in control\n    </dt><dd data-md=\"\">\n     <p>When the user chooses to clear browsing data,\nmake sure any stored device ids are cleared.</p>\n    </dd><dt data-md=\"\">Hide sensitive ids behind a user permission\n    </dt><dd data-md=\"\">\n     <p>If you can’t create a device id in an anonymous way,\nlimit access to it.\nMake sure the user can provide <a href=\"#consent\">meaningful consent</a> to a Web page accessing this information.</p>\n    </dd><dt data-md=\"\">Tie ids to the same-origin model\n    </dt><dd data-md=\"\">\n     <p>Create distinct unique ids for the same physical device\nfor each origin that has has access to it.</p>\n    </dd><dd data-md=\"\">\n     <p>If the same device is requested more than once\nby the same origin, return the same id for it\n(unless the user has cleared their browsing data).\nThis allows authors to avoid having\nseveral copies of the same device.</p>\n    </dd><dt data-md=\"\">Persistable when necessary\n    </dt><dd data-md=\"\">\n     <p>If a device id is time consuming to obtain,\nmake sure authors can store an id generated in one session\nfor use in a later session.\nYou can do this by making sure that\nthe procedure to generate the id\nconsistently produces the same id\nfor the same device,\nfor each origin.</p>\n   </dd></dl>\n   <p>See also:</p>\n   <ul>\n    <li data-md=\"\">\n     <p><a data-link-type=\"biblio\" href=\"#biblio-least-power\">[LEAST-POWER]</a></p>\n    </li><li data-md=\"\">\n     <p><a data-link-type=\"biblio\" href=\"#biblio-fingerprinting-guidance\">[FINGERPRINTING-GUIDANCE]</a></p>\n    </li><li data-md=\"\">\n     <p><a data-link-type=\"biblio\" href=\"#biblio-unsanctioned-tracking\">[UNSANCTIONED-TRACKING]</a></p>\n   </li></ul>\n   <h3 data-level=\"9.2\" id=\"device-enumeration\"><span>9.2. </span><span>Use care when exposing APIs for selecting or enumerating devices</span><a href=\"#device-enumeration\"></a></h3>\n   <p>Look for ways to avoid enumerating devices.\nIf you can’t avoid it, expose the least information possible.</p>\n   <p>If an API exposes the the existence, capabilities, or identifiers of more than one device,\nall of the risks in <a href=\"#device-ids\">§ 9.1 Use care when exposing identifying information about devices</a> are multiplied by the number of devices.\nFor the same reasons,\nconsider whether your <a href=\"#priority-of-constituencies\">user needs</a> could be satisfied\nby a less powerful API. <a data-link-type=\"biblio\" href=\"#biblio-least-power\">[LEAST-POWER]</a></p>\n   <p>If the purpose of the API\nis to enable the user <strong>to select a device</strong> from the set of available devices of a particular kind,\nyou may not need to expose a list to script at all.\nAn API which invokes a User-Agent-provided device picker could suffice.\nSuch an API:</p>\n   <ul>\n    <li data-md=\"\">\n     <p>keeps the user in control,</p>\n    </li><li data-md=\"\">\n     <p>doesn’t expose any device information without the user’s <a href=\"#consent\">consent</a>,</p>\n    </li><li data-md=\"\">\n     <p>doesn’t expose any fingerprinting data about the user’s environment by default, and</p>\n    </li><li data-md=\"\">\n     <p>only exposes information about one device at a time.</p>\n   </li></ul>\n   <p>When designing API which allows users to select a device,\nit may be necessary to also expose\nthe fact that there are devices are available to be picked.\nThis does expose one bit of fingerprinting data about the user’s environment\nto websites,\nso it isn’t quite as safe as an API which doesn’t have such a feature.</p>\n   <div id=\"example-e2381236\">\n    <p><a href=\"#example-e2381236\"></a> The <code><a data-link-type=\"idl\" href=\"https://w3c.github.io/remote-playback/#remoteplayback-interface\" id=\"ref-for-remoteplayback-interface\">RemotePlayback</a></code> interface\ndoesn’t expose a list of available <a data-link-type=\"dfn\" href=\"https://w3c.github.io/remote-playback/#dfn-remote-playback-devices\" id=\"ref-for-dfn-remote-playback-devices\">remote playback devices</a>.\nInstead, it allows the user to choose one device\nfrom a device picker provided by the User Agent. \n    </p><p>It does enable websites to detect whether or not\nany <a data-link-type=\"dfn\" href=\"https://w3c.github.io/remote-playback/#dfn-remote-playback-devices\" id=\"ref-for-dfn-remote-playback-devices①\">remote playback device</a> is available,\nso the website can show or hide a control\nthe user can use to show the device picker.</p>\n    <p>The trade-off is that by allowing websites\nthis extra bit of information,\nthe API lets authors make their user interface less confusing.\nThey can choose to show a button to trigger the picker\nonly if at least one device is available.</p>\n   </div>\n   <p>If you must expose a list of devices,\ntry to <strong>expose the smallest subset</strong> that satisfies your user needs.</p>\n   <p>For example, an API which allows the website\nto request <strong>a filtered or constrained list</strong> of devices\nis one option to keep the number of devices smaller.\nHowever, if authors are allowed to make multiple requests with different constraints,\nthey may still be able to access the full list.</p>\n   <p>Finally, if you must expose the full list of devices of a particular kind,\nplease rigorously <strong>define the order</strong> in which devices will be listed.\nThis can reduce interoperability issues,\nand helps to mitigate fingerprinting.\n(Sort order could reveal other information:\nsee <a href=\"https://w3c.github.io/fingerprinting-guidance/#a_standardized_profile\"><cite>Fingerprinting Guidance</cite> § 5.2 Standardization</a> for more.)</p>\n   <p role=\"note\"><span>Note:</span> While APIs should not\nexpose a full list of devices in an <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#implementation-defined\" id=\"ref-for-implementation-defined\">implementation-defined</a> order,\nthey may need to for web compatibility reasons.</p>\n   <h3 data-level=\"9.3\" id=\"usecase-oriented-apis\"><span>9.3. </span><span>Design based on user needs, not the underlying API or hardware</span><a href=\"#usecase-oriented-apis\"></a></h3>\n   <p>Design new native capabilities being brought to the web based on user needs.</p>\n   <p>Avoid directly translating an existing native API to the web.</p>\n   <p>Instead, consider the functionality available from the native API,\nand the user needs it addresses,\nand design an API that meets those user needs,\neven if the implementation depends on the existing native API.</p>\n   <p>Be particularly careful about exposing\nthe exact lifecycle and data structures of the underlying native APIs.\nWhen possible, consider flexibility for new hardware.</p>\n   <p>This means newly proposed APIs should be designed\nwith careful consideration on how they are intended to be used\nrather than how the underlying hardware, device, or native API\navailable today.</p>\n   <h3 data-level=\"9.4\" id=\"hardware-is-scary\"><span>9.4. </span><span>Be proactive about safety</span><a href=\"#hardware-is-scary\"></a></h3>\n   <p>When bringing native capabilities to the web platform,\ntry to design defensively.</p>\n   <p>Bringing a native capability to the web platform\ncomes with many implications.\nUsers may not want websites to know that their computers\nhave specific capabilities. Therefore, access to anything\noutside of the logical origin boundary should be permission gated.</p>\n   <p>For example, if a device can store state,\nand that state is readable at the same time by multiple origins,\na set of APIs that lets you read and write that state\nis effectively a side-channel that undermines the origin model of the web.</p>\n   <p>For these reasons, even if the device allows non-exclusive access,\nyou may want to consider enforcing exclusive access per-origin,\nor even restricting it further to only the current active tab.</p>\n   <p>Additionally, APIs should be designed so that the applications\ncan gracefully handle physical disruption, such as a device being unplugged.</p>\n   <h3 data-level=\"9.5\" id=\"wrapper-apis\"><span>9.5. </span><span>Native APIs don’t typically translate well to the web</span><a href=\"#wrapper-apis\"></a></h3>\n   <p>When adapting native operating system APIs for the web,\nmake sure the new web APIs are designed with web platform principles in mind.</p>\n   <dl>\n    <dt data-md=\"\">Make sure the web API can be implemented on more than one platform\n    </dt><dd data-md=\"\">\n     <p>When designing a wrapper API,\nconsider how different platforms provide its functionality.</p>\n     <p>Ideally, all implementations should work exactly the same,\nbut in some cases you may have a reason to expose options\nwhich only work on some platforms.\nIf this happens, be sure to explain\nhow authors should write code which works on all platforms.\nSee <a href=\"#feature-detect\">§ 2.5 New features should be detectable</a>.</p>\n    </dd><dt data-md=\"\">Underlying protocols should be open\n    </dt><dd data-md=\"\">\n     <p>APIs which require exchange with external hardware or services\nshould not depend on closed or proprietary protocols.\nDepending on non-open protocols undermines the open nature of the web.</p>\n    </dd><dt data-md=\"\">Design APIs to handle the user being off-line\n    </dt><dd data-md=\"\">\n     <p>If an API depends on some service which is provided by a remote server,\nmake sure that the API functions well when the user can’t access the remote server\nfor any reason.</p>\n    </dd><dt data-md=\"\">Avoid additional fingerprinting surfaces\n    </dt><dd data-md=\"\">\n     <p>Wrapper APIs can unintentionally expose the user to\na wider fingerprinting surface.\nPlease read the TAG’s finding on <a href=\"http://www.w3.org/2001/tag/doc/unsanctioned-tracking/\">unsanctioned tracking</a> for additional details.</p>\n   </dd></dl>\n   <h2 data-level=\"10\" id=\"other-considerations\"><span>10. </span><span>Other API Design Considerations</span><a href=\"#other-considerations\"></a></h2>\n   <h3 data-level=\"10.1\" id=\"polyfills\"><span>10.1. </span><span>Polyfills</span><a href=\"#polyfills\"></a></h3>\n   <p>Polyfills can be hugely beneficial\nin helping to roll out new features to the web platform.\nThe Technical Architecture Group <a href=\"https://www.w3.org/2001/tag/doc/polyfills/\">finding on Polyfills and the Evolution of the Web</a> offers guidance that should be considered in the development of new features, notably:</p>\n   <ul>\n    <li data-md=\"\">\n     <p>Being \"polyfillable\" isn’t essential but <strong>is</strong> beneficial</p>\n    </li><li data-md=\"\">\n     <p><a href=\"#feature-detect\">§ 2.5 New features should be detectable</a></p>\n    </li><li data-md=\"\">\n     <p>Polyfill development should be encouraged</p>\n   </li></ul>\n   <h3 data-level=\"10.2\" id=\"consider-dedicatedworker-support\"><span>10.2. </span><span>Where possible APIs should be made available in DedicatedWorker</span><a href=\"#consider-dedicatedworker-support\"></a></h3>\n   <p>When exposing a feature, please consider whether it makes sense to expose the feature\nto DedicatedWorker as well.</p>\n   <p>Many features could work out of the box on a DedicatedWorker and not enabling the feature\nthere could limit the ability for users to run their code in a non blocking manner.</p>\n   <p>Certain challenges can exist when trying to enable a feature on DedicatedWorker,\nespecially if the feature requires user input by asking for permission,\nor showing a picker or selector.\nEven though this might discourage spec authors to support workers,\nwe still recommend designing the feature with DedicatedWorker support in mind,\nin order to not add assumptions that will later make it unnecessarily hard to expose\nthese APIs to DedicatedWorker.</p>\n   <h3 data-level=\"10.3\" id=\"new-data-formats\"><span>10.3. </span><span>New Data Formats</span><a href=\"#new-data-formats\"></a></h3>\n   <p>Always define a corresponding MIME type and extend existing APIs to support this type\nfor any new data format.</p>\n   <p>There are cases when a new capability on the web involves adding a new data format.\nThis can be an image, video, audio, or any other type of data that a browser is expected\nto ingest. New formats should have a standardized MIME type, which is strictly validated.</p>\n   <p>While legacy media formats do not always have strict enforcement for MIME types (and\nsometimes rely on peeking at headers, to workaround this), this is mostly for legacy\ncompatibility reasons and should not be expected or implemented for new formats.</p>\n   <p>It is expected that spec authors also integrate the new format to existing APIs, so that\nthey are safelisted in both ingress (e.g. decoding from a ReadableStream) and egress\n(e.g. encoding to a WriteableStream) points from a browser’s perspective.</p>\n   <p>For example. if you are to add an image format to the web platform, first add a new MIME\ntype for the format. After this, you would naturally add a decoder (and presumably an\nencoder) for said image format to support decoding in HTMLImageElements. On top of this,\nyou are also expected to add support to egress points such as HTMLCanvasElement.toBlob()\nand HTMLCanvasElement.toDataURL().</p>\n   <p>For legacy reasons browsers support MIME type sniffing, but we do not recommend extending\nthe <a href=\"https://mimesniff.spec.whatwg.org/#image-type-pattern-matching-algorithm\">pattern matching algorithm</a>,\ndue to security implications, and instead recommend enforcing strict MIME types for newer formats.</p>\n   <p>New MIME types should have a specification and should be registered with the Internet Assigned Numbers Authority (IANA).</p>\n   \n   <p>If you are defining a new HTTP header,\nits syntax mustn’t go against <a href=\"https://tools.ietf.org/html/rfc7230#section-3.2\">the HTTP specification</a>.</p>\n   <p>If the new header must convey structured data,\nsuch as lists, dictionaries, or typed values\nlike decimals, strings, or booleans,\nthen the header should use the syntax\ndefined in <a href=\"https://tools.ietf.org/html/rfc8941\">Structured Field Values for HTTP</a>.\nThis avoids consumers of the header\nhaving to write and maintain specific micro-parsers,\nor even worse,\nsomething that would break those existing parsers.\nIf the new header requires data\nthat can’t be represented by Structured Field Values,\nthen either engage with IETF about\nextending the Structured Field Values syntax,\nor re-consider if an HTTP header is a right place\nto expose the data before inventing a new syntax. <a data-link-type=\"biblio\" href=\"#biblio-rfc8941\">[RFC8941]</a></p>\n   <h3 data-level=\"10.5\" id=\"extend-manifests\"><span>10.5. </span><span>Extend existing manifest files rather than creating new ones</span><a href=\"#extend-manifests\"></a></h3>\n   <p>If your feature requires a manifest,\ninvestigate whether you can extend an existing manifest schema.</p>\n   <p>New web features should be self-contained and self-describing and ideally should not require an additional manifest file.\nSome of the existing manifest files include</p>\n   <ul>\n    <li data-md=\"\">\n     <p><a href=\"https://www.w3.org/TR/appmanifest/\">Web App Manifest</a> which contains features related to web applications.</p>\n    </li><li data-md=\"\">\n     <p><a href=\"https://www.w3.org/TR/payment-method-manifest/\">Payment Method Manifest</a> which is used for payment methods in the context of the web payment API</p>\n    </li><li data-md=\"\">\n     <p><a href=\"https://www.w3.org/TR/pub-manifest/\">Publication Manifest</a> which is used by some web publications working group standards</p>\n    </li><li data-md=\"\">\n     <p><a href=\"https://wicg.github.io/origin-policy/\">Origin Policy</a> which is used to set security policies.</p>\n   </li></ul>\n   <p>We encourage people to extend existing manifest files.\nAlways try to get the changes into the original spec,\nor at least discuss the extension with the spec editors.\nHaving this discussion is more likely to result in a better design\nand lead to something that better integrates with the platform.</p>\n   <p>When designing new keys and values for a manifest, make sure they are needed (that is, they enable well-thought-out use-cases).\nAlso, please check if a similar key exists. If an existing key/value pair does more or less what is needed,\nwork with the existing spec to extend it to your use-case if possible.</p>\n   <div role=\"note\"><p>\n     There are certain times the original spec authors might not want\nto integrate changes to their manifest format immediately.\nThis may be due to process (like going to CR),\nor due to the addition having a different scope,\nlike extensions to Web App Manifest only affecting store or payment use-cases.\nIn that case, it is acceptable to monkey-patch\nas long as that is agreed with the original spec editors. \n    </p><p id=\"issue-05c58ddf\"><a href=\"#issue-05c58ddf\"></a> when we write up a principle on monkey patching,\nbe sure to take this nuance into account. <a href=\"https://github.com/w3ctag/design-principles/issues/184\">[Issue #184]</a></p>\n    <p>An example of something that was done as a monkey patch\nthat is scheduled to be integrated into the web app manifest in a future level (post-CR):</p>\n    <ul>\n     <li data-md=\"\">\n      <p>https://wicg.github.io/web-share-target/#extension-to-the-web-app-manifest</p>\n    </li></ul>\n   </div>\n   <p>However, if your feature requires a complex set of metadata specific to a functional domain,\nthe creation of a new manifest may be justified.</p>\n   <p>You may need to make a new manifest file if the domain of the manifest file is different from the existing manifest files.\nFor example, if the fetch timing is different, or if the complexity of the manifest warrants it.  Application metadata should be added\nto the Web App Manifest or be an extension of it.\nManifests designated to be used for specific applications or which require interoperability with non-browsers may need to take a different approach.\nPayment Method Manifest, Publication Manifest, and Origin Policy are examples of these cases.</p>\n   <p>For example, if you have a single piece of metadata, even if the fetch timing is different than an existing manifest,\nit is probably best to use an existing manifest (or ideally design the feature in such a way that a manifest is not required).\nHowever, if your feature requires a complex set of metadata specific to a functional domain, the creation of a new manifest may be justified.</p>\n   <p>Note that in all cases, the naming conventions should be harmonized (see <a href=\"#naming-is-hard\">§ 12 Naming principles</a>).</p>\n   <p role=\"note\"><span>Note:</span> By principle, existing manifests use lowercase, underscore-delimited names.\nThere have been times where it was useful to re-use dictionaries from a manifest in DOM APIs as well,\nwhich meant converting the names to camel-cased version.\nOne such example is the <a href=\"https://w3c.github.io/image-resource/\">image resource</a>.\nFor this reason, if a key can clearly be expressed as a single word, that is recommended.</p>\n   <h3 data-level=\"10.6\" id=\"debuggability\"><span>10.6. </span><span>Features should be developer-friendly</span><a href=\"#debuggability\"></a></h3>\n   <p>Any new feature should be developer-friendly.\nWhile it is hard to quantify friendliness, at least consider the following points.</p>\n   <p>While error text in exceptions should be generic,\ndeveloper-oriented error messages (such as those from a developer console) must be meaningful.\nWhen a developer encounters an error,\nthe message should be specific to that error case,\nand not overly generic.</p>\n   <p>Ideally, developer-oriented error messages should have enough information\nto guide the developer in pinpointing where the problem is.</p>\n   <p>Declarative features such as CSS,\nmay require extra work in the implementation for debuggability.\nDefining this in the specification not only makes the feature more developer-friendly,\nit also ensures a consistent development experience for the users.</p>\n   <p>A good example where debuggability was defined as\npart of the specification is <a href=\"https://www.w3.org/TR/web-animations-1/#use-cases\">Web Animations</a>.</p>\n   <h3 data-level=\"10.7\" id=\"crypto\"><span>10.7. </span><span>Use the best crypto, and expect it to evolve</span><a href=\"#crypto\"></a></h3>\n   <p>Use only cryptographic algorithms\nthat have been impartially reviewed by security experts,\nand make sure your choice of algorithm is proven, and up-to-date.\nNot only do they become obsolete or insecure,\ncryptographic protocols and algorithms also evolve quickly.</p>\n   <h2 data-level=\"11\" id=\"spec-writing\"><span>11. </span><span>Writing good specifications</span><a href=\"#spec-writing\"></a></h2>\n   <p>This document mostly covers API design for the Web,\nbut those who design APIs are hopefully also writing specifications\nfor the APIs that they design.</p>\n   <h3 data-level=\"11.1\" id=\"requirements-on-authors-and-implementers\"><span>11.1. </span><span>Identify the audience of each requirement in your specification</span><a href=\"#requirements-on-authors-and-implementers\"></a></h3>\n   <p>Document both how authors should write good code using your API,\nand how implementers of your API should handle poorly-written code.</p>\n   <p>The web, especially in comparison to other platforms,  is\ndesigned to be robust in accepting poorly-formed markup.\nThis means that web pages which use older versions of web standards\ncan still be viewed in newer user agents,\nand also that authors have a shallower learning curve.</p>\n   <p>To support this,\nweb specification writers need to describe how to interpret\npoorly-formed markup,\nas well as well-formed markup.</p>\n   <p>Implementers need to be able to understand the \"supported language\",\nwhich is more complex than the \"conforming language\"\nwhich authors should be aiming to use.</p>\n   <p><a href=\"#example-52a8e009\"></a> For example,\nthe <a href=\"https://html.spec.whatwg.org/multipage/tables.html#table-processing-model\">Processing model</a> for the <code>&lt;table&gt;</code> element\nexplains how to process the contents of a <code>&lt;table&gt;</code> element,\nincluding cases where the contents do not conform\nto the <a href=\"https://html.spec.whatwg.org/multipage/tables.html#the-table-element:concept-element-content-model\">Content model</a>. </p>\n   <h3 data-level=\"11.2\" id=\"avoid-ambiguity\"><span>11.2. </span><span>Specify completely and avoid ambiguity</span><a href=\"#avoid-ambiguity\"></a></h3>\n   <p>When specifying how a feature should work,\nmake sure that there is enough information\nso that authors don’t have to\nwrite different code to work with different implementations.</p>\n   <p>If a specification isn’t specific enough,\nimplementers might make different choices\nwhich force authors to write extra code to handle the differences.</p>\n   <p>Implementers shouldn’t need to check details of other implementations\nto avoid this situation.\nInstead, the specification should be complete and clear enough\non its own.</p>\n   <p role=\"note\"><span>Note:</span> This doesn’t mean that implementations can’t render things differently,\nor show different user interfaces for things like permission prompts.</p>\n   <p role=\"note\"><span>Note:</span> Implementers should file bugs against specifications\nwhich don’t give them clear enough information to write the implementation.</p>\n   <h4 data-level=\"11.2.1\" id=\"algorithms\"><span>11.2.1. </span><span>Defining algorithms in specifications</span><a href=\"#algorithms\"></a></h4>\n   <p>Write algorithms in a way that is clear and concise.</p>\n   <p>The most common way to write algorithms\nis to write an explicit sequence of steps.\nThis often looks like pseudo-code.</p>\n   <p><a href=\"#example-5e6a38a5\"></a> The <code><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/interactive-elements.html#dom-dialog-showmodal\" id=\"ref-for-dom-dialog-showmodal\">showModal()</a></code> method is described as a numbered sequence of steps\nwhich clearly explains when to throw exceptions\nand when to run algorithms defined in other parts of the HTML spec. </p>\n   <p>When writing a sequence of steps,\nimagine that it is a piece of functional code.</p>\n   <ul>\n    <li data-md=\"\">\n     <p>Clearly specify the inputs and outputs,\nname the algorithm and the variables it uses well,\nand explicitly note the points in the algorithm where the algorithm may\nreturn a result or error.</p>\n    </li><li data-md=\"\">\n     <p>As much as possible, avoid writing algorithms which have side effects.</p>\n   </li></ul>\n   <p>Summarize the purpose of the algorithm before going into detail,\nso that readers can decide whether to read the steps or skip over them.\nFor example take the following steps, which ensure that there is at most one pending X\ncallback per top-level browsing context.</p>\n   <p>A plain sequence of steps is not always the best way to write an algorithm.\nFor example, it might make sense to define\nor re-use a formal syntax or grammar\nto avoid repetition,\nor define specific states to be used in a state machine.\nWhen using extra constructs like these,\nthe earlier advice still applies.</p>\n   <p>As much as possible,\ndescribe algorithms as closely as possible to how they would be implemented.\nThis may make the spec harder to write,\nbut it means that implementations don’t need to figure out\nhow to translate what’s written in the specification\nto how it should actually be implemented.\nIn particular, that may mean that different implementations\nmake different decisions\nthat may lead to later features being feasible in one implementation\nbut not another.</p>\n   <p id=\"example-e379a9a7\"><a href=\"#example-e379a9a7\"></a> CSS selectors are read and understood from left to right,\nbut in practice are matched from right to left in implementations.\nThis allows the most specific term to be matched or not matched\nquickly, avoiding unnecessary work.\nThe CSS selector matching algorithm is written this way,\ninstead of a hypothetical algorithm which would more closely match\nhow CSS selectors are often read by CSS authors. </p>\n   <p>See also:</p>\n   <ul>\n    <li data-md=\"\">\n     <p><a href=\"https://infra.spec.whatwg.org/#algorithms\">some useful definitions\nand terminology</a> from <a data-link-type=\"biblio\" href=\"#biblio-infra\">[INFRA]</a></p>\n   </li></ul>\n   <h4 data-level=\"11.2.2\" id=\"use-flags-for-states\"><span>11.2.2. </span><span>Use explicit flags for state</span><a href=\"#use-flags-for-states\"></a></h4>\n   <p>Instead of describing state with words,\nuse explicit flags for state when writing algorithms.</p>\n   <p>Using explicit flags makes it clear\nwhether or not the state changes in different error conditions,\nand makes it clear when the state described by the flags is reset.</p>\n   <h2 data-level=\"12\" id=\"naming-is-hard\"><span>12. </span><span>Naming principles</span><a href=\"#naming-is-hard\"></a></h2>\n   <p>Names take meaning from:</p>\n   <ul>\n    <li data-md=\"\">\n     <p>signposting (the name itself)</p>\n    </li><li data-md=\"\">\n     <p>use (how people come to understand the name over time)</p>\n    </li><li data-md=\"\">\n     <p>context (the object on the left-hand side, for example)</p>\n   </li></ul>\n   <h3 data-level=\"12.1\" id=\"naming-common-words\"><span>12.1. </span><span>Use common words</span><a href=\"#naming-common-words\"></a></h3>\n   <p>API naming <em>must</em> be done in easily readable US English.\nKeep in mind that most web developers aren’t native English speakers.\nWhenever possible, names should be chosen that use common vocabulary\na majority of English speakers are likely to understand when first encountering the name.</p>\n   <div id=\"example-d0367763\">\n    <p>For example <code>setSize</code> is\na more English-readable name\nthan <code>cardinality</code>.</p>\n   </div>\n   <p>Value readability over brevity.\nKeep in mind, however, that sometimes\nthe shorter name is the clearer one.\nFor instance,\nit may be appropriate to use technical language or well-known terms of art\nin the specification where the API is defined.</p>\n   <div id=\"example-3cd78f17\">\n    <p>For example,\nthe Fetch API’s <code><a data-link-type=\"idl\" href=\"https://fetch.spec.whatwg.org/#body\" id=\"ref-for-body\">Body</a></code> mixin’s <code><a data-link-type=\"idl\" href=\"https://fetch.spec.whatwg.org/#dom-body-json\" id=\"ref-for-dom-body-json\">json()</a></code> method\nis named for the kind of object it returns.\nJSON is a well-known term of art\namong web developers likely to use the Fetch API.\nIt would harm comprehension\nto name this API less directly connected to its return type. <a data-link-type=\"biblio\" href=\"#biblio-fetch\">[FETCH]</a></p>\n   </div>\n   <h3 data-level=\"12.2\" id=\"naming-charset\"><span>12.2. </span><span>Use ASCII names</span><a href=\"#naming-charset\"></a></h3>\n   <p>Names must adhere to the local language restrictions, for example CSS ident rules etc.\nand <em>should</em> be in the <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#ascii-code-point\" id=\"ref-for-ascii-code-point\">ASCII range</a>.</p>\n   <h3 data-level=\"12.3\" id=\"naming-consultation\"><span>12.3. </span><span>Consultation</span><a href=\"#naming-consultation\"></a></h3>\n   <p>Please consult widely on names in your APIs.</p>\n   <p>You may find good names or inspiration in surprising places.</p>\n   <ul>\n    <li data-md=\"\">\n     <p>What are similar APIs named on other platforms,\nor in popular libraries in various programming languages?</p>\n    </li><li data-md=\"\">\n     <p>Ask end users and developers what they call\nthings that your API works with or manipulates.</p>\n    </li><li data-md=\"\">\n     <p>Look at other web platform specifications,\nand seek advice from others working in related areas of the platform.</p>\n    </li><li data-md=\"\">\n     <p>Also, consult if the names used are inclusive.</p>\n   </li></ul>\n   <p>Pay particular attention to advice you receive\nwith clearly-stated rationale based on underlying principles.</p>\n   <div id=\"example-1f37c106\">\n    <p>Tantek Çelik <a href=\"https://tantek.com/2011/238/b1/many-ways-slice-url-name-pieces\">extensively researched</a> how to name the various pieces of a URL.\nThe editors of the <a href=\"https://url.spec.whatwg.org/\">URL spec</a> have relied on this research\nwhen editing that document. <a data-link-type=\"biblio\" href=\"#biblio-url\">[URL]</a></p>\n   </div>\n   <h4 id=\"naming-web-consistency\"><span>Use Web consistent names</span><a href=\"#naming-web-consistency\"></a></h4>\n    When choosing a name for feature or API that has exposure in other technology stacks,\nthe preference should be towards the Web ecosystem naming convention rather than other\ncommunities. \n   <div id=\"example-2ef86e6f\">\n    <p>The NFC standard uses the term <code>media</code> to refer to what the Web calls <a href=\"https://mimesniff.spec.whatwg.org/#mime-type-representation\">MIME type</a>.\nIn such cases, the naming of features or API for the purposes of Web NFC must prefer\nnaming consistent with <code>MIME type</code>.</p>\n   </div>\n   <h4 id=\"naming-inclusive\"><span>Use Inclusive Language</span><a href=\"#naming-inclusive\"></a></h4>\n   <p>Use inclusive language whenever possible.</p>\n   <p>For example,\nyou should use blocklist and allowlist\ninstead of blacklist and whitelist,\nand source and replica\ninstead of master and slave.</p>\n   <p>If you need to refer to a generic persona,\nsuch as an author or user,\nuse the generic pronoun \"they\", \"their\", etc.\nFor example, \"A user may wish to adjust their preferences\".</p>\n   <h3 data-level=\"12.4\" id=\"naming-future-proofing\"><span>12.4. </span><span>Future-proofing</span><a href=\"#naming-future-proofing\"></a></h3>\n   <p>Naming should be generic and future-proof whenever possible.</p>\n   <p>The name should not be directly associated with a brand or specific revision of\nthe underlying technology whenever possible; technology becomes obsolete, and\nremoving APIs from the web is difficult.</p>\n   <div id=\"example-fd8a196a\">\n    <p>The Remote Playback API was not named\nafter one of the pre-existing, proprietary systems it was inspired by\n(such as Chromecast or AirPlay).\nInstead, general terms that describe what the API does were chosen. <a data-link-type=\"biblio\" href=\"#biblio-remote-playback\">[REMOTE-PLAYBACK]</a></p>\n   </div>\n   <div id=\"example-c1204afc\">\n    <p>The <code>keydown</code> and <code>keyup</code> <code><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/uievents/#keyboardevent\" id=\"ref-for-keyboardevent\">KeyboardEvent</a></code>s were not named\nfor the specific hardware bus that keyboards used at the time.\nInstead, generic names were chosen\nthat are as applicable to today’s Bluetooth and USB keyboards\nas they were to PS/2 and ADB keyboards back then. <a data-link-type=\"biblio\" href=\"#biblio-uievents\">[UIEVENTS]</a></p>\n   </div>\n   <h3 data-level=\"12.5\" id=\"naming-consistency\"><span>12.5. </span><span>Consistency</span><a href=\"#naming-consistency\"></a></h3>\n    Naming schemes should aim for consistency, to avoid confusion. \n   <p>Sets of related names should agree with each other in:</p>\n   <ul>\n    <li data-md=\"\">\n     <p>part of speech  - noun, verb, etc.</p>\n    </li><li data-md=\"\">\n     <p>negation, for example all of the names in a set should either describe what is allowed\nor they should all describe what is denied</p>\n   </li></ul>\n   <h4 id=\"naming-booleans\"><span>Boolean properties vs.\n  boolean-returning methods</span><a href=\"#naming-booleans\"></a></h4>\n   <p>Boolean properties, options, or API arguments which are asking a question about\ntheir argument <em>should not</em> be prefixed with <code>is</code>, while methods\nthat serve the same purpose, given that it has no side effects, <em>should</em> be\nprefixed with <code>is</code> to be consistent with the rest of the platform.</p>\n   <h4 id=\"casing-rules\"><span>Use casing rules consistent with existing APIs</span><a href=\"#casing-rules\"></a></h4>\n   <p>Although they haven’t always been uniformly followed, through the history of web platform API\ndesign, the following rules have emerged:</p>\n   <table>\n    <thead>\n     <tr>\n      <th>\n      </th><th>Casing rule\n      </th><th>Examples\n    </th></tr></thead><tbody>\n     <tr>\n      <th>Methods and properties<br>(Web IDL attributes, operations, and dictionary keys)\n      </th><td>Camel case\n      </td><td><code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#dom-document-createattribute\" id=\"ref-for-dom-document-createattribute\">createAttribute()</a></code><br> <code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#dom-document-compatmode\" id=\"ref-for-dom-document-compatmode\">compatMode</a></code>\n     </td></tr><tr>\n      <th>Classes and mixins<br>(Web IDL interfaces)\n      </th><td>Pascal case\n      </td><td><code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#namednodemap\" id=\"ref-for-namednodemap\">NamedNodeMap</a></code><br> <code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#nonelementparentnode\" id=\"ref-for-nonelementparentnode\">NonElementParentNode</a></code>\n     </td></tr><tr>\n      <th>Initialisms in APIs\n      </th><td>All caps, except when the first word in a method or property\n      </td><td><code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#htmlcollection\" id=\"ref-for-htmlcollection②\">HTMLCollection</a></code><br> <code><a data-link-type=\"idl\" href=\"https://w3c.github.io/DOM-Parsing/#dom-innerhtml-innerhtml\" id=\"ref-for-dom-innerhtml-innerhtml\">innerHTML</a></code><br> <code><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/obsolete.html#dom-document-bgcolor\" id=\"ref-for-dom-document-bgcolor\">bgColor</a></code>\n     </td></tr><tr>\n      <th>Repeated initialisms in APIs\n      </th><td>Follow the same rule\n      </td><td><code><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/grouping-content.html#htmlhrelement\" id=\"ref-for-htmlhrelement\">HTMLHRElement</a></code><br> <code><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/webrtc/#dom-rtcdtmfsender\" id=\"ref-for-dom-rtcdtmfsender\">RTCDTMFSender</a></code><br> \n     </td></tr><tr>\n      <th>The abbreviation of \"identity\"\n      </th><td><code>Id</code>, except when the first word in a method or property\n      </td><td><code><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#dom-nonelementparentnode-getelementbyid\" id=\"ref-for-dom-nonelementparentnode-getelementbyid\">getElementById()</a></code><br> <code><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/pointerevents3/#dom-pointerevent-pointerid\" id=\"ref-for-dom-pointerevent-pointerid\">pointerId</a></code><br> <code><a data-link-type=\"idl\" href=\"https://w3c.github.io/webappsec-credential-management/#dom-credential-id\" id=\"ref-for-dom-credential-id\">id</a></code>\n     </td></tr><tr>\n      <th>Enumeration values\n      </th><td>Lowercase, dash-delimited\n      </td><td><code><a data-link-type=\"idl\" href=\"https://w3c.github.io/webappsec-referrer-policy/#dom-referrerpolicy-no-referrer-when-downgrade\" id=\"ref-for-dom-referrerpolicy-no-referrer-when-downgrade\">\"no-referrer-when-downgrade\"</a></code>\n     </td></tr><tr>\n      <th>Events\n      </th><td>Lowercase, concatenated\n      </td><td><code><code><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/media.html#event-media-canplaythrough\" id=\"ref-for-event-media-canplaythrough\">canplaythrough</a></code><br> <code><code><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/indices.html#event-languagechange\" id=\"ref-for-event-languagechange\">languagechange</a></code></code></code>\n     </td></tr><tr>\n      <th>HTML elements and attributes\n      </th><td>Lowercase, concatenated\n      </td><td><code><a data-link-type=\"element\" href=\"https://html.spec.whatwg.org/multipage/grouping-content.html#the-figcaption-element\" id=\"ref-for-the-figcaption-element\">figcaption</a></code><br> <a href=\"https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#attr-fe-maxlength\">maxlength</a>\n     </td></tr><tr>\n      <th>JSON keys\n      </th><td>Lowercase, underscore-delimited\n      </td><td><a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/appmanifest/#dfn-short_name\" id=\"ref-for-dfn-short_name\">short_name</a>\n   </td></tr></tbody></table>\n   <div><p>\n     Note that in particular, when a HTML attribute is <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/common-dom-interfaces.html#reflect\" id=\"ref-for-reflect①\">reflected</a> as a property, the attribute\nand property’s casings won’t necessarily match. For example, the HTML attribute <code><a data-link-type=\"element-sub\" href=\"https://html.spec.whatwg.org/multipage/embedded-content.html#attr-img-ismap\" id=\"ref-for-attr-img-ismap\">ismap</a></code> on <code><a data-link-type=\"element\" href=\"https://html.spec.whatwg.org/multipage/embedded-content.html#the-img-element\" id=\"ref-for-the-img-element\">img</a></code> elements is <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/common-dom-interfaces.html#reflect\" id=\"ref-for-reflect②\">reflected</a> as the <code><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/embedded-content.html#dom-img-ismap\" id=\"ref-for-dom-img-ismap\">isMap</a></code> property on <code><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/embedded-content.html#htmlimageelement\" id=\"ref-for-htmlimageelement\">HTMLImageElement</a></code>. \n    </p><p>The rules for JSON keys are meant to apply to specific JSON file formats sent over HTTP\nor stored on disk, and don’t apply to the general notion of JavaScript object keys.</p>\n    <p>Repeated initialisms are particularly non-uniform throughout the platform. Infamous historical\nexamples that violate the above rules are <code><a data-link-type=\"idl\" href=\"https://xhr.spec.whatwg.org/#xmlhttprequest\" id=\"ref-for-xmlhttprequest①\">XMLHttpRequest</a></code> and <code><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/semantics.html#htmlhtmlelement\" id=\"ref-for-htmlhtmlelement\">HTMLHtmlElement</a></code>. Don’t follow their example; instead always capitalize your\ninitialisms, even if they are repeated.</p>\n   </div>\n   <h3 data-level=\"12.6\" id=\"naming-unsafe\"><span>12.6. </span><span>Warning about dangerous features</span><a href=\"#naming-unsafe\"></a></h3>\n   <p>Where possible, mark features that weaken\nthe guarantees provided to developers\nby making their names start with \"unsafe\" so that this is more noticeable.</p>\n   <p>For example, <a href=\"https://w3c.github.io/webappsec-csp/\">Content Security Policy (CSP)</a> provides protection against certain types of content injection vulnerabilities.\nCSP also provides features that weaken this guarantee,\nsuch as the <code>unsafe-inline</code> keyword,\nwhich reduces CSP’s own protections by allowing inline scripts.</p>\n   <h3 data-level=\"12.7\" id=\"writing-resources\"><span>12.7. </span><span>Other resources</span><a href=\"#writing-resources\"></a></h3>\n   <p>Some useful advice on how to write specifications is available elsewhere:</p>\n   <ul>\n    <li data-md=\"\">\n     <p><a href=\"https://ln.hixie.ch/?start=1140242962&amp;count=1\">Writing\nspecifications: Kinds of statements</a> (Ian Hickson, 2006)</p>\n    </li><li data-md=\"\">\n     <p><a href=\"https://www.w3.org/TR/qaframe-spec/\">QA Framework:\nSpecification Guidelines</a> (W3C QA Working Group, 2005)</p>\n    </li><li data-md=\"\">\n     <p><a href=\"https://w3c.github.io/privacy-considerations/\">Privacy Considerations for Web Protocols</a></p>\n    </li><li data-md=\"\">\n     <p><a href=\"https://www.w3.org/TR/security-privacy-questionnaire/\">Self-Review Questionnaire: Security and Privacy</a></p>\n    </li><li data-md=\"\">\n     <p><a href=\"https://w3c.github.io/apa/fast/\">Web Technology Accessibility Guidelines</a></p>\n    </li><li data-md=\"\">\n     <p><a href=\"https://w3c.github.io/bp-i18n-specdev/\">Internationalization Best Practices for Spec Developers</a></p>\n   </li></ul>\n   <h2 id=\"acks\"><span>Acknowledgments</span><a href=\"#acks\"></a></h2>\n   <p>This document consists of\nprinciples which have been collected\nby TAG members past and present\nduring TAG <a href=\"https://github.com/w3ctag/design-reviews/\">design reviews</a>.\nWe are indebted to everyone who has requested a design review from us.</p>\n   <p>The TAG would like to thank\nAdrian Hope-Bailie,\nAlan Stearns,\nAleksandar Totic,\nAlex Russell,\nAndreas Stöckel,\nAndrew Betts,\nAnne van Kesteren,\nBenjamin C. Wiley Sittler,\nBoris Zbarsky,\nBrian Kardell,\nCharles McCathieNevile,\nChris Wilson,\nDan Connolly,\nDaniel Ehrenberg,\nDaniel Murphy,\nDomenic Denicola,\nEiji Kitamura,\nEric Shepherd,\nEthan Resnick,\nfantasai,\nFrançois Daoust,\nHenri Sivonen,\nHE Shi-Jun,\nIan Hickson,\nIrene Knapp,\nJake Archibald,\nJeffrey Yasskin,\nJeremy Roman,\nJirka Kosek,\nKevin Marks,\nLachlan Hunt,\nLéonie Watson,\nL. Le Meur,\nLukasz Olejnik,\nMaciej Stachowiak,\nMarcos Cáceres,\nMark Nottingham,\nMartin Thomson,\nMatt Giuca,\nMatt Wolenetz,\nMichael[tm] Smith,\nMike West,\nNick Doty,\nNigel Megitt,\nNik Thierry,\nOjan Vafai,\nOlli Pettay,\nPete Snyder,\nPhilip Jägenstedt,\nPhilip Taylor,\nReilly Grant,\nRichard Ishida,\nRick Byers,\nRyan Sleevi,\nSergey Konstantinov,\nStefan Zager,\nStephen Stewart,\nSteven Faulkner,\nSurma,\nTab Atkins-Bittner,\nTantek Çelik,\nTobie Langel,\nTravis Leithead,\nand\nYoav Weiss\nfor their contributions to this &amp; the <a href=\"https://www.w3.org/TR/html-design-principles/\">HTML Design Principles</a> document which preceded it.</p>\n   <p>Special thanks to\nAnne van Kesteren\nand\nMaciej Stachowiak,\nwho edited the <a href=\"https://www.w3.org/TR/html-design-principles/\">HTML Design Principles</a> document.</p>\n   <p>If you contributed to this document\nbut your name is not listed above,\nplease let the editors know\nso they can correct this omission.</p>\n  </div></div>","textContent":"\n   1. Principles behind design of Web APIs\n   The Design Principles are directly informed by the ethical framework\nset out in the Ethical Web Principles [ETHICAL-WEB].\nThese principles provide concrete practical advice\nin response to the higher level ethical responsibilities\nthat come with developing the web platform.\n   1.1. Put user needs first (Priority of Constituencies)\n   If a trade-off needs to be made,\nalways put user needs above all.\n   Similarly, when beginning to design an API,\nbe sure to understand and document the user need that the API aims to address.\n   The internet is for end users:\nany change made to the web platform has the potential to affect vast numbers of people,\nand may have a profound impact on any person’s life. [RFC8890]\n   User needs come before the needs of web page authors,\nwhich come before than the needs of user agent implementors,\nwhich come before than the needs of specification writers,\nwhich come before theoretical purity.\n   Like all principles,\nthis isn’t absolute.\nEase of authoring affects how content reaches users.\nUser agents have to prioritize finite engineering resources,\nwhich affects how features reach authors.\nSpecification writers also have finite resources,\nand theoretical concerns reflect underlying needs of all of these groups.\n   See also:\n   \n    \n     The web should not cause harm to society\n    \n     The web must enhance individuals' control and power\n    \n     [RFC8890]\n   \n   1.2. It should be safe to visit a web page\n   When adding new features,\ndesign them to preserve the user expectation\nthat visiting a web page is generally safe.\n   The Web is named for its hyperlinked structure.\nIn order for the web to remain vibrant,\nusers need to be able to expect that merely visiting any given link\nwon’t have implications for the security of their computer,\nor for any essential aspects of their privacy.\n   For example, an API which allows any website to detect the use of assistive technologies may make users of these technologies feel unsafe visiting unknown web pages,\nsince any web page may detect this private information.\n   If users have a realistic expectation of safety,\nthey can make informed decisions\nbetween Web-based technologies and other technologies.\nFor example, users may choose to use a web-based food ordering page,\nrather than installing an app,\nsince installing a native app is riskier than visiting a web page.\n   To work towards making sure the reality of safety on the web matches users' expectations,\nwe can take complementary approaches when adding new features:\n   \n    \n     We can improve the user interfaces through which the Web is used\nto make it clearer what users of the Web should (and should not) expect;\n    \n     We can change the technical foundations of the Web\nso that they match user expectations of privacy;\n    \n     We can consider the cases where users would be better off\nif expectations were higher,\nand in those cases\ntry to change both technical foundations and expectations.\n   \n   A new feature which introduces safety risks may still improve user safety overall,\nif it allows users to perform a task more safely on a web page\nthan it would be for them to install a native app to do the same thing.\nHowever, this benefit needs to be weighed against the common goal\nof users having a reasonable expectation of safety on web pages.\n   See also:\n   \n    \n     Security and Privacy Self-Review\n   \n   1.3. Trusted user interface should be trustworthy\n   Consider whether new features impact trusted user interfaces.\n   Users depend on trusted user interfaces\nsuch as the address bar, security indicators and permission prompts,\nto understand who they are interacting with and how.\nThese trusted user interfaces must be able to be designed in a way\nthat enables users to trust and verify that the information they provide is genuine,\nand hasn’t been spoofed or hijacked by the website.\n   If a new feature allows untrusted user interfaces\nto resemble trusted user interfaces,\nthis makes it more difficult for users to understand what information is trustworthy.\n    For example, JavaScript alert() allows a page to show a modal dialog which looks like part of the browser.\nThis is often used to attempt to trick users into visiting scam websites.\nIf this feature was proposed today, it would probably not proceed. \n   1.4. Ask users for meaningful consent when appropriate\n   If a useful feature has the potential to cause harm to users,\nmake sure that the user can give *meaningful consent* for that feature to be used,\nand that they can refuse consent effectively.\n   In order to give meaningful consent, the user must:\n   \n    \n     understand what permission they may choose whether to grant the web page\n    \n     be able to choose to give or refuse that permission effectively.\n   \n   If a feature is powerful enough to require a user consent,\nbut it’s impossible to explain to a typical user what they are consenting to,\nthat’s a signal that you may need to reconsider the design of the feature.\n   If a permission prompt is shown,\nand the user doesn’t grant permission,\nthe Web page should not be able to do anything\nthat the user believes they have refused consent for.\n   By asking for consent,\nwe can inform the user of what capabilities the web page does or doesn’t have,\nreinforcing their confidence that the web is safe.\nHowever, the user benefit of a new feature must justify the additional burden on users\nto decide whether to grant permission for each feature\nwhenever it’s requested by a Web page.\n    For example,\nthe Geolocation API grants access to a user’s location.\nThis can help users in some contexts,\nlike a mapping application,\nbut may be dangerous to some users in other contexts -\nespecially if used without the user’s knowledge.\nSo that the user may decide whether their location may be used by a Web page,\na permission prompt should be shown to the user asking whether to grant location access.\nIf the user refuses permission,\nno location information is available to the Web page. \n   See also:\n   \n    \n     Security and privacy are essential\n   \n   1.5. Support the full range of devices and platforms (Media Independence)\n   As much as possible,\nensure that features on the web work across different input and output [devices,\nscreen sizes, interaction modes, platforms, and media]\n(https://www.w3.org/2001/tag/doc/ethical-web-principles/#multi).\n   One of the main values of the Web is that it’s extremely flexible:\na Web page may be viewed on virtually any consumer computing device\nat a very wide range of screen sizes,\nmay be used to generate printed media,\nand may be interacted with in a large number of different ways.\nNew features should match the existing flexibility of the web platform.\n   \n     This doesn’t imply that features which don’t work in every possible context should be excluded.\nFor example, hyperlinks can’t be visited when printed on paper,\nand the click event doesn’t translate perfectly to touch input devices\nwhere positioning and clicking the pointer occur in the same gesture (a \"tap\"). \n    These features still work across a wide variety of contexts,\nand can be adapted to devices that don’t support their original intent -\nfor example, a tap on a mobile device will fire a click event as a fallback.\n   \n   Features should also be designed so that the easiest way to use them\nmaintains flexibility.\n    The 'display: block',\n'display: flex',\nand 'display: grid' layout models in CSS\nall default to placing content within the available space and without overlap,\nso that it works across screen sizes,\nand allows users to choose their own font and font size without causing text to overflow. \n   2. API Design Across Languages\n   2.1. Prefer simple solutions\n   Look hard for simple solutions to the user needs you intend to address.\n   Simple solutions are generally better than complex solutions,\nalthough they may be harder to find.\nSimpler features are easier for user agents to implement and test,\nmore likely to be interoperable,\nand easier for authors to understand.\nIt is especially important to design your feature so that \nthe most common use cases are easy to accomplish.\n   Make sure that your user needs are well-defined.\nThis allows you to avoid scope creep,\nand make sure that your API does actually meet the needs of all users.\nOf course,\ncomplex or rare use cases are also worth solving,\nthough their solutions may be more complicated to use.\nAs Alan Kay said,\n\"simple things should be simple, complex things should be possible.\"\n   Do note however that while common cases are often simple,\ncommonality and complexity are not always correlated.\n    Sanitizing HTML to prevent XSS attacks is a complex process\nthat requires extensive security knowledge,\nhowever the Sanitizer API provides a shortcut for this common use case. \nIt also permits simpler types of filtering, but with more configuration. \n   See also:\n   \n    \n     [LEAST-POWER]\n   \n   2.2. Resolving tension between high level and low level APIs\n   High-level APIs allow user agents more ability to\nintervene in various ways on behalf of the user,\nsuch as to ensure accessibility, privacy, or usability.\n   \n    A font picker (high level API) was recommended by the TAG over a Font Enumeration API (low level API)\nas it addresses the bulk of use cases,\nwhile preserving user privacy,\nas it is free from the the fingerprinting concerns that accompany\na general Font Enumeration API.\nA native font picker also comes with accessibility built-in,\nand provides consistency for end users.\n   \n   Low-level APIs afford authors room for experimentation\nso that high level APIs can organically emerge\nfrom usage patterns over time.\nThey also provide an escape hatch when the higher-level API\nis not adequate for the use case at hand.\n   Lower level building blocks cannot always be exposed as Web APIs.\nA few possible reasons for this are\nto preserve the user’s security and privacy,\nor to avoid tying Web APIs to specific hardware implementations.\nHowever, high level APIs should be designed in terms of\nbuilding blocks over lower level APIs\nwhenever possible.\nThis may guide decisions on how high level the API needs to be.\n   A well-layered solution should ensure continuity\nof the ease-of-use vs power tradeoff curve\nand avoid sharp cliffs\nwhere a small amount of incremental use case complexity\nresults in a large increase of code complexity.\n   2.3. Name things thoughtfully\n   Name APIs with care.\nNaming APIs well makes it much easier for authors to use them correctly.\n   See the more detailed Naming principles section\nfor specific guidance on naming.\n   2.4. Consistency\n   It is good practice to consider precedent in the design of your API\nand to try to be consistent with it.\n   There is often a tension between API ergonomics and consistency,\nwhen existing precedent is of poor usability.\nIn some cases it makes sense to break consistency to improve usability,\nbut the improvement should be very significant to justify this.\n   Since the web platform has gradually evolved over time,\nthere are often multiple conflicting precedents\nwhich are mutually exclusive.\nYou can weigh which precdent to follow by taking into account\nprevalence (all else being equal, follow the more popular precedent),\nAPI ergonomics (all else being equal, follow the more usable precedent),\nand API age (all else being equal, follow the newer precedent).\n   There is often a tension between internal and external consistency. Internal consistency is consistency with the rest of the system,\nwhereas external consistency is consistency with the rest of the world.\nIn the web platform, that might materialize in three layers:\nconsistency within the technology the API belongs to (e.g. CSS),\nconsistency with the rest of the web platform,\nand in some cases external precedent,\nwhen the API relates to a particular specialized outside domain.\nIn those cases, it is useful to consider what the majority of users will be.\nSince for most APIs the target user is someone who is familiar with the\ntechnology they are defined in,\nerr on the side of favoring consistency with that.\n    One example is Lab colors:\nIt would be more consistent with the rest of CSS to use percentages for L (0%-100%),\nbut more consistent with the rest of Color Science to use a unitless number (0-100).\nThere was a lot of heated debate,\nwhich resolved in favor of percentages,\ni.e. consistency within CSS. \n   There is also a separate section on naming consistency.\n   2.5. New features should be detectable\n   Provide a way for authors to programmatically detect\nwhether your feature is available,\nso that web content may gracefully handle the feature not being present.\n   An existing feature may not be available on a page for a number of reasons.\nTwo of the more common reasons are\nbecause it hasn’t been implemented yet, or\nbecause it’s only available in secure contexts.\n   Authors shouldn’t need to write different code to handle each scenario.\nThat way, even if an author only knows or cares about one scenario,\nthe code will handle all of them.\n    When a feature is available but isn’t feasible to use\nbecause a required device isn’t present,\nit’s better to expose that the feature is available\nand have a separate way to detect that the device isn’t.\nThis allows authors to handle a device not being available differently\nfrom the feature not being available,\nfor example by suggesting the user connect or enable the device. \n   See § 9.2 Use care when exposing APIs for selecting or enumerating devices.\n   \n   Authors should always be able to detect a feature from JavaScript,\nand in some cases the feature should also be detectable\nin the language where it’s used\n(such as @supports in CSS).\n   In some cases, it may not be appropriate to allow feature detection.\nWhether the feature should be detectable or not\nshould be based on the user need for the feature:\nif there is a user need or design principle which would fail\nif feature detection were available for the feature,\nthen you should not support feature detection.\n   Also, if a feature is generally not exposed to developers,\nit is not appropriate to support feature detection.\nFor example, private browsing mode is a concept\nwhich is recognised in web specifications,\nbut not exposed to authors.\nFor private browsing mode to support the user’s needs,\nit must not be feature detected.\n   See also:\n   \n    \n     § 2.7 Don’t reveal that private browsing mode is engaged\n    \n     § 2.9 Don’t reveal that assistive technologies are being used\n    \n     § 2.6 Consider limiting new features to secure contexts\n   \n   2.6. Consider limiting new features to secure contexts\n   Always limit your feature to secure contexts\nif it would pose a risk to the user\nwithout the authentication, integrity, or confidentiality\nthat’s present only in secure contexts.\n    One example of a feature that should be limited to secure contexts\nis Geolocation,\nsince it would be a risk to users' privacy to transmit their location in an insecure way. \n   For other features, TAG members past and present\nhaven’t reached consensus on general advice.\nSome believe that all new features\n(other than features which are additions to existing features)\nshould be limited to secure contexts.\nThis would help encourage the use of HTTPS,\nhelping users be more secure in general.\n   Others believe that features should only be limited to secure contexts\nif they have a known security or privacy impact.\nThis lowers the barrier to entry for creating web pages\nthat take advantage of new features which don’t impact user security or privacy.\n   \n     Specification authors can limit most features defined in Web IDL,\nto secure contexts\nby using the\n[SecureContext] extended attribute\non interfaces, namespaces, or their members (such as methods and attributes). \n    However, for some types of API (e.g., dispatching an event),\nlimitation to secure contexts should just\nbe defined in normative prose in the specification.\nIf this is the case,\nconsider whether there might be scope for adding a similar mechanism\nto [SecureContext]\nto make this process easier for future API developers.\n   \n   \n     As described in § 2.5 New features should be detectable,\nyou should provide a way to programmatically detect whether a feature is available,\nincluding cases where the feature is unavailable because the context isn’t secure. \n    However, if, for some reason\nthere is no way for code to gracefully handle the feature not being present,\nlimiting the feature to secure contexts might cause problems\nfor code (such as libraries) that may be used in either secure or non-secure contexts.\n   \n   2.7. Don’t reveal that private browsing mode is engaged\n   Make sure that your feature doesn’t give authors a way to detect private browsing mode.\n   Some people use private browsing mode to protect their own personal safety.\nBecause of this, the fact that someone is using private browsing mode\nmay be sensitive information about them.\nThis information may harm people\nif it is revealed to a web site controlled by others who have power over them\n(such as employers, parents, partners,\nor state actors).\n   Given such dangers,\nwebsites should not be able to detect that private browsing mode is engaged.\n    User Agents which support IndexedDB should not disable it in private browsing mode,\nbecause that would reveal that private browsing mode is engaged \n   \n   See also:\n   \n    \n     Security and privacy are essential\n    \n     What data does this specification expose to an origin?\n    \n     § 2.8 Consider how your API should behave in private browsing mode\n   \n   2.8. Consider how your API should behave in private browsing mode\n   If necessary, specify how your API should behave differently\nin private browsing mode.\n   For example, if your API would reveal information\nthat would allow someone to correlate\na single user’s activity\nboth in and out of private browsing mode,\nconsider possible mitigations such as introducing noise,\nor using permission prompts to give the user extra information\nto help them meaningfully consent to this tracking (see § 1.4 Ask users for meaningful consent when appropriate).\n   Private browsing modes enable users to browse the web\nwithout leaving any trace of their private browsing on their device.\nTherefore, APIs which provide client-side storage\nshould not persist data stored\nwhile private browsing mode is engaged\nafter it’s disengaged.\nThis can and should be done\nwithout revealing any detectable API differences to the site.\n   \n     User Agents which support localStorage should not persist storage area changes\nmade while private browsing mode is engaged. \n    If the User Agent has two simultaneous sessions with a site,\none in private browsing mode and one not,\nstorage area changes made in the private browsing mode session\nshould not be revealed to the other browsing session,\nand vice versa.\n(The storage event should not be fired\nat the other session’s window object.)\n   \n   See also:\n   \n    \n     § 2.7 Don’t reveal that private browsing mode is engaged\n    \n     Does this specification introduce new state for an origin that persists across browsing sessions?\n    \n     Security and privacy self review: Private Browsing\n   \n   2.9. Don’t reveal that assistive technologies are being used\n   Make sure that your API doesn’t provide a way\nfor authors to detect that a user is using assistive technology\nwithout the user’s consent.\n   The web platform must be accessible to people with disabilities. If a site can detect that a user is using an assistive technology,\nthat site can deny or restrict the user’s access to the services it provides.\n   People who make use of assistive technologies\nare often vulnerable members of society;\ntheir use of assistive technologies is sensitive information about them.\nIf an API provides access to this information\nwithout the user’s consent,\nthis sensitive information may be revealed to others\n(including state actors)\nwho may wish them harm.\n   Sometimes people propose features which aim to improve the user experience\nfor users of assistive technology,\nbut which would reveal the user’s use of assistive technology as a side effect.\nWhile these are well intentioned,\nthey violate § 1.2 It should be safe to visit a web page,\nso alternative solutions must be found.\n   \n   See also:\n   \n    \n     Web Technology Accessibility Guidelines\n    \n     Security and privacy are essential\n    \n     What data does this specification expose to an origin?\n   \n   2.10. Support non-\"fully active\" documents\n   After a user navigated away from a document,\nthe document might be cached in a non-fully active state,\nand might be reused when the user navigates back to the entry holding the document, which makes navigation fast for users.\nIn browsers, this is known as the back/forward cache, or \"BFCache\" for short.\nIn the past, many APIs have missed specifying support for non-fully active documents,\nmaking them hard to support in various user agents to cache pages in the BFCache, effectively making the user experience of navigating back and forth less optimal.\n   To avoid this happening with your API,\nyou should specify support for non-fully active documents by following these guidelines:\n   Note: It is possible for a document to not become fully active for other reasons not related to\ncaching, such as when the iframe holding the document gets detached.\nSome advices below might not be relevant for those cases,\nsince the document will never return to fully active again.\n   2.10.1. Gate actions with fully active checks\n   When performing actions that might update the state of a document,\nbe aware that the document might not be fully active and is considered as \"non-existent\" from the user’s perspective.\nThis means they should not receive updates or perform actions.\n   Note: It is possible for a fully active document to be perceived as \"non-existent\" by users,\nsuch as when the document is displaying prerendered content.\nThese documents might behave differently than non-fully active documents,\nand the guidelines here might not be applicable to them,\nas it is written only for handling non-fully active documents.\n   In many cases,\nanything that happens while the document is not fully active should be treated as if it never happened.\nIf it makes more sense to \"update\" a document to ensure it does not hold  stale information\nafter it becomes fully active again, consider the § 2.10.2 Listen for changes to fully active status pattern below.\n    APIs that periodically send information updates,\n  such as Geolocation API’s watchPosition() should not send updates if the document is no longer fully active.\n  They also should not queue those updates to arrive later,\n  and only resume sending updates when the document becomes active again,\n  possibly sending one update with the latest information then. \n   2.10.2. Listen for changes to fully active status\n   When a document goes from fully active to non-fully active,\nit should be treated similarly to the way discarded documents are treated.\nThe document must not retain exclusive access to shared resources\nand must ensure that no new requests are issued\nand that connections that allow for new incoming requests are terminated.\nWhen a document goes from non-fully active to fully active again,\nit can restore connections if appropriate.\n   While web authors can manually do cleanup (e.g. release the resources, sever connections)\nfrom within the pagehide event and restore them from the pageshow event themselves,\ndoing this automatically from the API design allows the document to be kept alive after navigation by default,\nand is more likely to lead to well-functioning web applications.\n    APIs that create live connections can pause/close the connection and possibly resume/reopen it later.\n  It’s also possible to let the connection stay open to complete existing ongoing requests,\n  and later update the document with the result when it gets restored, if appropriate (e.g.\n  resource loads). \n    APIs that hold non-exclusive resources\n  may be able to release the resource when the document becomes not fully active,\n  and re-acquire them when it becomes fully active again\n  (Screen Wake Lock API is already doing the first part). \n   Note: this might not be appropriate for all types of resources,\ne.g. if an exclusive lock is held,\nwe cannot just release it and reacquire when fully active since another page could then take that lock.\nIf there is an API to signal to the page that this has happened,\nit may be acceptable but beware that if the only time this happens is with BFCache,\nthen it’s likely many pages are not prepared for it. If it is not possible to support BFCache,\nfollow the § 2.10.4 Discard non-fully active documents for situations that can’t be supported pattern described below.\n   Additionally, when a document becomes fully active again,\nit can be useful to update it with the current state of the world,\nif anything has changed while it is in the non-fully active state.\nHowever, care needs to be taken with events that occurred while in the BFCache.\nWhen not fully active, for some cases, all events should be dropped,\nin some the latest state should be delivered in a single event,\nin others it may be appropriate to queue events or deliver a combined event.\nThe correct approach is case by case and should consider privacy,\ncorrectness, performance and ergonomics.\n   Note: Making sure the latest state is sent to a document that becomes fully active again is especially important when retrofitting existing APIs.\nThis is because current users of these APIs expect to always have the latest information.\nDropping state updates can leave the document with stale information,\nwhich can lead to unexpected and hard-to-detect breakage of existing sites.\n    The gamepadconnected event\n  can be sent to a document that becomes fully active again\n  if a gamepad is connected while the document is not fully active.\n  If the gamepad was repeatedly connected and disconnected,\n  only the final connected event should be delivered.\n  (This is not specified yet, see issue) \n    For geolocation or other physical sensors,\n  no information about what happened while not fully active should be delivered.\n  The events should simply resume from when the document became fully active.\n  However, these APIs should check the state when the document becomes fully active again,\n  to determine if a status update should be sent (e.g. is the current location far away from the\n  location when the document becomes not fully active?), to ensure the document has the latest\n  information, as guaranteed by the API normally. \n    For network connections or streams,\n  the data received while not fully active should be delivered only\n  when the document becomes fully active again,\n  but whereas a stream might have created many events with a small amount of data each,\n  it could be delivered as smaller number of events with more data in each. \n   2.10.3. Omit non-fully active documents from APIs that span multiple documents\n    Non-fully active documents should not be observable,\nso APIs should treat them as if they no longer exist.\nThey should not be visible to the \"outside world\" through document-spanning APIs\n(e.g. clients.matchAll(), window.opener). \n   Note: This should be rare since cross-document-spanning APIs are themselves relatively rare.\n   \n   \n   2.10.4. Discard non-fully active documents for situations that can’t be supported\n    If supporting non-fully active documents is not possible for certain cases,\nexplicitly specify it by discarding the document| if the situation happens after the user navigated away,\nor setting the document’s salvageable bit to false if the situation happens before or during the navigation away from the document,\nto cause it to be automatically discarded after navigation. \n   Note: this should be rare and probably should only be used when retrofitting old APIs,\nas new APIs should always strive to work well with BFCache.\n   \n    Calling clients.claim() should not wait for non-fully active clients,\n  instead it should cause the non-fully active client documents to be discarded.\n  (This is currently not specified, see issue) \n   2.10.5. Be aware that per-document state/data might persist after navigation\n    As a document might be reused even after navigation,\nbe aware that tying something to a document’s lifetime\nalso means reusing it after navigations.\nIf this is not desirable,\nconsider listening to changes to the fully active state\nand doing cleanup as necessary (see above). \n    Sticky activation is determined by the \"last activation timestamp\",\n  which is tied to a document.\n  This means after a user triggers activation once on a document,\n  the document will have sticky activation forever,\n  even after the user navigated away and back to it again.\n  Whether this should actually be reset when full activity is lost or not\n  is still under discussion. \n   2.11. Prioritize usability over compatibility with third-party tools\n   Design new features with usability as the primary goal, and compatibility with third-party tooling as a secondary goal.\n   The web platform benefits from a wide ecosystem of tooling\nto facilitate easier and faster development.\nA lot of the time, the syntax of an upcoming web platform feature\nmay conflict with that of a third-party tool causing breakage.\nThis is especially common as third-party tools are often used to prototype\nnew web platform features.\n   In general, web platform features last a lot longer than most third-party tools,\nand thus giving them the optimal syntax and functionality should be of high priority.\n   In some cases, the conflict will introduce problems across a large number of\nweb sites, necessitating the feature’s syntax to be redesigned to avoid clashes.\n    Array.prototype.contains() had to be renamed to Array.prototype.includes() to avoid clashes with\n    the identically named but incompatible method from PrototypeJS,\n    a library that was in use in millions of websites. \n   However, these cases should be exceptions.\n   When deciding whether to break third party tools with new syntax, there are several factors to consider,\nsuch as severity of the breakage,\npopularity of the third party tool,\nand many more.\n   Possibly the most important factor is how severely would the usability of the web platform feature be compromised\nif its syntax was changed to avoid breaking the third party tool?\nIf several alternatives of similar usability are being considered,\nit is usually preferable to prioritize the ones that inconvenience third party tools the least.\n    When the CSS WG was designing CSS Grid Layout,\nsquare brackets were chosen instead of parentheses for naming grid tracks\nto avoid breaking Sass, a popular preprocessor. \n   However, if avoiding breaking the third party tool would lead to\na significant negative impact on of the feature’s usability,\nthat is rarely an acceptable tradeoff,\nunless it causes significant breakage of live websites.\n   Languages should also provide mechanisms for extensibility\nthat authors can use to extend the language\nwithout breaking future native functionality,\nto reduce such dilemmas in the future.\n   3. HTML\n   This section details design principles for features which are exposed via HTML.\n   3.1. Re-use attribute names (only) for similar functionality\n   If you are adding a feature that is specified through an HTML attribute,\ncheck if there is an existing attribute name on another element\nthat specifies similar functionality.\nRe-using an existing attribute name means authors can utilize existing knowledge,\nmaintains consistency across the language,\nand keeps its vocabulary small.\n    The same attribute name, multiple,\n\tis used on both select to allow selection of multiple values,\n\tas well as on input to allow entry of multiple values. \n    The open attribute was introduced on the details element,\n\tand then re-used by dialog. \n   If you do re-use an existing attribute,\ntry to keep its syntax as close as possible to the syntax of the existing attribute.\n    The for attribute was introduced on the label element,\n\tfor specifying which form element it should be associated with.\n\tIt was later re-used by output,\n\tfor specifying which elements contributed\n\tinput values to or otherwise affected the calculation.\n\tThe syntax of the latter is broader:\n\tit accepts a space-separated list of ids,\n\twhereas the former only accepts one id.\n\tHowever, they both still conform to the same syntax,\n\twhereas e.g. if one of them accepted a list of ids,\n\tand the other one a selector, that would be an antipattern. \n   The inverse also applies:\ndo not re-use an existing attribute name if\nthe functionality you are adding is not similar to that of the existing attribute.\n    The type attribute is used on the input and button elements\n    to further specialize the element type,\n    whereas on every other element (e.g. link, script, style)\n    it specifies MIME type.\n    This is an antipattern; one of these groups of attributes should have had a different name. \n   3.2.  Do not pause the HTML parser\n   Ensure that your design does not require HTML parser to pause to handle external resources.\n   As a page parses,\nthe browser discovers assets that the page needs,\nand figures out a priority in which they should be loaded in parallel.\nSuch parsing can be disrupted by a resource which blocks the discovery of subsequent resources.\nAt worst, it means the browser downloads items in series rather than parallel.\nAt best, it means the browser queues downloads based on speculative parsing,\nwhich may turn out to be incorrect.\n   Features that block the parser generally do so\nbecause they want to feed additional content into the parser\nbefore subsequent content.\nThis is the case of legacy <script src=\"…\"> elements,\nwhich can inject into the parser using document.write(…).\nDue to the performance issues above, new features must not do this.\n   3.3.  Avoid features that block rendering\n   Features that require resource loading or other operations before rendering the page,\noften result in blank page (or the previous page). The result is a poor user experience.\n   Consider adding such features only in cases when the overall user experience is improved.\nA canonical example of this is blocking rendering in order to download and process a stylesheet. \nThe alternative user experience is a flash of unstyled content, which is undesirable.\n   4. Cascading Style Sheets (CSS)\n   This section details design principles for features which are exposed via CSS.\n   4.1. Separate CSS properties based on what should cascade separately\n   Decide which values should be grouped together as CSS properties\nand which should be separate properties\nbased on what makes sense to set independently.\n   CSS cascading allows declarations from different rules or different style sheets\nto override one another.\nA set of values that should all be overridden together\nshould be grouped together in a single property so that they cascade together.\nLikewise, values that should be able to be overridden independently\nshould be separate properties.\n   \n    For example, the \"size\" and \"sink\" aspects of the initial-letter property\nbelong in a single property\nbecause they are part of a single initial letter effect\n(e.g., a drop cap, sunken cap, or raised cap). \n    However, the initial-letter-align property should be separate because it\nsets an alignment policy for all of these effects across the document\nwhich is a general stylistic choice\nand a function of the script (e.g., Latin, Cyrillic, Arabic) used in the document.\n   \n   4.2. Make appropriate choices for whether CSS properties are inherited\n   Decide whether a property should be inherited based on whether the effect of the property should be overridden or added to\nif set on an ancestor as well as a descendant.\n   If setting the property on a descendant element needs to override (rather than add to)\nthe effect of setting it on an ancestor,\nthen the property should probably be inherited.\n   If setting the property on a descendant element is a separate effect\nthat adds to setting it on an ancestor,\nthen the property should probably not be inherited.\n   A specification of an non-inherited property requiring that the handling of an element\nlook at the value of that property on its ancestors (which may also be slow)\nis a \"code smell\" that suggests that the property likely should have been inherited.\nA specification of an inherited property requiring that the handling of an element\nignore the value of a property if it’s the same as the value on the parent element\nis a \"code smell\" that suggests that the property likely should not have been inherited.\n    If a property has an effect on text,\nthen it’s almost always true that\na descendant element needs to override (rather than add to)\nthe effect of setting it on an ancestor,\nand the property should be inherited.\nThis is also needed to maintain the design principle that\ninserting an unstyled inline element around a piece of text\ndoesn’t change the appearance of that text. \n   \n     For example, the background-image property is not inherited. \n    If the background-image property had been inherited,\nthen the specification would have had to create a good bit of complexity\nto avoid a partially-transparent image\nbeing visibly repeated for each descendant element.\nThis complexity probably would have involved\nbehaving differently if the property had the same value on the parent element,\nwhich is the \"code smell\" mentioned above that suggests\nthat a property likely should not have been inherited.\n   \n   \n     Another example is the font-size property, which is inherited.\nIt sets the size of the font used for the text in the element,\nand continues to apply to any descendants that don’t\nhave a declaration setting font-size to a different value. \n    If the font-size property were not inherited,\nthen it would probably have to have an initial value\nthat requires walking up the ancestor chain to find the nearest ancestor\nthat doesn’t have that value.\nThis is the \"code smell\" mentioned above that suggests\nthat a property likely should have been inherited.\n   \n   4.3. Choose the computed value type based on how the property should inherit\n   Choose the computed value of a CSS property\nbased on how it will inherit,\nincluding how values where it depends on other properties should inherit.\n   Inheritance means that\nan element gets the same computed value for a property that its parent has.\nThis means that processing steps that happen before reaching the computed value\naffect the value that is inherited,\nand those that happen after (such as for the used value) do not.\n   \n   \n     For example, the line-height property may accept a <number> value,\nsuch as line-height: 1.4.\nThis value represents a multiple of the font-size,\nso if the font-size is 20px,\nthe actual value for the line height is 28px. \n    However, the computed value in this case is the <number> 1.4,\nnot the <length> 28px.\n(The used value is 28px.)\n    The line-height property can be inherited\ninto elements that have a different font-size,\nand any property on those elements which depends on line-height must take the relevant font-size into account,\nrather than the font-size for the element from which\nthe line-height value was inherited.\n<body style=\"font-size: 20px; line-height: 1.4\">\n\n  <p>This body text has a line height of 28px.</p>\n\n  <h2 style=\"font-size: 200%\">\n    This heading has a line-height of 56px,\n    not 28px, even though the line-height was declared on the body.\n    This means that the 40px font won’t overflow the line height.\n  </h2>\n</body>\n\n    These number values are generally the preferred values to use for line-height because they inherit better than length values.\n   \n   See also:\n   \n    \n     Computed Values Patterns\n   \n   4.4. Naming of CSS properties and values\n   The names of CSS properties are usually nouns,\nand the names of their values are usually adjectives (although sometimes nouns).\n   Words in properties and values are separated by hyphens.\nAbbreviations are generally avoided.\n   Use the root form of words when possible\nrather than a form with a grammatical prefix or suffix\n(for example, \"size\" rather than \"sizing\").\n   The list of values of a property should generally be chosen\nso that new values can be added.\nAvoid values like yes, no, true, false,\nor things with more complex names that are basically equivalent to them.\n   Avoid words like \"mode\" or \"state\" in the names of properties,\nsince properties are generally setting a mode or state.\n   See § 12 Naming principles for general (cross-language) advice on naming.\n   4.5. Content should be viewable and accessible by default\n   Design CSS properties or CSS layout systems (which are typically values of the display property),\nto preserve the content as viewable, accessible and usable by default.\n    For example, the default behavior of all layout systems in CSS will not lead to content being clipped,\ncontent overlapping other content, or content being unreachable by scrolling.\nThese things should only happen if CSS features are used that are more explicitly choosing\nsuch a behavior (for example, overflow: hidden or left: -40em). They should not happen by\ndefault as a result of something like display: flex or position: relative. \n   5. JavaScript Language\n   5.1. Web APIs are for JavaScript\n   When designing imperative APIs for the Web,\nuse JavaScript.\nIn particular,\nyou can freely rely upon language-specific semantics and conventions,\nwith no need to keep things generalized.\n   \n     For example,\nthe CustomElementRegistry.define() method takes a reference to\na Constructor Method. \n    This takes advantage of the relatively recent addition of classes to JavaScript,\nand the fact that method references are very easy to use in JavaScript.\n   \n    JavaScript is standardized under the name [ECMASCRIPT]. \n   [WEBIDL] defines a separate \"ECMAScript binding\" section,\nbut this doesn’t imply that Web IDL is intended\nto have bindings in other programming languages. \n   5.2. Preserve run-to-completion semantics\n   Don’t modify data accessed via JavaScript APIs\nwhile a JavaScript event loop is running.\n   A JavaScript Web API is generally a wrapper around\na feature implemented in a lower-level language,\nsuch as C++ or Rust.\nUnlike those languages,\nwhen using JavaScript developers can expect\nthat once a piece of code begins executing,\nit will continue executing until it has completed.\n   Because of that, JavaScript authors take for granted\nthat the data available to a function won’t change unexpectedly\nwhile the function is running.\n   So if a JavaScript Web API exposes some piece of data,\nsuch as an object property,\nthe user agent must not update that data\nwhile a JavaScript task is running.\nInstead, if the underlying data changes, queue a task to modify the exposed version of the data.\n    If a JavaScript task has accessed the navigator.onLine property,\nand browser’s online status changes,\nthe property won’t be updated until the next task runs. \n   5.3. Don’t expose garbage collection\n   Ensure your JavaScript Web APIs don’t provide a way\nfor an author to know the timing of garbage collection.\n   The timing of garbage collection is different in different user agents,\nand may change over time as user agents work on improving performance.\nIf an API exposes the timing of garbage collection,\nit can cause programs to behave differently\nin different contexts.\nThis means that authors need to write extra code to handle these differences.\nIt may also make it more difficult for user agents\nto implement different garbage collection strategies,\nif there is enough code which depends on timing working a particular way.\n   This means that you shouldn’t expose any API that acts as a weak reference,\ne.g. with a property that becomes null once garbage collection runs.\nObject and data lifetimes in JavaScript code should be predictable.\n   \n     getElementsByTagName returns an HTMLCollection object,\nwhich may be re-used if the method is called twice on the same Document object,\nwith the same tag name.\nIn practice,\nthis means that the same object will be returned\nif and only if it has not been garbage collected.\nThis means that the behaviour is different depending on\nthe timing of garbage collection. \n    If getElementsByTagName were designed today,\nthe advice to the designers would be\nto either reliably reuse the output,\nor to produce a new HTMLCollection each time it’s invoked.\n   \n   getElementsByTagName gives no sign that\nit may depend on the timing of garbage collection.\nIn contrast, APIs which are explicitly designed\nto depend on garbage collection,\nlike WeakRef or FinalizationRegistry,\nset accurate author expectations about\nthe interaction with garbage collection.\n   6. JavaScript API Surface Concerns\n   6.1. Attributes should behave like data properties\n   [WEBIDL] attributes should act like simple JavaScript object properties.\n   In reality, IDL attributes are implemented as accessor properties\nwith separate getter and setter methods.\nTo make them act like JavaScript object properties:\n   \n    \n     Getters must not have any observable side effects.\n    \n     Getters should not perform any complex operations.\n    \n     Ensure that obj.attribute === obj.attribute is always true.\nDon’t create a new value each time the getter is called.\n    \n     If possible, ensure that given obj.attribute = x, obj.attribute === x is true.\n(This may not be possible if some kind of conversion is necessary for x.)\n   \n   If you were thinking about using an attribute,\nbut it doesn’t behave this way,\nyou should probably use a method instead.\n    For example, offsetTop performs layout,\nwhich can be complex and time-consuming.\nIt would have been better if this had been a method like getBoundingClientRect(). \n   6.2. Consider whether objects should be live or static\n   If an API gives access to an object\nrepresenting some internal state,\ndecide whether that object should continue to be updated as the state changes.\n   An object which represents the current state at all times\nis a live object,\nwhile an object which represents the state at the time it was created\nis a static object.\n   Live objects\n   If an object allows the author to change the internal state,\nthat object should be live.\nFor example, DOM Nodes are live objects,\nto allow the author to make changes to the document\nwith an understanding of the current state.\n   Properties of live objects may be computed as they are accessed,\ninstead of when the object is created.\nThis makes live objects sometimes a better choice\nif the data needed is complex to compute,\nsince there is no need to compute all the data before the object is returned.\n   A live object may also use less memory,\nsince there is no need to copy data to a static version.\n   Static objects\n   If an object represents a list that might change,\nmost often the object should be static.\nThis is so that code iterating over the list\ndoesn’t need to handle the possibility of the list changing in the middle.\n   \n     getElementsByTagName returns a live object which represents a list,\nmeaning that authors need to take care when iterating over its items: \nlet list = document.getElementsByTagName(\"td\");\n\nfor (let i = 0; i < list.length; i++) {\n    let td = list[i];\n    let tr = document.createElement(\"tr\");\n    tr.innerHTML = td.outerHTML;\n\n    // This has the side-effect of removing td from the list,\n    // causing the iteration to become unpredictable.\n    td.parentNode.replaceChild(tr, td);\n}\n\n    The choice to have querySelectorAll() return static objects\nwas made after spec authors noticed that getElementsByTagName was causing problems.\n    URLSearchParams isn’t static,\neven though it represents a list,\nbecause it’s the way for authors to change the query string of a URL.\n   \n   Note: For maplike and setlike types,\nthis advice may not apply,\nsince these types were designed to behave well\nwhen they change while being iterated.\n   If it would not be possible to compute properties\nat the time they are accessed,\na static object avoids having to keep the object updated\nuntil it’s garbage collected,\neven if it isn’t being used.\n   If a static object represents some state which may change frequently,\nit should be returned from a method,\nrather than available as an attribute.\n   See also:\n   \n    \n     § 6.1 Attributes should behave like data properties\n   \n   6.3. Use attributes or methods appropriately\n   Sometimes it is unclear\nwhether to use an attribute or a method.\n   \n    \n     Attribute getters must not have any (observable) side effects.\nIf you have expected side effects, use a method.\n    \n     Attribute getters should not perform any blocking operations.\nIf a getter requires performing a blocking operation,\nit should be a method.\n    \n     If the underlying object has not changed,\nattribute getters should return\nthe same object each time it is called.\nThis means obj.attribute === obj.attribute must always hold.\nReturning a new value from an attribute getter\neach time is not allowed.\nIf this does not hold, the getter should be a method.\n   \n   Note: An antipattern example of a blocking operation is with getters like offsetTop performing layout.\n   For attributes, whenever possible,\npreserve values given to the setter\nfor return from the getter.\nThat is, given obj.attribute = x,\na subsequent obj.attribute === x should be true.\n(This will not always be the case,\ne.g., if a normalization or type conversion step is necessary,\nbut should be held as a goal for normal code paths.)\n   The object you want to return may be live or static.\nThis means:\n   \n    \n     If live, then return the same object each time,\nuntil a state change requires a different object to be returned.\nThis can be returned from either an attribute or a method.\n    \n     If static, then return a new object each time.\nIn which case, this should be be a method.\n   \n   6.4. Prefer dictionary arguments over primitive arguments\n   API methods should generally use dictionary arguments\ninstead of a series of optional primitive arguments.\n   This makes the code that calls the method much more readable.\nIt also makes the API more extensible in the future,\nparticularly if multiple arguments with the same type are needed.\n   \n     For example, \nnew Event(\"example\",\n          { bubbles: true,\n            cancelable: false})\n\n    is much more readable than\nnew Event(\"example\", true, false)\n\n    Also,\nwindow.scrollBy({ left: 50, top: 0 })\n\n    is more readable than\nwindow.scrollBy(50, 0)\n\n   \n   The dictionary itself should be an optional argument,\nso that if the author is happy with all of the default options,\nthey can avoid passing an extra argument.\n   \n     For example, \nelement.scrollIntoView(false, {});\n\n    is equivalent to\nelement.scrollIntoView(false);\n\n   \n   See also:\n   \n    \n     Hall of API Shame: Boolean Trap.\n    \n     APIs that have boolean arguments defaulting to true\n    \n     § 6.5 Make method arguments optional if possible\n    \n     § 6.6 Naming optional arguments\n   \n   6.5. Make method arguments optional if possible\n   If an argument for an API method has a reasonable default value,\nmake that argument optional and specify the default value.\n    addEventListener() takes an optional boolean useCapture argument.\nThie defaults to false, meaning that\nthe event should be dispatched to the listener in the bubbling phase by default. \n   Note: Exceptions have been made for legacy interoperability reasons\n(such as XMLHttpRequest),\nbut this should be considered a design mistake rather than recommended practice.\n   The API must be designed so that if an argument is left out,\nthe default value used is the same as\nconverting undefined to the type of the argument.\nFor example, if a boolean argument isn’t set,\nit must default to false.\n   When deciding between different list data types for your API,\nunless otherwise required, use the following list types:\n   \n    \n     Method list arguments should be of type sequence<T>\n    \n     Method return values should be of type sequence<T>\n    \n     Attributes should be of type ObservableArray<T>\n   \n   See also:\n   \n    \n     § 6.4 Prefer dictionary arguments over primitive arguments\n   \n   6.6. Naming optional arguments\n   Name optional arguments to make the default behavior obvious\nwithout being named negatively.\n   This applies whether they are provided in a dictionary or as single arguments.\n   \n     addEventListener() takes an options object\nwhich includes an option named once.\nThis indicates that the listener should not be invoked repeatedly. \n    This option could have been named repeat,\nbut that would require the default to be true.\nInstead of naming it noRepeat,\nthe API authors named it once,\nto reflect the default behaviour without using a negative.\n    Other examples:\n    \n     \n      passive rather than active, or\n     \n      isolate rather than connect, or\n     \n      private rather than public\n    \n   \n   See also:\n   \n    \n     § 12 Naming principles\n   \n   6.7. Classes should have constructors when possible\n   Make sure that any class that’s part of your API has a constructor,\nif appropriate.\n   By default, [WEBIDL] interfaces generate \"non-constructible\" classes:\ntrying to create instances of them using new X() will throw a TypeError.\nTo make them constructible,\nyou can add appropriate constructor operation to your interface,\nand defining the algorithm for creating new instances of your class.\n   This allows JavaScript developers\nto create instances of the class\nfor purposes such as testing, mocking,\nor interfacing with third-party libraries which accept instances of that class.\nIt also gives authors the ability to create a subclass of the class,\nwhich is otherwise prevented,\nbecause of the way JavaScript handles subclasses.\n   This won’t be appropriate in all cases.\nFor example:\n   \n    \n     Some objects represent access to privileged resources,\nso they need to be constructed by factory methods\nwhich can access those resources.\n    \n     Some objects have very carefully controlled lifecycles,\nso they need to be created and accessed through specific methods.\n    \n     Some objects represent an abstract base class,\nwhich shouldn’t be constructed,\nand which authors should not be able to define subclasses for.\n   \n    The Event class, and all its derived interfaces, are constructible.\nThis is useful when testing code which handles events:\nan author can construct an Event to pass to a method\nwhich handles that type of event. \n    The Window class isn’t constructible,\nbecause creating a new window is a privileged operation\nwith significant side effects.\nInstead, the window.open() method\nis used to create new windows. \n    The ImageBitmap class isn’t constructible,\nas it represents an immutable, ready-to-paint bitmap image,\nand the process of getting it ready to paint must be done asynchronously.\nInstead, the createImageBitmap() factory method is used to create it. \n    The DOMTokenList class is, sadly, not constructible.\nThis prevents the creation of custom elements that expose their token list attributes as DOMTokenLists. \n   \n     Several non-constructible classes,\nlike Navigator, History, or Crypto,\nare non-constructible because they are singletons\nrepresenting access to per-window information.\nIn these cases, something like the Web IDL namespace feature\nmight have been a better fit,\nbut these features were designed before namespaces,\nand go beyond what is currently possible with namespaces. \n    If your API requires this type of singleton,\nconsider using a namespace,\nand File an issue on Web IDL if there is some problem with using them.\n   \n   Factory methods can complement constructors, but generally should not be used instead of them.\nIt may still be valuable to include factory methods\nin addition to constructors, when they provide additional benefits.\nA common such case is when an API includes base classes\nand multiple specialized subclasses,\nwith a factory method\nfor creating the appropriate subclass based on the parameters passed.\nOften the factory method is a static method on the\nclosest common base subclass of the returned result.\n    The createElement method is an example of a\nfactory method that could not have been implemented as a constructor,\nas its result can be any of a number of subclasses of Element. \n    The initMouseEvent factory method only creates MouseEvent objects,\nwhich were originally not constructible,\neven though there was no technical reason against that.\nEventually it was deprecated, and the MouseEvent object was simply made constructible. \n   6.8. Use synchronous when appropriate\n   Where possible, prefer synchronous APIs when designing a new API.\nSynchronous APIs are simpler to use,\nand need less infrastructure set-up (such as making functions async).\n   An API should generally be synchronous if the following rules of thumb apply:\n   \n    \n     The API is not expected to ever be gated behind a permission prompt, or another dialog such as a device selector.\n    \n     The API implementation will not be blocked by a lock, filesystem or network access, for example, inter-process communication.\n    \n     The execution time is short and deterministic.\n   \n   6.9. Design asynchronous APIs using Promises\n   If an API method needs to be asynchronous, use Promises,\nnot callback functions.\n   Using Promises consistently across the web platform\nmeans that APIs are easier to use together,\nsuch as by chaining promises.\nPromise-using code also tends to be easier to understand\nthan code using callback functions.\n   An API might need to be asynchronous if:\n   \n    \n     the user agent needs to prompt the user for permission,\n    \n     some information might need to be read from disk,\nor requested from the network,\n    \n     the user agent may need to do a significant amount of work on another thread,\nor in another process, before returning the result.\n   \n   See also:\n   \n    \n     Writing Promise-Using Specifications\n   \n   6.10. Cancel asynchronous APIs/operations using AbortSignal\n   If an asynchronous method can be cancelled,\nallow authors to pass in an AbortSignal as part of an options dictionary.\n   \n    const controller = new AbortController();\nconst signal = controller.signal;\ngeolocation.read({ signal });\n\n   \n   Using AbortSignal consistently\nas the way to cancel an asychronous operation\nmeans that authors can write less complex code.\n   For example, there’s a pattern of using a single AbortSignal for several ongoing operations,\nand then using the corresponding AbortController to cancel all of the operations at once if necessary\n(such as if the user presses \"cancel\",\nor a single-page app navigation occurs.)\n   Even if cancellation can’t be guaranteed,\nyou can still use an AbortController,\nbecause a call to abort() on AbortController is a request, rather than a guarantee.\n   6.11. Use strings for constants and enums\n   If your API needs a constant, or a set of enumerated values,\nuse string values.\n   Strings are easier for developers to inspect,\nand in JavaScript engines there is no performance benefit\nfrom using integers instead of strings.\n   If you need to express a state which is a combination of properties,\nwhich might be expressed as a bitmask in another language,\nuse a dictionary object instead.\nThis object can be passed around as easily as a single bitmask value.\n   6.12. Properties vs. Methods\n   Sometimes it is unclear whether to use a property or a method.\n   \n    \n     Property getters must not have any (observable) side effects.\nIf you have expected side effects, use a method.\n    \n     Property getters are expected to represent the state of a given object.\nThis means a getter should be able to efficiently return a value using the existing state.\nIf a getter does not satisfy this, it should be a method.\n(A notable failure of the platform in this regard is getters like offsetTop performing layout; do not repeat this mistake.)\n    \n     If the underlying object has not changed, property getters should return the same object each time it is called.\nThis means obj.property === obj.property must always hold.\nReturning a new value from a property getter each time is not allowed.\nIf this does not hold, the getter should be a method.\n   \n   For properties, whenever possible, preserve values given to the setter for return from the getter. That is,\ngiven obj.property = x, a subsequent obj.property === x should be true. (This will not always be the case, e.g., if a normalization or type conversion step is necessary, but should be held as a goal for normal code paths.)\n   The object you want to return may be live or static. This means:\n   \n    \n     If live, then return the same object each time, until a state change requires a different object to be returned.\nThis can be returned from either an property or a method.\n    \n     If static, then return a new object each time.\nIn which case, this should be be a method.\n   \n   7. Event Design\n   7.1. Use promises for one time events\n   Follow the advice in the Writing\nPromise-Using Specifications guideline.\n   7.2. Events should fire before Promises resolve\n   If a Promise-based asynchronous algorithm dispatches events,\nit should dispatch them before the Promise resolves,\nrather than after.\n   This guarantees that once the Promise resolves,\nall effects of the algorithm have been applied.\nFor example, if an author changes some state\nin reaction to an event which the Promise dispatches,\nthey can be sure that all of the state is consistent if the Promise is resolved.\n   7.3. Don’t invent your own event listener-like infrastructure\n   When creating an API which allows authors to start and stop a process which generates notifications,\nuse the existing event infrastructure to allow listening for the notifications.\nCreate separate API controls to start/stop the underlying process.\n   \n     For example, the Web Bluetooth API provides a startNotifications() method\non the BluetoothRemoteGATTCharacteristic global object,\nwhich adds the object to the \"active notification context set\". \n    When the User Agent receives a notification from the Bluetooth device,\nit fires an event at the BluetoothRemoteGATTCharacteristic objects\nin the active notification context set.\n   \n   See:\n   \n    \n     § 7.5 Events are for notification\n    \n     § 7.8 How to decide between Events and Observers\n    \n     § 7.7 State and Event subclasses\n   \n   7.4. Always add event handler attributes\n   If your API adds a new event type,\nadd a corresponding onyourevent event handler IDL attribute to the interface of any EventHandler which may handle the new event.\n   it’s important to continue to define event handler IDL attributes because:\n   \n    \n     they preserve consistency in the platform\n    \n     they enable feature-detection for the supported events (see § 2.5 New features should be detectable)\n   \n    For consistency, if the event needs to be handled by HTML and SVG elements,\nadd the event handler IDL attributes on the GlobalEventHandlers interface mixin,\ninstead of directly on the relevant element interface(s).\nSimilarly, add event handler IDL attributes to WindowEventHandlers rather than Window. \n   7.5. Events are for notification\n   Events shouldn’t be used to trigger changes,\nonly to deliver a notification that a change has already finished happening.\n   \n     When a window is resized,\nan event named resize is fired at the Window object. \n    It’s not possible to stop the resize from happening by intercepting the event.\nNor is it possible to fire a constructed resize event\nto cause the window to change size.\nThe event can only notify the author that the resize has already happened.\n   \n   7.6. Guard against potential recursion\n   If your API includes a long-running or complicated algorithm,\nprevent calling into the algorithm if it’s already running.\n   If an API method causes a long-running algorithm to begin,\nyou should use events to notify user code of the progress of the algorithm.\nHowever, the user code which handles the event may call the same API method,\ncausing the complex algorithm to run recursively.\nThe same event may be fired again,\ncausing the same event handler to be fired, and so on.\n   To prevent this, make sure that any \"recursive\" call into the API method\nsimply returns immediately. This technique is \"guarding\" the algorithm.\n   \n     AbortSignal's add, remove and signal abort each begin with a check\nof the signal’s aborted flag.\nIf the flag is set, the rest of the algorithm doesn’t run. \n    In this case, a lot of the important complexity is\nin the algorithms run during the signal abort steps.\nThese steps iterate through a collection of algorithms\nwhich are managed by the add and remove methods.\n    For example, the ReadableStreamPipeTo definition adds an algorithm\ninto the AbortSignal's set of algorithms to be run\nwhen the signal abort steps are triggered,\nby calling abort() on the AbortController associated with the signal.\n    This algorithm is likely to resolve promises causing code to run,\nwhich may include attempting to call any of the methods on AbortSignal.\nSince signal abort involves iterating through the collection of algorithms,\nit should not be possible to modify that collection while it’s running.\n    And since signal abort would have triggered the code which caused\nthe recursive call back in to signal abort,\nit’s important to avoid running these steps again\nif the signal is already in the process of the signal abort steps,\nto avoid recursion.\n   \n   Note: A caution about early termination:\nif the algorithm being terminated\nwould go on to ensure some critical state consistency,\nbe sure to also make the relevant adjustments in state\nbefore early termination of the algorithm.\nNot doing so can lead to inconsistent state\nand end-user-visible bugs when implemented as-specified.\n   Note: Be cautious about throwing exceptions in early termination.\nKeep in mind the scenario in which developers will be invoking the algorithm,\nand whether they would reasonably expect to handle an exception\nin this [perhaps rare] case.\nFor example, will this be the only exception in the algorithm?\n   You won’t always be able to \"guard\" in this way.\nFor example, an algorithm may have too many entry-points to reliably check all of them.\nIf that’s the case,\nanother option is to defer calling the author code\nto a later task or microtask.\nThis avoids a stack of recursion,\nbut can’t avoid the risk of an endless loop of follow-up tasks.\n   Deferring an event is often specified as \"queue a task to fire an event...\".\n   You should always defer events\nif the algorithm that triggers the event could be running\non a different thread or process.\nIn this case, deferral ensures the events\ncan be processed on the correct task in the task queue.\n   Both the \"guarding\" and the \"deferring\" approach have trade-offs.\n   \"Guarding\" an algorithm guarantees:\n   \n    \n     at the time events are fired,\nthere is no chance that the state may have changed\nbetween the guarded algorithm ending and the event firing.\n    \n     events fired during the algorithm,\nsuch as events to notify user code of a state change made as part of the algorithm,\ncan be fired immediately,\nnotifying code of the change without needing to wait for the next task.\n    \n     user code running in the event handler can observe relevant state directly\non the instance object they were fired on,\nrather than needing to be given a copy of the relevant state with the event.\n   \n   If the events are deferred instead:\n   \n    \n     there is no guarantee that they will be first in the task queue once the algorithm completes.\n    \n     any other task may change the object’s state\nyou should include any state relevant to the event with the deferred event.\n     \n      \n       This usually involves a new subclass of Event,\nwith new attributes to hold the state.\n       For example, the ProgressEvent adds loaded, total, etc. attributes to hold the state.\n     \n    \n     if different parts of an algorithm need to coordinate,\nyou may need to define an explicit state machine (well-defined state transitions)\nto ensure that when a deferred event fires,\nthe behavior of inspecting or changing state is well-defined.\n     For example, in [payment-request],\nthe PaymentRequest's [[state]] internal slot\nexplicitly tracks the object’s state\nthrough its well-defined transitions.\n     \n      \n       These state transitions often use the guarding technique themselves,\n to ensure the state transitions happen appropriately.\n       For example, in [payment-request] note the guards used around the [[state]] internal slot,\n such as in the show() algorithm.\n     \n    \n     if the deferred event doesn’t need extra state,\nor a state machine,\nthis probably means that the event is just signalling the completion of the algorithm.\nIf this is true, the API should probably return a Promise instead of firint the event.\nSee § 7.1 Use promises for one time events.\n   \n   Note: events that expose the possibility of recursion as described in this section\nwere sometimes called \"synchronous events\".\nThis terminology is discouraged\nas it implies that it’s possible to dispatch an event asynchronously.\nAll events are dispatched synchronously.\nWhat is more often implied by \"asynchronous event\" is to defer firing an event.\n   7.7. State and Event subclasses\n   Where possible, use a plain Event with a specified type,\nand capture any state information in the target object.\n   It’s usually not necessary to create new subclasses of Event.\n   7.8. How to decide between Events and Observers\n   In general, use EventTarget and notification Events,\nrather than an Observer pattern,\nunless an EventTarget can’t work well for your feature.\n   Using an EventTarget ensures your feature benefits from\nimprovements to the shared base class,\nsuch as the addition of the once.\n   If using events causes problems,\nsuch as unavoidable recursion,\nconsider using an Observer pattern instead.\n   MutationObserver, Intersection Observer, Resize Observers,\nand IndexedDB Observers are all examples of an Observer pattern.\n   \n     MutationObserver replaced the deprecated DOM Mutation Events after developers noticed that DOM Mutation Events \n    \n     \n      fire too often\n     \n      don’t benefit from event propagation, which makes them too slow to be useful\n     \n      cause recursion which is too difficult to guard against.\n    \n    Mutation Observers:\n    \n     \n      can batch up mutations to be sent to observers\nafter mutations have finished being applied;\n     \n      don’t need to go through event capture and bubbling phases;\n     \n      provide a richer API for expressing what mutations have occurred.\n    \n    Note: Events can also batch up notifications,\nbut DOM Mutation Events were not designed to do this.\nEvents don’t always need to participate in event propagation,\nbut events on DOM Nodes usually do.\n   \n   The Observer pattern works like this:\n   \n    \n     Each instance of the Observer class\nis constructed with a callback,\nand optionally with some options to customize what should be observed.\n    \n     Instances begin observing specific targets,\nusing a method named observe(),\nwhich takes a reference to the target to be observed.\nThe options to customize what should be observed\nmay be provided here instead of to the constructor.\nThe callback provided in the constructor is invoked\nwhen something interesting happens to those targets.\n    \n     Callbacks receive change records as arguments.\nThese records contain the details\nabout the interesting thing that happened.\nMultiple records can be delivered at once.\n    \n     The author may stop observing by calling a method called unobserve() or disconnect() on the Observer instance.\n    \n     Optionally, a method may be provided to immediately return records\nfor all observed-but-not-yet-delivered occurrences.\n   \n   \n     IntersectionObserver may be used like this: \nfunction checkElementStillVisible(element, observer) {\n    delete element.visibleTimeout;\n\n    // Process any observations which may still be on the task queue\n    processChanges(observer.takeRecords());\n\n    if ('isVisible' in element) {\n        delete element.isVisible;\n        logAdImpressionToServer();\n\n        // Stop observing this element\n        observer.unobserve(element);\n    }\n}\n\nfunction processChanges(changes) {\n    changes.forEach(function(changeRecord) {\n        var element = changeRecord.target;\n        element.isVisible = isVisible(changeRecord.boundingClientRect,\n                                      changeRecord.intersectionRect);\n        if ('isVisible' in element) {\n            // Element became visible\n            element.visibleTimeout = setTimeout(() => {\n                checkElementStillVisible(element, observer);\n            }, 1000);\n        } else {\n            // Element became hidden\n            if ('visibleTimeout' in element) {\n                clearTimeout(element.visibleTimeout);\n                delete element.visibleTimeout;\n            }\n        }\n    });\n}\n\n// Create IntersectionObserver with callback and options\nvar observer = new IntersectionObserver(processChanges,\n                                        { threshold: [0.5] });\n\n// Begin observing \"ad\" element\nvar ad = document.querySelector('#ad');\nobserver.observe(ad);\n\n    (Example code adapted from the IntersectionObserver explainer.)\n   \n   To use the Observer pattern, you need to define:\n   \n    \n     the new Observer object type,\n    \n     an object type for observation options, and\n    \n     an object type for the records to be observed.\n   \n   The trade-off for this extra work is the following advantages:\n   \n    \n     Instances can be customized at observation time, or at creation time.\nThe constructor for an Observer,\nor its observe() method,\ncan take options allowing authors to customize what is observed for each callback.\nThis isn’t possible with addEventListener().\n    \n     It’s easy to stop listening on multiple callbacks using the disconnect() or unobserve() method on the Observer object.\n    \n     You have the option to provide a method like takeRecords(),\nwhich immediately fetches the relevant data,\ninstead of waiting for an event to fire.\n    \n     Because Observers are single-purpose, you don’t need to specify an event type.\n   \n   Observers and EventTargets have these things in common:\n   \n    \n     Both can be customized at creation time.\n    \n     Both can batch occurrences and deliver them at any time. EventTargets don’t need to be synchronous;\nthey can use microtask timing, idle timing, animation-frame timing, etc.\nYou don’t need an Observer to get special timing or batching.\n    \n     Neither EventTargets nor Observers need to participate in a DOM tree\n(bubbling/capture and cancellation).\nMost prominent EventTargets are Nodes in the DOM tree,\nbut many other events are standalone;\nfor example, IDBDatabase and XMLHttpRequestEventTarget.\nEven when using Nodes,\nyour events may be designed to be non-bubbling and non-cancelable.\n   \n   \n     Here is an example of using a hypothetical version of IntersectionObserver that’s an EventTarget subclass: \nconst io = new ETIntersectionObserver(element, { root, rootMargin, threshold });\n\nfunction listener(e) {\n    for (const change of e.changes) {\n        // ...\n    }\n}\n\nio.addEventListener(\"intersect\", listener);\nio.removeEventListener(\"intersect\", listener);\n\n    Compared to the Observer version:\n    \n     \n      it’s more difficult to observe multiple elements with the same options;\n     \n      there is no way to request data immediately;\n     \n      it’s more work to remove multiple event listeners for the same event;\n     \n      the author has to provide a redundant \"intersect\" event type.\n    \n    In common with the Observer version:\n    \n     \n      it can still do batching;\n     \n      it has the same timing (based on the JavaScript event queue);\n     \n      authors can still customize what to listen for; and\n     \n      events don’t go through capture or bubbling.\n    \n    These aspects can be achieved with either design.\n   \n   See also:\n   \n    \n     § 7.5 Events are for notification\n    \n     § 7.7 State and Event subclasses\n   \n   8. Web IDL, Types, and Units\n   8.1. Use numeric types appropriately\n   If an API you’re designing uses numbers,\nuse one of the following [WEBIDL] numeric types,\nunless there is a specific reason not to:\n   \n    unrestricted double\n    \n     Any JavaScript number, including infinities and NaN\n    double\n    \n     Any JavaScript number, excluding infinities and NaN\n    [EnforceRange] long long\n    \n     Any JavaScript number from -263 to 263,\n rounded to the nearest integer.\n If a number outside this range is given,\n the generated bindings will throw a TypeError.\n    [EnforceRange] unsigned long long\n    \n     Any JavaScript number from 0 to 264,\n rounded to the nearest integer.\n If a number outside this range is given,\n the generated bindings will throw a TypeError.\n   \n   JavaScript has only one numeric type, Number:\nIEEE 754 double-precision floating point, including ±0, ±Infinity, and NaN. [WEBIDL] numeric types represent\nrules for modifying any JavaScript number\nto belong to a subset with particular properties.\nThese rules are run when a number is passed to the interface defined in IDL,\nwhether a method or a property setter.\n   If you have extra rules which need to be applied to the number,\nyou can specify those in your algorithm.\n   \n     The WEBIDL rules for converting a JavaScript number to a number with fewer bits,\nsuch as an octet (8 bits, in the range [0, 255]),\ninvolves taking the modulo of the JavaScript number.\nFor example, to convert a JavaScript number value of 300\nto an octet,\nthe bindings will first compute 300 modulo 255,\nso the resulting number will be 45,\nwhich might be surprising. \n    Instead, you can use\n[EnforceRange] octet to throw a TypeError for values outside of the octet range,\nor [Clamp] octet to clamp values to the octet range (for example, converting 300 to 255).\n    This also works for the other shorter types, such as short or long.\n   \n   bigint should be used only when values greater than 253 or less than -253 are expected.\n   An API should not support both BigInt and Number simultaneously,\neither by supporting both types via polymorphism,\nor by adding separate, otherwise identical APIs which take BigInt and Number.\nThis risks losing precision through implicit conversions,\nwhich defeats the purpose of BigInt.\n   8.2. Represent strings appropriately\n   When designing a web platform feature which operates on strings,\nuse DOMString unless you have a specific reason not to.\n   Most string operations don’t need\nto interpret the code units inside of the string,\nso DOMString is the best choice.\nIn the specific cases explained below, it might be appropriate to use either USVString or ByteString instead. [INFRA] [WEBIDL]\n   USVString is the Web IDL type that represents scalar value strings.\nFor strings whose most common algorithms operate on scalar values (such as percent-encoding),\nor for operations which can’t handle surrogates in input\n(such as APIs that pass strings through to native platform APIs), USVString should be used.\n    Reflecting IDL attributes whose content attribute is defined to contain a URL (such as href)\nshould use USVString. [HTML] \n   ByteString should only be used for representing\ndata from protocols like HTTP\nwhich don’t distinguish between bytes and strings.\nIt isn’t a general-purpose string type.\nIf you need to represent a sequence of bytes,\nuse Uint8Array.\n   8.3. Use milliseconds for time measurement\n   If you are designing an API that accepts a time measurement,\nexpress the time measurement in milliseconds.\n   Even if seconds (or some other time unit) are more natural in the domain of an API,\nsticking with milliseconds ensures that APIs\nare interoperable with one another.\nThis means that authors don’t need to convert values used in one API\nto be used in another API,\nor keep track of which time unit is needed where.\n   This convention began with setTimeout() and the Date API,\nand has been used since then.\n   Note: high-resolution time is usually represented as fractional milliseconds\nusing a floating point value,\nnot as an integer value of a smaller time unit like nanoseconds.\n   8.4. Use the appropriate type to represent times and dates\n   When representing date-times on the platform, use the DOMHighResTimeStamp type. DOMHighResTimeStamp allows comparison of timestamps,\nregardless of the user’s time settings.\n   DOMHighResTimeStamp values represent\na time value in milliseconds.\nSee [HIGHRES-TIME] for more details.\n   Don’t use the JavaScript Date class for representing\nspecific date-time values. Date objects are mutable (may have their value changed),\nand there is no way to make them immutable.\n   \n   8.5. Use Error or DOMException for errors\n   Represent errors in web APIs as ECMAScript error objects (e.g., Error)\nor as DOMException.\nwhether they are exceptions, promise rejection values, or properties.\n   9. OS and Device Wrapper APIs\n   New APIs are now being developed in the web platform for interacting with devices.\nFor example, authors wish to be able to use the web to connect with their microphones and cameras, generic sensors (such as gyroscope and\naccelerometer), Bluetooth and USB-connected peripherals, automobiles, etc.\n   These can be functionality provided by the underlying operating system,\nor provided by a native third-party library\nto interact with a device.\nThese are an abstraction which \"wrap\" the native functionality\nwithout introducing significant complexity,\nwhile securing the API surface to the browser.\nSo, these are called wrapper APIs.\n   This section contains principles for consideration when designing APIs for devices.\n   9.1. Use care when exposing identifying information about devices\n   If you need to give web sites access to information about a device,\nuse the guidelines below to decide what information to expose.\n   Firstly, think carefully about whether it is really necessary\nto expose identifying information about the device at all.\nConsider whether your user needs could be satisfied\nby a less powerful API.\n   Exposing the presence of a device,\nadditional information about a device,\nor device identifiers,\neach increase the risk of harming the user’s privacy.\n   One risk is that as more specific information is shared,\nthe set of fingerprinting data available to sites gets larger.\nThere are also other potential risks to user privacy.\n    Privacy Threat Model is not ready for prime time.\n   If there is no way to design a less powerful API,\nuse these guidelines when exposing device information:\n   \n    Limit information in the id\n    \n     Include as little identifiable information as possible\nin device ids exposed to the web plaform.\nIdentifiable information includes\nbranding, make and model numbers, etc\nYou can usually use a random number\nor a unique id instead.\nMake sure that your ids aren’t guessable,\nand aren’t re-used.\n    Keep the user in control\n    \n     When the user chooses to clear browsing data,\nmake sure any stored device ids are cleared.\n    Hide sensitive ids behind a user permission\n    \n     If you can’t create a device id in an anonymous way,\nlimit access to it.\nMake sure the user can provide meaningful consent to a Web page accessing this information.\n    Tie ids to the same-origin model\n    \n     Create distinct unique ids for the same physical device\nfor each origin that has has access to it.\n    \n     If the same device is requested more than once\nby the same origin, return the same id for it\n(unless the user has cleared their browsing data).\nThis allows authors to avoid having\nseveral copies of the same device.\n    Persistable when necessary\n    \n     If a device id is time consuming to obtain,\nmake sure authors can store an id generated in one session\nfor use in a later session.\nYou can do this by making sure that\nthe procedure to generate the id\nconsistently produces the same id\nfor the same device,\nfor each origin.\n   \n   See also:\n   \n    \n     [LEAST-POWER]\n    \n     [FINGERPRINTING-GUIDANCE]\n    \n     [UNSANCTIONED-TRACKING]\n   \n   9.2. Use care when exposing APIs for selecting or enumerating devices\n   Look for ways to avoid enumerating devices.\nIf you can’t avoid it, expose the least information possible.\n   If an API exposes the the existence, capabilities, or identifiers of more than one device,\nall of the risks in § 9.1 Use care when exposing identifying information about devices are multiplied by the number of devices.\nFor the same reasons,\nconsider whether your user needs could be satisfied\nby a less powerful API. [LEAST-POWER]\n   If the purpose of the API\nis to enable the user to select a device from the set of available devices of a particular kind,\nyou may not need to expose a list to script at all.\nAn API which invokes a User-Agent-provided device picker could suffice.\nSuch an API:\n   \n    \n     keeps the user in control,\n    \n     doesn’t expose any device information without the user’s consent,\n    \n     doesn’t expose any fingerprinting data about the user’s environment by default, and\n    \n     only exposes information about one device at a time.\n   \n   When designing API which allows users to select a device,\nit may be necessary to also expose\nthe fact that there are devices are available to be picked.\nThis does expose one bit of fingerprinting data about the user’s environment\nto websites,\nso it isn’t quite as safe as an API which doesn’t have such a feature.\n   \n     The RemotePlayback interface\ndoesn’t expose a list of available remote playback devices.\nInstead, it allows the user to choose one device\nfrom a device picker provided by the User Agent. \n    It does enable websites to detect whether or not\nany remote playback device is available,\nso the website can show or hide a control\nthe user can use to show the device picker.\n    The trade-off is that by allowing websites\nthis extra bit of information,\nthe API lets authors make their user interface less confusing.\nThey can choose to show a button to trigger the picker\nonly if at least one device is available.\n   \n   If you must expose a list of devices,\ntry to expose the smallest subset that satisfies your user needs.\n   For example, an API which allows the website\nto request a filtered or constrained list of devices\nis one option to keep the number of devices smaller.\nHowever, if authors are allowed to make multiple requests with different constraints,\nthey may still be able to access the full list.\n   Finally, if you must expose the full list of devices of a particular kind,\nplease rigorously define the order in which devices will be listed.\nThis can reduce interoperability issues,\nand helps to mitigate fingerprinting.\n(Sort order could reveal other information:\nsee Fingerprinting Guidance § 5.2 Standardization for more.)\n   Note: While APIs should not\nexpose a full list of devices in an implementation-defined order,\nthey may need to for web compatibility reasons.\n   9.3. Design based on user needs, not the underlying API or hardware\n   Design new native capabilities being brought to the web based on user needs.\n   Avoid directly translating an existing native API to the web.\n   Instead, consider the functionality available from the native API,\nand the user needs it addresses,\nand design an API that meets those user needs,\neven if the implementation depends on the existing native API.\n   Be particularly careful about exposing\nthe exact lifecycle and data structures of the underlying native APIs.\nWhen possible, consider flexibility for new hardware.\n   This means newly proposed APIs should be designed\nwith careful consideration on how they are intended to be used\nrather than how the underlying hardware, device, or native API\navailable today.\n   9.4. Be proactive about safety\n   When bringing native capabilities to the web platform,\ntry to design defensively.\n   Bringing a native capability to the web platform\ncomes with many implications.\nUsers may not want websites to know that their computers\nhave specific capabilities. Therefore, access to anything\noutside of the logical origin boundary should be permission gated.\n   For example, if a device can store state,\nand that state is readable at the same time by multiple origins,\na set of APIs that lets you read and write that state\nis effectively a side-channel that undermines the origin model of the web.\n   For these reasons, even if the device allows non-exclusive access,\nyou may want to consider enforcing exclusive access per-origin,\nor even restricting it further to only the current active tab.\n   Additionally, APIs should be designed so that the applications\ncan gracefully handle physical disruption, such as a device being unplugged.\n   9.5. Native APIs don’t typically translate well to the web\n   When adapting native operating system APIs for the web,\nmake sure the new web APIs are designed with web platform principles in mind.\n   \n    Make sure the web API can be implemented on more than one platform\n    \n     When designing a wrapper API,\nconsider how different platforms provide its functionality.\n     Ideally, all implementations should work exactly the same,\nbut in some cases you may have a reason to expose options\nwhich only work on some platforms.\nIf this happens, be sure to explain\nhow authors should write code which works on all platforms.\nSee § 2.5 New features should be detectable.\n    Underlying protocols should be open\n    \n     APIs which require exchange with external hardware or services\nshould not depend on closed or proprietary protocols.\nDepending on non-open protocols undermines the open nature of the web.\n    Design APIs to handle the user being off-line\n    \n     If an API depends on some service which is provided by a remote server,\nmake sure that the API functions well when the user can’t access the remote server\nfor any reason.\n    Avoid additional fingerprinting surfaces\n    \n     Wrapper APIs can unintentionally expose the user to\na wider fingerprinting surface.\nPlease read the TAG’s finding on unsanctioned tracking for additional details.\n   \n   10. Other API Design Considerations\n   10.1. Polyfills\n   Polyfills can be hugely beneficial\nin helping to roll out new features to the web platform.\nThe Technical Architecture Group finding on Polyfills and the Evolution of the Web offers guidance that should be considered in the development of new features, notably:\n   \n    \n     Being \"polyfillable\" isn’t essential but is beneficial\n    \n     § 2.5 New features should be detectable\n    \n     Polyfill development should be encouraged\n   \n   10.2. Where possible APIs should be made available in DedicatedWorker\n   When exposing a feature, please consider whether it makes sense to expose the feature\nto DedicatedWorker as well.\n   Many features could work out of the box on a DedicatedWorker and not enabling the feature\nthere could limit the ability for users to run their code in a non blocking manner.\n   Certain challenges can exist when trying to enable a feature on DedicatedWorker,\nespecially if the feature requires user input by asking for permission,\nor showing a picker or selector.\nEven though this might discourage spec authors to support workers,\nwe still recommend designing the feature with DedicatedWorker support in mind,\nin order to not add assumptions that will later make it unnecessarily hard to expose\nthese APIs to DedicatedWorker.\n   10.3. New Data Formats\n   Always define a corresponding MIME type and extend existing APIs to support this type\nfor any new data format.\n   There are cases when a new capability on the web involves adding a new data format.\nThis can be an image, video, audio, or any other type of data that a browser is expected\nto ingest. New formats should have a standardized MIME type, which is strictly validated.\n   While legacy media formats do not always have strict enforcement for MIME types (and\nsometimes rely on peeking at headers, to workaround this), this is mostly for legacy\ncompatibility reasons and should not be expected or implemented for new formats.\n   It is expected that spec authors also integrate the new format to existing APIs, so that\nthey are safelisted in both ingress (e.g. decoding from a ReadableStream) and egress\n(e.g. encoding to a WriteableStream) points from a browser’s perspective.\n   For example. if you are to add an image format to the web platform, first add a new MIME\ntype for the format. After this, you would naturally add a decoder (and presumably an\nencoder) for said image format to support decoding in HTMLImageElements. On top of this,\nyou are also expected to add support to egress points such as HTMLCanvasElement.toBlob()\nand HTMLCanvasElement.toDataURL().\n   For legacy reasons browsers support MIME type sniffing, but we do not recommend extending\nthe pattern matching algorithm,\ndue to security implications, and instead recommend enforcing strict MIME types for newer formats.\n   New MIME types should have a specification and should be registered with the Internet Assigned Numbers Authority (IANA).\n   \n   If you are defining a new HTTP header,\nits syntax mustn’t go against the HTTP specification.\n   If the new header must convey structured data,\nsuch as lists, dictionaries, or typed values\nlike decimals, strings, or booleans,\nthen the header should use the syntax\ndefined in Structured Field Values for HTTP.\nThis avoids consumers of the header\nhaving to write and maintain specific micro-parsers,\nor even worse,\nsomething that would break those existing parsers.\nIf the new header requires data\nthat can’t be represented by Structured Field Values,\nthen either engage with IETF about\nextending the Structured Field Values syntax,\nor re-consider if an HTTP header is a right place\nto expose the data before inventing a new syntax. [RFC8941]\n   10.5. Extend existing manifest files rather than creating new ones\n   If your feature requires a manifest,\ninvestigate whether you can extend an existing manifest schema.\n   New web features should be self-contained and self-describing and ideally should not require an additional manifest file.\nSome of the existing manifest files include\n   \n    \n     Web App Manifest which contains features related to web applications.\n    \n     Payment Method Manifest which is used for payment methods in the context of the web payment API\n    \n     Publication Manifest which is used by some web publications working group standards\n    \n     Origin Policy which is used to set security policies.\n   \n   We encourage people to extend existing manifest files.\nAlways try to get the changes into the original spec,\nor at least discuss the extension with the spec editors.\nHaving this discussion is more likely to result in a better design\nand lead to something that better integrates with the platform.\n   When designing new keys and values for a manifest, make sure they are needed (that is, they enable well-thought-out use-cases).\nAlso, please check if a similar key exists. If an existing key/value pair does more or less what is needed,\nwork with the existing spec to extend it to your use-case if possible.\n   \n     There are certain times the original spec authors might not want\nto integrate changes to their manifest format immediately.\nThis may be due to process (like going to CR),\nor due to the addition having a different scope,\nlike extensions to Web App Manifest only affecting store or payment use-cases.\nIn that case, it is acceptable to monkey-patch\nas long as that is agreed with the original spec editors. \n     when we write up a principle on monkey patching,\nbe sure to take this nuance into account. [Issue #184]\n    An example of something that was done as a monkey patch\nthat is scheduled to be integrated into the web app manifest in a future level (post-CR):\n    \n     \n      https://wicg.github.io/web-share-target/#extension-to-the-web-app-manifest\n    \n   \n   However, if your feature requires a complex set of metadata specific to a functional domain,\nthe creation of a new manifest may be justified.\n   You may need to make a new manifest file if the domain of the manifest file is different from the existing manifest files.\nFor example, if the fetch timing is different, or if the complexity of the manifest warrants it.  Application metadata should be added\nto the Web App Manifest or be an extension of it.\nManifests designated to be used for specific applications or which require interoperability with non-browsers may need to take a different approach.\nPayment Method Manifest, Publication Manifest, and Origin Policy are examples of these cases.\n   For example, if you have a single piece of metadata, even if the fetch timing is different than an existing manifest,\nit is probably best to use an existing manifest (or ideally design the feature in such a way that a manifest is not required).\nHowever, if your feature requires a complex set of metadata specific to a functional domain, the creation of a new manifest may be justified.\n   Note that in all cases, the naming conventions should be harmonized (see § 12 Naming principles).\n   Note: By principle, existing manifests use lowercase, underscore-delimited names.\nThere have been times where it was useful to re-use dictionaries from a manifest in DOM APIs as well,\nwhich meant converting the names to camel-cased version.\nOne such example is the image resource.\nFor this reason, if a key can clearly be expressed as a single word, that is recommended.\n   10.6. Features should be developer-friendly\n   Any new feature should be developer-friendly.\nWhile it is hard to quantify friendliness, at least consider the following points.\n   While error text in exceptions should be generic,\ndeveloper-oriented error messages (such as those from a developer console) must be meaningful.\nWhen a developer encounters an error,\nthe message should be specific to that error case,\nand not overly generic.\n   Ideally, developer-oriented error messages should have enough information\nto guide the developer in pinpointing where the problem is.\n   Declarative features such as CSS,\nmay require extra work in the implementation for debuggability.\nDefining this in the specification not only makes the feature more developer-friendly,\nit also ensures a consistent development experience for the users.\n   A good example where debuggability was defined as\npart of the specification is Web Animations.\n   10.7. Use the best crypto, and expect it to evolve\n   Use only cryptographic algorithms\nthat have been impartially reviewed by security experts,\nand make sure your choice of algorithm is proven, and up-to-date.\nNot only do they become obsolete or insecure,\ncryptographic protocols and algorithms also evolve quickly.\n   11. Writing good specifications\n   This document mostly covers API design for the Web,\nbut those who design APIs are hopefully also writing specifications\nfor the APIs that they design.\n   11.1. Identify the audience of each requirement in your specification\n   Document both how authors should write good code using your API,\nand how implementers of your API should handle poorly-written code.\n   The web, especially in comparison to other platforms,  is\ndesigned to be robust in accepting poorly-formed markup.\nThis means that web pages which use older versions of web standards\ncan still be viewed in newer user agents,\nand also that authors have a shallower learning curve.\n   To support this,\nweb specification writers need to describe how to interpret\npoorly-formed markup,\nas well as well-formed markup.\n   Implementers need to be able to understand the \"supported language\",\nwhich is more complex than the \"conforming language\"\nwhich authors should be aiming to use.\n    For example,\nthe Processing model for the <table> element\nexplains how to process the contents of a <table> element,\nincluding cases where the contents do not conform\nto the Content model. \n   11.2. Specify completely and avoid ambiguity\n   When specifying how a feature should work,\nmake sure that there is enough information\nso that authors don’t have to\nwrite different code to work with different implementations.\n   If a specification isn’t specific enough,\nimplementers might make different choices\nwhich force authors to write extra code to handle the differences.\n   Implementers shouldn’t need to check details of other implementations\nto avoid this situation.\nInstead, the specification should be complete and clear enough\non its own.\n   Note: This doesn’t mean that implementations can’t render things differently,\nor show different user interfaces for things like permission prompts.\n   Note: Implementers should file bugs against specifications\nwhich don’t give them clear enough information to write the implementation.\n   11.2.1. Defining algorithms in specifications\n   Write algorithms in a way that is clear and concise.\n   The most common way to write algorithms\nis to write an explicit sequence of steps.\nThis often looks like pseudo-code.\n    The showModal() method is described as a numbered sequence of steps\nwhich clearly explains when to throw exceptions\nand when to run algorithms defined in other parts of the HTML spec. \n   When writing a sequence of steps,\nimagine that it is a piece of functional code.\n   \n    \n     Clearly specify the inputs and outputs,\nname the algorithm and the variables it uses well,\nand explicitly note the points in the algorithm where the algorithm may\nreturn a result or error.\n    \n     As much as possible, avoid writing algorithms which have side effects.\n   \n   Summarize the purpose of the algorithm before going into detail,\nso that readers can decide whether to read the steps or skip over them.\nFor example take the following steps, which ensure that there is at most one pending X\ncallback per top-level browsing context.\n   A plain sequence of steps is not always the best way to write an algorithm.\nFor example, it might make sense to define\nor re-use a formal syntax or grammar\nto avoid repetition,\nor define specific states to be used in a state machine.\nWhen using extra constructs like these,\nthe earlier advice still applies.\n   As much as possible,\ndescribe algorithms as closely as possible to how they would be implemented.\nThis may make the spec harder to write,\nbut it means that implementations don’t need to figure out\nhow to translate what’s written in the specification\nto how it should actually be implemented.\nIn particular, that may mean that different implementations\nmake different decisions\nthat may lead to later features being feasible in one implementation\nbut not another.\n    CSS selectors are read and understood from left to right,\nbut in practice are matched from right to left in implementations.\nThis allows the most specific term to be matched or not matched\nquickly, avoiding unnecessary work.\nThe CSS selector matching algorithm is written this way,\ninstead of a hypothetical algorithm which would more closely match\nhow CSS selectors are often read by CSS authors. \n   See also:\n   \n    \n     some useful definitions\nand terminology from [INFRA]\n   \n   11.2.2. Use explicit flags for state\n   Instead of describing state with words,\nuse explicit flags for state when writing algorithms.\n   Using explicit flags makes it clear\nwhether or not the state changes in different error conditions,\nand makes it clear when the state described by the flags is reset.\n   12. Naming principles\n   Names take meaning from:\n   \n    \n     signposting (the name itself)\n    \n     use (how people come to understand the name over time)\n    \n     context (the object on the left-hand side, for example)\n   \n   12.1. Use common words\n   API naming must be done in easily readable US English.\nKeep in mind that most web developers aren’t native English speakers.\nWhenever possible, names should be chosen that use common vocabulary\na majority of English speakers are likely to understand when first encountering the name.\n   \n    For example setSize is\na more English-readable name\nthan cardinality.\n   \n   Value readability over brevity.\nKeep in mind, however, that sometimes\nthe shorter name is the clearer one.\nFor instance,\nit may be appropriate to use technical language or well-known terms of art\nin the specification where the API is defined.\n   \n    For example,\nthe Fetch API’s Body mixin’s json() method\nis named for the kind of object it returns.\nJSON is a well-known term of art\namong web developers likely to use the Fetch API.\nIt would harm comprehension\nto name this API less directly connected to its return type. [FETCH]\n   \n   12.2. Use ASCII names\n   Names must adhere to the local language restrictions, for example CSS ident rules etc.\nand should be in the ASCII range.\n   12.3. Consultation\n   Please consult widely on names in your APIs.\n   You may find good names or inspiration in surprising places.\n   \n    \n     What are similar APIs named on other platforms,\nor in popular libraries in various programming languages?\n    \n     Ask end users and developers what they call\nthings that your API works with or manipulates.\n    \n     Look at other web platform specifications,\nand seek advice from others working in related areas of the platform.\n    \n     Also, consult if the names used are inclusive.\n   \n   Pay particular attention to advice you receive\nwith clearly-stated rationale based on underlying principles.\n   \n    Tantek Çelik extensively researched how to name the various pieces of a URL.\nThe editors of the URL spec have relied on this research\nwhen editing that document. [URL]\n   \n   Use Web consistent names\n    When choosing a name for feature or API that has exposure in other technology stacks,\nthe preference should be towards the Web ecosystem naming convention rather than other\ncommunities. \n   \n    The NFC standard uses the term media to refer to what the Web calls MIME type.\nIn such cases, the naming of features or API for the purposes of Web NFC must prefer\nnaming consistent with MIME type.\n   \n   Use Inclusive Language\n   Use inclusive language whenever possible.\n   For example,\nyou should use blocklist and allowlist\ninstead of blacklist and whitelist,\nand source and replica\ninstead of master and slave.\n   If you need to refer to a generic persona,\nsuch as an author or user,\nuse the generic pronoun \"they\", \"their\", etc.\nFor example, \"A user may wish to adjust their preferences\".\n   12.4. Future-proofing\n   Naming should be generic and future-proof whenever possible.\n   The name should not be directly associated with a brand or specific revision of\nthe underlying technology whenever possible; technology becomes obsolete, and\nremoving APIs from the web is difficult.\n   \n    The Remote Playback API was not named\nafter one of the pre-existing, proprietary systems it was inspired by\n(such as Chromecast or AirPlay).\nInstead, general terms that describe what the API does were chosen. [REMOTE-PLAYBACK]\n   \n   \n    The keydown and keyup KeyboardEvents were not named\nfor the specific hardware bus that keyboards used at the time.\nInstead, generic names were chosen\nthat are as applicable to today’s Bluetooth and USB keyboards\nas they were to PS/2 and ADB keyboards back then. [UIEVENTS]\n   \n   12.5. Consistency\n    Naming schemes should aim for consistency, to avoid confusion. \n   Sets of related names should agree with each other in:\n   \n    \n     part of speech  - noun, verb, etc.\n    \n     negation, for example all of the names in a set should either describe what is allowed\nor they should all describe what is denied\n   \n   Boolean properties vs.\n  boolean-returning methods\n   Boolean properties, options, or API arguments which are asking a question about\ntheir argument should not be prefixed with is, while methods\nthat serve the same purpose, given that it has no side effects, should be\nprefixed with is to be consistent with the rest of the platform.\n   Use casing rules consistent with existing APIs\n   Although they haven’t always been uniformly followed, through the history of web platform API\ndesign, the following rules have emerged:\n   \n    \n     \n      \n      Casing rule\n      Examples\n    \n     \n      Methods and properties(Web IDL attributes, operations, and dictionary keys)\n      Camel case\n      createAttribute() compatMode\n     \n      Classes and mixins(Web IDL interfaces)\n      Pascal case\n      NamedNodeMap NonElementParentNode\n     \n      Initialisms in APIs\n      All caps, except when the first word in a method or property\n      HTMLCollection innerHTML bgColor\n     \n      Repeated initialisms in APIs\n      Follow the same rule\n      HTMLHRElement RTCDTMFSender \n     \n      The abbreviation of \"identity\"\n      Id, except when the first word in a method or property\n      getElementById() pointerId id\n     \n      Enumeration values\n      Lowercase, dash-delimited\n      \"no-referrer-when-downgrade\"\n     \n      Events\n      Lowercase, concatenated\n      canplaythrough languagechange\n     \n      HTML elements and attributes\n      Lowercase, concatenated\n      figcaption maxlength\n     \n      JSON keys\n      Lowercase, underscore-delimited\n      short_name\n   \n   \n     Note that in particular, when a HTML attribute is reflected as a property, the attribute\nand property’s casings won’t necessarily match. For example, the HTML attribute ismap on img elements is reflected as the isMap property on HTMLImageElement. \n    The rules for JSON keys are meant to apply to specific JSON file formats sent over HTTP\nor stored on disk, and don’t apply to the general notion of JavaScript object keys.\n    Repeated initialisms are particularly non-uniform throughout the platform. Infamous historical\nexamples that violate the above rules are XMLHttpRequest and HTMLHtmlElement. Don’t follow their example; instead always capitalize your\ninitialisms, even if they are repeated.\n   \n   12.6. Warning about dangerous features\n   Where possible, mark features that weaken\nthe guarantees provided to developers\nby making their names start with \"unsafe\" so that this is more noticeable.\n   For example, Content Security Policy (CSP) provides protection against certain types of content injection vulnerabilities.\nCSP also provides features that weaken this guarantee,\nsuch as the unsafe-inline keyword,\nwhich reduces CSP’s own protections by allowing inline scripts.\n   12.7. Other resources\n   Some useful advice on how to write specifications is available elsewhere:\n   \n    \n     Writing\nspecifications: Kinds of statements (Ian Hickson, 2006)\n    \n     QA Framework:\nSpecification Guidelines (W3C QA Working Group, 2005)\n    \n     Privacy Considerations for Web Protocols\n    \n     Self-Review Questionnaire: Security and Privacy\n    \n     Web Technology Accessibility Guidelines\n    \n     Internationalization Best Practices for Spec Developers\n   \n   Acknowledgments\n   This document consists of\nprinciples which have been collected\nby TAG members past and present\nduring TAG design reviews.\nWe are indebted to everyone who has requested a design review from us.\n   The TAG would like to thank\nAdrian Hope-Bailie,\nAlan Stearns,\nAleksandar Totic,\nAlex Russell,\nAndreas Stöckel,\nAndrew Betts,\nAnne van Kesteren,\nBenjamin C. Wiley Sittler,\nBoris Zbarsky,\nBrian Kardell,\nCharles McCathieNevile,\nChris Wilson,\nDan Connolly,\nDaniel Ehrenberg,\nDaniel Murphy,\nDomenic Denicola,\nEiji Kitamura,\nEric Shepherd,\nEthan Resnick,\nfantasai,\nFrançois Daoust,\nHenri Sivonen,\nHE Shi-Jun,\nIan Hickson,\nIrene Knapp,\nJake Archibald,\nJeffrey Yasskin,\nJeremy Roman,\nJirka Kosek,\nKevin Marks,\nLachlan Hunt,\nLéonie Watson,\nL. Le Meur,\nLukasz Olejnik,\nMaciej Stachowiak,\nMarcos Cáceres,\nMark Nottingham,\nMartin Thomson,\nMatt Giuca,\nMatt Wolenetz,\nMichael[tm] Smith,\nMike West,\nNick Doty,\nNigel Megitt,\nNik Thierry,\nOjan Vafai,\nOlli Pettay,\nPete Snyder,\nPhilip Jägenstedt,\nPhilip Taylor,\nReilly Grant,\nRichard Ishida,\nRick Byers,\nRyan Sleevi,\nSergey Konstantinov,\nStefan Zager,\nStephen Stewart,\nSteven Faulkner,\nSurma,\nTab Atkins-Bittner,\nTantek Çelik,\nTobie Langel,\nTravis Leithead,\nand\nYoav Weiss\nfor their contributions to this & the HTML Design Principles document which preceded it.\n   Special thanks to\nAnne van Kesteren\nand\nMaciej Stachowiak,\nwho edited the HTML Design Principles document.\n   If you contributed to this document\nbut your name is not listed above,\nplease let the editors know\nso they can correct this omission.\n  ","length":112499,"excerpt":"The Design Principles are directly informed by the ethical framework\nset out in the Ethical Web Principles [ETHICAL-WEB].\nThese principles provide concrete practical advice\nin response to the higher level ethical responsibilities\nthat come with developing the web platform.","byline":"Sangwhan Moon (Google)","dir":null,"siteName":null,"lang":"en"},"finalizedMeta":{"title":"Web Platform Design Principles","description":"The Design Principles are directly informed by the ethical framework\nset out in the Ethical Web Principles [ETHICAL-WEB].\nThese principles provide concrete practical advice\nin response to the higher level ethical responsibilities\nthat come with developing the web platform.","author":false,"creator":"","publisher":false,"date":"2022-04-05T17:38:56.137Z","topics":[]},"jsonLd":{"@type":false,"headline":false,"description":false,"image":[],"mainEntityOfPage":{"@type":false,"@id":false},"datePublished":false,"dateModified":false,"isAccessibleForFree":false,"isPartOf":{"@type":[],"name":false,"productID":false},"discussionUrl":false,"license":false,"author":{"@type":false,"name":false,"description":false,"sameAs":false,"image":{"@type":false,"url":false},"givenName":false,"familyName":false,"alternateName":false,"publishingPrinciples":false},"publisher":{"@type":false,"name":false,"description":false,"sameAs":false,"logo":{"@type":false,"url":false},"publishingPrinciples":false},"editor":{"@type":false,"name":false,"description":false,"sameAs":false,"image":{"@type":false,"url":false},"givenName":false,"familyName":false,"alternateName":false,"publishingPrinciples":false}},"twitterObj":false,"status":200,"metadata":{"author":false,"title":"Web Platform Design Principles","description":false,"canonical":"https://www.w3.org/TR/design-principles/","keywords":[],"image":"https://www.w3.org/StyleSheets/TR/2021/logos/W3C","firstParagraph":"   "},"dublinCore":{},"opengraph":{"title":false,"description":false,"url":false,"site_name":false,"locale":false,"type":false,"typeObject":{"published_time":false,"modified_time":false,"author":false,"publisher":false,"section":false,"tag":[]},"image":false},"twitter":{"site":false,"description":false,"card":false,"creator":false,"title":false,"image":false},"archivedData":{"link":false,"wayback":false}}}